"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self1) {
    if (self1 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self1;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value1 = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value1);
    } else {
        Promise.resolve(value1).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self1 = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self1, args);
            function _next(value1) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value1);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value1) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value1,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value1;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _possible_constructor_return(self1, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self1);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _tagged_template_literal(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
var __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function _templateObject() {
    var data = _tagged_template_literal([
        "\n  margin: 32px 0;\n  width: 300px;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _tagged_template_literal([
        "\n  width: 100%;\n\n  .product-name-skeleton {\n    .ant-skeleton-title {\n      height: 20px !important;\n      margin-bottom: 4px;\n      margin-top: 30px !important;\n      width: 60%;\n    }\n  }\n\n  .product-price-skeleton {\n    .ant-skeleton-title {\n      height: 32px !important;\n      margin-bottom: 5px;\n      margin-top: 15px;\n    }\n  }\n\n  .product-description-skeleton {\n    .ant-skeleton-title {\n      height: 18px !important;\n      margin-bottom: 0;\n      margin-top: 5px;\n    }\n  }\n\n  .product-image-skeleton {\n    .ant-skeleton-avatar {\n      width: 300px;\n      height: 300px;\n    }\n  }\n"
    ]);
    _templateObject1 = function _templateObject1() {
        return data;
    };
    return data;
}
function _templateObject2() {
    var data = _tagged_template_literal([
        "\n  font-size: 12px;\n  margin-right: auto;\n  color: rgba(0, 0, 0, 0.5) !important;\n\n  &:hover {\n    color: rgba(0, 0, 0, 0.8) !important;\n  }\n"
    ]);
    _templateObject2 = function _templateObject2() {
        return data;
    };
    return data;
}
function _templateObject3() {
    var data = _tagged_template_literal([
        "\n  width: 380px;\n  max-width: 380px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n"
    ]);
    _templateObject3 = function _templateObject3() {
        return data;
    };
    return data;
}
function _templateObject4() {
    var data = _tagged_template_literal([
        "\n  width: 100%;\n"
    ]);
    _templateObject4 = function _templateObject4() {
        return data;
    };
    return data;
}
function _templateObject5() {
    var data = _tagged_template_literal([
        "\n  height: 56px;\n  position: fixed;\n  top: 0;\n"
    ]);
    _templateObject5 = function _templateObject5() {
        return data;
    };
    return data;
}
function _templateObject6() {
    var data = _tagged_template_literal([
        "\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n\n  .brand-skeleton {\n    .ant-skeleton-title {\n      width: 50px;\n      height: 20px !important;\n      margin-left: 0px;\n    }\n  }\n"
    ]);
    _templateObject6 = function _templateObject6() {
        return data;
    };
    return data;
}
function _templateObject7() {
    var data = _tagged_template_literal([
        "\n  width: 100%;\n  height: 100%;\n  min-height: 100%;\n  background-color: #fff;\n  display: block;\n"
    ]);
    _templateObject7 = function _templateObject7() {
        return data;
    };
    return data;
}
function _templateObject8() {
    var data = _tagged_template_literal([
        "\n  display: flex;\n  justify-content: center;\n\n  &::before {\n    animation-fill-mode: both;\n    background: #ffffff;\n    content: ' ';\n    height: 100%;\n    position: fixed;\n    right: 0;\n    top: 0;\n    transform-origin: right;\n    width: 50%;\n    box-shadow: 15px 0 30px 0 rgba(0, 0, 0, 0.18);\n  }\n"
    ]);
    _templateObject8 = function _templateObject8() {
        return data;
    };
    return data;
}
function _templateObject9() {
    var data = _tagged_template_literal([
        "\n  height: 678px;\n  max-width: 920px;\n  width: 100%;\n  transform: translateY(max(48px, calc(50vh - 55%)));\n"
    ]);
    _templateObject9 = function _templateObject9() {
        return data;
    };
    return data;
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = function(obj, key, value1) {
    return key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value1
    }) : obj[key] = value1;
};
var __commonJS = function(cb, mod2) {
    return function __require() {
        return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = {
            exports: {}
        }).exports, mod2), mod2.exports;
    };
};
var __export = function(target, all3) {
    for(var name in all3)__defProp(target, name, {
        get: all3[name],
        enumerable: true
    });
};
var __copyProps = function(to, from3, except, desc) {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from3[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from3)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod2, isNodeMode, target) {
    return target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", {
        value: mod2,
        enumerable: true
    }) : target, mod2);
};
var __toCommonJS = function(mod2) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod2);
};
var __publicField = function(obj, key, value1) {
    __defNormalProp(obj, (typeof key === "undefined" ? "undefined" : _type_of(key)) !== "symbol" ? key + "" : key, value1);
    return value1;
};
var __accessCheck = function(obj, member2, msg) {
    if (!member2.has(obj)) throw TypeError("Cannot " + msg);
};
var __privateGet = function(obj, member2, getter) {
    __accessCheck(obj, member2, "read from private field");
    return getter ? getter.call(obj) : member2.get(obj);
};
var __privateAdd = function(obj, member2, value1) {
    if (member2.has(obj)) throw TypeError("Cannot add the same private member more than once");
    _instanceof(member2, WeakSet) ? member2.add(obj) : member2.set(obj, value1);
};
var __privateSet = function(obj, member2, value1, setter) {
    __accessCheck(obj, member2, "write to private field");
    setter ? setter.call(obj, value1) : member2.set(obj, value1);
    return value1;
};
var __privateWrapper = function(obj, member2, setter, getter) {
    return {
        set _ (value){
            __privateSet(obj, member2, value, setter);
        },
        get _ () {
            return __privateGet(obj, member2, getter);
        }
    };
};
// ../../node_modules/classnames/index.js
var require_classnames = __commonJS({
    "../../node_modules/classnames/index.js": function(exports, module2) {
        (function() {
            "use strict";
            var hasOwn = {}.hasOwnProperty;
            var nativeCodeString = "[native code]";
            function classNames2() {
                var classes = [];
                for(var i = 0; i < arguments.length; i++){
                    var arg = arguments[i];
                    if (!arg) continue;
                    var argType = typeof arg === "undefined" ? "undefined" : _type_of(arg);
                    if (argType === "string" || argType === "number") {
                        classes.push(arg);
                    } else if (Array.isArray(arg)) {
                        if (arg.length) {
                            var inner = classNames2.apply(null, arg);
                            if (inner) {
                                classes.push(inner);
                            }
                        }
                    } else if (argType === "object") {
                        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                            classes.push(arg.toString());
                            continue;
                        }
                        for(var key in arg){
                            if (hasOwn.call(arg, key) && arg[key]) {
                                classes.push(key);
                            }
                        }
                    }
                }
                return classes.join(" ");
            }
            if (typeof module2 !== "undefined" && module2.exports) {
                classNames2.default = classNames2;
                module2.exports = classNames2;
            } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
                define("classnames", [], function() {
                    return classNames2;
                });
            } else {
                window.classNames = classNames2;
            }
        })();
    }
});
// ../../node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
    "../../node_modules/bn.js/lib/bn.js": function(exports, module2) {
        (function(module3, exports2) {
            "use strict";
            var assert4 = function assert4(val, msg) {
                if (!val) throw new Error(msg || "Assertion failed");
            };
            var inherits = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function TempCtor() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            };
            var parseHex4Bits = function parseHex4Bits(string, index) {
                var c = string.charCodeAt(index);
                if (c >= 48 && c <= 57) {
                    return c - 48;
                } else if (c >= 65 && c <= 70) {
                    return c - 55;
                } else if (c >= 97 && c <= 102) {
                    return c - 87;
                } else {
                    assert4(false, "Invalid character in " + string);
                }
            };
            var parseHexByte = function parseHexByte(string, lowerBound, index) {
                var r = parseHex4Bits(string, index);
                if (index - 1 >= lowerBound) {
                    r |= parseHex4Bits(string, index - 1) << 4;
                }
                return r;
            };
            var parseBase = function parseBase(str, start, end, mul) {
                var r = 0;
                var b = 0;
                var len = Math.min(str.length, end);
                for(var i = start; i < len; i++){
                    var c = str.charCodeAt(i) - 48;
                    r *= mul;
                    if (c >= 49) {
                        b = c - 49 + 10;
                    } else if (c >= 17) {
                        b = c - 17 + 10;
                    } else {
                        b = c;
                    }
                    assert4(c >= 0 && b < mul, "Invalid character");
                    r += b;
                }
                return r;
            };
            var move = function move(dest, src) {
                dest.words = src.words;
                dest.length = src.length;
                dest.negative = src.negative;
                dest.red = src.red;
            };
            var inspect = function inspect() {
                return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            };
            var toBitArray = function toBitArray(num) {
                var w = new Array(num.bitLength());
                for(var bit = 0; bit < w.length; bit++){
                    var off = bit / 26 | 0;
                    var wbit = bit % 26;
                    w[bit] = num.words[off] >>> wbit & 1;
                }
                return w;
            };
            var smallMulTo = function smallMulTo(self2, num, out) {
                out.negative = num.negative ^ self2.negative;
                var len = self2.length + num.length | 0;
                out.length = len;
                len = len - 1 | 0;
                var a = self2.words[0] | 0;
                var b = num.words[0] | 0;
                var r = a * b;
                var lo = r & 67108863;
                var carry = r / 67108864 | 0;
                out.words[0] = lo;
                for(var k = 1; k < len; k++){
                    var ncarry = carry >>> 26;
                    var rword = carry & 67108863;
                    var maxJ = Math.min(k, num.length - 1);
                    for(var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++){
                        var i = k - j | 0;
                        a = self2.words[i] | 0;
                        b = num.words[j] | 0;
                        r = a * b + rword;
                        ncarry += r / 67108864 | 0;
                        rword = r & 67108863;
                    }
                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                }
                if (carry !== 0) {
                    out.words[k] = carry | 0;
                } else {
                    out.length--;
                }
                return out._strip();
            };
            var bigMulTo = function bigMulTo(self2, num, out) {
                out.negative = num.negative ^ self2.negative;
                out.length = self2.length + num.length;
                var carry = 0;
                var hncarry = 0;
                for(var k = 0; k < out.length - 1; k++){
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 67108863;
                    var maxJ = Math.min(k, num.length - 1);
                    for(var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++){
                        var i = k - j;
                        var a = self2.words[i] | 0;
                        var b = num.words[j] | 0;
                        var r = a * b;
                        var lo = r & 67108863;
                        ncarry = ncarry + (r / 67108864 | 0) | 0;
                        lo = lo + rword | 0;
                        rword = lo & 67108863;
                        ncarry = ncarry + (lo >>> 26) | 0;
                        hncarry += ncarry >>> 26;
                        ncarry &= 67108863;
                    }
                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                }
                if (carry !== 0) {
                    out.words[k] = carry;
                } else {
                    out.length--;
                }
                return out._strip();
            };
            var jumboMulTo = function jumboMulTo(self2, num, out) {
                return bigMulTo(self2, num, out);
            };
            var FFTM = function FFTM(x, y) {
                this.x = x;
                this.y = y;
            };
            var MPrime = function MPrime(name, p) {
                this.name = name;
                this.p = new BN2(p, 16);
                this.n = this.p.bitLength();
                this.k = new BN2(1).iushln(this.n).isub(this.p);
                this.tmp = this._tmp();
            };
            var K256 = function K256() {
                MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
            };
            var P224 = function P224() {
                MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
            };
            var P192 = function P192() {
                MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
            };
            var P25519 = function P25519() {
                MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
            };
            var Red = function Red(m) {
                if (typeof m === "string") {
                    var prime6 = BN2._prime(m);
                    this.m = prime6.p;
                    this.prime = prime6;
                } else {
                    assert4(m.gtn(1), "modulus must be greater than 1");
                    this.m = m;
                    this.prime = null;
                }
            };
            var Mont = function Mont(m) {
                Red.call(this, m);
                this.shift = this.m.bitLength();
                if (this.shift % 26 !== 0) {
                    this.shift += 26 - this.shift % 26;
                }
                this.r = new BN2(1).iushln(this.shift);
                this.r2 = this.imod(this.r.sqr());
                this.rinv = this.r._invmp(this.m);
                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                this.minv = this.minv.umod(this.r);
                this.minv = this.r.sub(this.minv);
            };
            function BN2(number3, base, endian) {
                if (BN2.isBN(number3)) {
                    return number3;
                }
                this.negative = 0;
                this.words = null;
                this.length = 0;
                this.red = null;
                if (number3 !== null) {
                    if (base === "le" || base === "be") {
                        endian = base;
                        base = 10;
                    }
                    this._init(number3 || 0, base || 10, endian || "be");
                }
            }
            if (typeof module3 === "object") {
                module3.exports = BN2;
            } else {
                exports2.BN = BN2;
            }
            BN2.BN = BN2;
            BN2.wordSize = 26;
            var Buffer2;
            try {
                if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
                    Buffer2 = window.Buffer;
                } else {
                    Buffer2 = require("buffer").Buffer;
                }
            } catch (e) {}
            BN2.isBN = function isBN(num) {
                if (_instanceof(num, BN2)) {
                    return true;
                }
                return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
            };
            BN2.max = function max3(left, right) {
                if (left.cmp(right) > 0) return left;
                return right;
            };
            BN2.min = function min(left, right) {
                if (left.cmp(right) < 0) return left;
                return right;
            };
            BN2.prototype._init = function init3(number3, base, endian) {
                if (typeof number3 === "number") {
                    return this._initNumber(number3, base, endian);
                }
                if (typeof number3 === "object") {
                    return this._initArray(number3, base, endian);
                }
                if (base === "hex") {
                    base = 16;
                }
                assert4(base === (base | 0) && base >= 2 && base <= 36);
                number3 = number3.toString().replace(/\s+/g, "");
                var start = 0;
                if (number3[0] === "-") {
                    start++;
                    this.negative = 1;
                }
                if (start < number3.length) {
                    if (base === 16) {
                        this._parseHex(number3, start, endian);
                    } else {
                        this._parseBase(number3, base, start);
                        if (endian === "le") {
                            this._initArray(this.toArray(), base, endian);
                        }
                    }
                }
            };
            BN2.prototype._initNumber = function _initNumber(number3, base, endian) {
                if (number3 < 0) {
                    this.negative = 1;
                    number3 = -number3;
                }
                if (number3 < 67108864) {
                    this.words = [
                        number3 & 67108863
                    ];
                    this.length = 1;
                } else if (number3 < 4503599627370496) {
                    this.words = [
                        number3 & 67108863,
                        number3 / 67108864 & 67108863
                    ];
                    this.length = 2;
                } else {
                    assert4(number3 < 9007199254740992);
                    this.words = [
                        number3 & 67108863,
                        number3 / 67108864 & 67108863,
                        1
                    ];
                    this.length = 3;
                }
                if (endian !== "le") return;
                this._initArray(this.toArray(), base, endian);
            };
            BN2.prototype._initArray = function _initArray(number3, base, endian) {
                assert4(typeof number3.length === "number");
                if (number3.length <= 0) {
                    this.words = [
                        0
                    ];
                    this.length = 1;
                    return this;
                }
                this.length = Math.ceil(number3.length / 3);
                this.words = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    this.words[i] = 0;
                }
                var j, w;
                var off = 0;
                if (endian === "be") {
                    for(i = number3.length - 1, j = 0; i >= 0; i -= 3){
                        w = number3[i] | number3[i - 1] << 8 | number3[i - 2] << 16;
                        this.words[j] |= w << off & 67108863;
                        this.words[j + 1] = w >>> 26 - off & 67108863;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                } else if (endian === "le") {
                    for(i = 0, j = 0; i < number3.length; i += 3){
                        w = number3[i] | number3[i + 1] << 8 | number3[i + 2] << 16;
                        this.words[j] |= w << off & 67108863;
                        this.words[j + 1] = w >>> 26 - off & 67108863;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                }
                return this._strip();
            };
            BN2.prototype._parseHex = function _parseHex(number3, start, endian) {
                this.length = Math.ceil((number3.length - start) / 6);
                this.words = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    this.words[i] = 0;
                }
                var off = 0;
                var j = 0;
                var w;
                if (endian === "be") {
                    for(i = number3.length - 1; i >= start; i -= 2){
                        w = parseHexByte(number3, start, i) << off;
                        this.words[j] |= w & 67108863;
                        if (off >= 18) {
                            off -= 18;
                            j += 1;
                            this.words[j] |= w >>> 26;
                        } else {
                            off += 8;
                        }
                    }
                } else {
                    var parseLength = number3.length - start;
                    for(i = parseLength % 2 === 0 ? start + 1 : start; i < number3.length; i += 2){
                        w = parseHexByte(number3, start, i) << off;
                        this.words[j] |= w & 67108863;
                        if (off >= 18) {
                            off -= 18;
                            j += 1;
                            this.words[j] |= w >>> 26;
                        } else {
                            off += 8;
                        }
                    }
                }
                this._strip();
            };
            BN2.prototype._parseBase = function _parseBase(number3, base, start) {
                this.words = [
                    0
                ];
                this.length = 1;
                for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base){
                    limbLen++;
                }
                limbLen--;
                limbPow = limbPow / base | 0;
                var total = number3.length - start;
                var mod2 = total % limbLen;
                var end = Math.min(total, total - mod2) + start;
                var word = 0;
                for(var i = start; i < end; i += limbLen){
                    word = parseBase(number3, i, i + limbLen, base);
                    this.imuln(limbPow);
                    if (this.words[0] + word < 67108864) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }
                if (mod2 !== 0) {
                    var pow = 1;
                    word = parseBase(number3, i, number3.length, base);
                    for(i = 0; i < mod2; i++){
                        pow *= base;
                    }
                    this.imuln(pow);
                    if (this.words[0] + word < 67108864) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }
                this._strip();
            };
            BN2.prototype.copy = function copy2(dest) {
                dest.words = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    dest.words[i] = this.words[i];
                }
                dest.length = this.length;
                dest.negative = this.negative;
                dest.red = this.red;
            };
            BN2.prototype._move = function _move(dest) {
                move(dest, this);
            };
            BN2.prototype.clone = function clone() {
                var r = new BN2(null);
                this.copy(r);
                return r;
            };
            BN2.prototype._expand = function _expand(size) {
                while(this.length < size){
                    this.words[this.length++] = 0;
                }
                return this;
            };
            BN2.prototype._strip = function strip() {
                while(this.length > 1 && this.words[this.length - 1] === 0){
                    this.length--;
                }
                return this._normSign();
            };
            BN2.prototype._normSign = function _normSign() {
                if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                }
                return this;
            };
            if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
                try {
                    BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
                } catch (e) {
                    BN2.prototype.inspect = inspect;
                }
            } else {
                BN2.prototype.inspect = inspect;
            }
            var zeros = [
                "",
                "0",
                "00",
                "000",
                "0000",
                "00000",
                "000000",
                "0000000",
                "00000000",
                "000000000",
                "0000000000",
                "00000000000",
                "000000000000",
                "0000000000000",
                "00000000000000",
                "000000000000000",
                "0000000000000000",
                "00000000000000000",
                "000000000000000000",
                "0000000000000000000",
                "00000000000000000000",
                "000000000000000000000",
                "0000000000000000000000",
                "00000000000000000000000",
                "000000000000000000000000",
                "0000000000000000000000000"
            ];
            var groupSizes = [
                0,
                0,
                25,
                16,
                12,
                11,
                10,
                9,
                8,
                8,
                7,
                7,
                7,
                7,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5,
                5
            ];
            var groupBases = [
                0,
                0,
                33554432,
                43046721,
                16777216,
                48828125,
                60466176,
                40353607,
                16777216,
                43046721,
                1e7,
                19487171,
                35831808,
                62748517,
                7529536,
                11390625,
                16777216,
                24137569,
                34012224,
                47045881,
                64e6,
                4084101,
                5153632,
                6436343,
                7962624,
                9765625,
                11881376,
                14348907,
                17210368,
                20511149,
                243e5,
                28629151,
                33554432,
                39135393,
                45435424,
                52521875,
                60466176
            ];
            BN2.prototype.toString = function toString(base, padding2) {
                base = base || 10;
                padding2 = padding2 | 0 || 1;
                var out;
                if (base === 16 || base === "hex") {
                    out = "";
                    var off = 0;
                    var carry = 0;
                    for(var i = 0; i < this.length; i++){
                        var w = this.words[i];
                        var word = ((w << off | carry) & 16777215).toString(16);
                        carry = w >>> 24 - off & 16777215;
                        off += 2;
                        if (off >= 26) {
                            off -= 26;
                            i--;
                        }
                        if (carry !== 0 || i !== this.length - 1) {
                            out = zeros[6 - word.length] + word + out;
                        } else {
                            out = word + out;
                        }
                    }
                    if (carry !== 0) {
                        out = carry.toString(16) + out;
                    }
                    while(out.length % padding2 !== 0){
                        out = "0" + out;
                    }
                    if (this.negative !== 0) {
                        out = "-" + out;
                    }
                    return out;
                }
                if (base === (base | 0) && base >= 2 && base <= 36) {
                    var groupSize = groupSizes[base];
                    var groupBase = groupBases[base];
                    out = "";
                    var c = this.clone();
                    c.negative = 0;
                    while(!c.isZero()){
                        var r = c.modrn(groupBase).toString(base);
                        c = c.idivn(groupBase);
                        if (!c.isZero()) {
                            out = zeros[groupSize - r.length] + r + out;
                        } else {
                            out = r + out;
                        }
                    }
                    if (this.isZero()) {
                        out = "0" + out;
                    }
                    while(out.length % padding2 !== 0){
                        out = "0" + out;
                    }
                    if (this.negative !== 0) {
                        out = "-" + out;
                    }
                    return out;
                }
                assert4(false, "Base should be between 2 and 36");
            };
            BN2.prototype.toNumber = function toNumber() {
                var ret = this.words[0];
                if (this.length === 2) {
                    ret += this.words[1] * 67108864;
                } else if (this.length === 3 && this.words[2] === 1) {
                    ret += 4503599627370496 + this.words[1] * 67108864;
                } else if (this.length > 2) {
                    assert4(false, "Number can only safely store up to 53 bits");
                }
                return this.negative !== 0 ? -ret : ret;
            };
            BN2.prototype.toJSON = function toJSON() {
                return this.toString(16, 2);
            };
            if (Buffer2) {
                BN2.prototype.toBuffer = function toBuffer(endian, length) {
                    return this.toArrayLike(Buffer2, endian, length);
                };
            }
            BN2.prototype.toArray = function toArray5(endian, length) {
                return this.toArrayLike(Array, endian, length);
            };
            var allocate = function allocate2(ArrayType, size) {
                if (ArrayType.allocUnsafe) {
                    return ArrayType.allocUnsafe(size);
                }
                return new ArrayType(size);
            };
            BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                this._strip();
                var byteLength = this.byteLength();
                var reqLength = length || Math.max(1, byteLength);
                assert4(byteLength <= reqLength, "byte array longer than desired length");
                assert4(reqLength > 0, "Requested array length <= 0");
                var res = allocate(ArrayType, reqLength);
                var postfix = endian === "le" ? "LE" : "BE";
                this["_toArrayLike" + postfix](res, byteLength);
                return res;
            };
            BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
                var position = 0;
                var carry = 0;
                for(var i = 0, shift = 0; i < this.length; i++){
                    var word = this.words[i] << shift | carry;
                    res[position++] = word & 255;
                    if (position < res.length) {
                        res[position++] = word >> 8 & 255;
                    }
                    if (position < res.length) {
                        res[position++] = word >> 16 & 255;
                    }
                    if (shift === 6) {
                        if (position < res.length) {
                            res[position++] = word >> 24 & 255;
                        }
                        carry = 0;
                        shift = 0;
                    } else {
                        carry = word >>> 24;
                        shift += 2;
                    }
                }
                if (position < res.length) {
                    res[position++] = carry;
                    while(position < res.length){
                        res[position++] = 0;
                    }
                }
            };
            BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
                var position = res.length - 1;
                var carry = 0;
                for(var i = 0, shift = 0; i < this.length; i++){
                    var word = this.words[i] << shift | carry;
                    res[position--] = word & 255;
                    if (position >= 0) {
                        res[position--] = word >> 8 & 255;
                    }
                    if (position >= 0) {
                        res[position--] = word >> 16 & 255;
                    }
                    if (shift === 6) {
                        if (position >= 0) {
                            res[position--] = word >> 24 & 255;
                        }
                        carry = 0;
                        shift = 0;
                    } else {
                        carry = word >>> 24;
                        shift += 2;
                    }
                }
                if (position >= 0) {
                    res[position--] = carry;
                    while(position >= 0){
                        res[position--] = 0;
                    }
                }
            };
            if (Math.clz32) {
                BN2.prototype._countBits = function _countBits(w) {
                    return 32 - Math.clz32(w);
                };
            } else {
                BN2.prototype._countBits = function _countBits(w) {
                    var t2 = w;
                    var r = 0;
                    if (t2 >= 4096) {
                        r += 13;
                        t2 >>>= 13;
                    }
                    if (t2 >= 64) {
                        r += 7;
                        t2 >>>= 7;
                    }
                    if (t2 >= 8) {
                        r += 4;
                        t2 >>>= 4;
                    }
                    if (t2 >= 2) {
                        r += 2;
                        t2 >>>= 2;
                    }
                    return r + t2;
                };
            }
            BN2.prototype._zeroBits = function _zeroBits(w) {
                if (w === 0) return 26;
                var t2 = w;
                var r = 0;
                if ((t2 & 8191) === 0) {
                    r += 13;
                    t2 >>>= 13;
                }
                if ((t2 & 127) === 0) {
                    r += 7;
                    t2 >>>= 7;
                }
                if ((t2 & 15) === 0) {
                    r += 4;
                    t2 >>>= 4;
                }
                if ((t2 & 3) === 0) {
                    r += 2;
                    t2 >>>= 2;
                }
                if ((t2 & 1) === 0) {
                    r++;
                }
                return r;
            };
            BN2.prototype.bitLength = function bitLength() {
                var w = this.words[this.length - 1];
                var hi = this._countBits(w);
                return (this.length - 1) * 26 + hi;
            };
            BN2.prototype.zeroBits = function zeroBits() {
                if (this.isZero()) return 0;
                var r = 0;
                for(var i = 0; i < this.length; i++){
                    var b = this._zeroBits(this.words[i]);
                    r += b;
                    if (b !== 26) break;
                }
                return r;
            };
            BN2.prototype.byteLength = function byteLength() {
                return Math.ceil(this.bitLength() / 8);
            };
            BN2.prototype.toTwos = function toTwos(width) {
                if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                }
                return this.clone();
            };
            BN2.prototype.fromTwos = function fromTwos(width) {
                if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                }
                return this.clone();
            };
            BN2.prototype.isNeg = function isNeg() {
                return this.negative !== 0;
            };
            BN2.prototype.neg = function neg() {
                return this.clone().ineg();
            };
            BN2.prototype.ineg = function ineg() {
                if (!this.isZero()) {
                    this.negative ^= 1;
                }
                return this;
            };
            BN2.prototype.iuor = function iuor(num) {
                while(this.length < num.length){
                    this.words[this.length++] = 0;
                }
                for(var i = 0; i < num.length; i++){
                    this.words[i] = this.words[i] | num.words[i];
                }
                return this._strip();
            };
            BN2.prototype.ior = function ior(num) {
                assert4((this.negative | num.negative) === 0);
                return this.iuor(num);
            };
            BN2.prototype.or = function or(num) {
                if (this.length > num.length) return this.clone().ior(num);
                return num.clone().ior(this);
            };
            BN2.prototype.uor = function uor(num) {
                if (this.length > num.length) return this.clone().iuor(num);
                return num.clone().iuor(this);
            };
            BN2.prototype.iuand = function iuand(num) {
                var b;
                if (this.length > num.length) {
                    b = num;
                } else {
                    b = this;
                }
                for(var i = 0; i < b.length; i++){
                    this.words[i] = this.words[i] & num.words[i];
                }
                this.length = b.length;
                return this._strip();
            };
            BN2.prototype.iand = function iand(num) {
                assert4((this.negative | num.negative) === 0);
                return this.iuand(num);
            };
            BN2.prototype.and = function and(num) {
                if (this.length > num.length) return this.clone().iand(num);
                return num.clone().iand(this);
            };
            BN2.prototype.uand = function uand(num) {
                if (this.length > num.length) return this.clone().iuand(num);
                return num.clone().iuand(this);
            };
            BN2.prototype.iuxor = function iuxor(num) {
                var a;
                var b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }
                for(var i = 0; i < b.length; i++){
                    this.words[i] = a.words[i] ^ b.words[i];
                }
                if (this !== a) {
                    for(; i < a.length; i++){
                        this.words[i] = a.words[i];
                    }
                }
                this.length = a.length;
                return this._strip();
            };
            BN2.prototype.ixor = function ixor(num) {
                assert4((this.negative | num.negative) === 0);
                return this.iuxor(num);
            };
            BN2.prototype.xor = function xor(num) {
                if (this.length > num.length) return this.clone().ixor(num);
                return num.clone().ixor(this);
            };
            BN2.prototype.uxor = function uxor(num) {
                if (this.length > num.length) return this.clone().iuxor(num);
                return num.clone().iuxor(this);
            };
            BN2.prototype.inotn = function inotn(width) {
                assert4(typeof width === "number" && width >= 0);
                var bytesNeeded = Math.ceil(width / 26) | 0;
                var bitsLeft = width % 26;
                this._expand(bytesNeeded);
                if (bitsLeft > 0) {
                    bytesNeeded--;
                }
                for(var i = 0; i < bytesNeeded; i++){
                    this.words[i] = ~this.words[i] & 67108863;
                }
                if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
                }
                return this._strip();
            };
            BN2.prototype.notn = function notn(width) {
                return this.clone().inotn(width);
            };
            BN2.prototype.setn = function setn(bit, val) {
                assert4(typeof bit === "number" && bit >= 0);
                var off = bit / 26 | 0;
                var wbit = bit % 26;
                this._expand(off + 1);
                if (val) {
                    this.words[off] = this.words[off] | 1 << wbit;
                } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                }
                return this._strip();
            };
            BN2.prototype.iadd = function iadd(num) {
                var r;
                if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign();
                } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                }
                var a, b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }
                var carry = 0;
                for(var i = 0; i < b.length; i++){
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 67108863;
                    carry = r >>> 26;
                }
                for(; carry !== 0 && i < a.length; i++){
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 67108863;
                    carry = r >>> 26;
                }
                this.length = a.length;
                if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++;
                } else if (a !== this) {
                    for(; i < a.length; i++){
                        this.words[i] = a.words[i];
                    }
                }
                return this;
            };
            BN2.prototype.add = function add3(num) {
                var res;
                if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                }
                if (this.length > num.length) return this.clone().iadd(num);
                return num.clone().iadd(this);
            };
            BN2.prototype.isub = function isub(num) {
                if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign();
                } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                }
                var cmp = this.cmp(num);
                if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                }
                var a, b;
                if (cmp > 0) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }
                var carry = 0;
                for(var i = 0; i < b.length; i++){
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 67108863;
                }
                for(; carry !== 0 && i < a.length; i++){
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 67108863;
                }
                if (carry === 0 && i < a.length && a !== this) {
                    for(; i < a.length; i++){
                        this.words[i] = a.words[i];
                    }
                }
                this.length = Math.max(this.length, i);
                if (a !== this) {
                    this.negative = 1;
                }
                return this._strip();
            };
            BN2.prototype.sub = function sub(num) {
                return this.clone().isub(num);
            };
            var comb10MulTo = function comb10MulTo2(self2, num, out) {
                var a = self2.words;
                var b = num.words;
                var o = out.words;
                var c = 0;
                var lo;
                var mid;
                var hi;
                var a0 = a[0] | 0;
                var al0 = a0 & 8191;
                var ah0 = a0 >>> 13;
                var a1 = a[1] | 0;
                var al1 = a1 & 8191;
                var ah1 = a1 >>> 13;
                var a2 = a[2] | 0;
                var al2 = a2 & 8191;
                var ah2 = a2 >>> 13;
                var a3 = a[3] | 0;
                var al3 = a3 & 8191;
                var ah3 = a3 >>> 13;
                var a4 = a[4] | 0;
                var al4 = a4 & 8191;
                var ah4 = a4 >>> 13;
                var a5 = a[5] | 0;
                var al5 = a5 & 8191;
                var ah5 = a5 >>> 13;
                var a6 = a[6] | 0;
                var al6 = a6 & 8191;
                var ah6 = a6 >>> 13;
                var a7 = a[7] | 0;
                var al7 = a7 & 8191;
                var ah7 = a7 >>> 13;
                var a8 = a[8] | 0;
                var al8 = a8 & 8191;
                var ah8 = a8 >>> 13;
                var a9 = a[9] | 0;
                var al9 = a9 & 8191;
                var ah9 = a9 >>> 13;
                var b0 = b[0] | 0;
                var bl0 = b0 & 8191;
                var bh0 = b0 >>> 13;
                var b1 = b[1] | 0;
                var bl1 = b1 & 8191;
                var bh1 = b1 >>> 13;
                var b2 = b[2] | 0;
                var bl2 = b2 & 8191;
                var bh2 = b2 >>> 13;
                var b3 = b[3] | 0;
                var bl3 = b3 & 8191;
                var bh3 = b3 >>> 13;
                var b4 = b[4] | 0;
                var bl4 = b4 & 8191;
                var bh4 = b4 >>> 13;
                var b5 = b[5] | 0;
                var bl5 = b5 & 8191;
                var bh5 = b5 >>> 13;
                var b6 = b[6] | 0;
                var bl6 = b6 & 8191;
                var bh6 = b6 >>> 13;
                var b7 = b[7] | 0;
                var bl7 = b7 & 8191;
                var bh7 = b7 >>> 13;
                var b8 = b[8] | 0;
                var bl8 = b8 & 8191;
                var bh8 = b8 >>> 13;
                var b9 = b[9] | 0;
                var bl9 = b9 & 8191;
                var bh9 = b9 >>> 13;
                out.negative = self2.negative ^ num.negative;
                out.length = 19;
                lo = Math.imul(al0, bl0);
                mid = Math.imul(al0, bh0);
                mid = mid + Math.imul(ah0, bl0) | 0;
                hi = Math.imul(ah0, bh0);
                var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                w0 &= 67108863;
                lo = Math.imul(al1, bl0);
                mid = Math.imul(al1, bh0);
                mid = mid + Math.imul(ah1, bl0) | 0;
                hi = Math.imul(ah1, bh0);
                lo = lo + Math.imul(al0, bl1) | 0;
                mid = mid + Math.imul(al0, bh1) | 0;
                mid = mid + Math.imul(ah0, bl1) | 0;
                hi = hi + Math.imul(ah0, bh1) | 0;
                var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                w1 &= 67108863;
                lo = Math.imul(al2, bl0);
                mid = Math.imul(al2, bh0);
                mid = mid + Math.imul(ah2, bl0) | 0;
                hi = Math.imul(ah2, bh0);
                lo = lo + Math.imul(al1, bl1) | 0;
                mid = mid + Math.imul(al1, bh1) | 0;
                mid = mid + Math.imul(ah1, bl1) | 0;
                hi = hi + Math.imul(ah1, bh1) | 0;
                lo = lo + Math.imul(al0, bl2) | 0;
                mid = mid + Math.imul(al0, bh2) | 0;
                mid = mid + Math.imul(ah0, bl2) | 0;
                hi = hi + Math.imul(ah0, bh2) | 0;
                var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                w2 &= 67108863;
                lo = Math.imul(al3, bl0);
                mid = Math.imul(al3, bh0);
                mid = mid + Math.imul(ah3, bl0) | 0;
                hi = Math.imul(ah3, bh0);
                lo = lo + Math.imul(al2, bl1) | 0;
                mid = mid + Math.imul(al2, bh1) | 0;
                mid = mid + Math.imul(ah2, bl1) | 0;
                hi = hi + Math.imul(ah2, bh1) | 0;
                lo = lo + Math.imul(al1, bl2) | 0;
                mid = mid + Math.imul(al1, bh2) | 0;
                mid = mid + Math.imul(ah1, bl2) | 0;
                hi = hi + Math.imul(ah1, bh2) | 0;
                lo = lo + Math.imul(al0, bl3) | 0;
                mid = mid + Math.imul(al0, bh3) | 0;
                mid = mid + Math.imul(ah0, bl3) | 0;
                hi = hi + Math.imul(ah0, bh3) | 0;
                var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                w3 &= 67108863;
                lo = Math.imul(al4, bl0);
                mid = Math.imul(al4, bh0);
                mid = mid + Math.imul(ah4, bl0) | 0;
                hi = Math.imul(ah4, bh0);
                lo = lo + Math.imul(al3, bl1) | 0;
                mid = mid + Math.imul(al3, bh1) | 0;
                mid = mid + Math.imul(ah3, bl1) | 0;
                hi = hi + Math.imul(ah3, bh1) | 0;
                lo = lo + Math.imul(al2, bl2) | 0;
                mid = mid + Math.imul(al2, bh2) | 0;
                mid = mid + Math.imul(ah2, bl2) | 0;
                hi = hi + Math.imul(ah2, bh2) | 0;
                lo = lo + Math.imul(al1, bl3) | 0;
                mid = mid + Math.imul(al1, bh3) | 0;
                mid = mid + Math.imul(ah1, bl3) | 0;
                hi = hi + Math.imul(ah1, bh3) | 0;
                lo = lo + Math.imul(al0, bl4) | 0;
                mid = mid + Math.imul(al0, bh4) | 0;
                mid = mid + Math.imul(ah0, bl4) | 0;
                hi = hi + Math.imul(ah0, bh4) | 0;
                var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                w4 &= 67108863;
                lo = Math.imul(al5, bl0);
                mid = Math.imul(al5, bh0);
                mid = mid + Math.imul(ah5, bl0) | 0;
                hi = Math.imul(ah5, bh0);
                lo = lo + Math.imul(al4, bl1) | 0;
                mid = mid + Math.imul(al4, bh1) | 0;
                mid = mid + Math.imul(ah4, bl1) | 0;
                hi = hi + Math.imul(ah4, bh1) | 0;
                lo = lo + Math.imul(al3, bl2) | 0;
                mid = mid + Math.imul(al3, bh2) | 0;
                mid = mid + Math.imul(ah3, bl2) | 0;
                hi = hi + Math.imul(ah3, bh2) | 0;
                lo = lo + Math.imul(al2, bl3) | 0;
                mid = mid + Math.imul(al2, bh3) | 0;
                mid = mid + Math.imul(ah2, bl3) | 0;
                hi = hi + Math.imul(ah2, bh3) | 0;
                lo = lo + Math.imul(al1, bl4) | 0;
                mid = mid + Math.imul(al1, bh4) | 0;
                mid = mid + Math.imul(ah1, bl4) | 0;
                hi = hi + Math.imul(ah1, bh4) | 0;
                lo = lo + Math.imul(al0, bl5) | 0;
                mid = mid + Math.imul(al0, bh5) | 0;
                mid = mid + Math.imul(ah0, bl5) | 0;
                hi = hi + Math.imul(ah0, bh5) | 0;
                var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                w5 &= 67108863;
                lo = Math.imul(al6, bl0);
                mid = Math.imul(al6, bh0);
                mid = mid + Math.imul(ah6, bl0) | 0;
                hi = Math.imul(ah6, bh0);
                lo = lo + Math.imul(al5, bl1) | 0;
                mid = mid + Math.imul(al5, bh1) | 0;
                mid = mid + Math.imul(ah5, bl1) | 0;
                hi = hi + Math.imul(ah5, bh1) | 0;
                lo = lo + Math.imul(al4, bl2) | 0;
                mid = mid + Math.imul(al4, bh2) | 0;
                mid = mid + Math.imul(ah4, bl2) | 0;
                hi = hi + Math.imul(ah4, bh2) | 0;
                lo = lo + Math.imul(al3, bl3) | 0;
                mid = mid + Math.imul(al3, bh3) | 0;
                mid = mid + Math.imul(ah3, bl3) | 0;
                hi = hi + Math.imul(ah3, bh3) | 0;
                lo = lo + Math.imul(al2, bl4) | 0;
                mid = mid + Math.imul(al2, bh4) | 0;
                mid = mid + Math.imul(ah2, bl4) | 0;
                hi = hi + Math.imul(ah2, bh4) | 0;
                lo = lo + Math.imul(al1, bl5) | 0;
                mid = mid + Math.imul(al1, bh5) | 0;
                mid = mid + Math.imul(ah1, bl5) | 0;
                hi = hi + Math.imul(ah1, bh5) | 0;
                lo = lo + Math.imul(al0, bl6) | 0;
                mid = mid + Math.imul(al0, bh6) | 0;
                mid = mid + Math.imul(ah0, bl6) | 0;
                hi = hi + Math.imul(ah0, bh6) | 0;
                var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                w6 &= 67108863;
                lo = Math.imul(al7, bl0);
                mid = Math.imul(al7, bh0);
                mid = mid + Math.imul(ah7, bl0) | 0;
                hi = Math.imul(ah7, bh0);
                lo = lo + Math.imul(al6, bl1) | 0;
                mid = mid + Math.imul(al6, bh1) | 0;
                mid = mid + Math.imul(ah6, bl1) | 0;
                hi = hi + Math.imul(ah6, bh1) | 0;
                lo = lo + Math.imul(al5, bl2) | 0;
                mid = mid + Math.imul(al5, bh2) | 0;
                mid = mid + Math.imul(ah5, bl2) | 0;
                hi = hi + Math.imul(ah5, bh2) | 0;
                lo = lo + Math.imul(al4, bl3) | 0;
                mid = mid + Math.imul(al4, bh3) | 0;
                mid = mid + Math.imul(ah4, bl3) | 0;
                hi = hi + Math.imul(ah4, bh3) | 0;
                lo = lo + Math.imul(al3, bl4) | 0;
                mid = mid + Math.imul(al3, bh4) | 0;
                mid = mid + Math.imul(ah3, bl4) | 0;
                hi = hi + Math.imul(ah3, bh4) | 0;
                lo = lo + Math.imul(al2, bl5) | 0;
                mid = mid + Math.imul(al2, bh5) | 0;
                mid = mid + Math.imul(ah2, bl5) | 0;
                hi = hi + Math.imul(ah2, bh5) | 0;
                lo = lo + Math.imul(al1, bl6) | 0;
                mid = mid + Math.imul(al1, bh6) | 0;
                mid = mid + Math.imul(ah1, bl6) | 0;
                hi = hi + Math.imul(ah1, bh6) | 0;
                lo = lo + Math.imul(al0, bl7) | 0;
                mid = mid + Math.imul(al0, bh7) | 0;
                mid = mid + Math.imul(ah0, bl7) | 0;
                hi = hi + Math.imul(ah0, bh7) | 0;
                var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                w7 &= 67108863;
                lo = Math.imul(al8, bl0);
                mid = Math.imul(al8, bh0);
                mid = mid + Math.imul(ah8, bl0) | 0;
                hi = Math.imul(ah8, bh0);
                lo = lo + Math.imul(al7, bl1) | 0;
                mid = mid + Math.imul(al7, bh1) | 0;
                mid = mid + Math.imul(ah7, bl1) | 0;
                hi = hi + Math.imul(ah7, bh1) | 0;
                lo = lo + Math.imul(al6, bl2) | 0;
                mid = mid + Math.imul(al6, bh2) | 0;
                mid = mid + Math.imul(ah6, bl2) | 0;
                hi = hi + Math.imul(ah6, bh2) | 0;
                lo = lo + Math.imul(al5, bl3) | 0;
                mid = mid + Math.imul(al5, bh3) | 0;
                mid = mid + Math.imul(ah5, bl3) | 0;
                hi = hi + Math.imul(ah5, bh3) | 0;
                lo = lo + Math.imul(al4, bl4) | 0;
                mid = mid + Math.imul(al4, bh4) | 0;
                mid = mid + Math.imul(ah4, bl4) | 0;
                hi = hi + Math.imul(ah4, bh4) | 0;
                lo = lo + Math.imul(al3, bl5) | 0;
                mid = mid + Math.imul(al3, bh5) | 0;
                mid = mid + Math.imul(ah3, bl5) | 0;
                hi = hi + Math.imul(ah3, bh5) | 0;
                lo = lo + Math.imul(al2, bl6) | 0;
                mid = mid + Math.imul(al2, bh6) | 0;
                mid = mid + Math.imul(ah2, bl6) | 0;
                hi = hi + Math.imul(ah2, bh6) | 0;
                lo = lo + Math.imul(al1, bl7) | 0;
                mid = mid + Math.imul(al1, bh7) | 0;
                mid = mid + Math.imul(ah1, bl7) | 0;
                hi = hi + Math.imul(ah1, bh7) | 0;
                lo = lo + Math.imul(al0, bl8) | 0;
                mid = mid + Math.imul(al0, bh8) | 0;
                mid = mid + Math.imul(ah0, bl8) | 0;
                hi = hi + Math.imul(ah0, bh8) | 0;
                var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                w8 &= 67108863;
                lo = Math.imul(al9, bl0);
                mid = Math.imul(al9, bh0);
                mid = mid + Math.imul(ah9, bl0) | 0;
                hi = Math.imul(ah9, bh0);
                lo = lo + Math.imul(al8, bl1) | 0;
                mid = mid + Math.imul(al8, bh1) | 0;
                mid = mid + Math.imul(ah8, bl1) | 0;
                hi = hi + Math.imul(ah8, bh1) | 0;
                lo = lo + Math.imul(al7, bl2) | 0;
                mid = mid + Math.imul(al7, bh2) | 0;
                mid = mid + Math.imul(ah7, bl2) | 0;
                hi = hi + Math.imul(ah7, bh2) | 0;
                lo = lo + Math.imul(al6, bl3) | 0;
                mid = mid + Math.imul(al6, bh3) | 0;
                mid = mid + Math.imul(ah6, bl3) | 0;
                hi = hi + Math.imul(ah6, bh3) | 0;
                lo = lo + Math.imul(al5, bl4) | 0;
                mid = mid + Math.imul(al5, bh4) | 0;
                mid = mid + Math.imul(ah5, bl4) | 0;
                hi = hi + Math.imul(ah5, bh4) | 0;
                lo = lo + Math.imul(al4, bl5) | 0;
                mid = mid + Math.imul(al4, bh5) | 0;
                mid = mid + Math.imul(ah4, bl5) | 0;
                hi = hi + Math.imul(ah4, bh5) | 0;
                lo = lo + Math.imul(al3, bl6) | 0;
                mid = mid + Math.imul(al3, bh6) | 0;
                mid = mid + Math.imul(ah3, bl6) | 0;
                hi = hi + Math.imul(ah3, bh6) | 0;
                lo = lo + Math.imul(al2, bl7) | 0;
                mid = mid + Math.imul(al2, bh7) | 0;
                mid = mid + Math.imul(ah2, bl7) | 0;
                hi = hi + Math.imul(ah2, bh7) | 0;
                lo = lo + Math.imul(al1, bl8) | 0;
                mid = mid + Math.imul(al1, bh8) | 0;
                mid = mid + Math.imul(ah1, bl8) | 0;
                hi = hi + Math.imul(ah1, bh8) | 0;
                lo = lo + Math.imul(al0, bl9) | 0;
                mid = mid + Math.imul(al0, bh9) | 0;
                mid = mid + Math.imul(ah0, bl9) | 0;
                hi = hi + Math.imul(ah0, bh9) | 0;
                var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                w9 &= 67108863;
                lo = Math.imul(al9, bl1);
                mid = Math.imul(al9, bh1);
                mid = mid + Math.imul(ah9, bl1) | 0;
                hi = Math.imul(ah9, bh1);
                lo = lo + Math.imul(al8, bl2) | 0;
                mid = mid + Math.imul(al8, bh2) | 0;
                mid = mid + Math.imul(ah8, bl2) | 0;
                hi = hi + Math.imul(ah8, bh2) | 0;
                lo = lo + Math.imul(al7, bl3) | 0;
                mid = mid + Math.imul(al7, bh3) | 0;
                mid = mid + Math.imul(ah7, bl3) | 0;
                hi = hi + Math.imul(ah7, bh3) | 0;
                lo = lo + Math.imul(al6, bl4) | 0;
                mid = mid + Math.imul(al6, bh4) | 0;
                mid = mid + Math.imul(ah6, bl4) | 0;
                hi = hi + Math.imul(ah6, bh4) | 0;
                lo = lo + Math.imul(al5, bl5) | 0;
                mid = mid + Math.imul(al5, bh5) | 0;
                mid = mid + Math.imul(ah5, bl5) | 0;
                hi = hi + Math.imul(ah5, bh5) | 0;
                lo = lo + Math.imul(al4, bl6) | 0;
                mid = mid + Math.imul(al4, bh6) | 0;
                mid = mid + Math.imul(ah4, bl6) | 0;
                hi = hi + Math.imul(ah4, bh6) | 0;
                lo = lo + Math.imul(al3, bl7) | 0;
                mid = mid + Math.imul(al3, bh7) | 0;
                mid = mid + Math.imul(ah3, bl7) | 0;
                hi = hi + Math.imul(ah3, bh7) | 0;
                lo = lo + Math.imul(al2, bl8) | 0;
                mid = mid + Math.imul(al2, bh8) | 0;
                mid = mid + Math.imul(ah2, bl8) | 0;
                hi = hi + Math.imul(ah2, bh8) | 0;
                lo = lo + Math.imul(al1, bl9) | 0;
                mid = mid + Math.imul(al1, bh9) | 0;
                mid = mid + Math.imul(ah1, bl9) | 0;
                hi = hi + Math.imul(ah1, bh9) | 0;
                var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                w10 &= 67108863;
                lo = Math.imul(al9, bl2);
                mid = Math.imul(al9, bh2);
                mid = mid + Math.imul(ah9, bl2) | 0;
                hi = Math.imul(ah9, bh2);
                lo = lo + Math.imul(al8, bl3) | 0;
                mid = mid + Math.imul(al8, bh3) | 0;
                mid = mid + Math.imul(ah8, bl3) | 0;
                hi = hi + Math.imul(ah8, bh3) | 0;
                lo = lo + Math.imul(al7, bl4) | 0;
                mid = mid + Math.imul(al7, bh4) | 0;
                mid = mid + Math.imul(ah7, bl4) | 0;
                hi = hi + Math.imul(ah7, bh4) | 0;
                lo = lo + Math.imul(al6, bl5) | 0;
                mid = mid + Math.imul(al6, bh5) | 0;
                mid = mid + Math.imul(ah6, bl5) | 0;
                hi = hi + Math.imul(ah6, bh5) | 0;
                lo = lo + Math.imul(al5, bl6) | 0;
                mid = mid + Math.imul(al5, bh6) | 0;
                mid = mid + Math.imul(ah5, bl6) | 0;
                hi = hi + Math.imul(ah5, bh6) | 0;
                lo = lo + Math.imul(al4, bl7) | 0;
                mid = mid + Math.imul(al4, bh7) | 0;
                mid = mid + Math.imul(ah4, bl7) | 0;
                hi = hi + Math.imul(ah4, bh7) | 0;
                lo = lo + Math.imul(al3, bl8) | 0;
                mid = mid + Math.imul(al3, bh8) | 0;
                mid = mid + Math.imul(ah3, bl8) | 0;
                hi = hi + Math.imul(ah3, bh8) | 0;
                lo = lo + Math.imul(al2, bl9) | 0;
                mid = mid + Math.imul(al2, bh9) | 0;
                mid = mid + Math.imul(ah2, bl9) | 0;
                hi = hi + Math.imul(ah2, bh9) | 0;
                var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                w11 &= 67108863;
                lo = Math.imul(al9, bl3);
                mid = Math.imul(al9, bh3);
                mid = mid + Math.imul(ah9, bl3) | 0;
                hi = Math.imul(ah9, bh3);
                lo = lo + Math.imul(al8, bl4) | 0;
                mid = mid + Math.imul(al8, bh4) | 0;
                mid = mid + Math.imul(ah8, bl4) | 0;
                hi = hi + Math.imul(ah8, bh4) | 0;
                lo = lo + Math.imul(al7, bl5) | 0;
                mid = mid + Math.imul(al7, bh5) | 0;
                mid = mid + Math.imul(ah7, bl5) | 0;
                hi = hi + Math.imul(ah7, bh5) | 0;
                lo = lo + Math.imul(al6, bl6) | 0;
                mid = mid + Math.imul(al6, bh6) | 0;
                mid = mid + Math.imul(ah6, bl6) | 0;
                hi = hi + Math.imul(ah6, bh6) | 0;
                lo = lo + Math.imul(al5, bl7) | 0;
                mid = mid + Math.imul(al5, bh7) | 0;
                mid = mid + Math.imul(ah5, bl7) | 0;
                hi = hi + Math.imul(ah5, bh7) | 0;
                lo = lo + Math.imul(al4, bl8) | 0;
                mid = mid + Math.imul(al4, bh8) | 0;
                mid = mid + Math.imul(ah4, bl8) | 0;
                hi = hi + Math.imul(ah4, bh8) | 0;
                lo = lo + Math.imul(al3, bl9) | 0;
                mid = mid + Math.imul(al3, bh9) | 0;
                mid = mid + Math.imul(ah3, bl9) | 0;
                hi = hi + Math.imul(ah3, bh9) | 0;
                var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                w12 &= 67108863;
                lo = Math.imul(al9, bl4);
                mid = Math.imul(al9, bh4);
                mid = mid + Math.imul(ah9, bl4) | 0;
                hi = Math.imul(ah9, bh4);
                lo = lo + Math.imul(al8, bl5) | 0;
                mid = mid + Math.imul(al8, bh5) | 0;
                mid = mid + Math.imul(ah8, bl5) | 0;
                hi = hi + Math.imul(ah8, bh5) | 0;
                lo = lo + Math.imul(al7, bl6) | 0;
                mid = mid + Math.imul(al7, bh6) | 0;
                mid = mid + Math.imul(ah7, bl6) | 0;
                hi = hi + Math.imul(ah7, bh6) | 0;
                lo = lo + Math.imul(al6, bl7) | 0;
                mid = mid + Math.imul(al6, bh7) | 0;
                mid = mid + Math.imul(ah6, bl7) | 0;
                hi = hi + Math.imul(ah6, bh7) | 0;
                lo = lo + Math.imul(al5, bl8) | 0;
                mid = mid + Math.imul(al5, bh8) | 0;
                mid = mid + Math.imul(ah5, bl8) | 0;
                hi = hi + Math.imul(ah5, bh8) | 0;
                lo = lo + Math.imul(al4, bl9) | 0;
                mid = mid + Math.imul(al4, bh9) | 0;
                mid = mid + Math.imul(ah4, bl9) | 0;
                hi = hi + Math.imul(ah4, bh9) | 0;
                var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                w13 &= 67108863;
                lo = Math.imul(al9, bl5);
                mid = Math.imul(al9, bh5);
                mid = mid + Math.imul(ah9, bl5) | 0;
                hi = Math.imul(ah9, bh5);
                lo = lo + Math.imul(al8, bl6) | 0;
                mid = mid + Math.imul(al8, bh6) | 0;
                mid = mid + Math.imul(ah8, bl6) | 0;
                hi = hi + Math.imul(ah8, bh6) | 0;
                lo = lo + Math.imul(al7, bl7) | 0;
                mid = mid + Math.imul(al7, bh7) | 0;
                mid = mid + Math.imul(ah7, bl7) | 0;
                hi = hi + Math.imul(ah7, bh7) | 0;
                lo = lo + Math.imul(al6, bl8) | 0;
                mid = mid + Math.imul(al6, bh8) | 0;
                mid = mid + Math.imul(ah6, bl8) | 0;
                hi = hi + Math.imul(ah6, bh8) | 0;
                lo = lo + Math.imul(al5, bl9) | 0;
                mid = mid + Math.imul(al5, bh9) | 0;
                mid = mid + Math.imul(ah5, bl9) | 0;
                hi = hi + Math.imul(ah5, bh9) | 0;
                var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                w14 &= 67108863;
                lo = Math.imul(al9, bl6);
                mid = Math.imul(al9, bh6);
                mid = mid + Math.imul(ah9, bl6) | 0;
                hi = Math.imul(ah9, bh6);
                lo = lo + Math.imul(al8, bl7) | 0;
                mid = mid + Math.imul(al8, bh7) | 0;
                mid = mid + Math.imul(ah8, bl7) | 0;
                hi = hi + Math.imul(ah8, bh7) | 0;
                lo = lo + Math.imul(al7, bl8) | 0;
                mid = mid + Math.imul(al7, bh8) | 0;
                mid = mid + Math.imul(ah7, bl8) | 0;
                hi = hi + Math.imul(ah7, bh8) | 0;
                lo = lo + Math.imul(al6, bl9) | 0;
                mid = mid + Math.imul(al6, bh9) | 0;
                mid = mid + Math.imul(ah6, bl9) | 0;
                hi = hi + Math.imul(ah6, bh9) | 0;
                var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                w15 &= 67108863;
                lo = Math.imul(al9, bl7);
                mid = Math.imul(al9, bh7);
                mid = mid + Math.imul(ah9, bl7) | 0;
                hi = Math.imul(ah9, bh7);
                lo = lo + Math.imul(al8, bl8) | 0;
                mid = mid + Math.imul(al8, bh8) | 0;
                mid = mid + Math.imul(ah8, bl8) | 0;
                hi = hi + Math.imul(ah8, bh8) | 0;
                lo = lo + Math.imul(al7, bl9) | 0;
                mid = mid + Math.imul(al7, bh9) | 0;
                mid = mid + Math.imul(ah7, bl9) | 0;
                hi = hi + Math.imul(ah7, bh9) | 0;
                var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                w16 &= 67108863;
                lo = Math.imul(al9, bl8);
                mid = Math.imul(al9, bh8);
                mid = mid + Math.imul(ah9, bl8) | 0;
                hi = Math.imul(ah9, bh8);
                lo = lo + Math.imul(al8, bl9) | 0;
                mid = mid + Math.imul(al8, bh9) | 0;
                mid = mid + Math.imul(ah8, bl9) | 0;
                hi = hi + Math.imul(ah8, bh9) | 0;
                var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                w17 &= 67108863;
                lo = Math.imul(al9, bl9);
                mid = Math.imul(al9, bh9);
                mid = mid + Math.imul(ah9, bl9) | 0;
                hi = Math.imul(ah9, bh9);
                var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                w18 &= 67108863;
                o[0] = w0;
                o[1] = w1;
                o[2] = w2;
                o[3] = w3;
                o[4] = w4;
                o[5] = w5;
                o[6] = w6;
                o[7] = w7;
                o[8] = w8;
                o[9] = w9;
                o[10] = w10;
                o[11] = w11;
                o[12] = w12;
                o[13] = w13;
                o[14] = w14;
                o[15] = w15;
                o[16] = w16;
                o[17] = w17;
                o[18] = w18;
                if (c !== 0) {
                    o[19] = c;
                    out.length++;
                }
                return out;
            };
            if (!Math.imul) {
                comb10MulTo = smallMulTo;
            }
            BN2.prototype.mulTo = function mulTo(num, out) {
                var res;
                var len = this.length + num.length;
                if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                } else {
                    res = jumboMulTo(this, num, out);
                }
                return res;
            };
            FFTM.prototype.makeRBT = function makeRBT(N) {
                var t2 = new Array(N);
                var l13 = BN2.prototype._countBits(N) - 1;
                for(var i = 0; i < N; i++){
                    t2[i] = this.revBin(i, l13, N);
                }
                return t2;
            };
            FFTM.prototype.revBin = function revBin(x, l13, N) {
                if (x === 0 || x === N - 1) return x;
                var rb = 0;
                for(var i = 0; i < l13; i++){
                    rb |= (x & 1) << l13 - i - 1;
                    x >>= 1;
                }
                return rb;
            };
            FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                for(var i = 0; i < N; i++){
                    rtws[i] = rws[rbt[i]];
                    itws[i] = iws[rbt[i]];
                }
            };
            FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                this.permute(rbt, rws, iws, rtws, itws, N);
                for(var s = 1; s < N; s <<= 1){
                    var l13 = s << 1;
                    var rtwdf = Math.cos(2 * Math.PI / l13);
                    var itwdf = Math.sin(2 * Math.PI / l13);
                    for(var p = 0; p < N; p += l13){
                        var rtwdf_ = rtwdf;
                        var itwdf_ = itwdf;
                        for(var j = 0; j < s; j++){
                            var re = rtws[p + j];
                            var ie = itws[p + j];
                            var ro = rtws[p + j + s];
                            var io = itws[p + j + s];
                            var rx = rtwdf_ * ro - itwdf_ * io;
                            io = rtwdf_ * io + itwdf_ * ro;
                            ro = rx;
                            rtws[p + j] = re + ro;
                            itws[p + j] = ie + io;
                            rtws[p + j + s] = re - ro;
                            itws[p + j + s] = ie - io;
                            if (j !== l13) {
                                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                rtwdf_ = rx;
                            }
                        }
                    }
                }
            };
            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                var N = Math.max(m, n) | 1;
                var odd = N & 1;
                var i = 0;
                for(N = N / 2 | 0; N; N = N >>> 1){
                    i++;
                }
                return 1 << i + 1 + odd;
            };
            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                if (N <= 1) return;
                for(var i = 0; i < N / 2; i++){
                    var t2 = rws[i];
                    rws[i] = rws[N - i - 1];
                    rws[N - i - 1] = t2;
                    t2 = iws[i];
                    iws[i] = -iws[N - i - 1];
                    iws[N - i - 1] = -t2;
                }
            };
            FFTM.prototype.normalize13b = function normalize13b(ws2, N) {
                var carry = 0;
                for(var i = 0; i < N / 2; i++){
                    var w = Math.round(ws2[2 * i + 1] / N) * 8192 + Math.round(ws2[2 * i] / N) + carry;
                    ws2[i] = w & 67108863;
                    if (w < 67108864) {
                        carry = 0;
                    } else {
                        carry = w / 67108864 | 0;
                    }
                }
                return ws2;
            };
            FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N) {
                var carry = 0;
                for(var i = 0; i < len; i++){
                    carry = carry + (ws2[i] | 0);
                    rws[2 * i] = carry & 8191;
                    carry = carry >>> 13;
                    rws[2 * i + 1] = carry & 8191;
                    carry = carry >>> 13;
                }
                for(i = 2 * len; i < N; ++i){
                    rws[i] = 0;
                }
                assert4(carry === 0);
                assert4((carry & ~8191) === 0);
            };
            FFTM.prototype.stub = function stub(N) {
                var ph = new Array(N);
                for(var i = 0; i < N; i++){
                    ph[i] = 0;
                }
                return ph;
            };
            FFTM.prototype.mulp = function mulp(x, y, out) {
                var N = 2 * this.guessLen13b(x.length, y.length);
                var rbt = this.makeRBT(N);
                var _23 = this.stub(N);
                var rws = new Array(N);
                var rwst = new Array(N);
                var iwst = new Array(N);
                var nrws = new Array(N);
                var nrwst = new Array(N);
                var niwst = new Array(N);
                var rmws = out.words;
                rmws.length = N;
                this.convert13b(x.words, x.length, rws, N);
                this.convert13b(y.words, y.length, nrws, N);
                this.transform(rws, _23, rwst, iwst, N, rbt);
                this.transform(nrws, _23, nrwst, niwst, N, rbt);
                for(var i = 0; i < N; i++){
                    var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                    iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                    rwst[i] = rx;
                }
                this.conjugate(rwst, iwst, N);
                this.transform(rwst, iwst, rmws, _23, N, rbt);
                this.conjugate(rmws, _23, N);
                this.normalize13b(rmws, N);
                out.negative = x.negative ^ y.negative;
                out.length = x.length + y.length;
                return out._strip();
            };
            BN2.prototype.mul = function mul(num) {
                var out = new BN2(null);
                out.words = new Array(this.length + num.length);
                return this.mulTo(num, out);
            };
            BN2.prototype.mulf = function mulf(num) {
                var out = new BN2(null);
                out.words = new Array(this.length + num.length);
                return jumboMulTo(this, num, out);
            };
            BN2.prototype.imul = function imul(num) {
                return this.clone().mulTo(num, this);
            };
            BN2.prototype.imuln = function imuln(num) {
                var isNegNum = num < 0;
                if (isNegNum) num = -num;
                assert4(typeof num === "number");
                assert4(num < 67108864);
                var carry = 0;
                for(var i = 0; i < this.length; i++){
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 67108863) + (carry & 67108863);
                    carry >>= 26;
                    carry += w / 67108864 | 0;
                    carry += lo >>> 26;
                    this.words[i] = lo & 67108863;
                }
                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }
                return isNegNum ? this.ineg() : this;
            };
            BN2.prototype.muln = function muln(num) {
                return this.clone().imuln(num);
            };
            BN2.prototype.sqr = function sqr() {
                return this.mul(this);
            };
            BN2.prototype.isqr = function isqr() {
                return this.imul(this.clone());
            };
            BN2.prototype.pow = function pow(num) {
                var w = toBitArray(num);
                if (w.length === 0) return new BN2(1);
                var res = this;
                for(var i = 0; i < w.length; i++, res = res.sqr()){
                    if (w[i] !== 0) break;
                }
                if (++i < w.length) {
                    for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
                        if (w[i] === 0) continue;
                        res = res.mul(q);
                    }
                }
                return res;
            };
            BN2.prototype.iushln = function iushln(bits3) {
                assert4(typeof bits3 === "number" && bits3 >= 0);
                var r = bits3 % 26;
                var s = (bits3 - r) / 26;
                var carryMask = 67108863 >>> 26 - r << 26 - r;
                var i;
                if (r !== 0) {
                    var carry = 0;
                    for(i = 0; i < this.length; i++){
                        var newCarry = this.words[i] & carryMask;
                        var c = (this.words[i] | 0) - newCarry << r;
                        this.words[i] = c | carry;
                        carry = newCarry >>> 26 - r;
                    }
                    if (carry) {
                        this.words[i] = carry;
                        this.length++;
                    }
                }
                if (s !== 0) {
                    for(i = this.length - 1; i >= 0; i--){
                        this.words[i + s] = this.words[i];
                    }
                    for(i = 0; i < s; i++){
                        this.words[i] = 0;
                    }
                    this.length += s;
                }
                return this._strip();
            };
            BN2.prototype.ishln = function ishln(bits3) {
                assert4(this.negative === 0);
                return this.iushln(bits3);
            };
            BN2.prototype.iushrn = function iushrn(bits3, hint, extended) {
                assert4(typeof bits3 === "number" && bits3 >= 0);
                var h;
                if (hint) {
                    h = (hint - hint % 26) / 26;
                } else {
                    h = 0;
                }
                var r = bits3 % 26;
                var s = Math.min((bits3 - r) / 26, this.length);
                var mask = 67108863 ^ 67108863 >>> r << r;
                var maskedWords = extended;
                h -= s;
                h = Math.max(0, h);
                if (maskedWords) {
                    for(var i = 0; i < s; i++){
                        maskedWords.words[i] = this.words[i];
                    }
                    maskedWords.length = s;
                }
                if (s === 0) {} else if (this.length > s) {
                    this.length -= s;
                    for(i = 0; i < this.length; i++){
                        this.words[i] = this.words[i + s];
                    }
                } else {
                    this.words[0] = 0;
                    this.length = 1;
                }
                var carry = 0;
                for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
                    var word = this.words[i] | 0;
                    this.words[i] = carry << 26 - r | word >>> r;
                    carry = word & mask;
                }
                if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                }
                if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                }
                return this._strip();
            };
            BN2.prototype.ishrn = function ishrn(bits3, hint, extended) {
                assert4(this.negative === 0);
                return this.iushrn(bits3, hint, extended);
            };
            BN2.prototype.shln = function shln(bits3) {
                return this.clone().ishln(bits3);
            };
            BN2.prototype.ushln = function ushln(bits3) {
                return this.clone().iushln(bits3);
            };
            BN2.prototype.shrn = function shrn(bits3) {
                return this.clone().ishrn(bits3);
            };
            BN2.prototype.ushrn = function ushrn(bits3) {
                return this.clone().iushrn(bits3);
            };
            BN2.prototype.testn = function testn(bit) {
                assert4(typeof bit === "number" && bit >= 0);
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;
                if (this.length <= s) return false;
                var w = this.words[s];
                return !!(w & q);
            };
            BN2.prototype.imaskn = function imaskn(bits3) {
                assert4(typeof bits3 === "number" && bits3 >= 0);
                var r = bits3 % 26;
                var s = (bits3 - r) / 26;
                assert4(this.negative === 0, "imaskn works only with positive numbers");
                if (this.length <= s) {
                    return this;
                }
                if (r !== 0) {
                    s++;
                }
                this.length = Math.min(s, this.length);
                if (r !== 0) {
                    var mask = 67108863 ^ 67108863 >>> r << r;
                    this.words[this.length - 1] &= mask;
                }
                return this._strip();
            };
            BN2.prototype.maskn = function maskn(bits3) {
                return this.clone().imaskn(bits3);
            };
            BN2.prototype.iaddn = function iaddn(num) {
                assert4(typeof num === "number");
                assert4(num < 67108864);
                if (num < 0) return this.isubn(-num);
                if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) <= num) {
                        this.words[0] = num - (this.words[0] | 0);
                        this.negative = 0;
                        return this;
                    }
                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                }
                return this._iaddn(num);
            };
            BN2.prototype._iaddn = function _iaddn(num) {
                this.words[0] += num;
                for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
                    this.words[i] -= 67108864;
                    if (i === this.length - 1) {
                        this.words[i + 1] = 1;
                    } else {
                        this.words[i + 1]++;
                    }
                }
                this.length = Math.max(this.length, i + 1);
                return this;
            };
            BN2.prototype.isubn = function isubn(num) {
                assert4(typeof num === "number");
                assert4(num < 67108864);
                if (num < 0) return this.iaddn(-num);
                if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                }
                this.words[0] -= num;
                if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                } else {
                    for(var i = 0; i < this.length && this.words[i] < 0; i++){
                        this.words[i] += 67108864;
                        this.words[i + 1] -= 1;
                    }
                }
                return this._strip();
            };
            BN2.prototype.addn = function addn(num) {
                return this.clone().iaddn(num);
            };
            BN2.prototype.subn = function subn(num) {
                return this.clone().isubn(num);
            };
            BN2.prototype.iabs = function iabs() {
                this.negative = 0;
                return this;
            };
            BN2.prototype.abs = function abs() {
                return this.clone().iabs();
            };
            BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                var len = num.length + shift;
                var i;
                this._expand(len);
                var w;
                var carry = 0;
                for(i = 0; i < num.length; i++){
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 67108863;
                    carry = (w >> 26) - (right / 67108864 | 0);
                    this.words[i + shift] = w & 67108863;
                }
                for(; i < this.length - shift; i++){
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 67108863;
                }
                if (carry === 0) return this._strip();
                assert4(carry === -1);
                carry = 0;
                for(i = 0; i < this.length; i++){
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 67108863;
                }
                this.negative = 1;
                return this._strip();
            };
            BN2.prototype._wordDiv = function _wordDiv(num, mode) {
                var shift = this.length - num.length;
                var a = this.clone();
                var b = num;
                var bhi = b.words[b.length - 1] | 0;
                var bhiBits = this._countBits(bhi);
                shift = 26 - bhiBits;
                if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                }
                var m = a.length - b.length;
                var q;
                if (mode !== "mod") {
                    q = new BN2(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);
                    for(var i = 0; i < q.length; i++){
                        q.words[i] = 0;
                    }
                }
                var diff = a.clone()._ishlnsubmul(b, 1, m);
                if (diff.negative === 0) {
                    a = diff;
                    if (q) {
                        q.words[m] = 1;
                    }
                }
                for(var j = m - 1; j >= 0; j--){
                    var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
                    qj = Math.min(qj / bhi | 0, 67108863);
                    a._ishlnsubmul(b, qj, j);
                    while(a.negative !== 0){
                        qj--;
                        a.negative = 0;
                        a._ishlnsubmul(b, 1, j);
                        if (!a.isZero()) {
                            a.negative ^= 1;
                        }
                    }
                    if (q) {
                        q.words[j] = qj;
                    }
                }
                if (q) {
                    q._strip();
                }
                a._strip();
                if (mode !== "div" && shift !== 0) {
                    a.iushrn(shift);
                }
                return {
                    div: q || null,
                    mod: a
                };
            };
            BN2.prototype.divmod = function divmod(num, mode, positive) {
                assert4(!num.isZero());
                if (this.isZero()) {
                    return {
                        div: new BN2(0),
                        mod: new BN2(0)
                    };
                }
                var div, mod2, res;
                if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);
                    if (mode !== "mod") {
                        div = res.div.neg();
                    }
                    if (mode !== "div") {
                        mod2 = res.mod.neg();
                        if (positive && mod2.negative !== 0) {
                            mod2.iadd(num);
                        }
                    }
                    return {
                        div: div,
                        mod: mod2
                    };
                }
                if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);
                    if (mode !== "mod") {
                        div = res.div.neg();
                    }
                    return {
                        div: div,
                        mod: res.mod
                    };
                }
                if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);
                    if (mode !== "div") {
                        mod2 = res.mod.neg();
                        if (positive && mod2.negative !== 0) {
                            mod2.isub(num);
                        }
                    }
                    return {
                        div: res.div,
                        mod: mod2
                    };
                }
                if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                        div: new BN2(0),
                        mod: this
                    };
                }
                if (num.length === 1) {
                    if (mode === "div") {
                        return {
                            div: this.divn(num.words[0]),
                            mod: null
                        };
                    }
                    if (mode === "mod") {
                        return {
                            div: null,
                            mod: new BN2(this.modrn(num.words[0]))
                        };
                    }
                    return {
                        div: this.divn(num.words[0]),
                        mod: new BN2(this.modrn(num.words[0]))
                    };
                }
                return this._wordDiv(num, mode);
            };
            BN2.prototype.div = function div(num) {
                return this.divmod(num, "div", false).div;
            };
            BN2.prototype.mod = function mod2(num) {
                return this.divmod(num, "mod", false).mod;
            };
            BN2.prototype.umod = function umod(num) {
                return this.divmod(num, "mod", true).mod;
            };
            BN2.prototype.divRound = function divRound(num) {
                var dm = this.divmod(num);
                if (dm.mod.isZero()) return dm.div;
                var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                var half = num.ushrn(1);
                var r2 = num.andln(1);
                var cmp = mod2.cmp(half);
                if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
                return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };
            BN2.prototype.modrn = function modrn(num) {
                var isNegNum = num < 0;
                if (isNegNum) num = -num;
                assert4(num <= 67108863);
                var p = (1 << 26) % num;
                var acc = 0;
                for(var i = this.length - 1; i >= 0; i--){
                    acc = (p * acc + (this.words[i] | 0)) % num;
                }
                return isNegNum ? -acc : acc;
            };
            BN2.prototype.modn = function modn(num) {
                return this.modrn(num);
            };
            BN2.prototype.idivn = function idivn(num) {
                var isNegNum = num < 0;
                if (isNegNum) num = -num;
                assert4(num <= 67108863);
                var carry = 0;
                for(var i = this.length - 1; i >= 0; i--){
                    var w = (this.words[i] | 0) + carry * 67108864;
                    this.words[i] = w / num | 0;
                    carry = w % num;
                }
                this._strip();
                return isNegNum ? this.ineg() : this;
            };
            BN2.prototype.divn = function divn(num) {
                return this.clone().idivn(num);
            };
            BN2.prototype.egcd = function egcd(p) {
                assert4(p.negative === 0);
                assert4(!p.isZero());
                var x = this;
                var y = p.clone();
                if (x.negative !== 0) {
                    x = x.umod(p);
                } else {
                    x = x.clone();
                }
                var A = new BN2(1);
                var B = new BN2(0);
                var C = new BN2(0);
                var D = new BN2(1);
                var g = 0;
                while(x.isEven() && y.isEven()){
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                }
                var yp = y.clone();
                var xp = x.clone();
                while(!x.isZero()){
                    for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                    if (i > 0) {
                        x.iushrn(i);
                        while(i-- > 0){
                            if (A.isOdd() || B.isOdd()) {
                                A.iadd(yp);
                                B.isub(xp);
                            }
                            A.iushrn(1);
                            B.iushrn(1);
                        }
                    }
                    for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                    if (j > 0) {
                        y.iushrn(j);
                        while(j-- > 0){
                            if (C.isOdd() || D.isOdd()) {
                                C.iadd(yp);
                                D.isub(xp);
                            }
                            C.iushrn(1);
                            D.iushrn(1);
                        }
                    }
                    if (x.cmp(y) >= 0) {
                        x.isub(y);
                        A.isub(C);
                        B.isub(D);
                    } else {
                        y.isub(x);
                        C.isub(A);
                        D.isub(B);
                    }
                }
                return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                };
            };
            BN2.prototype._invmp = function _invmp(p) {
                assert4(p.negative === 0);
                assert4(!p.isZero());
                var a = this;
                var b = p.clone();
                if (a.negative !== 0) {
                    a = a.umod(p);
                } else {
                    a = a.clone();
                }
                var x1 = new BN2(1);
                var x2 = new BN2(0);
                var delta = b.clone();
                while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
                    for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                    if (i > 0) {
                        a.iushrn(i);
                        while(i-- > 0){
                            if (x1.isOdd()) {
                                x1.iadd(delta);
                            }
                            x1.iushrn(1);
                        }
                    }
                    for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                    if (j > 0) {
                        b.iushrn(j);
                        while(j-- > 0){
                            if (x2.isOdd()) {
                                x2.iadd(delta);
                            }
                            x2.iushrn(1);
                        }
                    }
                    if (a.cmp(b) >= 0) {
                        a.isub(b);
                        x1.isub(x2);
                    } else {
                        b.isub(a);
                        x2.isub(x1);
                    }
                }
                var res;
                if (a.cmpn(1) === 0) {
                    res = x1;
                } else {
                    res = x2;
                }
                if (res.cmpn(0) < 0) {
                    res.iadd(p);
                }
                return res;
            };
            BN2.prototype.gcd = function gcd2(num) {
                if (this.isZero()) return num.abs();
                if (num.isZero()) return this.abs();
                var a = this.clone();
                var b = num.clone();
                a.negative = 0;
                b.negative = 0;
                for(var shift = 0; a.isEven() && b.isEven(); shift++){
                    a.iushrn(1);
                    b.iushrn(1);
                }
                do {
                    while(a.isEven()){
                        a.iushrn(1);
                    }
                    while(b.isEven()){
                        b.iushrn(1);
                    }
                    var r = a.cmp(b);
                    if (r < 0) {
                        var t2 = a;
                        a = b;
                        b = t2;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                        break;
                    }
                    a.isub(b);
                }while (true);
                return b.iushln(shift);
            };
            BN2.prototype.invm = function invm(num) {
                return this.egcd(num).a.umod(num);
            };
            BN2.prototype.isEven = function isEven() {
                return (this.words[0] & 1) === 0;
            };
            BN2.prototype.isOdd = function isOdd() {
                return (this.words[0] & 1) === 1;
            };
            BN2.prototype.andln = function andln(num) {
                return this.words[0] & num;
            };
            BN2.prototype.bincn = function bincn(bit) {
                assert4(typeof bit === "number");
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;
                if (this.length <= s) {
                    this._expand(s + 1);
                    this.words[s] |= q;
                    return this;
                }
                var carry = q;
                for(var i = s; carry !== 0 && i < this.length; i++){
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 67108863;
                    this.words[i] = w;
                }
                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }
                return this;
            };
            BN2.prototype.isZero = function isZero() {
                return this.length === 1 && this.words[0] === 0;
            };
            BN2.prototype.cmpn = function cmpn(num) {
                var negative = num < 0;
                if (this.negative !== 0 && !negative) return -1;
                if (this.negative === 0 && negative) return 1;
                this._strip();
                var res;
                if (this.length > 1) {
                    res = 1;
                } else {
                    if (negative) {
                        num = -num;
                    }
                    assert4(num <= 67108863, "Number is too big");
                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                }
                if (this.negative !== 0) return -res | 0;
                return res;
            };
            BN2.prototype.cmp = function cmp(num) {
                if (this.negative !== 0 && num.negative === 0) return -1;
                if (this.negative === 0 && num.negative !== 0) return 1;
                var res = this.ucmp(num);
                if (this.negative !== 0) return -res | 0;
                return res;
            };
            BN2.prototype.ucmp = function ucmp(num) {
                if (this.length > num.length) return 1;
                if (this.length < num.length) return -1;
                var res = 0;
                for(var i = this.length - 1; i >= 0; i--){
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;
                    if (a === b) continue;
                    if (a < b) {
                        res = -1;
                    } else if (a > b) {
                        res = 1;
                    }
                    break;
                }
                return res;
            };
            BN2.prototype.gtn = function gtn(num) {
                return this.cmpn(num) === 1;
            };
            BN2.prototype.gt = function gt(num) {
                return this.cmp(num) === 1;
            };
            BN2.prototype.gten = function gten(num) {
                return this.cmpn(num) >= 0;
            };
            BN2.prototype.gte = function gte(num) {
                return this.cmp(num) >= 0;
            };
            BN2.prototype.ltn = function ltn(num) {
                return this.cmpn(num) === -1;
            };
            BN2.prototype.lt = function lt(num) {
                return this.cmp(num) === -1;
            };
            BN2.prototype.lten = function lten(num) {
                return this.cmpn(num) <= 0;
            };
            BN2.prototype.lte = function lte(num) {
                return this.cmp(num) <= 0;
            };
            BN2.prototype.eqn = function eqn(num) {
                return this.cmpn(num) === 0;
            };
            BN2.prototype.eq = function eq(num) {
                return this.cmp(num) === 0;
            };
            BN2.red = function red2(num) {
                return new Red(num);
            };
            BN2.prototype.toRed = function toRed(ctx) {
                assert4(!this.red, "Already a number in reduction context");
                assert4(this.negative === 0, "red works only with positives");
                return ctx.convertTo(this)._forceRed(ctx);
            };
            BN2.prototype.fromRed = function fromRed() {
                assert4(this.red, "fromRed works only with numbers in reduction context");
                return this.red.convertFrom(this);
            };
            BN2.prototype._forceRed = function _forceRed(ctx) {
                this.red = ctx;
                return this;
            };
            BN2.prototype.forceRed = function forceRed(ctx) {
                assert4(!this.red, "Already a number in reduction context");
                return this._forceRed(ctx);
            };
            BN2.prototype.redAdd = function redAdd(num) {
                assert4(this.red, "redAdd works only with red numbers");
                return this.red.add(this, num);
            };
            BN2.prototype.redIAdd = function redIAdd(num) {
                assert4(this.red, "redIAdd works only with red numbers");
                return this.red.iadd(this, num);
            };
            BN2.prototype.redSub = function redSub(num) {
                assert4(this.red, "redSub works only with red numbers");
                return this.red.sub(this, num);
            };
            BN2.prototype.redISub = function redISub(num) {
                assert4(this.red, "redISub works only with red numbers");
                return this.red.isub(this, num);
            };
            BN2.prototype.redShl = function redShl(num) {
                assert4(this.red, "redShl works only with red numbers");
                return this.red.shl(this, num);
            };
            BN2.prototype.redMul = function redMul(num) {
                assert4(this.red, "redMul works only with red numbers");
                this.red._verify2(this, num);
                return this.red.mul(this, num);
            };
            BN2.prototype.redIMul = function redIMul(num) {
                assert4(this.red, "redMul works only with red numbers");
                this.red._verify2(this, num);
                return this.red.imul(this, num);
            };
            BN2.prototype.redSqr = function redSqr() {
                assert4(this.red, "redSqr works only with red numbers");
                this.red._verify1(this);
                return this.red.sqr(this);
            };
            BN2.prototype.redISqr = function redISqr() {
                assert4(this.red, "redISqr works only with red numbers");
                this.red._verify1(this);
                return this.red.isqr(this);
            };
            BN2.prototype.redSqrt = function redSqrt() {
                assert4(this.red, "redSqrt works only with red numbers");
                this.red._verify1(this);
                return this.red.sqrt(this);
            };
            BN2.prototype.redInvm = function redInvm() {
                assert4(this.red, "redInvm works only with red numbers");
                this.red._verify1(this);
                return this.red.invm(this);
            };
            BN2.prototype.redNeg = function redNeg() {
                assert4(this.red, "redNeg works only with red numbers");
                this.red._verify1(this);
                return this.red.neg(this);
            };
            BN2.prototype.redPow = function redPow(num) {
                assert4(this.red && !num.red, "redPow(normalNum)");
                this.red._verify1(this);
                return this.red.pow(this, num);
            };
            var primes = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };
            MPrime.prototype._tmp = function _tmp() {
                var tmp = new BN2(null);
                tmp.words = new Array(Math.ceil(this.n / 13));
                return tmp;
            };
            MPrime.prototype.ireduce = function ireduce(num) {
                var r = num;
                var rlen;
                do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                }while (rlen > this.n);
                var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                } else if (cmp > 0) {
                    r.isub(this.p);
                } else {
                    if (r.strip !== void 0) {
                        r.strip();
                    } else {
                        r._strip();
                    }
                }
                return r;
            };
            MPrime.prototype.split = function split3(input, out) {
                input.iushrn(this.n, 0, out);
            };
            MPrime.prototype.imulK = function imulK(num) {
                return num.imul(this.k);
            };
            inherits(K256, MPrime);
            K256.prototype.split = function split3(input, output4) {
                var mask = 4194303;
                var outLen = Math.min(input.length, 9);
                for(var i = 0; i < outLen; i++){
                    output4.words[i] = input.words[i];
                }
                output4.length = outLen;
                if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                }
                var prev = input.words[9];
                output4.words[output4.length++] = prev & mask;
                for(i = 10; i < input.length; i++){
                    var next = input.words[i] | 0;
                    input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                    prev = next;
                }
                prev >>>= 22;
                input.words[i - 10] = prev;
                if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                } else {
                    input.length -= 9;
                }
            };
            K256.prototype.imulK = function imulK(num) {
                num.words[num.length] = 0;
                num.words[num.length + 1] = 0;
                num.length += 2;
                var lo = 0;
                for(var i = 0; i < num.length; i++){
                    var w = num.words[i] | 0;
                    lo += w * 977;
                    num.words[i] = lo & 67108863;
                    lo = w * 64 + (lo / 67108864 | 0);
                }
                if (num.words[num.length - 1] === 0) {
                    num.length--;
                    if (num.words[num.length - 1] === 0) {
                        num.length--;
                    }
                }
                return num;
            };
            inherits(P224, MPrime);
            inherits(P192, MPrime);
            inherits(P25519, MPrime);
            P25519.prototype.imulK = function imulK(num) {
                var carry = 0;
                for(var i = 0; i < num.length; i++){
                    var hi = (num.words[i] | 0) * 19 + carry;
                    var lo = hi & 67108863;
                    hi >>>= 26;
                    num.words[i] = lo;
                    carry = hi;
                }
                if (carry !== 0) {
                    num.words[num.length++] = carry;
                }
                return num;
            };
            BN2._prime = function prime6(name) {
                if (primes[name]) return primes[name];
                var prime7;
                if (name === "k256") {
                    prime7 = new K256();
                } else if (name === "p224") {
                    prime7 = new P224();
                } else if (name === "p192") {
                    prime7 = new P192();
                } else if (name === "p25519") {
                    prime7 = new P25519();
                } else {
                    throw new Error("Unknown prime " + name);
                }
                primes[name] = prime7;
                return prime7;
            };
            Red.prototype._verify1 = function _verify1(a) {
                assert4(a.negative === 0, "red works only with positives");
                assert4(a.red, "red works only with red numbers");
            };
            Red.prototype._verify2 = function _verify2(a, b) {
                assert4((a.negative | b.negative) === 0, "red works only with positives");
                assert4(a.red && a.red === b.red, "red works only with red numbers");
            };
            Red.prototype.imod = function imod(a) {
                if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                move(a, a.umod(this.m)._forceRed(this));
                return a;
            };
            Red.prototype.neg = function neg(a) {
                if (a.isZero()) {
                    return a.clone();
                }
                return this.m.sub(a)._forceRed(this);
            };
            Red.prototype.add = function add3(a, b) {
                this._verify2(a, b);
                var res = a.add(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res._forceRed(this);
            };
            Red.prototype.iadd = function iadd(a, b) {
                this._verify2(a, b);
                var res = a.iadd(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res;
            };
            Red.prototype.sub = function sub(a, b) {
                this._verify2(a, b);
                var res = a.sub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res._forceRed(this);
            };
            Red.prototype.isub = function isub(a, b) {
                this._verify2(a, b);
                var res = a.isub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res;
            };
            Red.prototype.shl = function shl(a, num) {
                this._verify1(a);
                return this.imod(a.ushln(num));
            };
            Red.prototype.imul = function imul(a, b) {
                this._verify2(a, b);
                return this.imod(a.imul(b));
            };
            Red.prototype.mul = function mul(a, b) {
                this._verify2(a, b);
                return this.imod(a.mul(b));
            };
            Red.prototype.isqr = function isqr(a) {
                return this.imul(a, a.clone());
            };
            Red.prototype.sqr = function sqr(a) {
                return this.mul(a, a);
            };
            Red.prototype.sqrt = function sqrt(a) {
                if (a.isZero()) return a.clone();
                var mod3 = this.m.andln(3);
                assert4(mod3 % 2 === 1);
                if (mod3 === 3) {
                    var pow = this.m.add(new BN2(1)).iushrn(2);
                    return this.pow(a, pow);
                }
                var q = this.m.subn(1);
                var s = 0;
                while(!q.isZero() && q.andln(1) === 0){
                    s++;
                    q.iushrn(1);
                }
                assert4(!q.isZero());
                var one = new BN2(1).toRed(this);
                var nOne = one.redNeg();
                var lpow = this.m.subn(1).iushrn(1);
                var z = this.m.bitLength();
                z = new BN2(2 * z * z).toRed(this);
                while(this.pow(z, lpow).cmp(nOne) !== 0){
                    z.redIAdd(nOne);
                }
                var c = this.pow(z, q);
                var r = this.pow(a, q.addn(1).iushrn(1));
                var t2 = this.pow(a, q);
                var m = s;
                while(t2.cmp(one) !== 0){
                    var tmp = t2;
                    for(var i = 0; tmp.cmp(one) !== 0; i++){
                        tmp = tmp.redSqr();
                    }
                    assert4(i < m);
                    var b = this.pow(c, new BN2(1).iushln(m - i - 1));
                    r = r.redMul(b);
                    c = b.redSqr();
                    t2 = t2.redMul(c);
                    m = i;
                }
                return r;
            };
            Red.prototype.invm = function invm(a) {
                var inv = a._invmp(this.m);
                if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                } else {
                    return this.imod(inv);
                }
            };
            Red.prototype.pow = function pow(a, num) {
                if (num.isZero()) return new BN2(1).toRed(this);
                if (num.cmpn(1) === 0) return a.clone();
                var windowSize = 4;
                var wnd = new Array(1 << windowSize);
                wnd[0] = new BN2(1).toRed(this);
                wnd[1] = a;
                for(var i = 2; i < wnd.length; i++){
                    wnd[i] = this.mul(wnd[i - 1], a);
                }
                var res = wnd[0];
                var current = 0;
                var currentLen = 0;
                var start = num.bitLength() % 26;
                if (start === 0) {
                    start = 26;
                }
                for(i = num.length - 1; i >= 0; i--){
                    var word = num.words[i];
                    for(var j = start - 1; j >= 0; j--){
                        var bit = word >> j & 1;
                        if (res !== wnd[0]) {
                            res = this.sqr(res);
                        }
                        if (bit === 0 && current === 0) {
                            currentLen = 0;
                            continue;
                        }
                        current <<= 1;
                        current |= bit;
                        currentLen++;
                        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                        res = this.mul(res, wnd[current]);
                        currentLen = 0;
                        current = 0;
                    }
                    start = 26;
                }
                return res;
            };
            Red.prototype.convertTo = function convertTo(num) {
                var r = num.umod(this.m);
                return r === num ? r.clone() : r;
            };
            Red.prototype.convertFrom = function convertFrom(num) {
                var res = num.clone();
                res.red = null;
                return res;
            };
            BN2.mont = function mont(num) {
                return new Mont(num);
            };
            inherits(Mont, Red);
            Mont.prototype.convertTo = function convertTo(num) {
                return this.imod(num.ushln(this.shift));
            };
            Mont.prototype.convertFrom = function convertFrom(num) {
                var r = this.imod(num.mul(this.rinv));
                r.red = null;
                return r;
            };
            Mont.prototype.imul = function imul(a, b) {
                if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                }
                var t2 = a.imul(b);
                var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t2.isub(c).iushrn(this.shift);
                var res = u;
                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }
                return res._forceRed(this);
            };
            Mont.prototype.mul = function mul(a, b) {
                if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
                var t2 = a.mul(b);
                var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t2.isub(c).iushrn(this.shift);
                var res = u;
                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }
                return res._forceRed(this);
            };
            Mont.prototype.invm = function invm(a) {
                var res = this.imod(a._invmp(this.m).mul(this.r2));
                return res._forceRed(this);
            };
        })(typeof module2 === "undefined" || module2, exports);
    }
});
// ../../node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var require_bytes = __commonJS({
    "../../node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js": function(exports, module2) {
        var lenIn3 = 171005;
        var lenOut3 = 339466;
        var bytes5 = "";
        module2.exports = {
            bytes: bytes5,
            lenIn: lenIn3,
            lenOut: lenOut3
        };
    }
});
// ../../node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
    "../../node_modules/eventemitter3/index.js": function(exports, module2) {
        "use strict";
        var Events2 = function Events2() {};
        var EE = function EE(fn, context, once) {
            this.fn = fn;
            this.context = context;
            this.once = once || false;
        };
        var addListener = function addListener(emitter, event, fn, context, once) {
            if (typeof fn !== "function") {
                throw new TypeError("The listener must be a function");
            }
            var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
            if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
            else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
            else emitter._events[evt] = [
                emitter._events[evt],
                listener
            ];
            return emitter;
        };
        var clearEvent = function clearEvent(emitter, evt) {
            if (--emitter._eventsCount === 0) emitter._events = new Events2();
            else delete emitter._events[evt];
        };
        var EventEmitter3 = function EventEmitter3() {
            this._events = new Events2();
            this._eventsCount = 0;
        };
        var has = Object.prototype.hasOwnProperty;
        var prefix2 = "~";
        if (Object.create) {
            Events2.prototype = /* @__PURE__ */ Object.create(null);
            if (!new Events2().__proto__) prefix2 = false;
        }
        EventEmitter3.prototype.eventNames = function eventNames() {
            var names2 = [], events2, name;
            if (this._eventsCount === 0) return names2;
            for(name in events2 = this._events){
                if (has.call(events2, name)) names2.push(prefix2 ? name.slice(1) : name);
            }
            if (Object.getOwnPropertySymbols) {
                return names2.concat(Object.getOwnPropertySymbols(events2));
            }
            return names2;
        };
        EventEmitter3.prototype.listeners = function listeners(event) {
            var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
            if (!handlers) return [];
            if (handlers.fn) return [
                handlers.fn
            ];
            for(var i = 0, l13 = handlers.length, ee = new Array(l13); i < l13; i++){
                ee[i] = handlers[i].fn;
            }
            return ee;
        };
        EventEmitter3.prototype.listenerCount = function listenerCount(event) {
            var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
            if (!listeners) return 0;
            if (listeners.fn) return 1;
            return listeners.length;
        };
        EventEmitter3.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix2 ? prefix2 + event : event;
            if (!this._events[evt]) return false;
            var listeners = this._events[evt], len = arguments.length, args, i;
            if (listeners.fn) {
                if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
                switch(len){
                    case 1:
                        return listeners.fn.call(listeners.context), true;
                    case 2:
                        return listeners.fn.call(listeners.context, a1), true;
                    case 3:
                        return listeners.fn.call(listeners.context, a1, a2), true;
                    case 4:
                        return listeners.fn.call(listeners.context, a1, a2, a3), true;
                    case 5:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                    case 6:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                }
                for(i = 1, args = new Array(len - 1); i < len; i++){
                    args[i - 1] = arguments[i];
                }
                listeners.fn.apply(listeners.context, args);
            } else {
                var length = listeners.length, j;
                for(i = 0; i < length; i++){
                    if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
                    switch(len){
                        case 1:
                            listeners[i].fn.call(listeners[i].context);
                            break;
                        case 2:
                            listeners[i].fn.call(listeners[i].context, a1);
                            break;
                        case 3:
                            listeners[i].fn.call(listeners[i].context, a1, a2);
                            break;
                        case 4:
                            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                            break;
                        default:
                            if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){
                                args[j - 1] = arguments[j];
                            }
                            listeners[i].fn.apply(listeners[i].context, args);
                    }
                }
            }
            return true;
        };
        EventEmitter3.prototype.on = function on(event, fn, context) {
            return addListener(this, event, fn, context, false);
        };
        EventEmitter3.prototype.once = function once(event, fn, context) {
            return addListener(this, event, fn, context, true);
        };
        EventEmitter3.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix2 ? prefix2 + event : event;
            if (!this._events[evt]) return this;
            if (!fn) {
                clearEvent(this, evt);
                return this;
            }
            var listeners = this._events[evt];
            if (listeners.fn) {
                if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                    clearEvent(this, evt);
                }
            } else {
                for(var i = 0, events2 = [], length = listeners.length; i < length; i++){
                    if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                        events2.push(listeners[i]);
                    }
                }
                if (events2.length) this._events[evt] = events2.length === 1 ? events2[0] : events2;
                else clearEvent(this, evt);
            }
            return this;
        };
        EventEmitter3.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt;
            if (event) {
                evt = prefix2 ? prefix2 + event : event;
                if (this._events[evt]) clearEvent(this, evt);
            } else {
                this._events = new Events2();
                this._eventsCount = 0;
            }
            return this;
        };
        EventEmitter3.prototype.off = EventEmitter3.prototype.removeListener;
        EventEmitter3.prototype.addListener = EventEmitter3.prototype.on;
        EventEmitter3.prefixed = prefix2;
        EventEmitter3.EventEmitter = EventEmitter3;
        if ("undefined" !== typeof module2) {
            module2.exports = EventEmitter3;
        }
    }
});
// ../../node_modules/websocket/node_modules/ms/index.js
var require_ms = __commonJS({
    "../../node_modules/websocket/node_modules/ms/index.js": function(exports, module2) {
        var parse6 = function parse6(str) {
            str = String(str);
            if (str.length > 100) {
                return;
            }
            var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
            if (!match) {
                return;
            }
            var n = parseFloat(match[1]);
            var type = (match[2] || "ms").toLowerCase();
            switch(type){
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                    return n * y;
                case "days":
                case "day":
                case "d":
                    return n * d;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                    return n * h;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                    return n * m;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                    return n * s;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                    return n;
                default:
                    return void 0;
            }
        };
        var fmtShort = function fmtShort(ms) {
            if (ms >= d) {
                return Math.round(ms / d) + "d";
            }
            if (ms >= h) {
                return Math.round(ms / h) + "h";
            }
            if (ms >= m) {
                return Math.round(ms / m) + "m";
            }
            if (ms >= s) {
                return Math.round(ms / s) + "s";
            }
            return ms + "ms";
        };
        var fmtLong = function fmtLong(ms) {
            return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
        };
        var plural = function plural(ms, n, name) {
            if (ms < n) {
                return;
            }
            if (ms < n * 1.5) {
                return Math.floor(ms / n) + " " + name;
            }
            return Math.ceil(ms / n) + " " + name + "s";
        };
        var s = 1e3;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var y = d * 365.25;
        module2.exports = function(val, options) {
            options = options || {};
            var type = typeof val === "undefined" ? "undefined" : _type_of(val);
            if (type === "string" && val.length > 0) {
                return parse6(val);
            } else if (type === "number" && isNaN(val) === false) {
                return options.long ? fmtLong(val) : fmtShort(val);
            }
            throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
    }
});
// ../../node_modules/websocket/node_modules/debug/src/debug.js
var require_debug = __commonJS({
    "../../node_modules/websocket/node_modules/debug/src/debug.js": function(exports, module2) {
        var selectColor = function selectColor(namespace) {
            var hash3 = 0, i;
            for(i in namespace){
                hash3 = (hash3 << 5) - hash3 + namespace.charCodeAt(i);
                hash3 |= 0;
            }
            return exports.colors[Math.abs(hash3) % exports.colors.length];
        };
        var createDebug = function createDebug(namespace) {
            function debug() {
                if (!debug.enabled) return;
                var self2 = debug;
                var curr = +/* @__PURE__ */ new Date();
                var ms = curr - (prevTime || curr);
                self2.diff = ms;
                self2.prev = prevTime;
                self2.curr = curr;
                prevTime = curr;
                var args = new Array(arguments.length);
                for(var i = 0; i < args.length; i++){
                    args[i] = arguments[i];
                }
                args[0] = exports.coerce(args[0]);
                if ("string" !== typeof args[0]) {
                    args.unshift("%O");
                }
                var index = 0;
                args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
                    if (match === "%%") return match;
                    index++;
                    var formatter = exports.formatters[format];
                    if ("function" === typeof formatter) {
                        var val = args[index];
                        match = formatter.call(self2, val);
                        args.splice(index, 1);
                        index--;
                    }
                    return match;
                });
                exports.formatArgs.call(self2, args);
                var logFn = debug.log || exports.log || console.log.bind(console);
                logFn.apply(self2, args);
            }
            debug.namespace = namespace;
            debug.enabled = exports.enabled(namespace);
            debug.useColors = exports.useColors();
            debug.color = selectColor(namespace);
            if ("function" === typeof exports.init) {
                exports.init(debug);
            }
            return debug;
        };
        var enable = function enable(namespaces) {
            exports.save(namespaces);
            exports.names = [];
            exports.skips = [];
            var split3 = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
            var len = split3.length;
            for(var i = 0; i < len; i++){
                if (!split3[i]) continue;
                namespaces = split3[i].replace(/\*/g, ".*?");
                if (namespaces[0] === "-") {
                    exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
                } else {
                    exports.names.push(new RegExp("^" + namespaces + "$"));
                }
            }
        };
        var disable = function disable() {
            exports.enable("");
        };
        var enabled = function enabled(name) {
            var i, len;
            for(i = 0, len = exports.skips.length; i < len; i++){
                if (exports.skips[i].test(name)) {
                    return false;
                }
            }
            for(i = 0, len = exports.names.length; i < len; i++){
                if (exports.names[i].test(name)) {
                    return true;
                }
            }
            return false;
        };
        var coerce = function coerce(val) {
            if (_instanceof(val, Error)) return val.stack || val.message;
            return val;
        };
        exports = module2.exports = createDebug.debug = createDebug["default"] = createDebug;
        exports.coerce = coerce;
        exports.disable = disable;
        exports.enable = enable;
        exports.enabled = enabled;
        exports.humanize = require_ms();
        exports.names = [];
        exports.skips = [];
        exports.formatters = {};
        var prevTime;
    }
});
// ../../node_modules/websocket/node_modules/debug/src/browser.js
var require_browser = __commonJS({
    "../../node_modules/websocket/node_modules/debug/src/browser.js": function(exports, module2) {
        var useColors = function useColors() {
            if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
                return true;
            }
            return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
            typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
            typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
            typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        };
        var formatArgs = function formatArgs(args) {
            var useColors2 = this.useColors;
            args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
            if (!useColors2) return;
            var c = "color: " + this.color;
            args.splice(1, 0, c, "color: inherit");
            var index = 0;
            var lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function(match) {
                if ("%%" === match) return;
                index++;
                if ("%c" === match) {
                    lastC = index;
                }
            });
            args.splice(lastC, 0, c);
        };
        var log2 = function log2() {
            return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
        };
        var save = function save(namespaces) {
            try {
                if (null == namespaces) {
                    exports.storage.removeItem("debug");
                } else {
                    exports.storage.debug = namespaces;
                }
            } catch (e) {}
        };
        var load = function load() {
            var r;
            try {
                r = exports.storage.debug;
            } catch (e) {}
            if (!r && typeof process !== "undefined" && "env" in process) {
                r = process.env.DEBUG;
            }
            return r;
        };
        var localstorage = function localstorage() {
            try {
                return window.localStorage;
            } catch (e) {}
        };
        exports = module2.exports = require_debug();
        exports.log = log2;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
        exports.colors = [
            "lightseagreen",
            "forestgreen",
            "goldenrod",
            "dodgerblue",
            "darkorchid",
            "crimson"
        ];
        exports.formatters.j = function(v) {
            try {
                return JSON.stringify(v);
            } catch (err) {
                return "[UnexpectedJSONParseError]: " + err.message;
            }
        };
        exports.enable(load());
    }
});
// ../../node_modules/websocket/node_modules/debug/src/node.js
var require_node = __commonJS({
    "../../node_modules/websocket/node_modules/debug/src/node.js": function(exports, module2) {
        var useColors = function useColors() {
            return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd3);
        };
        var formatArgs = function formatArgs(args) {
            var name = this.namespace;
            var useColors2 = this.useColors;
            if (useColors2) {
                var c = this.color;
                var prefix2 = "  \x1b[3" + c + ";1m" + name + " \x1b[0m";
                args[0] = prefix2 + args[0].split("\n").join("\n" + prefix2);
                args.push("\x1b[3" + c + "m+" + exports.humanize(this.diff) + "\x1b[0m");
            } else {
                args[0] = /* @__PURE__ */ new Date().toUTCString() + " " + name + " " + args[0];
            }
        };
        var log2 = function log2() {
            return stream.write(util5.format.apply(util5, arguments) + "\n");
        };
        var save = function save(namespaces) {
            if (null == namespaces) {
                delete process.env.DEBUG;
            } else {
                process.env.DEBUG = namespaces;
            }
        };
        var load = function load() {
            return process.env.DEBUG;
        };
        var createWritableStdioStream = function createWritableStdioStream(fd4) {
            var stream2;
            var tty_wrap = process.binding("tty_wrap");
            switch(tty_wrap.guessHandleType(fd4)){
                case "TTY":
                    stream2 = new tty.WriteStream(fd4);
                    stream2._type = "tty";
                    if (stream2._handle && stream2._handle.unref) {
                        stream2._handle.unref();
                    }
                    break;
                case "FILE":
                    var fs = require("fs");
                    stream2 = new fs.SyncWriteStream(fd4, {
                        autoClose: false
                    });
                    stream2._type = "fs";
                    break;
                case "PIPE":
                case "TCP":
                    var net = require("net");
                    stream2 = new net.Socket({
                        fd: fd4,
                        readable: false,
                        writable: true
                    });
                    stream2.readable = false;
                    stream2.read = null;
                    stream2._type = "pipe";
                    if (stream2._handle && stream2._handle.unref) {
                        stream2._handle.unref();
                    }
                    break;
                default:
                    throw new Error("Implement me. Unknown stream file type!");
            }
            stream2.fd = fd4;
            stream2._isStdio = true;
            return stream2;
        };
        var init3 = function init3(debug) {
            debug.inspectOpts = {};
            var keys2 = Object.keys(exports.inspectOpts);
            for(var i = 0; i < keys2.length; i++){
                debug.inspectOpts[keys2[i]] = exports.inspectOpts[keys2[i]];
            }
        };
        var tty = require("tty");
        var util5 = require("util");
        exports = module2.exports = require_debug();
        exports.init = init3;
        exports.log = log2;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.colors = [
            6,
            2,
            3,
            4,
            5,
            1
        ];
        exports.inspectOpts = Object.keys(process.env).filter(function(key) {
            return /^debug_/i.test(key);
        }).reduce(function(obj, key) {
            var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_23, k) {
                return k.toUpperCase();
            });
            var val = process.env[key];
            if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
            else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
            else if (val === "null") val = null;
            else val = Number(val);
            obj[prop] = val;
            return obj;
        }, {});
        var fd3 = parseInt(process.env.DEBUG_FD, 10) || 2;
        if (1 !== fd3 && 2 !== fd3) {
            util5.deprecate(function() {}, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
        }
        var stream = 1 === fd3 ? process.stdout : 2 === fd3 ? process.stderr : createWritableStdioStream(fd3);
        exports.formatters.o = function(v) {
            this.inspectOpts.colors = this.useColors;
            return util5.inspect(v, this.inspectOpts).split("\n").map(function(str) {
                return str.trim();
            }).join(" ");
        };
        exports.formatters.O = function(v) {
            this.inspectOpts.colors = this.useColors;
            return util5.inspect(v, this.inspectOpts);
        };
        exports.enable(load());
    }
});
// ../../node_modules/websocket/node_modules/debug/src/index.js
var require_src = __commonJS({
    "../../node_modules/websocket/node_modules/debug/src/index.js": function(exports, module2) {
        if (typeof process !== "undefined" && process.type === "renderer") {
            module2.exports = require_browser();
        } else {
            module2.exports = require_node();
        }
    }
});
// ../../node_modules/websocket/lib/utils.js
var require_utils = __commonJS({
    "../../node_modules/websocket/lib/utils.js": function(exports) {
        var BufferingLogger = function BufferingLogger(identifier, uniqueID, logFunction) {
            this.logFunction = logFunction;
            this.identifier = identifier;
            this.uniqueID = uniqueID;
            this.buffer = [];
        };
        var noop3 = exports.noop = function noop3() {};
        exports.extend = function extend2(dest, source) {
            for(var prop in source){
                dest[prop] = source[prop];
            }
        };
        exports.eventEmitterListenerCount = require("events").EventEmitter.listenerCount || function(emitter, type) {
            return emitter.listeners(type).length;
        };
        exports.bufferAllocUnsafe = Buffer.allocUnsafe ? Buffer.allocUnsafe : function oldBufferAllocUnsafe(size) {
            return new Buffer(size);
        };
        exports.bufferFromString = Buffer.from ? Buffer.from : function oldBufferFromString(string, encoding) {
            return new Buffer(string, encoding);
        };
        exports.BufferingLogger = function createBufferingLogger(identifier, uniqueID) {
            var logFunction = require_src()(identifier);
            if (logFunction.enabled) {
                var logger2 = new BufferingLogger(identifier, uniqueID, logFunction);
                var debug = logger2.log.bind(logger2);
                debug.printOutput = logger2.printOutput.bind(logger2);
                debug.enabled = logFunction.enabled;
                return debug;
            }
            logFunction.printOutput = noop3;
            return logFunction;
        };
        BufferingLogger.prototype.log = function() {
            this.buffer.push([
                /* @__PURE__ */ new Date(),
                Array.prototype.slice.call(arguments)
            ]);
            return this;
        };
        BufferingLogger.prototype.clear = function() {
            this.buffer = [];
            return this;
        };
        BufferingLogger.prototype.printOutput = function(logFunction) {
            if (!logFunction) {
                logFunction = this.logFunction;
            }
            var uniqueID = this.uniqueID;
            this.buffer.forEach(function(entry) {
                var date = entry[0].toLocaleString();
                var args = entry[1].slice();
                var formatString = args[0];
                if (formatString !== void 0 && formatString !== null) {
                    formatString = "%s - %s - " + formatString.toString();
                    args.splice(0, 1, formatString, date, uniqueID);
                    logFunction.apply(global, args);
                }
            });
        };
    }
});
// ../../node_modules/node-gyp-build/node-gyp-build.js
var require_node_gyp_build = __commonJS({
    "../../node_modules/node-gyp-build/node-gyp-build.js": function(exports, module2) {
        var readdirSync = function readdirSync(dir2) {
            try {
                return fs.readdirSync(dir2);
            } catch (err) {
                return [];
            }
        };
        var getFirst = function getFirst(dir2, filter) {
            var files = readdirSync(dir2).filter(filter);
            return files[0] && path.join(dir2, files[0]);
        };
        var matchBuild = function matchBuild(name) {
            return /\.node$/.test(name);
        };
        var parseTuple = function parseTuple(name) {
            var arr = name.split("-");
            if (arr.length !== 2) return;
            var platform2 = arr[0];
            var architectures = arr[1].split("+");
            if (!platform2) return;
            if (!architectures.length) return;
            if (!architectures.every(Boolean)) return;
            return {
                name: name,
                platform: platform2,
                architectures: architectures
            };
        };
        var matchTuple = function matchTuple(platform2, arch2) {
            return function(tuple) {
                if (tuple == null) return false;
                if (tuple.platform !== platform2) return false;
                return tuple.architectures.includes(arch2);
            };
        };
        var compareTuples = function compareTuples(a, b) {
            return a.architectures.length - b.architectures.length;
        };
        var parseTags = function parseTags(file) {
            var arr = file.split(".");
            var extension = arr.pop();
            var tags = {
                file: file,
                specificity: 0
            };
            if (extension !== "node") return;
            for(var i = 0; i < arr.length; i++){
                var tag = arr[i];
                if (tag === "node" || tag === "electron" || tag === "node-webkit") {
                    tags.runtime = tag;
                } else if (tag === "napi") {
                    tags.napi = true;
                } else if (tag.slice(0, 3) === "abi") {
                    tags.abi = tag.slice(3);
                } else if (tag.slice(0, 2) === "uv") {
                    tags.uv = tag.slice(2);
                } else if (tag.slice(0, 4) === "armv") {
                    tags.armv = tag.slice(4);
                } else if (tag === "glibc" || tag === "musl") {
                    tags.libc = tag;
                } else {
                    continue;
                }
                tags.specificity++;
            }
            return tags;
        };
        var matchTags = function matchTags(runtime27, abi2) {
            return function(tags) {
                if (tags == null) return false;
                if (tags.runtime !== runtime27 && !runtimeAgnostic(tags)) return false;
                if (tags.abi !== abi2 && !tags.napi) return false;
                if (tags.uv && tags.uv !== uv) return false;
                if (tags.armv && tags.armv !== armv) return false;
                if (tags.libc && tags.libc !== libc) return false;
                return true;
            };
        };
        var runtimeAgnostic = function runtimeAgnostic(tags) {
            return tags.runtime === "node" && tags.napi;
        };
        var compareTags = function compareTags(runtime27) {
            return function(a, b) {
                if (a.runtime !== b.runtime) {
                    return a.runtime === runtime27 ? -1 : 1;
                } else if (a.abi !== b.abi) {
                    return a.abi ? -1 : 1;
                } else if (a.specificity !== b.specificity) {
                    return a.specificity > b.specificity ? -1 : 1;
                } else {
                    return 0;
                }
            };
        };
        var isNwjs = function isNwjs() {
            return !!(process.versions && process.versions.nw);
        };
        var isElectron = function isElectron() {
            if (process.versions && process.versions.electron) return true;
            if (process.env.ELECTRON_RUN_AS_NODE) return true;
            return typeof window !== "undefined" && window.process && window.process.type === "renderer";
        };
        var isAlpine = function isAlpine(platform2) {
            return platform2 === "linux" && fs.existsSync("/etc/alpine-release");
        };
        var fs = require("fs");
        var path = require("path");
        var os = require("os");
        var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
        var vars = process.config && process.config.variables || {};
        var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
        var abi = process.versions.modules;
        var runtime26 = isElectron() ? "electron" : isNwjs() ? "node-webkit" : "node";
        var arch = process.env.npm_config_arch || os.arch();
        var platform = process.env.npm_config_platform || os.platform();
        var libc = process.env.LIBC || (isAlpine(platform) ? "musl" : "glibc");
        var armv = process.env.ARM_VERSION || (arch === "arm64" ? "8" : vars.arm_version) || "";
        var uv = (process.versions.uv || "").split(".")[0];
        module2.exports = load;
        function load(dir2) {
            return runtimeRequire(load.resolve(dir2));
        }
        load.resolve = load.path = function(dir2) {
            var resolve = function resolve(dir3) {
                var tuples = readdirSync(path.join(dir3, "prebuilds")).map(parseTuple);
                var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];
                if (!tuple) return;
                var prebuilds = path.join(dir3, "prebuilds", tuple.name);
                var parsed = readdirSync(prebuilds).map(parseTags);
                var candidates2 = parsed.filter(matchTags(runtime26, abi));
                var winner = candidates2.sort(compareTags(runtime26))[0];
                if (winner) return path.join(prebuilds, winner.file);
            };
            dir2 = path.resolve(dir2 || ".");
            try {
                var name = runtimeRequire(path.join(dir2, "package.json")).name.toUpperCase().replace(/-/g, "_");
                if (process.env[name + "_PREBUILD"]) dir2 = process.env[name + "_PREBUILD"];
            } catch (err) {}
            if (!prebuildsOnly) {
                var release = getFirst(path.join(dir2, "build/Release"), matchBuild);
                if (release) return release;
                var debug = getFirst(path.join(dir2, "build/Debug"), matchBuild);
                if (debug) return debug;
            }
            var prebuild = resolve(dir2);
            if (prebuild) return prebuild;
            var nearby = resolve(path.dirname(process.execPath));
            if (nearby) return nearby;
            var target = [
                "platform=" + platform,
                "arch=" + arch,
                "runtime=" + runtime26,
                "abi=" + abi,
                "uv=" + uv,
                armv ? "armv=" + armv : "",
                "libc=" + libc,
                "node=" + process.versions.node,
                process.versions.electron ? "electron=" + process.versions.electron : "",
                typeof __webpack_require__ === "function" ? "webpack=true" : ""
            ].filter(Boolean).join(" ");
            throw new Error("No native build was found for " + target + "\n    loaded from: " + dir2 + "\n");
        };
        load.parseTags = parseTags;
        load.matchTags = matchTags;
        load.compareTags = compareTags;
        load.parseTuple = parseTuple;
        load.matchTuple = matchTuple;
        load.compareTuples = compareTuples;
    }
});
// ../../node_modules/node-gyp-build/index.js
var require_node_gyp_build2 = __commonJS({
    "../../node_modules/node-gyp-build/index.js": function(exports, module2) {
        if (typeof process.addon === "function") {
            module2.exports = process.addon.bind(process);
        } else {
            module2.exports = require_node_gyp_build();
        }
    }
});
// ../../node_modules/bufferutil/fallback.js
var require_fallback = __commonJS({
    "../../node_modules/bufferutil/fallback.js": function(exports, module2) {
        "use strict";
        var mask = function(source, mask2, output4, offset, length) {
            for(var i = 0; i < length; i++){
                output4[offset + i] = source[i] ^ mask2[i & 3];
            }
        };
        var unmask = function(buffer, mask2) {
            var length = buffer.length;
            for(var i = 0; i < length; i++){
                buffer[i] ^= mask2[i & 3];
            }
        };
        module2.exports = {
            mask: mask,
            unmask: unmask
        };
    }
});
// ../../node_modules/bufferutil/index.js
var require_bufferutil = __commonJS({
    "../../node_modules/bufferutil/index.js": function(exports, module2) {
        "use strict";
        try {
            module2.exports = require_node_gyp_build2()(__dirname);
        } catch (e) {
            module2.exports = require_fallback();
        }
    }
});
// ../../node_modules/websocket/lib/WebSocketFrame.js
var require_WebSocketFrame = __commonJS({
    "../../node_modules/websocket/lib/WebSocketFrame.js": function(exports, module2) {
        var WebSocketFrame = function WebSocketFrame(maskBytes, frameHeader, config3) {
            this.maskBytes = maskBytes;
            this.frameHeader = frameHeader;
            this.config = config3;
            this.maxReceivedFrameSize = config3.maxReceivedFrameSize;
            this.protocolError = false;
            this.frameTooLarge = false;
            this.invalidCloseFrameLength = false;
            this.parseState = DECODE_HEADER;
            this.closeStatus = -1;
        };
        var bufferUtil = require_bufferutil();
        var bufferAllocUnsafe = require_utils().bufferAllocUnsafe;
        var DECODE_HEADER = 1;
        var WAITING_FOR_16_BIT_LENGTH = 2;
        var WAITING_FOR_64_BIT_LENGTH = 3;
        var WAITING_FOR_MASK_KEY = 4;
        var WAITING_FOR_PAYLOAD = 5;
        var COMPLETE = 6;
        WebSocketFrame.prototype.addData = function(bufferList) {
            if (this.parseState === DECODE_HEADER) {
                if (bufferList.length >= 2) {
                    bufferList.joinInto(this.frameHeader, 0, 0, 2);
                    bufferList.advance(2);
                    var firstByte = this.frameHeader[0];
                    var secondByte = this.frameHeader[1];
                    this.fin = Boolean(firstByte & 128);
                    this.rsv1 = Boolean(firstByte & 64);
                    this.rsv2 = Boolean(firstByte & 32);
                    this.rsv3 = Boolean(firstByte & 16);
                    this.mask = Boolean(secondByte & 128);
                    this.opcode = firstByte & 15;
                    this.length = secondByte & 127;
                    if (this.opcode >= 8) {
                        if (this.length > 125) {
                            this.protocolError = true;
                            this.dropReason = "Illegal control frame longer than 125 bytes.";
                            return true;
                        }
                        if (!this.fin) {
                            this.protocolError = true;
                            this.dropReason = "Control frames must not be fragmented.";
                            return true;
                        }
                    }
                    if (this.length === 126) {
                        this.parseState = WAITING_FOR_16_BIT_LENGTH;
                    } else if (this.length === 127) {
                        this.parseState = WAITING_FOR_64_BIT_LENGTH;
                    } else {
                        this.parseState = WAITING_FOR_MASK_KEY;
                    }
                }
            }
            if (this.parseState === WAITING_FOR_16_BIT_LENGTH) {
                if (bufferList.length >= 2) {
                    bufferList.joinInto(this.frameHeader, 2, 0, 2);
                    bufferList.advance(2);
                    this.length = this.frameHeader.readUInt16BE(2);
                    this.parseState = WAITING_FOR_MASK_KEY;
                }
            } else if (this.parseState === WAITING_FOR_64_BIT_LENGTH) {
                if (bufferList.length >= 8) {
                    bufferList.joinInto(this.frameHeader, 2, 0, 8);
                    bufferList.advance(8);
                    var lengthPair = [
                        this.frameHeader.readUInt32BE(2),
                        this.frameHeader.readUInt32BE(2 + 4)
                    ];
                    if (lengthPair[0] !== 0) {
                        this.protocolError = true;
                        this.dropReason = "Unsupported 64-bit length frame received";
                        return true;
                    }
                    this.length = lengthPair[1];
                    this.parseState = WAITING_FOR_MASK_KEY;
                }
            }
            if (this.parseState === WAITING_FOR_MASK_KEY) {
                if (this.mask) {
                    if (bufferList.length >= 4) {
                        bufferList.joinInto(this.maskBytes, 0, 0, 4);
                        bufferList.advance(4);
                        this.parseState = WAITING_FOR_PAYLOAD;
                    }
                } else {
                    this.parseState = WAITING_FOR_PAYLOAD;
                }
            }
            if (this.parseState === WAITING_FOR_PAYLOAD) {
                if (this.length > this.maxReceivedFrameSize) {
                    this.frameTooLarge = true;
                    this.dropReason = "Frame size of " + this.length.toString(10) + " bytes exceeds maximum accepted frame size";
                    return true;
                }
                if (this.length === 0) {
                    this.binaryPayload = bufferAllocUnsafe(0);
                    this.parseState = COMPLETE;
                    return true;
                }
                if (bufferList.length >= this.length) {
                    this.binaryPayload = bufferList.take(this.length);
                    bufferList.advance(this.length);
                    if (this.mask) {
                        bufferUtil.unmask(this.binaryPayload, this.maskBytes);
                    }
                    if (this.opcode === 8) {
                        if (this.length === 1) {
                            this.binaryPayload = bufferAllocUnsafe(0);
                            this.invalidCloseFrameLength = true;
                        }
                        if (this.length >= 2) {
                            this.closeStatus = this.binaryPayload.readUInt16BE(0);
                            this.binaryPayload = this.binaryPayload.slice(2);
                        }
                    }
                    this.parseState = COMPLETE;
                    return true;
                }
            }
            return false;
        };
        WebSocketFrame.prototype.throwAwayPayload = function(bufferList) {
            if (bufferList.length >= this.length) {
                bufferList.advance(this.length);
                this.parseState = COMPLETE;
                return true;
            }
            return false;
        };
        WebSocketFrame.prototype.toBuffer = function(nullMask) {
            var maskKey;
            var headerLength = 2;
            var data;
            var outputPos;
            var firstByte = 0;
            var secondByte = 0;
            if (this.fin) {
                firstByte |= 128;
            }
            if (this.rsv1) {
                firstByte |= 64;
            }
            if (this.rsv2) {
                firstByte |= 32;
            }
            if (this.rsv3) {
                firstByte |= 16;
            }
            if (this.mask) {
                secondByte |= 128;
            }
            firstByte |= this.opcode & 15;
            if (this.opcode === 8) {
                this.length = 2;
                if (this.binaryPayload) {
                    this.length += this.binaryPayload.length;
                }
                data = bufferAllocUnsafe(this.length);
                data.writeUInt16BE(this.closeStatus, 0);
                if (this.length > 2) {
                    this.binaryPayload.copy(data, 2);
                }
            } else if (this.binaryPayload) {
                data = this.binaryPayload;
                this.length = data.length;
            } else {
                this.length = 0;
            }
            if (this.length <= 125) {
                secondByte |= this.length & 127;
            } else if (this.length > 125 && this.length <= 65535) {
                secondByte |= 126;
                headerLength += 2;
            } else if (this.length > 65535) {
                secondByte |= 127;
                headerLength += 8;
            }
            var output4 = bufferAllocUnsafe(this.length + headerLength + (this.mask ? 4 : 0));
            output4[0] = firstByte;
            output4[1] = secondByte;
            outputPos = 2;
            if (this.length > 125 && this.length <= 65535) {
                output4.writeUInt16BE(this.length, outputPos);
                outputPos += 2;
            } else if (this.length > 65535) {
                output4.writeUInt32BE(0, outputPos);
                output4.writeUInt32BE(this.length, outputPos + 4);
                outputPos += 8;
            }
            if (this.mask) {
                maskKey = nullMask ? 0 : Math.random() * 4294967295 >>> 0;
                this.maskBytes.writeUInt32BE(maskKey, 0);
                this.maskBytes.copy(output4, outputPos);
                outputPos += 4;
                if (data) {
                    bufferUtil.mask(data, this.maskBytes, output4, outputPos, this.length);
                }
            } else if (data) {
                data.copy(output4, outputPos);
            }
            return output4;
        };
        WebSocketFrame.prototype.toString = function() {
            return "Opcode: " + this.opcode + ", fin: " + this.fin + ", length: " + this.length + ", hasPayload: " + Boolean(this.binaryPayload) + ", masked: " + this.mask;
        };
        module2.exports = WebSocketFrame;
    }
});
// ../../node_modules/websocket/vendor/FastBufferList.js
var require_FastBufferList = __commonJS({
    "../../node_modules/websocket/vendor/FastBufferList.js": function(exports, module2) {
        var Buffer2 = require("buffer").Buffer;
        var EventEmitter3 = require("events").EventEmitter;
        var bufferAllocUnsafe = require_utils().bufferAllocUnsafe;
        module2.exports = BufferList;
        module2.exports.BufferList = BufferList;
        function BufferList(opts) {
            if (!_instanceof(this, BufferList)) return new BufferList(opts);
            EventEmitter3.call(this);
            var self2 = this;
            if (typeof opts == "undefined") opts = {};
            self2.encoding = opts.encoding;
            var head = {
                next: null,
                buffer: null
            };
            var last = {
                next: null,
                buffer: null
            };
            var length = 0;
            self2.__defineGetter__("length", function() {
                return length;
            });
            var offset = 0;
            self2.write = function(buf) {
                if (!head.buffer) {
                    head.buffer = buf;
                    last = head;
                } else {
                    last.next = {
                        next: null,
                        buffer: buf
                    };
                    last = last.next;
                }
                length += buf.length;
                self2.emit("write", buf);
                return true;
            };
            self2.end = function(buf) {
                if (Buffer2.isBuffer(buf)) self2.write(buf);
            };
            self2.push = function() {
                var args = [].concat.apply([], arguments);
                args.forEach(self2.write);
                return self2;
            };
            self2.forEach = function(fn) {
                if (!head.buffer) return bufferAllocUnsafe(0);
                if (head.buffer.length - offset <= 0) return self2;
                var firstBuf = head.buffer.slice(offset);
                var b = {
                    buffer: firstBuf,
                    next: head.next
                };
                while(b && b.buffer){
                    var r = fn(b.buffer);
                    if (r) break;
                    b = b.next;
                }
                return self2;
            };
            self2.join = function(start, end) {
                if (!head.buffer) return bufferAllocUnsafe(0);
                if (start == void 0) start = 0;
                if (end == void 0) end = self2.length;
                var big = bufferAllocUnsafe(end - start);
                var ix = 0;
                self2.forEach(function(buffer) {
                    if (start < ix + buffer.length && ix < end) {
                        buffer.copy(big, Math.max(0, ix - start), Math.max(0, start - ix), Math.min(buffer.length, end - ix));
                    }
                    ix += buffer.length;
                    if (ix > end) return true;
                });
                return big;
            };
            self2.joinInto = function(targetBuffer, targetStart, sourceStart, sourceEnd) {
                if (!head.buffer) return new bufferAllocUnsafe(0);
                if (sourceStart == void 0) sourceStart = 0;
                if (sourceEnd == void 0) sourceEnd = self2.length;
                var big = targetBuffer;
                if (big.length - targetStart < sourceEnd - sourceStart) {
                    throw new Error("Insufficient space available in target Buffer.");
                }
                var ix = 0;
                self2.forEach(function(buffer) {
                    if (sourceStart < ix + buffer.length && ix < sourceEnd) {
                        buffer.copy(big, Math.max(targetStart, targetStart + ix - sourceStart), Math.max(0, sourceStart - ix), Math.min(buffer.length, sourceEnd - ix));
                    }
                    ix += buffer.length;
                    if (ix > sourceEnd) return true;
                });
                return big;
            };
            self2.advance = function(n) {
                offset += n;
                length -= n;
                while(head.buffer && offset >= head.buffer.length){
                    offset -= head.buffer.length;
                    head = head.next ? head.next : {
                        buffer: null,
                        next: null
                    };
                }
                if (head.buffer === null) last = {
                    next: null,
                    buffer: null
                };
                self2.emit("advance", n);
                return self2;
            };
            self2.take = function(n, encoding) {
                if (n == void 0) n = self2.length;
                else if (typeof n !== "number") {
                    encoding = n;
                    n = self2.length;
                }
                var b = head;
                if (!encoding) encoding = self2.encoding;
                if (encoding) {
                    var acc = "";
                    self2.forEach(function(buffer) {
                        if (n <= 0) return true;
                        acc += buffer.toString(encoding, 0, Math.min(n, buffer.length));
                        n -= buffer.length;
                    });
                    return acc;
                } else {
                    return self2.join(0, n);
                }
            };
            self2.toString = function() {
                return self2.take("binary");
            };
        }
        require("util").inherits(BufferList, EventEmitter3);
    }
});
// ../../node_modules/utf-8-validate/fallback.js
var require_fallback2 = __commonJS({
    "../../node_modules/utf-8-validate/fallback.js": function(exports, module2) {
        "use strict";
        var isValidUTF8 = function isValidUTF8(buf) {
            var len = buf.length;
            var i = 0;
            while(i < len){
                if ((buf[i] & 128) === 0) {
                    i++;
                } else if ((buf[i] & 224) === 192) {
                    if (i + 1 === len || (buf[i + 1] & 192) !== 128 || (buf[i] & 254) === 192) {
                        return false;
                    }
                    i += 2;
                } else if ((buf[i] & 240) === 224) {
                    if (i + 2 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || buf[i] === 224 && (buf[i + 1] & 224) === 128 || // overlong
                    buf[i] === 237 && (buf[i + 1] & 224) === 160) {
                        return false;
                    }
                    i += 3;
                } else if ((buf[i] & 248) === 240) {
                    if (i + 3 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || (buf[i + 3] & 192) !== 128 || buf[i] === 240 && (buf[i + 1] & 240) === 128 || // overlong
                    buf[i] === 244 && buf[i + 1] > 143 || buf[i] > 244) {
                        return false;
                    }
                    i += 4;
                } else {
                    return false;
                }
            }
            return true;
        };
        module2.exports = isValidUTF8;
    }
});
// ../../node_modules/utf-8-validate/index.js
var require_utf_8_validate = __commonJS({
    "../../node_modules/utf-8-validate/index.js": function(exports, module2) {
        "use strict";
        try {
            module2.exports = require_node_gyp_build2()(__dirname);
        } catch (e) {
            module2.exports = require_fallback2();
        }
    }
});
// ../../node_modules/websocket/lib/WebSocketConnection.js
var require_WebSocketConnection = __commonJS({
    "../../node_modules/websocket/lib/WebSocketConnection.js": function(exports, module2) {
        var WebSocketConnection = function WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config3) {
            this._debug = utils2.BufferingLogger("websocket:connection", ++idCounter);
            this._debug("constructor");
            if (this._debug.enabled) {
                instrumentSocketForDebugging(this, socket);
            }
            EventEmitter3.call(this);
            this._pingListenerCount = 0;
            this.on("newListener", function(ev) {
                if (ev === "ping") {
                    this._pingListenerCount++;
                }
            }).on("removeListener", function(ev) {
                if (ev === "ping") {
                    this._pingListenerCount--;
                }
            });
            this.config = config3;
            this.socket = socket;
            this.protocol = protocol;
            this.extensions = extensions;
            this.remoteAddress = socket.remoteAddress;
            this.closeReasonCode = -1;
            this.closeDescription = null;
            this.closeEventEmitted = false;
            this.maskOutgoingPackets = maskOutgoingPackets;
            this.maskBytes = bufferAllocUnsafe(4);
            this.frameHeader = bufferAllocUnsafe(10);
            this.bufferList = new BufferList();
            this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            this.fragmentationSize = 0;
            this.frameQueue = [];
            this.connected = true;
            this.state = STATE_OPEN;
            this.waitingForCloseResponse = false;
            this.receivedEnd = false;
            this.closeTimeout = this.config.closeTimeout;
            this.assembleFragments = this.config.assembleFragments;
            this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;
            this.outputBufferFull = false;
            this.inputPaused = false;
            this.receivedDataHandler = this.processReceivedData.bind(this);
            this._closeTimerHandler = this.handleCloseTimer.bind(this);
            this.socket.setNoDelay(this.config.disableNagleAlgorithm);
            this.socket.setTimeout(0);
            if (this.config.keepalive && !this.config.useNativeKeepalive) {
                if (typeof this.config.keepaliveInterval !== "number") {
                    throw new Error("keepaliveInterval must be specified and numeric if keepalive is true.");
                }
                this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);
                this.setKeepaliveTimer();
                if (this.config.dropConnectionOnKeepaliveTimeout) {
                    if (typeof this.config.keepaliveGracePeriod !== "number") {
                        throw new Error("keepaliveGracePeriod  must be specified and numeric if dropConnectionOnKeepaliveTimeout is true.");
                    }
                    this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);
                }
            } else if (this.config.keepalive && this.config.useNativeKeepalive) {
                if (!("setKeepAlive" in this.socket)) {
                    throw new Error("Unable to use native keepalive: unsupported by this version of Node.");
                }
                this.socket.setKeepAlive(true, this.config.keepaliveInterval);
            }
            this.socket.removeAllListeners("error");
        };
        var validateCloseReason = function validateCloseReason(code) {
            if (code < 1e3) {
                return false;
            }
            if (code >= 1e3 && code <= 2999) {
                return [
                    1e3,
                    1001,
                    1002,
                    1003,
                    1007,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012,
                    1013,
                    1014,
                    1015
                ].indexOf(code) !== -1;
            }
            if (code >= 3e3 && code <= 3999) {
                return true;
            }
            if (code >= 4e3 && code <= 4999) {
                return true;
            }
            if (code >= 5e3) {
                return false;
            }
        };
        var instrumentSocketForDebugging = function instrumentSocketForDebugging(connection, socket) {
            if (!connection._debug.enabled) {
                return;
            }
            var originalSocketEmit = socket.emit;
            socket.emit = function(event) {
                connection._debug("||| Socket Event  '%s'", event);
                originalSocketEmit.apply(this, arguments);
            };
            for(var key in socket){
                if ("function" !== typeof socket[key]) {
                    continue;
                }
                if ([
                    "emit"
                ].indexOf(key) !== -1) {
                    continue;
                }
                (function(key2) {
                    var original = socket[key2];
                    if (key2 === "on") {
                        socket[key2] = function proxyMethod__EventEmitter__On() {
                            connection._debug("||| Socket method called:  %s (%s)", key2, arguments[0]);
                            return original.apply(this, arguments);
                        };
                        return;
                    }
                    socket[key2] = function proxyMethod() {
                        connection._debug("||| Socket method called:  %s", key2);
                        return original.apply(this, arguments);
                    };
                })(key);
            }
        };
        var util5 = require("util");
        var utils2 = require_utils();
        var EventEmitter3 = require("events").EventEmitter;
        var WebSocketFrame = require_WebSocketFrame();
        var BufferList = require_FastBufferList();
        var isValidUTF8 = require_utf_8_validate();
        var bufferAllocUnsafe = utils2.bufferAllocUnsafe;
        var bufferFromString = utils2.bufferFromString;
        var STATE_OPEN = "open";
        var STATE_PEER_REQUESTED_CLOSE = "peer_requested_close";
        var STATE_ENDING = "ending";
        var STATE_CLOSED = "closed";
        var setImmediateImpl = "setImmediate" in global ? global.setImmediate.bind(global) : process.nextTick.bind(process);
        var idCounter = 0;
        WebSocketConnection.CLOSE_REASON_NORMAL = 1e3;
        WebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;
        WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;
        WebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;
        WebSocketConnection.CLOSE_REASON_RESERVED = 1004;
        WebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005;
        WebSocketConnection.CLOSE_REASON_ABNORMAL = 1006;
        WebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;
        WebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;
        WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;
        WebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;
        WebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;
        WebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015;
        WebSocketConnection.CLOSE_DESCRIPTIONS = {
            1e3: "Normal connection closure",
            1001: "Remote peer is going away",
            1002: "Protocol error",
            1003: "Unprocessable input",
            1004: "Reserved",
            1005: "Reason not provided",
            1006: "Abnormal closure, no further detail available",
            1007: "Invalid data received",
            1008: "Policy violation",
            1009: "Message too big",
            1010: "Extension requested by client is required",
            1011: "Internal Server Error",
            1015: "TLS Handshake Failed"
        };
        util5.inherits(WebSocketConnection, EventEmitter3);
        WebSocketConnection.prototype._addSocketEventListeners = function() {
            this.socket.on("error", this.handleSocketError.bind(this));
            this.socket.on("end", this.handleSocketEnd.bind(this));
            this.socket.on("close", this.handleSocketClose.bind(this));
            this.socket.on("drain", this.handleSocketDrain.bind(this));
            this.socket.on("pause", this.handleSocketPause.bind(this));
            this.socket.on("resume", this.handleSocketResume.bind(this));
            this.socket.on("data", this.handleSocketData.bind(this));
        };
        WebSocketConnection.prototype.setKeepaliveTimer = function() {
            this._debug("setKeepaliveTimer");
            if (!this.config.keepalive || this.config.useNativeKeepalive) {
                return;
            }
            this.clearKeepaliveTimer();
            this.clearGracePeriodTimer();
            this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);
        };
        WebSocketConnection.prototype.clearKeepaliveTimer = function() {
            if (this._keepaliveTimeoutID) {
                clearTimeout(this._keepaliveTimeoutID);
            }
        };
        WebSocketConnection.prototype.handleKeepaliveTimer = function() {
            this._debug("handleKeepaliveTimer");
            this._keepaliveTimeoutID = null;
            this.ping();
            if (this.config.dropConnectionOnKeepaliveTimeout) {
                this.setGracePeriodTimer();
            } else {
                this.setKeepaliveTimer();
            }
        };
        WebSocketConnection.prototype.setGracePeriodTimer = function() {
            this._debug("setGracePeriodTimer");
            this.clearGracePeriodTimer();
            this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);
        };
        WebSocketConnection.prototype.clearGracePeriodTimer = function() {
            if (this._gracePeriodTimeoutID) {
                clearTimeout(this._gracePeriodTimeoutID);
            }
        };
        WebSocketConnection.prototype.handleGracePeriodTimer = function() {
            this._debug("handleGracePeriodTimer");
            this._gracePeriodTimeoutID = null;
            this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, "Peer not responding.", true);
        };
        WebSocketConnection.prototype.handleSocketData = function(data) {
            this._debug("handleSocketData");
            this.setKeepaliveTimer();
            this.bufferList.write(data);
            this.processReceivedData();
        };
        WebSocketConnection.prototype.processReceivedData = function() {
            this._debug("processReceivedData");
            if (!this.connected) {
                return;
            }
            if (this.inputPaused) {
                return;
            }
            var frame = this.currentFrame;
            if (!frame.addData(this.bufferList)) {
                this._debug("-- insufficient data for frame");
                return;
            }
            var self2 = this;
            if (frame.protocolError) {
                this._debug("-- protocol error");
                process.nextTick(function() {
                    self2.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);
                });
                return;
            } else if (frame.frameTooLarge) {
                this._debug("-- frame too large");
                process.nextTick(function() {
                    self2.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);
                });
                return;
            }
            if (frame.rsv1 || frame.rsv2 || frame.rsv3) {
                this._debug("-- illegal rsv flag");
                process.nextTick(function() {
                    self2.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, "Unsupported usage of rsv bits without negotiated extension.");
                });
                return;
            }
            if (!this.assembleFragments) {
                this._debug("-- emitting frame");
                process.nextTick(function() {
                    self2.emit("frame", frame);
                });
            }
            process.nextTick(function() {
                self2.processFrame(frame);
            });
            this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            if (this.bufferList.length > 0) {
                setImmediateImpl(this.receivedDataHandler);
            }
        };
        WebSocketConnection.prototype.handleSocketError = function(error2) {
            this._debug("handleSocketError: %j", error2);
            if (this.state === STATE_CLOSED) {
                this._debug("  --- Socket 'error' after 'close'");
                return;
            }
            this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;
            this.closeDescription = "Socket Error: " + error2.syscall + " " + error2.code;
            this.connected = false;
            this.state = STATE_CLOSED;
            this.fragmentationSize = 0;
            if (utils2.eventEmitterListenerCount(this, "error") > 0) {
                this.emit("error", error2);
            }
            this.socket.destroy();
            this._debug.printOutput();
        };
        WebSocketConnection.prototype.handleSocketEnd = function() {
            this._debug("handleSocketEnd: received socket end.  state = %s", this.state);
            this.receivedEnd = true;
            if (this.state === STATE_CLOSED) {
                this._debug("  --- Socket 'end' after 'close'");
                return;
            }
            if (this.state !== STATE_PEER_REQUESTED_CLOSE && this.state !== STATE_ENDING) {
                this._debug("  --- UNEXPECTED socket end.");
                this.socket.end();
            }
        };
        WebSocketConnection.prototype.handleSocketClose = function(hadError) {
            this._debug("handleSocketClose: received socket close");
            this.socketHadError = hadError;
            this.connected = false;
            this.state = STATE_CLOSED;
            if (this.closeReasonCode === -1) {
                this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;
                this.closeDescription = "Connection dropped by remote peer.";
            }
            this.clearCloseTimer();
            this.clearKeepaliveTimer();
            this.clearGracePeriodTimer();
            if (!this.closeEventEmitted) {
                this.closeEventEmitted = true;
                this._debug("-- Emitting WebSocketConnection close event");
                this.emit("close", this.closeReasonCode, this.closeDescription);
            }
        };
        WebSocketConnection.prototype.handleSocketDrain = function() {
            this._debug("handleSocketDrain: socket drain event");
            this.outputBufferFull = false;
            this.emit("drain");
        };
        WebSocketConnection.prototype.handleSocketPause = function() {
            this._debug("handleSocketPause: socket pause event");
            this.inputPaused = true;
            this.emit("pause");
        };
        WebSocketConnection.prototype.handleSocketResume = function() {
            this._debug("handleSocketResume: socket resume event");
            this.inputPaused = false;
            this.emit("resume");
            this.processReceivedData();
        };
        WebSocketConnection.prototype.pause = function() {
            this._debug("pause: pause requested");
            this.socket.pause();
        };
        WebSocketConnection.prototype.resume = function() {
            this._debug("resume: resume requested");
            this.socket.resume();
        };
        WebSocketConnection.prototype.close = function(reasonCode, description) {
            if (this.connected) {
                this._debug("close: Initating clean WebSocket close sequence.");
                if ("number" !== typeof reasonCode) {
                    reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;
                }
                if (!validateCloseReason(reasonCode)) {
                    throw new Error("Close code " + reasonCode + " is not valid.");
                }
                if ("string" !== typeof description) {
                    description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];
                }
                this.closeReasonCode = reasonCode;
                this.closeDescription = description;
                this.setCloseTimer();
                this.sendCloseFrame(this.closeReasonCode, this.closeDescription);
                this.state = STATE_ENDING;
                this.connected = false;
            }
        };
        WebSocketConnection.prototype.drop = function(reasonCode, description, skipCloseFrame) {
            this._debug("drop");
            if (typeof reasonCode !== "number") {
                reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;
            }
            if (typeof description !== "string") {
                description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];
            }
            this._debug("Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s", skipCloseFrame, reasonCode, description);
            this.closeReasonCode = reasonCode;
            this.closeDescription = description;
            this.frameQueue = [];
            this.fragmentationSize = 0;
            if (!skipCloseFrame) {
                this.sendCloseFrame(reasonCode, description);
            }
            this.connected = false;
            this.state = STATE_CLOSED;
            this.clearCloseTimer();
            this.clearKeepaliveTimer();
            this.clearGracePeriodTimer();
            if (!this.closeEventEmitted) {
                this.closeEventEmitted = true;
                this._debug("Emitting WebSocketConnection close event");
                this.emit("close", this.closeReasonCode, this.closeDescription);
            }
            this._debug("Drop: destroying socket");
            this.socket.destroy();
        };
        WebSocketConnection.prototype.setCloseTimer = function() {
            this._debug("setCloseTimer");
            this.clearCloseTimer();
            this._debug("Setting close timer");
            this.waitingForCloseResponse = true;
            this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);
        };
        WebSocketConnection.prototype.clearCloseTimer = function() {
            this._debug("clearCloseTimer");
            if (this.closeTimer) {
                this._debug("Clearing close timer");
                clearTimeout(this.closeTimer);
                this.waitingForCloseResponse = false;
                this.closeTimer = null;
            }
        };
        WebSocketConnection.prototype.handleCloseTimer = function() {
            this._debug("handleCloseTimer");
            this.closeTimer = null;
            if (this.waitingForCloseResponse) {
                this._debug("Close response not received from client.  Forcing socket end.");
                this.waitingForCloseResponse = false;
                this.state = STATE_CLOSED;
                this.socket.end();
            }
        };
        WebSocketConnection.prototype.processFrame = function(frame) {
            this._debug("processFrame");
            this._debug(" -- frame: %s", frame);
            if (this.frameQueue.length !== 0 && frame.opcode > 0 && frame.opcode < 8) {
                this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, "Illegal frame opcode 0x" + frame.opcode.toString(16) + " received in middle of fragmented message.");
                return;
            }
            switch(frame.opcode){
                case 2:
                    this._debug("-- Binary Frame");
                    if (this.assembleFragments) {
                        if (frame.fin) {
                            this._debug("---- Emitting 'message' event");
                            this.emit("message", {
                                type: "binary",
                                binaryData: frame.binaryPayload
                            });
                        } else {
                            this.frameQueue.push(frame);
                            this.fragmentationSize = frame.length;
                        }
                    }
                    break;
                case 1:
                    this._debug("-- Text Frame");
                    if (this.assembleFragments) {
                        if (frame.fin) {
                            if (!isValidUTF8(frame.binaryPayload)) {
                                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, "Invalid UTF-8 Data Received");
                                return;
                            }
                            this._debug("---- Emitting 'message' event");
                            this.emit("message", {
                                type: "utf8",
                                utf8Data: frame.binaryPayload.toString("utf8")
                            });
                        } else {
                            this.frameQueue.push(frame);
                            this.fragmentationSize = frame.length;
                        }
                    }
                    break;
                case 0:
                    this._debug("-- Continuation Frame");
                    if (this.assembleFragments) {
                        if (this.frameQueue.length === 0) {
                            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, "Unexpected Continuation Frame");
                            return;
                        }
                        this.fragmentationSize += frame.length;
                        if (this.fragmentationSize > this.maxReceivedMessageSize) {
                            this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, "Maximum message size exceeded.");
                            return;
                        }
                        this.frameQueue.push(frame);
                        if (frame.fin) {
                            var bytesCopied = 0;
                            var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);
                            var opcode = this.frameQueue[0].opcode;
                            this.frameQueue.forEach(function(currentFrame) {
                                currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);
                                bytesCopied += currentFrame.binaryPayload.length;
                            });
                            this.frameQueue = [];
                            this.fragmentationSize = 0;
                            switch(opcode){
                                case 2:
                                    this.emit("message", {
                                        type: "binary",
                                        binaryData: binaryPayload
                                    });
                                    break;
                                case 1:
                                    if (!isValidUTF8(binaryPayload)) {
                                        this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, "Invalid UTF-8 Data Received");
                                        return;
                                    }
                                    this.emit("message", {
                                        type: "utf8",
                                        utf8Data: binaryPayload.toString("utf8")
                                    });
                                    break;
                                default:
                                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, "Unexpected first opcode in fragmentation sequence: 0x" + opcode.toString(16));
                                    return;
                            }
                        }
                    }
                    break;
                case 9:
                    this._debug("-- Ping Frame");
                    if (this._pingListenerCount > 0) {
                        var cancelled = false;
                        var cancel = function cancel() {
                            cancelled = true;
                        };
                        this.emit("ping", cancel, frame.binaryPayload);
                        if (!cancelled) {
                            this.pong(frame.binaryPayload);
                        }
                    } else {
                        this.pong(frame.binaryPayload);
                    }
                    break;
                case 10:
                    this._debug("-- Pong Frame");
                    this.emit("pong", frame.binaryPayload);
                    break;
                case 8:
                    this._debug("-- Close Frame");
                    if (this.waitingForCloseResponse) {
                        this._debug("---- Got close response from peer.  Completing closing handshake.");
                        this.clearCloseTimer();
                        this.waitingForCloseResponse = false;
                        this.state = STATE_CLOSED;
                        this.socket.end();
                        return;
                    }
                    this._debug("---- Closing handshake initiated by peer.");
                    this.state = STATE_PEER_REQUESTED_CLOSE;
                    var respondCloseReasonCode;
                    if (frame.invalidCloseFrameLength) {
                        this.closeReasonCode = 1005;
                        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;
                    } else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {
                        this.closeReasonCode = frame.closeStatus;
                        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;
                    } else {
                        this.closeReasonCode = frame.closeStatus;
                        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;
                    }
                    if (frame.binaryPayload.length > 1) {
                        if (!isValidUTF8(frame.binaryPayload)) {
                            this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, "Invalid UTF-8 Data Received");
                            return;
                        }
                        this.closeDescription = frame.binaryPayload.toString("utf8");
                    } else {
                        this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];
                    }
                    this._debug("------ Remote peer %s - code: %d - %s - close frame payload length: %d", this.remoteAddress, this.closeReasonCode, this.closeDescription, frame.length);
                    this._debug("------ responding to remote peer's close request.");
                    this.sendCloseFrame(respondCloseReasonCode, null);
                    this.connected = false;
                    break;
                default:
                    this._debug("-- Unrecognized Opcode %d", frame.opcode);
                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, "Unrecognized Opcode: 0x" + frame.opcode.toString(16));
                    break;
            }
        };
        WebSocketConnection.prototype.send = function(data, cb) {
            this._debug("send");
            if (Buffer.isBuffer(data)) {
                this.sendBytes(data, cb);
            } else if (typeof data["toString"] === "function") {
                this.sendUTF(data, cb);
            } else {
                throw new Error("Data provided must either be a Node Buffer or implement toString()");
            }
        };
        WebSocketConnection.prototype.sendUTF = function(data, cb) {
            data = bufferFromString(data.toString(), "utf8");
            this._debug("sendUTF: %d bytes", data.length);
            var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            frame.opcode = 1;
            frame.binaryPayload = data;
            this.fragmentAndSend(frame, cb);
        };
        WebSocketConnection.prototype.sendBytes = function(data, cb) {
            this._debug("sendBytes");
            if (!Buffer.isBuffer(data)) {
                throw new Error("You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()");
            }
            var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            frame.opcode = 2;
            frame.binaryPayload = data;
            this.fragmentAndSend(frame, cb);
        };
        WebSocketConnection.prototype.ping = function(data) {
            this._debug("ping");
            var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            frame.opcode = 9;
            frame.fin = true;
            if (data) {
                if (!Buffer.isBuffer(data)) {
                    data = bufferFromString(data.toString(), "utf8");
                }
                if (data.length > 125) {
                    this._debug("WebSocket: Data for ping is longer than 125 bytes.  Truncating.");
                    data = data.slice(0, 124);
                }
                frame.binaryPayload = data;
            }
            this.sendFrame(frame);
        };
        WebSocketConnection.prototype.pong = function(binaryPayload) {
            this._debug("pong");
            var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            frame.opcode = 10;
            if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {
                this._debug("WebSocket: Data for pong is longer than 125 bytes.  Truncating.");
                binaryPayload = binaryPayload.slice(0, 124);
            }
            frame.binaryPayload = binaryPayload;
            frame.fin = true;
            this.sendFrame(frame);
        };
        WebSocketConnection.prototype.fragmentAndSend = function(frame, cb) {
            this._debug("fragmentAndSend");
            if (frame.opcode > 7) {
                throw new Error("You cannot fragment control frames.");
            }
            var threshold = this.config.fragmentationThreshold;
            var length = frame.binaryPayload.length;
            if (!this.config.fragmentOutgoingMessages || frame.binaryPayload && length <= threshold) {
                frame.fin = true;
                this.sendFrame(frame, cb);
                return;
            }
            var numFragments = Math.ceil(length / threshold);
            var sentFragments = 0;
            var sentCallback = function fragmentSentCallback(err) {
                if (err) {
                    if (typeof cb === "function") {
                        cb(err);
                        cb = null;
                    }
                    return;
                }
                ++sentFragments;
                if (sentFragments === numFragments && typeof cb === "function") {
                    cb();
                }
            };
            for(var i = 1; i <= numFragments; i++){
                var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
                currentFrame.opcode = i === 1 ? frame.opcode : 0;
                currentFrame.fin = i === numFragments;
                var currentLength = i === numFragments ? length - threshold * (i - 1) : threshold;
                var sliceStart = threshold * (i - 1);
                currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);
                this.sendFrame(currentFrame, sentCallback);
            }
        };
        WebSocketConnection.prototype.sendCloseFrame = function(reasonCode, description, cb) {
            if (typeof reasonCode !== "number") {
                reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;
            }
            this._debug("sendCloseFrame state: %s, reasonCode: %d, description: %s", this.state, reasonCode, description);
            if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) {
                return;
            }
            var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);
            frame.fin = true;
            frame.opcode = 8;
            frame.closeStatus = reasonCode;
            if (typeof description === "string") {
                frame.binaryPayload = bufferFromString(description, "utf8");
            }
            this.sendFrame(frame, cb);
            this.socket.end();
        };
        WebSocketConnection.prototype.sendFrame = function(frame, cb) {
            this._debug("sendFrame");
            frame.mask = this.maskOutgoingPackets;
            var flushed = this.socket.write(frame.toBuffer(), cb);
            this.outputBufferFull = !flushed;
            return flushed;
        };
        module2.exports = WebSocketConnection;
    }
});
// ../../node_modules/websocket/lib/WebSocketRequest.js
var require_WebSocketRequest = __commonJS({
    "../../node_modules/websocket/lib/WebSocketRequest.js": function(exports, module2) {
        var WebSocketRequest = function WebSocketRequest(socket, httpRequest, serverConfig) {
            EventEmitter3.call(this);
            this.socket = socket;
            this.httpRequest = httpRequest;
            this.resource = httpRequest.url;
            this.remoteAddress = socket.remoteAddress;
            this.remoteAddresses = [
                this.remoteAddress
            ];
            this.serverConfig = serverConfig;
            this._socketIsClosing = false;
            this._socketCloseHandler = this._handleSocketCloseBeforeAccept.bind(this);
            this.socket.on("end", this._socketCloseHandler);
            this.socket.on("close", this._socketCloseHandler);
            this._resolved = false;
        };
        var cleanupFailedConnection = function cleanupFailedConnection(connection) {
            process.nextTick(function() {
                connection.drop(1006, "TCP connection lost before handshake completed.", true);
            });
        };
        var crypto6 = require("crypto");
        var util5 = require("util");
        var url = require("url");
        var EventEmitter3 = require("events").EventEmitter;
        var WebSocketConnection = require_WebSocketConnection();
        var headerValueSplitRegExp = /,\s*/;
        var headerParamSplitRegExp = /;\s*/;
        var headerSanitizeRegExp = /[\r\n]/g;
        var xForwardedForSeparatorRegExp = /,\s*/;
        var separators = [
            "(",
            ")",
            "<",
            ">",
            "@",
            ",",
            ";",
            ":",
            "\\",
            '"',
            "/",
            "[",
            "]",
            "?",
            "=",
            "{",
            "}",
            " ",
            String.fromCharCode(9)
        ];
        var controlChars = [
            String.fromCharCode(127)
        ];
        for(i = 0; i < 31; i++){
            controlChars.push(String.fromCharCode(i));
        }
        var i;
        var cookieNameValidateRegEx = /([\x00-\x20\x22\x28\x29\x2c\x2f\x3a-\x3f\x40\x5b-\x5e\x7b\x7d\x7f])/;
        var cookieValueValidateRegEx = /[^\x21\x23-\x2b\x2d-\x3a\x3c-\x5b\x5d-\x7e]/;
        var cookieValueDQuoteValidateRegEx = /^"[^"]*"$/;
        var controlCharsAndSemicolonRegEx = /[\x00-\x20\x3b]/g;
        var cookieSeparatorRegEx = /[;,] */;
        var httpStatusDescriptions = {
            100: "Continue",
            101: "Switching Protocols",
            200: "OK",
            201: "Created",
            203: "Non-Authoritative Information",
            204: "No Content",
            205: "Reset Content",
            206: "Partial Content",
            300: "Multiple Choices",
            301: "Moved Permanently",
            302: "Found",
            303: "See Other",
            304: "Not Modified",
            305: "Use Proxy",
            307: "Temporary Redirect",
            400: "Bad Request",
            401: "Unauthorized",
            402: "Payment Required",
            403: "Forbidden",
            404: "Not Found",
            406: "Not Acceptable",
            407: "Proxy Authorization Required",
            408: "Request Timeout",
            409: "Conflict",
            410: "Gone",
            411: "Length Required",
            412: "Precondition Failed",
            413: "Request Entity Too Long",
            414: "Request-URI Too Long",
            415: "Unsupported Media Type",
            416: "Requested Range Not Satisfiable",
            417: "Expectation Failed",
            426: "Upgrade Required",
            500: "Internal Server Error",
            501: "Not Implemented",
            502: "Bad Gateway",
            503: "Service Unavailable",
            504: "Gateway Timeout",
            505: "HTTP Version Not Supported"
        };
        util5.inherits(WebSocketRequest, EventEmitter3);
        WebSocketRequest.prototype.readHandshake = function() {
            var self2 = this;
            var request = this.httpRequest;
            this.resourceURL = url.parse(this.resource, true);
            this.host = request.headers["host"];
            if (!this.host) {
                throw new Error("Client must provide a Host header.");
            }
            this.key = request.headers["sec-websocket-key"];
            if (!this.key) {
                throw new Error("Client must provide a value for Sec-WebSocket-Key.");
            }
            this.webSocketVersion = parseInt(request.headers["sec-websocket-version"], 10);
            if (!this.webSocketVersion || isNaN(this.webSocketVersion)) {
                throw new Error("Client must provide a value for Sec-WebSocket-Version.");
            }
            switch(this.webSocketVersion){
                case 8:
                case 13:
                    break;
                default:
                    var e = new Error("Unsupported websocket client version: " + this.webSocketVersion + "Only versions 8 and 13 are supported.");
                    e.httpCode = 426;
                    e.headers = {
                        "Sec-WebSocket-Version": "13"
                    };
                    throw e;
            }
            if (this.webSocketVersion === 13) {
                this.origin = request.headers["origin"];
            } else if (this.webSocketVersion === 8) {
                this.origin = request.headers["sec-websocket-origin"];
            }
            var protocolString = request.headers["sec-websocket-protocol"];
            this.protocolFullCaseMap = {};
            this.requestedProtocols = [];
            if (protocolString) {
                var requestedProtocolsFullCase = protocolString.split(headerValueSplitRegExp);
                requestedProtocolsFullCase.forEach(function(protocol) {
                    var lcProtocol = protocol.toLocaleLowerCase();
                    self2.requestedProtocols.push(lcProtocol);
                    self2.protocolFullCaseMap[lcProtocol] = protocol;
                });
            }
            if (!this.serverConfig.ignoreXForwardedFor && request.headers["x-forwarded-for"]) {
                var immediatePeerIP = this.remoteAddress;
                this.remoteAddresses = request.headers["x-forwarded-for"].split(xForwardedForSeparatorRegExp);
                this.remoteAddresses.push(immediatePeerIP);
                this.remoteAddress = this.remoteAddresses[0];
            }
            if (this.serverConfig.parseExtensions) {
                var extensionsString = request.headers["sec-websocket-extensions"];
                this.requestedExtensions = this.parseExtensions(extensionsString);
            } else {
                this.requestedExtensions = [];
            }
            if (this.serverConfig.parseCookies) {
                var cookieString = request.headers["cookie"];
                this.cookies = this.parseCookies(cookieString);
            } else {
                this.cookies = [];
            }
        };
        WebSocketRequest.prototype.parseExtensions = function(extensionsString) {
            if (!extensionsString || extensionsString.length === 0) {
                return [];
            }
            var extensions = extensionsString.toLocaleLowerCase().split(headerValueSplitRegExp);
            extensions.forEach(function(extension, index, array) {
                var params = extension.split(headerParamSplitRegExp);
                var extensionName = params[0];
                var extensionParams = params.slice(1);
                extensionParams.forEach(function(rawParam, index2, array2) {
                    var arr = rawParam.split("=");
                    var obj2 = {
                        name: arr[0],
                        value: arr[1]
                    };
                    array2.splice(index2, 1, obj2);
                });
                var obj = {
                    name: extensionName,
                    params: extensionParams
                };
                array.splice(index, 1, obj);
            });
            return extensions;
        };
        WebSocketRequest.prototype.parseCookies = function(str) {
            if (!str || typeof str !== "string") {
                return [];
            }
            var cookies = [];
            var pairs = str.split(cookieSeparatorRegEx);
            pairs.forEach(function(pair) {
                var eq_idx = pair.indexOf("=");
                if (eq_idx === -1) {
                    cookies.push({
                        name: pair,
                        value: null
                    });
                    return;
                }
                var key = pair.substr(0, eq_idx).trim();
                var val = pair.substr(++eq_idx, pair.length).trim();
                if ('"' === val[0]) {
                    val = val.slice(1, -1);
                }
                cookies.push({
                    name: key,
                    value: decodeURIComponent(val)
                });
            });
            return cookies;
        };
        WebSocketRequest.prototype.accept = function(acceptedProtocol, allowedOrigin, cookies) {
            this._verifyResolution();
            var protocolFullCase;
            if (acceptedProtocol) {
                protocolFullCase = this.protocolFullCaseMap[acceptedProtocol.toLocaleLowerCase()];
                if (typeof protocolFullCase === "undefined") {
                    protocolFullCase = acceptedProtocol;
                }
            } else {
                protocolFullCase = acceptedProtocol;
            }
            this.protocolFullCaseMap = null;
            var sha1 = crypto6.createHash("sha1");
            sha1.update(this.key + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
            var acceptKey = sha1.digest("base64");
            var response = "HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: " + acceptKey + "\r\n";
            if (protocolFullCase) {
                for(var i2 = 0; i2 < protocolFullCase.length; i2++){
                    var charCode = protocolFullCase.charCodeAt(i2);
                    var character = protocolFullCase.charAt(i2);
                    if (charCode < 33 || charCode > 126 || separators.indexOf(character) !== -1) {
                        this.reject(500);
                        throw new Error('Illegal character "' + String.fromCharCode(character) + '" in subprotocol.');
                    }
                }
                if (this.requestedProtocols.indexOf(acceptedProtocol) === -1) {
                    this.reject(500);
                    throw new Error("Specified protocol was not requested by the client.");
                }
                protocolFullCase = protocolFullCase.replace(headerSanitizeRegExp, "");
                response += "Sec-WebSocket-Protocol: " + protocolFullCase + "\r\n";
            }
            this.requestedProtocols = null;
            if (allowedOrigin) {
                allowedOrigin = allowedOrigin.replace(headerSanitizeRegExp, "");
                if (this.webSocketVersion === 13) {
                    response += "Origin: " + allowedOrigin + "\r\n";
                } else if (this.webSocketVersion === 8) {
                    response += "Sec-WebSocket-Origin: " + allowedOrigin + "\r\n";
                }
            }
            if (cookies) {
                if (!Array.isArray(cookies)) {
                    this.reject(500);
                    throw new Error('Value supplied for "cookies" argument must be an array.');
                }
                var seenCookies = {};
                cookies.forEach((function(cookie) {
                    if (!cookie.name || !cookie.value) {
                        this.reject(500);
                        throw new Error('Each cookie to set must at least provide a "name" and "value"');
                    }
                    cookie.name = cookie.name.replace(controlCharsAndSemicolonRegEx, "");
                    cookie.value = cookie.value.replace(controlCharsAndSemicolonRegEx, "");
                    if (seenCookies[cookie.name]) {
                        this.reject(500);
                        throw new Error("You may not specify the same cookie name twice.");
                    }
                    seenCookies[cookie.name] = true;
                    var invalidChar = cookie.name.match(cookieNameValidateRegEx);
                    if (invalidChar) {
                        this.reject(500);
                        throw new Error("Illegal character " + invalidChar[0] + " in cookie name");
                    }
                    if (cookie.value.match(cookieValueDQuoteValidateRegEx)) {
                        invalidChar = cookie.value.slice(1, -1).match(cookieValueValidateRegEx);
                    } else {
                        invalidChar = cookie.value.match(cookieValueValidateRegEx);
                    }
                    if (invalidChar) {
                        this.reject(500);
                        throw new Error("Illegal character " + invalidChar[0] + " in cookie value");
                    }
                    var cookieParts = [
                        cookie.name + "=" + cookie.value
                    ];
                    if (cookie.path) {
                        invalidChar = cookie.path.match(controlCharsAndSemicolonRegEx);
                        if (invalidChar) {
                            this.reject(500);
                            throw new Error("Illegal character " + invalidChar[0] + " in cookie path");
                        }
                        cookieParts.push("Path=" + cookie.path);
                    }
                    if (cookie.domain) {
                        if (typeof cookie.domain !== "string") {
                            this.reject(500);
                            throw new Error("Domain must be specified and must be a string.");
                        }
                        invalidChar = cookie.domain.match(controlCharsAndSemicolonRegEx);
                        if (invalidChar) {
                            this.reject(500);
                            throw new Error("Illegal character " + invalidChar[0] + " in cookie domain");
                        }
                        cookieParts.push("Domain=" + cookie.domain.toLowerCase());
                    }
                    if (cookie.expires) {
                        if (!_instanceof(cookie.expires, Date)) {
                            this.reject(500);
                            throw new Error('Value supplied for cookie "expires" must be a vaild date object');
                        }
                        cookieParts.push("Expires=" + cookie.expires.toGMTString());
                    }
                    if (cookie.maxage) {
                        var maxage = cookie.maxage;
                        if (typeof maxage === "string") {
                            maxage = parseInt(maxage, 10);
                        }
                        if (isNaN(maxage) || maxage <= 0) {
                            this.reject(500);
                            throw new Error('Value supplied for cookie "maxage" must be a non-zero number');
                        }
                        maxage = Math.round(maxage);
                        cookieParts.push("Max-Age=" + maxage.toString(10));
                    }
                    if (cookie.secure) {
                        if (typeof cookie.secure !== "boolean") {
                            this.reject(500);
                            throw new Error('Value supplied for cookie "secure" must be of type boolean');
                        }
                        cookieParts.push("Secure");
                    }
                    if (cookie.httponly) {
                        if (typeof cookie.httponly !== "boolean") {
                            this.reject(500);
                            throw new Error('Value supplied for cookie "httponly" must be of type boolean');
                        }
                        cookieParts.push("HttpOnly");
                    }
                    response += "Set-Cookie: " + cookieParts.join(";") + "\r\n";
                }).bind(this));
            }
            this._resolved = true;
            this.emit("requestResolved", this);
            response += "\r\n";
            var connection = new WebSocketConnection(this.socket, [], acceptedProtocol, false, this.serverConfig);
            connection.webSocketVersion = this.webSocketVersion;
            connection.remoteAddress = this.remoteAddress;
            connection.remoteAddresses = this.remoteAddresses;
            var self2 = this;
            if (this._socketIsClosing) {
                cleanupFailedConnection(connection);
            } else {
                this.socket.write(response, "ascii", function(error2) {
                    if (error2) {
                        cleanupFailedConnection(connection);
                        return;
                    }
                    self2._removeSocketCloseListeners();
                    connection._addSocketEventListeners();
                });
            }
            this.emit("requestAccepted", connection);
            return connection;
        };
        WebSocketRequest.prototype.reject = function(status, reason, extraHeaders) {
            this._verifyResolution();
            this._resolved = true;
            this.emit("requestResolved", this);
            if (typeof status !== "number") {
                status = 403;
            }
            var response = "HTTP/1.1 " + status + " " + httpStatusDescriptions[status] + "\r\nConnection: close\r\n";
            if (reason) {
                reason = reason.replace(headerSanitizeRegExp, "");
                response += "X-WebSocket-Reject-Reason: " + reason + "\r\n";
            }
            if (extraHeaders) {
                for(var key in extraHeaders){
                    var sanitizedValue = extraHeaders[key].toString().replace(headerSanitizeRegExp, "");
                    var sanitizedKey = key.replace(headerSanitizeRegExp, "");
                    response += sanitizedKey + ": " + sanitizedValue + "\r\n";
                }
            }
            response += "\r\n";
            this.socket.end(response, "ascii");
            this.emit("requestRejected", this);
        };
        WebSocketRequest.prototype._handleSocketCloseBeforeAccept = function() {
            this._socketIsClosing = true;
            this._removeSocketCloseListeners();
        };
        WebSocketRequest.prototype._removeSocketCloseListeners = function() {
            this.socket.removeListener("end", this._socketCloseHandler);
            this.socket.removeListener("close", this._socketCloseHandler);
        };
        WebSocketRequest.prototype._verifyResolution = function() {
            if (this._resolved) {
                throw new Error("WebSocketRequest may only be accepted or rejected one time.");
            }
        };
        module2.exports = WebSocketRequest;
    }
});
// ../../node_modules/websocket/lib/WebSocketServer.js
var require_WebSocketServer = __commonJS({
    "../../node_modules/websocket/lib/WebSocketServer.js": function(exports, module2) {
        var extend2 = require_utils().extend;
        var utils2 = require_utils();
        var util5 = require("util");
        var debug = require_src()("websocket:server");
        var EventEmitter3 = require("events").EventEmitter;
        var WebSocketRequest = require_WebSocketRequest();
        var WebSocketServer = function WebSocketServer2(config3) {
            EventEmitter3.call(this);
            this._handlers = {
                upgrade: this.handleUpgrade.bind(this),
                requestAccepted: this.handleRequestAccepted.bind(this),
                requestResolved: this.handleRequestResolved.bind(this)
            };
            this.connections = [];
            this.pendingRequests = [];
            if (config3) {
                this.mount(config3);
            }
        };
        util5.inherits(WebSocketServer, EventEmitter3);
        WebSocketServer.prototype.mount = function(config3) {
            this.config = {
                // The http server instance to attach to.  Required.
                httpServer: null,
                // 64KiB max frame size.
                maxReceivedFrameSize: 65536,
                // 1MiB max message size, only applicable if
                // assembleFragments is true
                maxReceivedMessageSize: 1048576,
                // Outgoing messages larger than fragmentationThreshold will be
                // split into multiple fragments.
                fragmentOutgoingMessages: true,
                // Outgoing frames are fragmented if they exceed this threshold.
                // Default is 16KiB
                fragmentationThreshold: 16384,
                // If true, the server will automatically send a ping to all
                // clients every 'keepaliveInterval' milliseconds.  The timer is
                // reset on any received data from the client.
                keepalive: true,
                // The interval to send keepalive pings to connected clients if the
                // connection is idle.  Any received data will reset the counter.
                keepaliveInterval: 2e4,
                // If true, the server will consider any connection that has not
                // received any data within the amount of time specified by
                // 'keepaliveGracePeriod' after a keepalive ping has been sent to
                // be dead, and will drop the connection.
                // Ignored if keepalive is false.
                dropConnectionOnKeepaliveTimeout: true,
                // The amount of time to wait after sending a keepalive ping before
                // closing the connection if the connected peer does not respond.
                // Ignored if keepalive is false.
                keepaliveGracePeriod: 1e4,
                // Whether to use native TCP keep-alive instead of WebSockets ping
                // and pong packets.  Native TCP keep-alive sends smaller packets
                // on the wire and so uses bandwidth more efficiently.  This may
                // be more important when talking to mobile devices.
                // If this value is set to true, then these values will be ignored:
                //   keepaliveGracePeriod
                //   dropConnectionOnKeepaliveTimeout
                useNativeKeepalive: false,
                // If true, fragmented messages will be automatically assembled
                // and the full message will be emitted via a 'message' event.
                // If false, each frame will be emitted via a 'frame' event and
                // the application will be responsible for aggregating multiple
                // fragmented frames.  Single-frame messages will emit a 'message'
                // event in addition to the 'frame' event.
                // Most users will want to leave this set to 'true'
                assembleFragments: true,
                // If this is true, websocket connections will be accepted
                // regardless of the path and protocol specified by the client.
                // The protocol accepted will be the first that was requested
                // by the client.  Clients from any origin will be accepted.
                // This should only be used in the simplest of cases.  You should
                // probably leave this set to 'false' and inspect the request
                // object to make sure it's acceptable before accepting it.
                autoAcceptConnections: false,
                // Whether or not the X-Forwarded-For header should be respected.
                // It's important to set this to 'true' when accepting connections
                // from untrusted clients, as a malicious client could spoof its
                // IP address by simply setting this header.  It's meant to be added
                // by a trusted proxy or other intermediary within your own
                // infrastructure.
                // See:  http://en.wikipedia.org/wiki/X-Forwarded-For
                ignoreXForwardedFor: false,
                // If this is true, 'cookie' headers are parsed and exposed as WebSocketRequest.cookies
                parseCookies: true,
                // If this is true, 'sec-websocket-extensions' headers are parsed and exposed as WebSocketRequest.requestedExtensions
                parseExtensions: true,
                // The Nagle Algorithm makes more efficient use of network resources
                // by introducing a small delay before sending small packets so that
                // multiple messages can be batched together before going onto the
                // wire.  This however comes at the cost of latency, so the default
                // is to disable it.  If you don't need low latency and are streaming
                // lots of small messages, you can change this to 'false'
                disableNagleAlgorithm: true,
                // The number of milliseconds to wait after sending a close frame
                // for an acknowledgement to come back before giving up and just
                // closing the socket.
                closeTimeout: 5e3
            };
            extend2(this.config, config3);
            if (this.config.httpServer) {
                if (!Array.isArray(this.config.httpServer)) {
                    this.config.httpServer = [
                        this.config.httpServer
                    ];
                }
                var upgradeHandler = this._handlers.upgrade;
                this.config.httpServer.forEach(function(httpServer) {
                    httpServer.on("upgrade", upgradeHandler);
                });
            } else {
                throw new Error("You must specify an httpServer on which to mount the WebSocket server.");
            }
        };
        WebSocketServer.prototype.unmount = function() {
            var upgradeHandler = this._handlers.upgrade;
            this.config.httpServer.forEach(function(httpServer) {
                httpServer.removeListener("upgrade", upgradeHandler);
            });
        };
        WebSocketServer.prototype.closeAllConnections = function() {
            this.connections.forEach(function(connection) {
                connection.close();
            });
            this.pendingRequests.forEach(function(request) {
                process.nextTick(function() {
                    request.reject(503);
                });
            });
        };
        WebSocketServer.prototype.broadcast = function(data) {
            if (Buffer.isBuffer(data)) {
                this.broadcastBytes(data);
            } else if (typeof data.toString === "function") {
                this.broadcastUTF(data);
            }
        };
        WebSocketServer.prototype.broadcastUTF = function(utfData) {
            this.connections.forEach(function(connection) {
                connection.sendUTF(utfData);
            });
        };
        WebSocketServer.prototype.broadcastBytes = function(binaryData) {
            this.connections.forEach(function(connection) {
                connection.sendBytes(binaryData);
            });
        };
        WebSocketServer.prototype.shutDown = function() {
            this.unmount();
            this.closeAllConnections();
        };
        WebSocketServer.prototype.handleUpgrade = function(request, socket) {
            var self2 = this;
            var wsRequest = new WebSocketRequest(socket, request, this.config);
            try {
                wsRequest.readHandshake();
            } catch (e) {
                wsRequest.reject(e.httpCode ? e.httpCode : 400, e.message, e.headers);
                debug("Invalid handshake: %s", e.message);
                this.emit("upgradeError", e);
                return;
            }
            this.pendingRequests.push(wsRequest);
            wsRequest.once("requestAccepted", this._handlers.requestAccepted);
            wsRequest.once("requestResolved", this._handlers.requestResolved);
            socket.once("close", function() {
                self2._handlers.requestResolved(wsRequest);
            });
            if (!this.config.autoAcceptConnections && utils2.eventEmitterListenerCount(this, "request") > 0) {
                this.emit("request", wsRequest);
            } else if (this.config.autoAcceptConnections) {
                wsRequest.accept(wsRequest.requestedProtocols[0], wsRequest.origin);
            } else {
                wsRequest.reject(404, "No handler is configured to accept the connection.");
            }
        };
        WebSocketServer.prototype.handleRequestAccepted = function(connection) {
            var self2 = this;
            connection.once("close", function(closeReason, description) {
                self2.handleConnectionClose(connection, closeReason, description);
            });
            this.connections.push(connection);
            this.emit("connect", connection);
        };
        WebSocketServer.prototype.handleConnectionClose = function(connection, closeReason, description) {
            var index = this.connections.indexOf(connection);
            if (index !== -1) {
                this.connections.splice(index, 1);
            }
            this.emit("close", connection, closeReason, description);
        };
        WebSocketServer.prototype.handleRequestResolved = function(request) {
            var index = this.pendingRequests.indexOf(request);
            if (index !== -1) {
                this.pendingRequests.splice(index, 1);
            }
        };
        module2.exports = WebSocketServer;
    }
});
// ../../node_modules/websocket/lib/WebSocketClient.js
var require_WebSocketClient = __commonJS({
    "../../node_modules/websocket/lib/WebSocketClient.js": function(exports, module2) {
        var WebSocketClient = function WebSocketClient(config3) {
            EventEmitter3.call(this);
            this.config = {
                // 1MiB max frame size.
                maxReceivedFrameSize: 1048576,
                // 8MiB max message size, only applicable if
                // assembleFragments is true
                maxReceivedMessageSize: 8388608,
                // Outgoing messages larger than fragmentationThreshold will be
                // split into multiple fragments.
                fragmentOutgoingMessages: true,
                // Outgoing frames are fragmented if they exceed this threshold.
                // Default is 16KiB
                fragmentationThreshold: 16384,
                // Which version of the protocol to use for this session.  This
                // option will be removed once the protocol is finalized by the IETF
                // It is only available to ease the transition through the
                // intermediate draft protocol versions.
                // At present, it only affects the name of the Origin header.
                webSocketVersion: 13,
                // If true, fragmented messages will be automatically assembled
                // and the full message will be emitted via a 'message' event.
                // If false, each frame will be emitted via a 'frame' event and
                // the application will be responsible for aggregating multiple
                // fragmented frames.  Single-frame messages will emit a 'message'
                // event in addition to the 'frame' event.
                // Most users will want to leave this set to 'true'
                assembleFragments: true,
                // The Nagle Algorithm makes more efficient use of network resources
                // by introducing a small delay before sending small packets so that
                // multiple messages can be batched together before going onto the
                // wire.  This however comes at the cost of latency, so the default
                // is to disable it.  If you don't need low latency and are streaming
                // lots of small messages, you can change this to 'false'
                disableNagleAlgorithm: true,
                // The number of milliseconds to wait after sending a close frame
                // for an acknowledgement to come back before giving up and just
                // closing the socket.
                closeTimeout: 5e3,
                // Options to pass to https.connect if connecting via TLS
                tlsOptions: {}
            };
            if (config3) {
                var tlsOptions;
                if (config3.tlsOptions) {
                    tlsOptions = config3.tlsOptions;
                    delete config3.tlsOptions;
                } else {
                    tlsOptions = {};
                }
                extend2(this.config, config3);
                extend2(this.config.tlsOptions, tlsOptions);
            }
            this._req = null;
            switch(this.config.webSocketVersion){
                case 8:
                case 13:
                    break;
                default:
                    throw new Error("Requested webSocketVersion is not supported. Allowed values are 8 and 13.");
            }
        };
        var utils2 = require_utils();
        var extend2 = utils2.extend;
        var util5 = require("util");
        var EventEmitter3 = require("events").EventEmitter;
        var http = require("http");
        var https = require("https");
        var url = require("url");
        var crypto6 = require("crypto");
        var WebSocketConnection = require_WebSocketConnection();
        var bufferAllocUnsafe = utils2.bufferAllocUnsafe;
        var protocolSeparators = [
            "(",
            ")",
            "<",
            ">",
            "@",
            ",",
            ";",
            ":",
            "\\",
            '"',
            "/",
            "[",
            "]",
            "?",
            "=",
            "{",
            "}",
            " ",
            String.fromCharCode(9)
        ];
        var excludedTlsOptions = [
            "hostname",
            "port",
            "method",
            "path",
            "headers"
        ];
        util5.inherits(WebSocketClient, EventEmitter3);
        WebSocketClient.prototype.connect = function(requestUrl, protocols, origin, headers, extraRequestOptions) {
            var handleRequestError = function handleRequestError(error2) {
                self2._req = null;
                self2.emit("connectFailed", error2);
            };
            var self2 = this;
            if (typeof protocols === "string") {
                if (protocols.length > 0) {
                    protocols = [
                        protocols
                    ];
                } else {
                    protocols = [];
                }
            }
            if (!_instanceof(protocols, Array)) {
                protocols = [];
            }
            this.protocols = protocols;
            this.origin = origin;
            if (typeof requestUrl === "string") {
                this.url = url.parse(requestUrl);
            } else {
                this.url = requestUrl;
            }
            if (!this.url.protocol) {
                throw new Error("You must specify a full WebSocket URL, including protocol.");
            }
            if (!this.url.host) {
                throw new Error("You must specify a full WebSocket URL, including hostname. Relative URLs are not supported.");
            }
            this.secure = this.url.protocol === "wss:";
            this.protocols.forEach(function(protocol) {
                for(var i2 = 0; i2 < protocol.length; i2++){
                    var charCode = protocol.charCodeAt(i2);
                    var character = protocol.charAt(i2);
                    if (charCode < 33 || charCode > 126 || protocolSeparators.indexOf(character) !== -1) {
                        throw new Error('Protocol list contains invalid character "' + String.fromCharCode(charCode) + '"');
                    }
                }
            });
            var defaultPorts = {
                "ws:": "80",
                "wss:": "443"
            };
            if (!this.url.port) {
                this.url.port = defaultPorts[this.url.protocol];
            }
            var nonce = bufferAllocUnsafe(16);
            for(var i = 0; i < 16; i++){
                nonce[i] = Math.round(Math.random() * 255);
            }
            this.base64nonce = nonce.toString("base64");
            var hostHeaderValue = this.url.hostname;
            if (this.url.protocol === "ws:" && this.url.port !== "80" || this.url.protocol === "wss:" && this.url.port !== "443") {
                hostHeaderValue += ":" + this.url.port;
            }
            var reqHeaders = {};
            if (this.secure && this.config.tlsOptions.hasOwnProperty("headers")) {
                extend2(reqHeaders, this.config.tlsOptions.headers);
            }
            if (headers) {
                extend2(reqHeaders, headers);
            }
            extend2(reqHeaders, {
                "Upgrade": "websocket",
                "Connection": "Upgrade",
                "Sec-WebSocket-Version": this.config.webSocketVersion.toString(10),
                "Sec-WebSocket-Key": this.base64nonce,
                "Host": reqHeaders.Host || hostHeaderValue
            });
            if (this.protocols.length > 0) {
                reqHeaders["Sec-WebSocket-Protocol"] = this.protocols.join(", ");
            }
            if (this.origin) {
                if (this.config.webSocketVersion === 13) {
                    reqHeaders["Origin"] = this.origin;
                } else if (this.config.webSocketVersion === 8) {
                    reqHeaders["Sec-WebSocket-Origin"] = this.origin;
                }
            }
            var pathAndQuery;
            if (this.url.pathname) {
                pathAndQuery = this.url.path;
            } else if (this.url.path) {
                pathAndQuery = "/" + this.url.path;
            } else {
                pathAndQuery = "/";
            }
            var requestOptions = {
                agent: false
            };
            if (extraRequestOptions) {
                extend2(requestOptions, extraRequestOptions);
            }
            extend2(requestOptions, {
                hostname: this.url.hostname,
                port: this.url.port,
                method: "GET",
                path: pathAndQuery,
                headers: reqHeaders
            });
            if (this.secure) {
                var tlsOptions = this.config.tlsOptions;
                for(var key in tlsOptions){
                    if (tlsOptions.hasOwnProperty(key) && excludedTlsOptions.indexOf(key) === -1) {
                        requestOptions[key] = tlsOptions[key];
                    }
                }
            }
            var req = this._req = (this.secure ? https : http).request(requestOptions);
            req.on("upgrade", function handleRequestUpgrade(response, socket, head) {
                self2._req = null;
                req.removeListener("error", handleRequestError);
                self2.socket = socket;
                self2.response = response;
                self2.firstDataChunk = head;
                self2.validateHandshake();
            });
            req.on("error", handleRequestError);
            req.on("response", function(response) {
                self2._req = null;
                if (utils2.eventEmitterListenerCount(self2, "httpResponse") > 0) {
                    self2.emit("httpResponse", response, self2);
                    if (response.socket) {
                        response.socket.end();
                    }
                } else {
                    var headerDumpParts = [];
                    for(var headerName in response.headers){
                        headerDumpParts.push(headerName + ": " + response.headers[headerName]);
                    }
                    self2.failHandshake("Server responded with a non-101 status: " + response.statusCode + " " + response.statusMessage + "\nResponse Headers Follow:\n" + headerDumpParts.join("\n") + "\n");
                }
            });
            req.end();
        };
        WebSocketClient.prototype.validateHandshake = function() {
            var headers = this.response.headers;
            if (this.protocols.length > 0) {
                this.protocol = headers["sec-websocket-protocol"];
                if (this.protocol) {
                    if (this.protocols.indexOf(this.protocol) === -1) {
                        this.failHandshake("Server did not respond with a requested protocol.");
                        return;
                    }
                } else {
                    this.failHandshake("Expected a Sec-WebSocket-Protocol header.");
                    return;
                }
            }
            if (!(headers["connection"] && headers["connection"].toLocaleLowerCase() === "upgrade")) {
                this.failHandshake("Expected a Connection: Upgrade header from the server");
                return;
            }
            if (!(headers["upgrade"] && headers["upgrade"].toLocaleLowerCase() === "websocket")) {
                this.failHandshake("Expected an Upgrade: websocket header from the server");
                return;
            }
            var sha1 = crypto6.createHash("sha1");
            sha1.update(this.base64nonce + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
            var expectedKey = sha1.digest("base64");
            if (!headers["sec-websocket-accept"]) {
                this.failHandshake("Expected Sec-WebSocket-Accept header from server");
                return;
            }
            if (headers["sec-websocket-accept"] !== expectedKey) {
                this.failHandshake("Sec-WebSocket-Accept header from server didn't match expected value of " + expectedKey);
                return;
            }
            this.succeedHandshake();
        };
        WebSocketClient.prototype.failHandshake = function(errorDescription) {
            if (this.socket && this.socket.writable) {
                this.socket.end();
            }
            this.emit("connectFailed", new Error(errorDescription));
        };
        WebSocketClient.prototype.succeedHandshake = function() {
            var connection = new WebSocketConnection(this.socket, [], this.protocol, true, this.config);
            connection.webSocketVersion = this.config.webSocketVersion;
            connection._addSocketEventListeners();
            this.emit("connect", connection);
            if (this.firstDataChunk.length > 0) {
                connection.handleSocketData(this.firstDataChunk);
            }
            this.firstDataChunk = null;
        };
        WebSocketClient.prototype.abort = function() {
            if (this._req) {
                this._req.abort();
            }
        };
        module2.exports = WebSocketClient;
    }
});
// ../../node_modules/websocket/lib/WebSocketRouterRequest.js
var require_WebSocketRouterRequest = __commonJS({
    "../../node_modules/websocket/lib/WebSocketRouterRequest.js": function(exports, module2) {
        var WebSocketRouterRequest = function WebSocketRouterRequest(webSocketRequest, resolvedProtocol) {
            EventEmitter3.call(this);
            this.webSocketRequest = webSocketRequest;
            if (resolvedProtocol === "____no_protocol____") {
                this.protocol = null;
            } else {
                this.protocol = resolvedProtocol;
            }
            this.origin = webSocketRequest.origin;
            this.resource = webSocketRequest.resource;
            this.resourceURL = webSocketRequest.resourceURL;
            this.httpRequest = webSocketRequest.httpRequest;
            this.remoteAddress = webSocketRequest.remoteAddress;
            this.webSocketVersion = webSocketRequest.webSocketVersion;
            this.requestedExtensions = webSocketRequest.requestedExtensions;
            this.cookies = webSocketRequest.cookies;
        };
        var util5 = require("util");
        var EventEmitter3 = require("events").EventEmitter;
        util5.inherits(WebSocketRouterRequest, EventEmitter3);
        WebSocketRouterRequest.prototype.accept = function(origin, cookies) {
            var connection = this.webSocketRequest.accept(this.protocol, origin, cookies);
            this.emit("requestAccepted", connection);
            return connection;
        };
        WebSocketRouterRequest.prototype.reject = function(status, reason, extraHeaders) {
            this.webSocketRequest.reject(status, reason, extraHeaders);
            this.emit("requestRejected", this);
        };
        module2.exports = WebSocketRouterRequest;
    }
});
// ../../node_modules/websocket/lib/WebSocketRouter.js
var require_WebSocketRouter = __commonJS({
    "../../node_modules/websocket/lib/WebSocketRouter.js": function(exports, module2) {
        var WebSocketRouter = function WebSocketRouter(config3) {
            EventEmitter3.call(this);
            this.config = {
                // The WebSocketServer instance to attach to.
                server: null
            };
            if (config3) {
                extend2(this.config, config3);
            }
            this.handlers = [];
            this._requestHandler = this.handleRequest.bind(this);
            if (this.config.server) {
                this.attachServer(this.config.server);
            }
        };
        var extend2 = require_utils().extend;
        var util5 = require("util");
        var EventEmitter3 = require("events").EventEmitter;
        var WebSocketRouterRequest = require_WebSocketRouterRequest();
        util5.inherits(WebSocketRouter, EventEmitter3);
        WebSocketRouter.prototype.attachServer = function(server) {
            if (server) {
                this.server = server;
                this.server.on("request", this._requestHandler);
            } else {
                throw new Error("You must specify a WebSocketServer instance to attach to.");
            }
        };
        WebSocketRouter.prototype.detachServer = function() {
            if (this.server) {
                this.server.removeListener("request", this._requestHandler);
                this.server = null;
            } else {
                throw new Error("Cannot detach from server: not attached.");
            }
        };
        WebSocketRouter.prototype.mount = function(path, protocol, callback) {
            if (!path) {
                throw new Error("You must specify a path for this handler.");
            }
            if (!protocol) {
                protocol = "____no_protocol____";
            }
            if (!callback) {
                throw new Error("You must specify a callback for this handler.");
            }
            path = this.pathToRegExp(path);
            if (!_instanceof(path, RegExp)) {
                throw new Error("Path must be specified as either a string or a RegExp.");
            }
            var pathString = path.toString();
            protocol = protocol.toLocaleLowerCase();
            if (this.findHandlerIndex(pathString, protocol) !== -1) {
                throw new Error("You may only mount one handler per path/protocol combination.");
            }
            this.handlers.push({
                "path": path,
                "pathString": pathString,
                "protocol": protocol,
                "callback": callback
            });
        };
        WebSocketRouter.prototype.unmount = function(path, protocol) {
            var index = this.findHandlerIndex(this.pathToRegExp(path).toString(), protocol);
            if (index !== -1) {
                this.handlers.splice(index, 1);
            } else {
                throw new Error("Unable to find a route matching the specified path and protocol.");
            }
        };
        WebSocketRouter.prototype.findHandlerIndex = function(pathString, protocol) {
            protocol = protocol.toLocaleLowerCase();
            for(var i = 0, len = this.handlers.length; i < len; i++){
                var handler = this.handlers[i];
                if (handler.pathString === pathString && handler.protocol === protocol) {
                    return i;
                }
            }
            return -1;
        };
        WebSocketRouter.prototype.pathToRegExp = function(path) {
            if (typeof path === "string") {
                if (path === "*") {
                    path = /^.*$/;
                } else {
                    path = path.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                    path = new RegExp("^" + path + "$");
                }
            }
            return path;
        };
        WebSocketRouter.prototype.handleRequest = function(request) {
            var requestedProtocols = request.requestedProtocols;
            if (requestedProtocols.length === 0) {
                requestedProtocols = [
                    "____no_protocol____"
                ];
            }
            for(var i = 0; i < requestedProtocols.length; i++){
                var requestedProtocol = requestedProtocols[i].toLocaleLowerCase();
                for(var j = 0, len = this.handlers.length; j < len; j++){
                    var handler = this.handlers[j];
                    if (handler.path.test(request.resourceURL.pathname)) {
                        if (requestedProtocol === handler.protocol || handler.protocol === "*") {
                            var routerRequest = new WebSocketRouterRequest(request, requestedProtocol);
                            handler.callback(routerRequest);
                            return;
                        }
                    }
                }
            }
            request.reject(404, "No handler is available for the given request.");
        };
        module2.exports = WebSocketRouter;
    }
});
// ../../node_modules/is-typedarray/index.js
var require_is_typedarray = __commonJS({
    "../../node_modules/is-typedarray/index.js": function(exports, module2) {
        var isTypedArray = function isTypedArray(arr) {
            return isStrictTypedArray(arr) || isLooseTypedArray(arr);
        };
        var isStrictTypedArray = function isStrictTypedArray(arr) {
            return _instanceof(arr, Int8Array) || _instanceof(arr, Int16Array) || _instanceof(arr, Int32Array) || _instanceof(arr, Uint8Array) || _instanceof(arr, Uint8ClampedArray) || _instanceof(arr, Uint16Array) || _instanceof(arr, Uint32Array) || _instanceof(arr, Float32Array) || _instanceof(arr, Float64Array);
        };
        var isLooseTypedArray = function isLooseTypedArray(arr) {
            return names2[toString.call(arr)];
        };
        module2.exports = isTypedArray;
        isTypedArray.strict = isStrictTypedArray;
        isTypedArray.loose = isLooseTypedArray;
        var toString = Object.prototype.toString;
        var names2 = {
            "[object Int8Array]": true,
            "[object Int16Array]": true,
            "[object Int32Array]": true,
            "[object Uint8Array]": true,
            "[object Uint8ClampedArray]": true,
            "[object Uint16Array]": true,
            "[object Uint32Array]": true,
            "[object Float32Array]": true,
            "[object Float64Array]": true
        };
    }
});
// ../../node_modules/typedarray-to-buffer/index.js
var require_typedarray_to_buffer = __commonJS({
    "../../node_modules/typedarray-to-buffer/index.js": function(exports, module2) {
        var isTypedArray = require_is_typedarray().strict;
        module2.exports = function typedarrayToBuffer(arr) {
            if (isTypedArray(arr)) {
                var buf = Buffer.from(arr.buffer);
                if (arr.byteLength !== arr.buffer.byteLength) {
                    buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
                }
                return buf;
            } else {
                return Buffer.from(arr);
            }
        };
    }
});
// ../../node_modules/yaeti/lib/EventTarget.js
var require_EventTarget = __commonJS({
    "../../node_modules/yaeti/lib/EventTarget.js": function(exports, module2) {
        var _EventTarget = function _EventTarget() {
            if (typeof this.addEventListener === "function") {
                return;
            }
            this._listeners = {};
            this.addEventListener = _addEventListener;
            this.removeEventListener = _removeEventListener;
            this.dispatchEvent = _dispatchEvent;
        };
        var _addEventListener = function _addEventListener(type, newListener) {
            var listenersType, i, listener;
            if (!type || !newListener) {
                return;
            }
            listenersType = this._listeners[type];
            if (listenersType === void 0) {
                this._listeners[type] = listenersType = [];
            }
            for(i = 0; !!(listener = listenersType[i]); i++){
                if (listener === newListener) {
                    return;
                }
            }
            listenersType.push(newListener);
        };
        var _removeEventListener = function _removeEventListener(type, oldListener) {
            var listenersType, i, listener;
            if (!type || !oldListener) {
                return;
            }
            listenersType = this._listeners[type];
            if (listenersType === void 0) {
                return;
            }
            for(i = 0; !!(listener = listenersType[i]); i++){
                if (listener === oldListener) {
                    listenersType.splice(i, 1);
                    break;
                }
            }
            if (listenersType.length === 0) {
                delete this._listeners[type];
            }
        };
        var _dispatchEvent = function _dispatchEvent(event) {
            var type, listenersType, dummyListener, stopImmediatePropagation = false, i, listener;
            if (!event || typeof event.type !== "string") {
                throw new Error("`event` must have a valid `type` property");
            }
            if (event._yaeti) {
                event.target = this;
                event.cancelable = true;
            }
            try {
                event.stopImmediatePropagation = function() {
                    stopImmediatePropagation = true;
                };
            } catch (error2) {}
            type = event.type;
            listenersType = this._listeners[type] || [];
            dummyListener = this["on" + type];
            if (typeof dummyListener === "function") {
                dummyListener.call(this, event);
            }
            for(i = 0; !!(listener = listenersType[i]); i++){
                if (stopImmediatePropagation) {
                    break;
                }
                listener.call(this, event);
            }
            return !event.defaultPrevented;
        };
        module2.exports = _EventTarget;
        Object.defineProperties(_EventTarget.prototype, {
            listeners: {
                get: function get() {
                    return this._listeners;
                }
            }
        });
    }
});
// ../../node_modules/yaeti/lib/Event.js
var require_Event = __commonJS({
    "../../node_modules/yaeti/lib/Event.js": function(exports, module2) {
        var _Event = function _Event(type) {
            this.type = type;
            this.isTrusted = false;
            this._yaeti = true;
        };
        module2.exports = _Event;
    }
});
// ../../node_modules/yaeti/index.js
var require_yaeti = __commonJS({
    "../../node_modules/yaeti/index.js": function(exports, module2) {
        module2.exports = {
            EventTarget: require_EventTarget(),
            Event: require_Event()
        };
    }
});
// ../../node_modules/websocket/lib/W3CWebSocket.js
var require_W3CWebSocket = __commonJS({
    "../../node_modules/websocket/lib/W3CWebSocket.js": function(exports, module2) {
        var W3CWebSocket = function W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {
            yaeti.EventTarget.call(this);
            clientConfig = clientConfig || {};
            clientConfig.assembleFragments = true;
            var self2 = this;
            this._url = url;
            this._readyState = CONNECTING;
            this._protocol = void 0;
            this._extensions = "";
            this._bufferedAmount = 0;
            this._binaryType = "arraybuffer";
            this._connection = void 0;
            this._client = new WebSocketClient(clientConfig);
            this._client.on("connect", function(connection) {
                onConnect.call(self2, connection);
            });
            this._client.on("connectFailed", function() {
                onConnectFailed.call(self2);
            });
            this._client.connect(url, protocols, origin, headers, requestOptions);
        };
        var createCloseEvent = function createCloseEvent(code, reason) {
            var event = new yaeti.Event("close");
            event.code = code;
            event.reason = reason;
            event.wasClean = typeof code === "undefined" || code === 1e3;
            return event;
        };
        var createMessageEvent = function createMessageEvent(data) {
            var event = new yaeti.Event("message");
            event.data = data;
            return event;
        };
        var onConnect = function onConnect(connection) {
            var self2 = this;
            this._readyState = OPEN;
            this._connection = connection;
            this._protocol = connection.protocol;
            this._extensions = connection.extensions;
            this._connection.on("close", function(code, reason) {
                onClose.call(self2, code, reason);
            });
            this._connection.on("message", function(msg) {
                onMessage.call(self2, msg);
            });
            this.dispatchEvent(new yaeti.Event("open"));
        };
        var onConnectFailed = function onConnectFailed() {
            destroy.call(this);
            this._readyState = CLOSED;
            try {
                this.dispatchEvent(new yaeti.Event("error"));
            } finally{
                this.dispatchEvent(createCloseEvent(1006, "connection failed"));
            }
        };
        var onClose = function onClose(code, reason) {
            destroy.call(this);
            this._readyState = CLOSED;
            this.dispatchEvent(createCloseEvent(code, reason || ""));
        };
        var onMessage = function onMessage(message2) {
            if (message2.utf8Data) {
                this.dispatchEvent(createMessageEvent(message2.utf8Data));
            } else if (message2.binaryData) {
                if (this.binaryType === "arraybuffer") {
                    var buffer = message2.binaryData;
                    var arraybuffer = new ArrayBuffer(buffer.length);
                    var view = new Uint8Array(arraybuffer);
                    for(var i = 0, len = buffer.length; i < len; ++i){
                        view[i] = buffer[i];
                    }
                    this.dispatchEvent(createMessageEvent(arraybuffer));
                }
            }
        };
        var destroy = function destroy() {
            this._client.removeAllListeners();
            if (this._connection) {
                this._connection.removeAllListeners();
            }
        };
        var WebSocketClient = require_WebSocketClient();
        var toBuffer = require_typedarray_to_buffer();
        var yaeti = require_yaeti();
        var CONNECTING = 0;
        var OPEN = 1;
        var CLOSING = 2;
        var CLOSED = 3;
        module2.exports = W3CWebSocket;
        Object.defineProperties(W3CWebSocket.prototype, {
            url: {
                get: function get() {
                    return this._url;
                }
            },
            readyState: {
                get: function get() {
                    return this._readyState;
                }
            },
            protocol: {
                get: function get() {
                    return this._protocol;
                }
            },
            extensions: {
                get: function get() {
                    return this._extensions;
                }
            },
            bufferedAmount: {
                get: function get() {
                    return this._bufferedAmount;
                }
            }
        });
        Object.defineProperties(W3CWebSocket.prototype, {
            binaryType: {
                get: function get() {
                    return this._binaryType;
                },
                set: function set(type) {
                    if (type !== "arraybuffer") {
                        throw new SyntaxError('just "arraybuffer" type allowed for "binaryType" attribute');
                    }
                    this._binaryType = type;
                }
            }
        });
        [
            [
                "CONNECTING",
                CONNECTING
            ],
            [
                "OPEN",
                OPEN
            ],
            [
                "CLOSING",
                CLOSING
            ],
            [
                "CLOSED",
                CLOSED
            ]
        ].forEach(function(property) {
            Object.defineProperty(W3CWebSocket.prototype, property[0], {
                get: function get() {
                    return property[1];
                }
            });
        });
        [
            [
                "CONNECTING",
                CONNECTING
            ],
            [
                "OPEN",
                OPEN
            ],
            [
                "CLOSING",
                CLOSING
            ],
            [
                "CLOSED",
                CLOSED
            ]
        ].forEach(function(property) {
            Object.defineProperty(W3CWebSocket, property[0], {
                get: function get() {
                    return property[1];
                }
            });
        });
        W3CWebSocket.prototype.send = function(data) {
            if (this._readyState !== OPEN) {
                throw new Error("cannot call send() while not connected");
            }
            if (typeof data === "string" || _instanceof(data, String)) {
                this._connection.sendUTF(data);
            } else {
                if (_instanceof(data, Buffer)) {
                    this._connection.sendBytes(data);
                } else if (data.byteLength || data.byteLength === 0) {
                    data = toBuffer(data);
                    this._connection.sendBytes(data);
                } else {
                    throw new Error("unknown binary data:", data);
                }
            }
        };
        W3CWebSocket.prototype.close = function(code, reason) {
            switch(this._readyState){
                case CONNECTING:
                    onConnectFailed.call(this);
                    this._client.on("connect", function(connection) {
                        if (code) {
                            connection.close(code, reason);
                        } else {
                            connection.close();
                        }
                    });
                    break;
                case OPEN:
                    this._readyState = CLOSING;
                    if (code) {
                        this._connection.close(code, reason);
                    } else {
                        this._connection.close();
                    }
                    break;
                case CLOSING:
                case CLOSED:
                    break;
            }
        };
    }
});
// ../../node_modules/websocket/lib/Deprecation.js
var require_Deprecation = __commonJS({
    "../../node_modules/websocket/lib/Deprecation.js": function(exports, module2) {
        var Deprecation = {
            disableWarnings: false,
            deprecationWarningMap: {},
            warn: function warn(deprecationName) {
                if (!this.disableWarnings && this.deprecationWarningMap[deprecationName]) {
                    console.warn("DEPRECATION WARNING: " + this.deprecationWarningMap[deprecationName]);
                    this.deprecationWarningMap[deprecationName] = false;
                }
            }
        };
        module2.exports = Deprecation;
    }
});
// ../../node_modules/websocket/package.json
var require_package = __commonJS({
    "../../node_modules/websocket/package.json": function(exports, module2) {
        module2.exports = {
            name: "websocket",
            description: "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
            keywords: [
                "websocket",
                "websockets",
                "socket",
                "networking",
                "comet",
                "push",
                "RFC-6455",
                "realtime",
                "server",
                "client"
            ],
            author: "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",
            contributors: [
                "I\xf1aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
            ],
            version: "1.0.34",
            repository: {
                type: "git",
                url: "https://github.com/theturtle32/WebSocket-Node.git"
            },
            homepage: "https://github.com/theturtle32/WebSocket-Node",
            engines: {
                node: ">=4.0.0"
            },
            dependencies: {
                bufferutil: "^4.0.1",
                debug: "^2.2.0",
                "es5-ext": "^0.10.50",
                "typedarray-to-buffer": "^3.1.5",
                "utf-8-validate": "^5.0.2",
                yaeti: "^0.0.6"
            },
            devDependencies: {
                "buffer-equal": "^1.0.0",
                gulp: "^4.0.2",
                "gulp-jshint": "^2.0.4",
                "jshint-stylish": "^2.2.1",
                jshint: "^2.0.0",
                tape: "^4.9.1"
            },
            config: {
                verbose: false
            },
            scripts: {
                test: "tape test/unit/*.js",
                gulp: "gulp"
            },
            main: "index",
            directories: {
                lib: "./lib"
            },
            browser: "lib/browser.js",
            license: "Apache-2.0"
        };
    }
});
// ../../node_modules/websocket/lib/version.js
var require_version = __commonJS({
    "../../node_modules/websocket/lib/version.js": function(exports, module2) {
        module2.exports = require_package().version;
    }
});
// ../../node_modules/websocket/lib/websocket.js
var require_websocket = __commonJS({
    "../../node_modules/websocket/lib/websocket.js": function(exports, module2) {
        module2.exports = {
            "server": require_WebSocketServer(),
            "client": require_WebSocketClient(),
            "router": require_WebSocketRouter(),
            "frame": require_WebSocketFrame(),
            "request": require_WebSocketRequest(),
            "connection": require_WebSocketConnection(),
            "w3cwebsocket": require_W3CWebSocket(),
            "deprecation": require_Deprecation(),
            "version": require_version()
        };
    }
});
// ../../node_modules/websocket/index.js
var require_websocket2 = __commonJS({
    "../../node_modules/websocket/index.js": function(exports, module2) {
        module2.exports = require_websocket();
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isFunction.js
var require_isFunction = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isFunction.js": function(exports) {
        "use strict";
        var isFunction3 = function isFunction3(value1) {
            return typeof value1 === "function";
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isFunction = void 0;
        exports.isFunction = isFunction3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js
var require_createErrorClass = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/createErrorClass.js": function(exports) {
        "use strict";
        var createErrorClass = function createErrorClass(createImpl) {
            var _super = function _super(instance2) {
                Error.call(instance2);
                instance2.stack = new Error().stack;
            };
            var ctorFunc = createImpl(_super);
            ctorFunc.prototype = Object.create(Error.prototype);
            ctorFunc.prototype.constructor = ctorFunc;
            return ctorFunc;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createErrorClass = void 0;
        exports.createErrorClass = createErrorClass;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js
var require_UnsubscriptionError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/UnsubscriptionError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.UnsubscriptionError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.UnsubscriptionError = createErrorClass_1.createErrorClass(function(_super) {
            return function UnsubscriptionErrorImpl(errors) {
                _super(this);
                this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
                    return i + 1 + ") " + err.toString();
                }).join("\n  ") : "";
                this.name = "UnsubscriptionError";
                this.errors = errors;
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/arrRemove.js
var require_arrRemove = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/arrRemove.js": function(exports) {
        "use strict";
        var arrRemove = function arrRemove(arr, item) {
            if (arr) {
                var index = arr.indexOf(item);
                0 <= index && arr.splice(index, 1);
            }
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.arrRemove = void 0;
        exports.arrRemove = arrRemove;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Subscription.js
var require_Subscription = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Subscription.js": function(exports) {
        "use strict";
        var isSubscription = function isSubscription(value1) {
            return _instanceof(value1, Subscription2) || value1 && "closed" in value1 && isFunction_1.isFunction(value1.remove) && isFunction_1.isFunction(value1.add) && isFunction_1.isFunction(value1.unsubscribe);
        };
        var execFinalizer = function execFinalizer(finalizer) {
            if (isFunction_1.isFunction(finalizer)) {
                finalizer();
            } else {
                finalizer.unsubscribe();
            }
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isSubscription = exports.EMPTY_SUBSCRIPTION = exports.Subscription = void 0;
        var isFunction_1 = require_isFunction();
        var UnsubscriptionError_1 = require_UnsubscriptionError();
        var arrRemove_1 = require_arrRemove();
        var Subscription2 = function() {
            var Subscription3 = function Subscription3(initialTeardown) {
                this.initialTeardown = initialTeardown;
                this.closed = false;
                this._parentage = null;
                this._finalizers = null;
            };
            Subscription3.prototype.unsubscribe = function() {
                var e_1, _a, e_2, _b;
                var errors;
                if (!this.closed) {
                    this.closed = true;
                    var _parentage = this._parentage;
                    if (_parentage) {
                        this._parentage = null;
                        if (Array.isArray(_parentage)) {
                            try {
                                for(var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()){
                                    var parent_1 = _parentage_1_1.value;
                                    parent_1.remove(this);
                                }
                            } catch (e_1_1) {
                                e_1 = {
                                    error: e_1_1
                                };
                            } finally{
                                try {
                                    if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                                } finally{
                                    if (e_1) throw e_1.error;
                                }
                            }
                        } else {
                            _parentage.remove(this);
                        }
                    }
                    var initialFinalizer = this.initialTeardown;
                    if (isFunction_1.isFunction(initialFinalizer)) {
                        try {
                            initialFinalizer();
                        } catch (e) {
                            errors = _instanceof(e, UnsubscriptionError_1.UnsubscriptionError) ? e.errors : [
                                e
                            ];
                        }
                    }
                    var _finalizers = this._finalizers;
                    if (_finalizers) {
                        this._finalizers = null;
                        try {
                            for(var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()){
                                var finalizer = _finalizers_1_1.value;
                                try {
                                    execFinalizer(finalizer);
                                } catch (err) {
                                    errors = errors !== null && errors !== void 0 ? errors : [];
                                    if (_instanceof(err, UnsubscriptionError_1.UnsubscriptionError)) {
                                        errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                                    } else {
                                        errors.push(err);
                                    }
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally{
                            try {
                                if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                            } finally{
                                if (e_2) throw e_2.error;
                            }
                        }
                    }
                    if (errors) {
                        throw new UnsubscriptionError_1.UnsubscriptionError(errors);
                    }
                }
            };
            Subscription3.prototype.add = function(teardown) {
                var _a;
                if (teardown && teardown !== this) {
                    if (this.closed) {
                        execFinalizer(teardown);
                    } else {
                        if (_instanceof(teardown, Subscription3)) {
                            if (teardown.closed || teardown._hasParent(this)) {
                                return;
                            }
                            teardown._addParent(this);
                        }
                        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
                    }
                }
            };
            Subscription3.prototype._hasParent = function(parent) {
                var _parentage = this._parentage;
                return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
            };
            Subscription3.prototype._addParent = function(parent) {
                var _parentage = this._parentage;
                this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [
                    _parentage,
                    parent
                ] : parent;
            };
            Subscription3.prototype._removeParent = function(parent) {
                var _parentage = this._parentage;
                if (_parentage === parent) {
                    this._parentage = null;
                } else if (Array.isArray(_parentage)) {
                    arrRemove_1.arrRemove(_parentage, parent);
                }
            };
            Subscription3.prototype.remove = function(teardown) {
                var _finalizers = this._finalizers;
                _finalizers && arrRemove_1.arrRemove(_finalizers, teardown);
                if (_instanceof(teardown, Subscription3)) {
                    teardown._removeParent(this);
                }
            };
            Subscription3.EMPTY = function() {
                var empty2 = new Subscription3();
                empty2.closed = true;
                return empty2;
            }();
            return Subscription3;
        }();
        exports.Subscription = Subscription2;
        exports.EMPTY_SUBSCRIPTION = Subscription2.EMPTY;
        exports.isSubscription = isSubscription;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/config.js
var require_config = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/config.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.config = void 0;
        exports.config = {
            onUnhandledError: null,
            onStoppedNotification: null,
            Promise: void 0,
            useDeprecatedSynchronousErrorHandling: false,
            useDeprecatedNextContext: false
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js
var require_timeoutProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/timeoutProvider.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.timeoutProvider = void 0;
        exports.timeoutProvider = {
            setTimeout: function setTimeout1(handler, timeout) {
                var args = [];
                for(var _i = 2; _i < arguments.length; _i++){
                    args[_i - 2] = arguments[_i];
                }
                var delegate = exports.timeoutProvider.delegate;
                if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
                    return delegate.setTimeout.apply(delegate, __spreadArray([
                        handler,
                        timeout
                    ], __read(args)));
                }
                return setTimeout.apply(void 0, __spreadArray([
                    handler,
                    timeout
                ], __read(args)));
            },
            clearTimeout: function clearTimeout1(handle2) {
                var delegate = exports.timeoutProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle2);
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js
var require_reportUnhandledError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/reportUnhandledError.js": function(exports) {
        "use strict";
        var reportUnhandledError = function reportUnhandledError(err) {
            timeoutProvider_1.timeoutProvider.setTimeout(function() {
                var onUnhandledError = config_1.config.onUnhandledError;
                if (onUnhandledError) {
                    onUnhandledError(err);
                } else {
                    throw err;
                }
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.reportUnhandledError = void 0;
        var config_1 = require_config();
        var timeoutProvider_1 = require_timeoutProvider();
        exports.reportUnhandledError = reportUnhandledError;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/noop.js
var require_noop = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/noop.js": function(exports) {
        "use strict";
        var noop3 = function noop3() {};
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.noop = void 0;
        exports.noop = noop3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/NotificationFactories.js
var require_NotificationFactories = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/NotificationFactories.js": function(exports) {
        "use strict";
        var errorNotification = function errorNotification(error2) {
            return createNotification("E", void 0, error2);
        };
        var nextNotification = function nextNotification(value1) {
            return createNotification("N", value1, void 0);
        };
        var createNotification = function createNotification(kind, value1, error2) {
            return {
                kind: kind,
                value: value1,
                error: error2
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createNotification = exports.nextNotification = exports.errorNotification = exports.COMPLETE_NOTIFICATION = void 0;
        exports.COMPLETE_NOTIFICATION = function() {
            return createNotification("C", void 0, void 0);
        }();
        exports.errorNotification = errorNotification;
        exports.nextNotification = nextNotification;
        exports.createNotification = createNotification;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/errorContext.js
var require_errorContext = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/errorContext.js": function(exports) {
        "use strict";
        var errorContext = function errorContext(cb) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                var isRoot = !context;
                if (isRoot) {
                    context = {
                        errorThrown: false,
                        error: null
                    };
                }
                cb();
                if (isRoot) {
                    var _a = context, errorThrown = _a.errorThrown, error2 = _a.error;
                    context = null;
                    if (errorThrown) {
                        throw error2;
                    }
                }
            } else {
                cb();
            }
        };
        var captureError = function captureError(err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {
                context.errorThrown = true;
                context.error = err;
            }
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.captureError = exports.errorContext = void 0;
        var config_1 = require_config();
        var context = null;
        exports.errorContext = errorContext;
        exports.captureError = captureError;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Subscriber.js
var require_Subscriber = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Subscriber.js": function(exports) {
        "use strict";
        var bind = function bind(fn, thisArg) {
            return _bind.call(fn, thisArg);
        };
        var handleUnhandledError = function handleUnhandledError(error2) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
                errorContext_1.captureError(error2);
            } else {
                reportUnhandledError_1.reportUnhandledError(error2);
            }
        };
        var defaultErrorHandler = function defaultErrorHandler(err) {
            throw err;
        };
        var handleStoppedNotification = function handleStoppedNotification(notification, subscriber) {
            var onStoppedNotification = config_1.config.onStoppedNotification;
            onStoppedNotification && timeoutProvider_1.timeoutProvider.setTimeout(function() {
                return onStoppedNotification(notification, subscriber);
            });
        };
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = void 0;
        var isFunction_1 = require_isFunction();
        var Subscription_1 = require_Subscription();
        var config_1 = require_config();
        var reportUnhandledError_1 = require_reportUnhandledError();
        var noop_1 = require_noop();
        var NotificationFactories_1 = require_NotificationFactories();
        var timeoutProvider_1 = require_timeoutProvider();
        var errorContext_1 = require_errorContext();
        var Subscriber = function(_super) {
            var Subscriber2 = function Subscriber2(destination) {
                var _this = _super.call(this) || this;
                _this.isStopped = false;
                if (destination) {
                    _this.destination = destination;
                    if (Subscription_1.isSubscription(destination)) {
                        destination.add(_this);
                    }
                } else {
                    _this.destination = exports.EMPTY_OBSERVER;
                }
                return _this;
            };
            __extends(Subscriber2, _super);
            Subscriber2.create = function(next, error2, complete) {
                return new SafeSubscriber(next, error2, complete);
            };
            Subscriber2.prototype.next = function(value1) {
                if (this.isStopped) {
                    handleStoppedNotification(NotificationFactories_1.nextNotification(value1), this);
                } else {
                    this._next(value1);
                }
            };
            Subscriber2.prototype.error = function(err) {
                if (this.isStopped) {
                    handleStoppedNotification(NotificationFactories_1.errorNotification(err), this);
                } else {
                    this.isStopped = true;
                    this._error(err);
                }
            };
            Subscriber2.prototype.complete = function() {
                if (this.isStopped) {
                    handleStoppedNotification(NotificationFactories_1.COMPLETE_NOTIFICATION, this);
                } else {
                    this.isStopped = true;
                    this._complete();
                }
            };
            Subscriber2.prototype.unsubscribe = function() {
                if (!this.closed) {
                    this.isStopped = true;
                    _super.prototype.unsubscribe.call(this);
                    this.destination = null;
                }
            };
            Subscriber2.prototype._next = function(value1) {
                this.destination.next(value1);
            };
            Subscriber2.prototype._error = function(err) {
                try {
                    this.destination.error(err);
                } finally{
                    this.unsubscribe();
                }
            };
            Subscriber2.prototype._complete = function() {
                try {
                    this.destination.complete();
                } finally{
                    this.unsubscribe();
                }
            };
            return Subscriber2;
        }(Subscription_1.Subscription);
        exports.Subscriber = Subscriber;
        var _bind = Function.prototype.bind;
        var ConsumerObserver = function() {
            var ConsumerObserver2 = function ConsumerObserver2(partialObserver) {
                this.partialObserver = partialObserver;
            };
            ConsumerObserver2.prototype.next = function(value1) {
                var partialObserver = this.partialObserver;
                if (partialObserver.next) {
                    try {
                        partialObserver.next(value1);
                    } catch (error2) {
                        handleUnhandledError(error2);
                    }
                }
            };
            ConsumerObserver2.prototype.error = function(err) {
                var partialObserver = this.partialObserver;
                if (partialObserver.error) {
                    try {
                        partialObserver.error(err);
                    } catch (error2) {
                        handleUnhandledError(error2);
                    }
                } else {
                    handleUnhandledError(err);
                }
            };
            ConsumerObserver2.prototype.complete = function() {
                var partialObserver = this.partialObserver;
                if (partialObserver.complete) {
                    try {
                        partialObserver.complete();
                    } catch (error2) {
                        handleUnhandledError(error2);
                    }
                }
            };
            return ConsumerObserver2;
        }();
        var SafeSubscriber = function(_super) {
            var SafeSubscriber2 = function SafeSubscriber2(observerOrNext, error2, complete) {
                var _this = _super.call(this) || this;
                var partialObserver;
                if (isFunction_1.isFunction(observerOrNext) || !observerOrNext) {
                    partialObserver = {
                        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
                        error: error2 !== null && error2 !== void 0 ? error2 : void 0,
                        complete: complete !== null && complete !== void 0 ? complete : void 0
                    };
                } else {
                    var context_1;
                    if (_this && config_1.config.useDeprecatedNextContext) {
                        context_1 = Object.create(observerOrNext);
                        context_1.unsubscribe = function() {
                            return _this.unsubscribe();
                        };
                        partialObserver = {
                            next: observerOrNext.next && bind(observerOrNext.next, context_1),
                            error: observerOrNext.error && bind(observerOrNext.error, context_1),
                            complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
                        };
                    } else {
                        partialObserver = observerOrNext;
                    }
                }
                _this.destination = new ConsumerObserver(partialObserver);
                return _this;
            };
            __extends(SafeSubscriber2, _super);
            return SafeSubscriber2;
        }(Subscriber);
        exports.SafeSubscriber = SafeSubscriber;
        exports.EMPTY_OBSERVER = {
            closed: true,
            next: noop_1.noop,
            error: defaultErrorHandler,
            complete: noop_1.noop
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/symbol/observable.js
var require_observable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/symbol/observable.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.observable = void 0;
        exports.observable = function() {
            return typeof Symbol === "function" && Symbol.observable || "@@observable";
        }();
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/identity.js
var require_identity = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/identity.js": function(exports) {
        "use strict";
        var identity3 = function identity3(x) {
            return x;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.identity = void 0;
        exports.identity = identity3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/pipe.js
var require_pipe = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/pipe.js": function(exports) {
        "use strict";
        var pipe = function pipe() {
            var fns = [];
            for(var _i = 0; _i < arguments.length; _i++){
                fns[_i] = arguments[_i];
            }
            return pipeFromArray(fns);
        };
        var pipeFromArray = function pipeFromArray(fns) {
            if (fns.length === 0) {
                return identity_1.identity;
            }
            if (fns.length === 1) {
                return fns[0];
            }
            return function piped(input) {
                return fns.reduce(function(prev, fn) {
                    return fn(prev);
                }, input);
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.pipeFromArray = exports.pipe = void 0;
        var identity_1 = require_identity();
        exports.pipe = pipe;
        exports.pipeFromArray = pipeFromArray;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Observable.js
var require_Observable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Observable.js": function(exports) {
        "use strict";
        var getPromiseCtor = function getPromiseCtor(promiseCtor) {
            var _a;
            return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config_1.config.Promise) !== null && _a !== void 0 ? _a : Promise;
        };
        var isObserver = function isObserver(value1) {
            return value1 && isFunction_1.isFunction(value1.next) && isFunction_1.isFunction(value1.error) && isFunction_1.isFunction(value1.complete);
        };
        var isSubscriber = function isSubscriber(value1) {
            return value1 && _instanceof(value1, Subscriber_1.Subscriber) || isObserver(value1) && Subscription_1.isSubscription(value1);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Observable = void 0;
        var Subscriber_1 = require_Subscriber();
        var Subscription_1 = require_Subscription();
        var observable_1 = require_observable();
        var pipe_1 = require_pipe();
        var config_1 = require_config();
        var isFunction_1 = require_isFunction();
        var errorContext_1 = require_errorContext();
        var Observable4 = function() {
            var Observable5 = function Observable5(subscribe) {
                if (subscribe) {
                    this._subscribe = subscribe;
                }
            };
            Observable5.prototype.lift = function(operator) {
                var observable = new Observable5();
                observable.source = this;
                observable.operator = operator;
                return observable;
            };
            Observable5.prototype.subscribe = function(observerOrNext, error2, complete) {
                var _this = this;
                var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new Subscriber_1.SafeSubscriber(observerOrNext, error2, complete);
                errorContext_1.errorContext(function() {
                    var _a = _this, operator = _a.operator, source = _a.source;
                    subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
                });
                return subscriber;
            };
            Observable5.prototype._trySubscribe = function(sink) {
                try {
                    return this._subscribe(sink);
                } catch (err) {
                    sink.error(err);
                }
            };
            Observable5.prototype.forEach = function(next, promiseCtor) {
                var _this = this;
                promiseCtor = getPromiseCtor(promiseCtor);
                return new promiseCtor(function(resolve, reject) {
                    var subscriber = new Subscriber_1.SafeSubscriber({
                        next: function next1(value1) {
                            try {
                                next(value1);
                            } catch (err) {
                                reject(err);
                                subscriber.unsubscribe();
                            }
                        },
                        error: reject,
                        complete: resolve
                    });
                    _this.subscribe(subscriber);
                });
            };
            Observable5.prototype._subscribe = function(subscriber) {
                var _a;
                return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
            };
            Observable5.prototype[observable_1.observable] = function() {
                return this;
            };
            Observable5.prototype.pipe = function() {
                var operations = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    operations[_i] = arguments[_i];
                }
                return pipe_1.pipeFromArray(operations)(this);
            };
            Observable5.prototype.toPromise = function(promiseCtor) {
                var _this = this;
                promiseCtor = getPromiseCtor(promiseCtor);
                return new promiseCtor(function(resolve, reject) {
                    var value1;
                    _this.subscribe(function(x) {
                        return value1 = x;
                    }, function(err) {
                        return reject(err);
                    }, function() {
                        return resolve(value1);
                    });
                });
            };
            Observable5.create = function(subscribe) {
                return new Observable5(subscribe);
            };
            return Observable5;
        }();
        exports.Observable = Observable4;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/lift.js
var require_lift = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/lift.js": function(exports) {
        "use strict";
        var hasLift = function hasLift(source) {
            return isFunction_1.isFunction(source === null || source === void 0 ? void 0 : source.lift);
        };
        var operate = function operate(init3) {
            return function(source) {
                if (hasLift(source)) {
                    return source.lift(function(liftedSource) {
                        try {
                            return init3(liftedSource, this);
                        } catch (err) {
                            this.error(err);
                        }
                    });
                }
                throw new TypeError("Unable to lift unknown Observable type");
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.operate = exports.hasLift = void 0;
        var isFunction_1 = require_isFunction();
        exports.hasLift = hasLift;
        exports.operate = operate;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js
var require_OperatorSubscriber = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/OperatorSubscriber.js": function(exports) {
        "use strict";
        var createOperatorSubscriber = function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
            return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
        };
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.OperatorSubscriber = exports.createOperatorSubscriber = void 0;
        var Subscriber_1 = require_Subscriber();
        exports.createOperatorSubscriber = createOperatorSubscriber;
        var OperatorSubscriber = function(_super) {
            var OperatorSubscriber2 = function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
                var _this = _super.call(this, destination) || this;
                _this.onFinalize = onFinalize;
                _this.shouldUnsubscribe = shouldUnsubscribe;
                _this._next = onNext ? function(value1) {
                    try {
                        onNext(value1);
                    } catch (err) {
                        destination.error(err);
                    }
                } : _super.prototype._next;
                _this._error = onError ? function(err) {
                    try {
                        onError(err);
                    } catch (err2) {
                        destination.error(err2);
                    } finally{
                        this.unsubscribe();
                    }
                } : _super.prototype._error;
                _this._complete = onComplete ? function() {
                    try {
                        onComplete();
                    } catch (err) {
                        destination.error(err);
                    } finally{
                        this.unsubscribe();
                    }
                } : _super.prototype._complete;
                return _this;
            };
            __extends(OperatorSubscriber2, _super);
            OperatorSubscriber2.prototype.unsubscribe = function() {
                var _a;
                if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
                    var closed_1 = this.closed;
                    _super.prototype.unsubscribe.call(this);
                    !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
                }
            };
            return OperatorSubscriber2;
        }(Subscriber_1.Subscriber);
        exports.OperatorSubscriber = OperatorSubscriber;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/refCount.js
var require_refCount = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/refCount.js": function(exports) {
        "use strict";
        var refCount3 = function refCount3() {
            return lift_1.operate(function(source, subscriber) {
                var connection = null;
                source._refCount++;
                var refCounter = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
                    if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                        connection = null;
                        return;
                    }
                    var sharedConnection = source._connection;
                    var conn = connection;
                    connection = null;
                    if (sharedConnection && (!conn || sharedConnection === conn)) {
                        sharedConnection.unsubscribe();
                    }
                    subscriber.unsubscribe();
                });
                source.subscribe(refCounter);
                if (!refCounter.closed) {
                    connection = source.connect();
                }
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.refCount = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.refCount = refCount3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js
var require_ConnectableObservable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/ConnectableObservable.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ConnectableObservable = void 0;
        var Observable_1 = require_Observable();
        var Subscription_1 = require_Subscription();
        var refCount_1 = require_refCount();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var lift_1 = require_lift();
        var ConnectableObservable = function(_super) {
            var ConnectableObservable2 = function ConnectableObservable2(source, subjectFactory) {
                var _this = _super.call(this) || this;
                _this.source = source;
                _this.subjectFactory = subjectFactory;
                _this._subject = null;
                _this._refCount = 0;
                _this._connection = null;
                if (lift_1.hasLift(source)) {
                    _this.lift = source.lift;
                }
                return _this;
            };
            __extends(ConnectableObservable2, _super);
            ConnectableObservable2.prototype._subscribe = function(subscriber) {
                return this.getSubject().subscribe(subscriber);
            };
            ConnectableObservable2.prototype.getSubject = function() {
                var subject = this._subject;
                if (!subject || subject.isStopped) {
                    this._subject = this.subjectFactory();
                }
                return this._subject;
            };
            ConnectableObservable2.prototype._teardown = function() {
                this._refCount = 0;
                var _connection = this._connection;
                this._subject = this._connection = null;
                _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
            };
            ConnectableObservable2.prototype.connect = function() {
                var _this = this;
                var connection = this._connection;
                if (!connection) {
                    connection = this._connection = new Subscription_1.Subscription();
                    var subject_1 = this.getSubject();
                    connection.add(this.source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subject_1, void 0, function() {
                        _this._teardown();
                        subject_1.complete();
                    }, function(err) {
                        _this._teardown();
                        subject_1.error(err);
                    }, function() {
                        return _this._teardown();
                    })));
                    if (connection.closed) {
                        this._connection = null;
                        connection = Subscription_1.Subscription.EMPTY;
                    }
                }
                return connection;
            };
            ConnectableObservable2.prototype.refCount = function() {
                return refCount_1.refCount()(this);
            };
            return ConnectableObservable2;
        }(Observable_1.Observable);
        exports.ConnectableObservable = ConnectableObservable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js
var require_performanceTimestampProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/performanceTimestampProvider.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.performanceTimestampProvider = void 0;
        exports.performanceTimestampProvider = {
            now: function now() {
                return (exports.performanceTimestampProvider.delegate || performance).now();
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js
var require_animationFrameProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/animationFrameProvider.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.animationFrameProvider = void 0;
        var Subscription_1 = require_Subscription();
        exports.animationFrameProvider = {
            schedule: function schedule(callback) {
                var request = requestAnimationFrame;
                var cancel = cancelAnimationFrame;
                var delegate = exports.animationFrameProvider.delegate;
                if (delegate) {
                    request = delegate.requestAnimationFrame;
                    cancel = delegate.cancelAnimationFrame;
                }
                var handle2 = request(function(timestamp) {
                    cancel = void 0;
                    callback(timestamp);
                });
                return new Subscription_1.Subscription(function() {
                    return cancel === null || cancel === void 0 ? void 0 : cancel(handle2);
                });
            },
            requestAnimationFrame: function requestAnimationFrame1() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    args[_i] = arguments[_i];
                }
                var delegate = exports.animationFrameProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
            },
            cancelAnimationFrame: function cancelAnimationFrame1() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    args[_i] = arguments[_i];
                }
                var delegate = exports.animationFrameProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js
var require_animationFrames = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/dom/animationFrames.js": function(exports) {
        "use strict";
        var animationFrames = function animationFrames(timestampProvider) {
            return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
        };
        var animationFramesFactory = function animationFramesFactory(timestampProvider) {
            return new Observable_1.Observable(function(subscriber) {
                var provider = timestampProvider || performanceTimestampProvider_1.performanceTimestampProvider;
                var start = provider.now();
                var id2 = 0;
                var run = function run1() {
                    if (!subscriber.closed) {
                        id2 = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function(timestamp) {
                            id2 = 0;
                            var now = provider.now();
                            subscriber.next({
                                timestamp: timestampProvider ? now : timestamp,
                                elapsed: now - start
                            });
                            run();
                        });
                    }
                };
                run();
                return function() {
                    if (id2) {
                        animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id2);
                    }
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.animationFrames = void 0;
        var Observable_1 = require_Observable();
        var performanceTimestampProvider_1 = require_performanceTimestampProvider();
        var animationFrameProvider_1 = require_animationFrameProvider();
        exports.animationFrames = animationFrames;
        var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js
var require_ObjectUnsubscribedError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/ObjectUnsubscribedError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ObjectUnsubscribedError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.ObjectUnsubscribedError = createErrorClass_1.createErrorClass(function(_super) {
            return function ObjectUnsubscribedErrorImpl() {
                _super(this);
                this.name = "ObjectUnsubscribedError";
                this.message = "object unsubscribed";
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Subject.js
var require_Subject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Subject.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AnonymousSubject = exports.Subject = void 0;
        var Observable_1 = require_Observable();
        var Subscription_1 = require_Subscription();
        var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
        var arrRemove_1 = require_arrRemove();
        var errorContext_1 = require_errorContext();
        var Subject = function(_super) {
            var Subject2 = function Subject2() {
                var _this = _super.call(this) || this;
                _this.closed = false;
                _this.currentObservers = null;
                _this.observers = [];
                _this.isStopped = false;
                _this.hasError = false;
                _this.thrownError = null;
                return _this;
            };
            __extends(Subject2, _super);
            Subject2.prototype.lift = function(operator) {
                var subject = new AnonymousSubject(this, this);
                subject.operator = operator;
                return subject;
            };
            Subject2.prototype._throwIfClosed = function() {
                if (this.closed) {
                    throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
                }
            };
            Subject2.prototype.next = function(value1) {
                var _this = this;
                errorContext_1.errorContext(function() {
                    var e_1, _a;
                    _this._throwIfClosed();
                    if (!_this.isStopped) {
                        if (!_this.currentObservers) {
                            _this.currentObservers = Array.from(_this.observers);
                        }
                        try {
                            for(var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()){
                                var observer = _c.value;
                                observer.next(value1);
                            }
                        } catch (e_1_1) {
                            e_1 = {
                                error: e_1_1
                            };
                        } finally{
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            } finally{
                                if (e_1) throw e_1.error;
                            }
                        }
                    }
                });
            };
            Subject2.prototype.error = function(err) {
                var _this = this;
                errorContext_1.errorContext(function() {
                    _this._throwIfClosed();
                    if (!_this.isStopped) {
                        _this.hasError = _this.isStopped = true;
                        _this.thrownError = err;
                        var observers = _this.observers;
                        while(observers.length){
                            observers.shift().error(err);
                        }
                    }
                });
            };
            Subject2.prototype.complete = function() {
                var _this = this;
                errorContext_1.errorContext(function() {
                    _this._throwIfClosed();
                    if (!_this.isStopped) {
                        _this.isStopped = true;
                        var observers = _this.observers;
                        while(observers.length){
                            observers.shift().complete();
                        }
                    }
                });
            };
            Subject2.prototype.unsubscribe = function() {
                this.isStopped = this.closed = true;
                this.observers = this.currentObservers = null;
            };
            Object.defineProperty(Subject2.prototype, "observed", {
                get: function get() {
                    var _a;
                    return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
                },
                enumerable: false,
                configurable: true
            });
            Subject2.prototype._trySubscribe = function(subscriber) {
                this._throwIfClosed();
                return _super.prototype._trySubscribe.call(this, subscriber);
            };
            Subject2.prototype._subscribe = function(subscriber) {
                this._throwIfClosed();
                this._checkFinalizedStatuses(subscriber);
                return this._innerSubscribe(subscriber);
            };
            Subject2.prototype._innerSubscribe = function(subscriber) {
                var _this = this;
                var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
                if (hasError || isStopped) {
                    return Subscription_1.EMPTY_SUBSCRIPTION;
                }
                this.currentObservers = null;
                observers.push(subscriber);
                return new Subscription_1.Subscription(function() {
                    _this.currentObservers = null;
                    arrRemove_1.arrRemove(observers, subscriber);
                });
            };
            Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
                var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
                if (hasError) {
                    subscriber.error(thrownError);
                } else if (isStopped) {
                    subscriber.complete();
                }
            };
            Subject2.prototype.asObservable = function() {
                var observable = new Observable_1.Observable();
                observable.source = this;
                return observable;
            };
            Subject2.create = function(destination, source) {
                return new AnonymousSubject(destination, source);
            };
            return Subject2;
        }(Observable_1.Observable);
        exports.Subject = Subject;
        var AnonymousSubject = function(_super) {
            var AnonymousSubject2 = function AnonymousSubject2(destination, source) {
                var _this = _super.call(this) || this;
                _this.destination = destination;
                _this.source = source;
                return _this;
            };
            __extends(AnonymousSubject2, _super);
            AnonymousSubject2.prototype.next = function(value1) {
                var _a, _b;
                (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value1);
            };
            AnonymousSubject2.prototype.error = function(err) {
                var _a, _b;
                (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
            };
            AnonymousSubject2.prototype.complete = function() {
                var _a, _b;
                (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
            };
            AnonymousSubject2.prototype._subscribe = function(subscriber) {
                var _a, _b;
                return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : Subscription_1.EMPTY_SUBSCRIPTION;
            };
            return AnonymousSubject2;
        }(Subject);
        exports.AnonymousSubject = AnonymousSubject;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js
var require_BehaviorSubject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/BehaviorSubject.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.BehaviorSubject = void 0;
        var Subject_1 = require_Subject();
        var BehaviorSubject5 = function(_super) {
            var BehaviorSubject6 = function BehaviorSubject6(_value) {
                var _this = _super.call(this) || this;
                _this._value = _value;
                return _this;
            };
            __extends(BehaviorSubject6, _super);
            Object.defineProperty(BehaviorSubject6.prototype, "value", {
                get: function get() {
                    return this.getValue();
                },
                enumerable: false,
                configurable: true
            });
            BehaviorSubject6.prototype._subscribe = function(subscriber) {
                var subscription = _super.prototype._subscribe.call(this, subscriber);
                !subscription.closed && subscriber.next(this._value);
                return subscription;
            };
            BehaviorSubject6.prototype.getValue = function() {
                var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
                if (hasError) {
                    throw thrownError;
                }
                this._throwIfClosed();
                return _value;
            };
            BehaviorSubject6.prototype.next = function(value1) {
                _super.prototype.next.call(this, this._value = value1);
            };
            return BehaviorSubject6;
        }(Subject_1.Subject);
        exports.BehaviorSubject = BehaviorSubject5;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js
var require_dateTimestampProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/dateTimestampProvider.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.dateTimestampProvider = void 0;
        exports.dateTimestampProvider = {
            now: function now() {
                return (exports.dateTimestampProvider.delegate || Date).now();
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/ReplaySubject.js
var require_ReplaySubject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/ReplaySubject.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ReplaySubject = void 0;
        var Subject_1 = require_Subject();
        var dateTimestampProvider_1 = require_dateTimestampProvider();
        var ReplaySubject = function(_super) {
            var ReplaySubject2 = function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
                if (_bufferSize === void 0) {
                    _bufferSize = Infinity;
                }
                if (_windowTime === void 0) {
                    _windowTime = Infinity;
                }
                if (_timestampProvider === void 0) {
                    _timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
                }
                var _this = _super.call(this) || this;
                _this._bufferSize = _bufferSize;
                _this._windowTime = _windowTime;
                _this._timestampProvider = _timestampProvider;
                _this._buffer = [];
                _this._infiniteTimeWindow = true;
                _this._infiniteTimeWindow = _windowTime === Infinity;
                _this._bufferSize = Math.max(1, _bufferSize);
                _this._windowTime = Math.max(1, _windowTime);
                return _this;
            };
            __extends(ReplaySubject2, _super);
            ReplaySubject2.prototype.next = function(value1) {
                var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
                if (!isStopped) {
                    _buffer.push(value1);
                    !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
                }
                this._trimBuffer();
                _super.prototype.next.call(this, value1);
            };
            ReplaySubject2.prototype._subscribe = function(subscriber) {
                this._throwIfClosed();
                this._trimBuffer();
                var subscription = this._innerSubscribe(subscriber);
                var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
                var copy2 = _buffer.slice();
                for(var i = 0; i < copy2.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2){
                    subscriber.next(copy2[i]);
                }
                this._checkFinalizedStatuses(subscriber);
                return subscription;
            };
            ReplaySubject2.prototype._trimBuffer = function() {
                var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
                var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
                _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
                if (!_infiniteTimeWindow) {
                    var now = _timestampProvider.now();
                    var last = 0;
                    for(var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2){
                        last = i;
                    }
                    last && _buffer.splice(0, last + 1);
                }
            };
            return ReplaySubject2;
        }(Subject_1.Subject);
        exports.ReplaySubject = ReplaySubject;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/AsyncSubject.js
var require_AsyncSubject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/AsyncSubject.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AsyncSubject = void 0;
        var Subject_1 = require_Subject();
        var AsyncSubject = function(_super) {
            var AsyncSubject2 = function AsyncSubject2() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this._value = null;
                _this._hasValue = false;
                _this._isComplete = false;
                return _this;
            };
            __extends(AsyncSubject2, _super);
            AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
                var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
                if (hasError) {
                    subscriber.error(thrownError);
                } else if (isStopped || _isComplete) {
                    _hasValue && subscriber.next(_value);
                    subscriber.complete();
                }
            };
            AsyncSubject2.prototype.next = function(value1) {
                if (!this.isStopped) {
                    this._value = value1;
                    this._hasValue = true;
                }
            };
            AsyncSubject2.prototype.complete = function() {
                var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
                if (!_isComplete) {
                    this._isComplete = true;
                    _hasValue && _super.prototype.next.call(this, _value);
                    _super.prototype.complete.call(this);
                }
            };
            return AsyncSubject2;
        }(Subject_1.Subject);
        exports.AsyncSubject = AsyncSubject;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/Action.js
var require_Action = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/Action.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Action = void 0;
        var Subscription_1 = require_Subscription();
        var Action = function(_super) {
            var Action2 = function Action2(scheduler, work) {
                return _super.call(this) || this;
            };
            __extends(Action2, _super);
            Action2.prototype.schedule = function(state2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                return this;
            };
            return Action2;
        }(Subscription_1.Subscription);
        exports.Action = Action;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js
var require_intervalProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/intervalProvider.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.intervalProvider = void 0;
        exports.intervalProvider = {
            setInterval: function setInterval1(handler, timeout) {
                var args = [];
                for(var _i = 2; _i < arguments.length; _i++){
                    args[_i - 2] = arguments[_i];
                }
                var delegate = exports.intervalProvider.delegate;
                if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
                    return delegate.setInterval.apply(delegate, __spreadArray([
                        handler,
                        timeout
                    ], __read(args)));
                }
                return setInterval.apply(void 0, __spreadArray([
                    handler,
                    timeout
                ], __read(args)));
            },
            clearInterval: function clearInterval1(handle2) {
                var delegate = exports.intervalProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle2);
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js
var require_AsyncAction = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AsyncAction.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AsyncAction = void 0;
        var Action_1 = require_Action();
        var intervalProvider_1 = require_intervalProvider();
        var arrRemove_1 = require_arrRemove();
        var AsyncAction = function(_super) {
            var AsyncAction2 = function AsyncAction2(scheduler, work) {
                var _this = _super.call(this, scheduler, work) || this;
                _this.scheduler = scheduler;
                _this.work = work;
                _this.pending = false;
                return _this;
            };
            __extends(AsyncAction2, _super);
            AsyncAction2.prototype.schedule = function(state2, delay) {
                var _a;
                if (delay === void 0) {
                    delay = 0;
                }
                if (this.closed) {
                    return this;
                }
                this.state = state2;
                var id2 = this.id;
                var scheduler = this.scheduler;
                if (id2 != null) {
                    this.id = this.recycleAsyncId(scheduler, id2, delay);
                }
                this.pending = true;
                this.delay = delay;
                this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
                return this;
            };
            AsyncAction2.prototype.requestAsyncId = function(scheduler, _id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                return intervalProvider_1.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
            };
            AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay != null && this.delay === delay && this.pending === false) {
                    return id2;
                }
                if (id2 != null) {
                    intervalProvider_1.intervalProvider.clearInterval(id2);
                }
                return void 0;
            };
            AsyncAction2.prototype.execute = function(state2, delay) {
                if (this.closed) {
                    return new Error("executing a cancelled action");
                }
                this.pending = false;
                var error2 = this._execute(state2, delay);
                if (error2) {
                    return error2;
                } else if (this.pending === false && this.id != null) {
                    this.id = this.recycleAsyncId(this.scheduler, this.id, null);
                }
            };
            AsyncAction2.prototype._execute = function(state2, _delay) {
                var errored = false;
                var errorValue;
                try {
                    this.work(state2);
                } catch (e) {
                    errored = true;
                    errorValue = e ? e : new Error("Scheduled action threw falsy error");
                }
                if (errored) {
                    this.unsubscribe();
                    return errorValue;
                }
            };
            AsyncAction2.prototype.unsubscribe = function() {
                if (!this.closed) {
                    var _a = this, id2 = _a.id, scheduler = _a.scheduler;
                    var actions = scheduler.actions;
                    this.work = this.state = this.scheduler = null;
                    this.pending = false;
                    arrRemove_1.arrRemove(actions, this);
                    if (id2 != null) {
                        this.id = this.recycleAsyncId(scheduler, id2, null);
                    }
                    this.delay = null;
                    _super.prototype.unsubscribe.call(this);
                }
            };
            return AsyncAction2;
        }(Action_1.Action);
        exports.AsyncAction = AsyncAction;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/Immediate.js
var require_Immediate = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/Immediate.js": function(exports) {
        "use strict";
        var findAndClearHandle = function findAndClearHandle(handle2) {
            if (handle2 in activeHandles) {
                delete activeHandles[handle2];
                return true;
            }
            return false;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TestTools = exports.Immediate = void 0;
        var nextHandle = 1;
        var resolved;
        var activeHandles = {};
        exports.Immediate = {
            setImmediate: function setImmediate(cb) {
                var handle2 = nextHandle++;
                activeHandles[handle2] = true;
                if (!resolved) {
                    resolved = Promise.resolve();
                }
                resolved.then(function() {
                    return findAndClearHandle(handle2) && cb();
                });
                return handle2;
            },
            clearImmediate: function clearImmediate(handle2) {
                findAndClearHandle(handle2);
            }
        };
        exports.TestTools = {
            pending: function pending() {
                return Object.keys(activeHandles).length;
            }
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js
var require_immediateProvider = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/immediateProvider.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.immediateProvider = void 0;
        var Immediate_1 = require_Immediate();
        var setImmediate = Immediate_1.Immediate.setImmediate;
        var clearImmediate = Immediate_1.Immediate.clearImmediate;
        exports.immediateProvider = {
            setImmediate: function setImmediate1() {
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    args[_i] = arguments[_i];
                }
                var delegate = exports.immediateProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
            },
            clearImmediate: function clearImmediate1(handle2) {
                var delegate = exports.immediateProvider.delegate;
                return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle2);
            },
            delegate: void 0
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js
var require_AsapAction = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AsapAction.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AsapAction = void 0;
        var AsyncAction_1 = require_AsyncAction();
        var immediateProvider_1 = require_immediateProvider();
        var AsapAction = function(_super) {
            var AsapAction2 = function AsapAction2(scheduler, work) {
                var _this = _super.call(this, scheduler, work) || this;
                _this.scheduler = scheduler;
                _this.work = work;
                return _this;
            };
            __extends(AsapAction2, _super);
            AsapAction2.prototype.requestAsyncId = function(scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay !== null && delay > 0) {
                    return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay);
                }
                scheduler.actions.push(this);
                return scheduler._scheduled || (scheduler._scheduled = immediateProvider_1.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
            };
            AsapAction2.prototype.recycleAsyncId = function(scheduler, id2, delay) {
                var _a;
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay != null ? delay > 0 : this.delay > 0) {
                    return _super.prototype.recycleAsyncId.call(this, scheduler, id2, delay);
                }
                var actions = scheduler.actions;
                if (id2 != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id2) {
                    immediateProvider_1.immediateProvider.clearImmediate(id2);
                    scheduler._scheduled = void 0;
                }
                return void 0;
            };
            return AsapAction2;
        }(AsyncAction_1.AsyncAction);
        exports.AsapAction = AsapAction;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Scheduler.js
var require_Scheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Scheduler.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Scheduler = void 0;
        var dateTimestampProvider_1 = require_dateTimestampProvider();
        var Scheduler = function() {
            function Scheduler2(schedulerActionCtor, now) {
                if (now === void 0) {
                    now = Scheduler2.now;
                }
                this.schedulerActionCtor = schedulerActionCtor;
                this.now = now;
            }
            Scheduler2.prototype.schedule = function(work, delay, state2) {
                if (delay === void 0) {
                    delay = 0;
                }
                return new this.schedulerActionCtor(this, work).schedule(state2, delay);
            };
            Scheduler2.now = dateTimestampProvider_1.dateTimestampProvider.now;
            return Scheduler2;
        }();
        exports.Scheduler = Scheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js
var require_AsyncScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AsyncScheduler.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AsyncScheduler = void 0;
        var Scheduler_1 = require_Scheduler();
        var AsyncScheduler = function(_super) {
            var AsyncScheduler2 = function AsyncScheduler2(SchedulerAction, now) {
                if (now === void 0) {
                    now = Scheduler_1.Scheduler.now;
                }
                var _this = _super.call(this, SchedulerAction, now) || this;
                _this.actions = [];
                _this._active = false;
                return _this;
            };
            __extends(AsyncScheduler2, _super);
            AsyncScheduler2.prototype.flush = function(action) {
                var actions = this.actions;
                if (this._active) {
                    actions.push(action);
                    return;
                }
                var error2;
                this._active = true;
                do {
                    if (error2 = action.execute(action.state, action.delay)) {
                        break;
                    }
                }while (action = actions.shift());
                this._active = false;
                if (error2) {
                    while(action = actions.shift()){
                        action.unsubscribe();
                    }
                    throw error2;
                }
            };
            return AsyncScheduler2;
        }(Scheduler_1.Scheduler);
        exports.AsyncScheduler = AsyncScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js
var require_AsapScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AsapScheduler.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AsapScheduler = void 0;
        var AsyncScheduler_1 = require_AsyncScheduler();
        var AsapScheduler = function(_super) {
            var AsapScheduler2 = function AsapScheduler2() {
                return _super !== null && _super.apply(this, arguments) || this;
            };
            __extends(AsapScheduler2, _super);
            AsapScheduler2.prototype.flush = function(action) {
                this._active = true;
                var flushId = this._scheduled;
                this._scheduled = void 0;
                var actions = this.actions;
                var error2;
                action = action || actions.shift();
                do {
                    if (error2 = action.execute(action.state, action.delay)) {
                        break;
                    }
                }while ((action = actions[0]) && action.id === flushId && actions.shift());
                this._active = false;
                if (error2) {
                    while((action = actions[0]) && action.id === flushId && actions.shift()){
                        action.unsubscribe();
                    }
                    throw error2;
                }
            };
            return AsapScheduler2;
        }(AsyncScheduler_1.AsyncScheduler);
        exports.AsapScheduler = AsapScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/asap.js
var require_asap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/asap.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.asap = exports.asapScheduler = void 0;
        var AsapAction_1 = require_AsapAction();
        var AsapScheduler_1 = require_AsapScheduler();
        exports.asapScheduler = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);
        exports.asap = exports.asapScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/async.js
var require_async = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/async.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.async = exports.asyncScheduler = void 0;
        var AsyncAction_1 = require_AsyncAction();
        var AsyncScheduler_1 = require_AsyncScheduler();
        exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
        exports.async = exports.asyncScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js
var require_QueueAction = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/QueueAction.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.QueueAction = void 0;
        var AsyncAction_1 = require_AsyncAction();
        var QueueAction = function(_super) {
            var QueueAction2 = function QueueAction2(scheduler, work) {
                var _this = _super.call(this, scheduler, work) || this;
                _this.scheduler = scheduler;
                _this.work = work;
                return _this;
            };
            __extends(QueueAction2, _super);
            QueueAction2.prototype.schedule = function(state2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay > 0) {
                    return _super.prototype.schedule.call(this, state2, delay);
                }
                this.delay = delay;
                this.state = state2;
                this.scheduler.flush(this);
                return this;
            };
            QueueAction2.prototype.execute = function(state2, delay) {
                return delay > 0 || this.closed ? _super.prototype.execute.call(this, state2, delay) : this._execute(state2, delay);
            };
            QueueAction2.prototype.requestAsyncId = function(scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay != null && delay > 0 || delay == null && this.delay > 0) {
                    return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay);
                }
                scheduler.flush(this);
                return 0;
            };
            return QueueAction2;
        }(AsyncAction_1.AsyncAction);
        exports.QueueAction = QueueAction;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js
var require_QueueScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/QueueScheduler.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.QueueScheduler = void 0;
        var AsyncScheduler_1 = require_AsyncScheduler();
        var QueueScheduler = function(_super) {
            var QueueScheduler2 = function QueueScheduler2() {
                return _super !== null && _super.apply(this, arguments) || this;
            };
            __extends(QueueScheduler2, _super);
            return QueueScheduler2;
        }(AsyncScheduler_1.AsyncScheduler);
        exports.QueueScheduler = QueueScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/queue.js
var require_queue = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/queue.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.queue = exports.queueScheduler = void 0;
        var QueueAction_1 = require_QueueAction();
        var QueueScheduler_1 = require_QueueScheduler();
        exports.queueScheduler = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
        exports.queue = exports.queueScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js
var require_AnimationFrameAction = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameAction.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AnimationFrameAction = void 0;
        var AsyncAction_1 = require_AsyncAction();
        var animationFrameProvider_1 = require_animationFrameProvider();
        var AnimationFrameAction = function(_super) {
            var AnimationFrameAction2 = function AnimationFrameAction2(scheduler, work) {
                var _this = _super.call(this, scheduler, work) || this;
                _this.scheduler = scheduler;
                _this.work = work;
                return _this;
            };
            __extends(AnimationFrameAction2, _super);
            AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay !== null && delay > 0) {
                    return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay);
                }
                scheduler.actions.push(this);
                return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider_1.animationFrameProvider.requestAnimationFrame(function() {
                    return scheduler.flush(void 0);
                }));
            };
            AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id2, delay) {
                var _a;
                if (delay === void 0) {
                    delay = 0;
                }
                if (delay != null ? delay > 0 : this.delay > 0) {
                    return _super.prototype.recycleAsyncId.call(this, scheduler, id2, delay);
                }
                var actions = scheduler.actions;
                if (id2 != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id2) {
                    animationFrameProvider_1.animationFrameProvider.cancelAnimationFrame(id2);
                    scheduler._scheduled = void 0;
                }
                return void 0;
            };
            return AnimationFrameAction2;
        }(AsyncAction_1.AsyncAction);
        exports.AnimationFrameAction = AnimationFrameAction;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js
var require_AnimationFrameScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/AnimationFrameScheduler.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AnimationFrameScheduler = void 0;
        var AsyncScheduler_1 = require_AsyncScheduler();
        var AnimationFrameScheduler = function(_super) {
            var AnimationFrameScheduler2 = function AnimationFrameScheduler2() {
                return _super !== null && _super.apply(this, arguments) || this;
            };
            __extends(AnimationFrameScheduler2, _super);
            AnimationFrameScheduler2.prototype.flush = function(action) {
                this._active = true;
                var flushId = this._scheduled;
                this._scheduled = void 0;
                var actions = this.actions;
                var error2;
                action = action || actions.shift();
                do {
                    if (error2 = action.execute(action.state, action.delay)) {
                        break;
                    }
                }while ((action = actions[0]) && action.id === flushId && actions.shift());
                this._active = false;
                if (error2) {
                    while((action = actions[0]) && action.id === flushId && actions.shift()){
                        action.unsubscribe();
                    }
                    throw error2;
                }
            };
            return AnimationFrameScheduler2;
        }(AsyncScheduler_1.AsyncScheduler);
        exports.AnimationFrameScheduler = AnimationFrameScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js
var require_animationFrame = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/animationFrame.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.animationFrame = exports.animationFrameScheduler = void 0;
        var AnimationFrameAction_1 = require_AnimationFrameAction();
        var AnimationFrameScheduler_1 = require_AnimationFrameScheduler();
        exports.animationFrameScheduler = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);
        exports.animationFrame = exports.animationFrameScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js
var require_VirtualTimeScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduler/VirtualTimeScheduler.js": function(exports) {
        "use strict";
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function extendStatics1(d, b) {
                extendStatics = Object.setPrototypeOf || _instanceof({
                    __proto__: []
                }, Array) && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                var __ = function __() {
                    this.constructor = d;
                };
                if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                extendStatics(d, b);
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.VirtualAction = exports.VirtualTimeScheduler = void 0;
        var AsyncAction_1 = require_AsyncAction();
        var Subscription_1 = require_Subscription();
        var AsyncScheduler_1 = require_AsyncScheduler();
        var VirtualTimeScheduler = function(_super) {
            var VirtualTimeScheduler2 = function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
                if (schedulerActionCtor === void 0) {
                    schedulerActionCtor = VirtualAction;
                }
                if (maxFrames === void 0) {
                    maxFrames = Infinity;
                }
                var _this = _super.call(this, schedulerActionCtor, function() {
                    return _this.frame;
                }) || this;
                _this.maxFrames = maxFrames;
                _this.frame = 0;
                _this.index = -1;
                return _this;
            };
            __extends(VirtualTimeScheduler2, _super);
            VirtualTimeScheduler2.prototype.flush = function() {
                var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
                var error2;
                var action;
                while((action = actions[0]) && action.delay <= maxFrames){
                    actions.shift();
                    this.frame = action.delay;
                    if (error2 = action.execute(action.state, action.delay)) {
                        break;
                    }
                }
                if (error2) {
                    while(action = actions.shift()){
                        action.unsubscribe();
                    }
                    throw error2;
                }
            };
            VirtualTimeScheduler2.frameTimeFactor = 10;
            return VirtualTimeScheduler2;
        }(AsyncScheduler_1.AsyncScheduler);
        exports.VirtualTimeScheduler = VirtualTimeScheduler;
        var VirtualAction = function(_super) {
            var VirtualAction2 = function VirtualAction2(scheduler, work, index) {
                if (index === void 0) {
                    index = scheduler.index += 1;
                }
                var _this = _super.call(this, scheduler, work) || this;
                _this.scheduler = scheduler;
                _this.work = work;
                _this.index = index;
                _this.active = true;
                _this.index = scheduler.index = index;
                return _this;
            };
            __extends(VirtualAction2, _super);
            VirtualAction2.prototype.schedule = function(state2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                if (Number.isFinite(delay)) {
                    if (!this.id) {
                        return _super.prototype.schedule.call(this, state2, delay);
                    }
                    this.active = false;
                    var action = new VirtualAction2(this.scheduler, this.work);
                    this.add(action);
                    return action.schedule(state2, delay);
                } else {
                    return Subscription_1.Subscription.EMPTY;
                }
            };
            VirtualAction2.prototype.requestAsyncId = function(scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                this.delay = scheduler.frame + delay;
                var actions = scheduler.actions;
                actions.push(this);
                actions.sort(VirtualAction2.sortActions);
                return 1;
            };
            VirtualAction2.prototype.recycleAsyncId = function(scheduler, id2, delay) {
                if (delay === void 0) {
                    delay = 0;
                }
                return void 0;
            };
            VirtualAction2.prototype._execute = function(state2, delay) {
                if (this.active === true) {
                    return _super.prototype._execute.call(this, state2, delay);
                }
            };
            VirtualAction2.sortActions = function(a, b) {
                if (a.delay === b.delay) {
                    if (a.index === b.index) {
                        return 0;
                    } else if (a.index > b.index) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (a.delay > b.delay) {
                    return 1;
                } else {
                    return -1;
                }
            };
            return VirtualAction2;
        }(AsyncAction_1.AsyncAction);
        exports.VirtualAction = VirtualAction;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/empty.js
var require_empty = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/empty.js": function(exports) {
        "use strict";
        var empty2 = function empty2(scheduler) {
            return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
        };
        var emptyScheduled = function emptyScheduled(scheduler) {
            return new Observable_1.Observable(function(subscriber) {
                return scheduler.schedule(function() {
                    return subscriber.complete();
                });
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.empty = exports.EMPTY = void 0;
        var Observable_1 = require_Observable();
        exports.EMPTY = new Observable_1.Observable(function(subscriber) {
            return subscriber.complete();
        });
        exports.empty = empty2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isScheduler.js
var require_isScheduler = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isScheduler.js": function(exports) {
        "use strict";
        var isScheduler = function isScheduler(value1) {
            return value1 && isFunction_1.isFunction(value1.schedule);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isScheduler = void 0;
        var isFunction_1 = require_isFunction();
        exports.isScheduler = isScheduler;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/args.js
var require_args = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/args.js": function(exports) {
        "use strict";
        var last = function last(arr) {
            return arr[arr.length - 1];
        };
        var popResultSelector = function popResultSelector(args) {
            return isFunction_1.isFunction(last(args)) ? args.pop() : void 0;
        };
        var popScheduler = function popScheduler(args) {
            return isScheduler_1.isScheduler(last(args)) ? args.pop() : void 0;
        };
        var popNumber = function popNumber(args, defaultValue) {
            return typeof last(args) === "number" ? args.pop() : defaultValue;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.popNumber = exports.popScheduler = exports.popResultSelector = void 0;
        var isFunction_1 = require_isFunction();
        var isScheduler_1 = require_isScheduler();
        exports.popResultSelector = popResultSelector;
        exports.popScheduler = popScheduler;
        exports.popNumber = popNumber;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js
var require_isArrayLike = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isArrayLike.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isArrayLike = void 0;
        exports.isArrayLike = function(x) {
            return x && typeof x.length === "number" && typeof x !== "function";
        };
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isPromise.js
var require_isPromise = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isPromise.js": function(exports) {
        "use strict";
        var isPromise = function isPromise(value1) {
            return isFunction_1.isFunction(value1 === null || value1 === void 0 ? void 0 : value1.then);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isPromise = void 0;
        var isFunction_1 = require_isFunction();
        exports.isPromise = isPromise;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js
var require_isInteropObservable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isInteropObservable.js": function(exports) {
        "use strict";
        var isInteropObservable = function isInteropObservable(input) {
            return isFunction_1.isFunction(input[observable_1.observable]);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isInteropObservable = void 0;
        var observable_1 = require_observable();
        var isFunction_1 = require_isFunction();
        exports.isInteropObservable = isInteropObservable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js
var require_isAsyncIterable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isAsyncIterable.js": function(exports) {
        "use strict";
        var isAsyncIterable = function isAsyncIterable(obj) {
            return Symbol.asyncIterator && isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isAsyncIterable = void 0;
        var isFunction_1 = require_isFunction();
        exports.isAsyncIterable = isAsyncIterable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js
var require_throwUnobservableError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/throwUnobservableError.js": function(exports) {
        "use strict";
        var createInvalidObservableTypeError = function createInvalidObservableTypeError(input) {
            return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createInvalidObservableTypeError = void 0;
        exports.createInvalidObservableTypeError = createInvalidObservableTypeError;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/symbol/iterator.js
var require_iterator = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/symbol/iterator.js": function(exports) {
        "use strict";
        var getSymbolIterator = function getSymbolIterator() {
            if (typeof Symbol !== "function" || !Symbol.iterator) {
                return "@@iterator";
            }
            return Symbol.iterator;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.iterator = exports.getSymbolIterator = void 0;
        exports.getSymbolIterator = getSymbolIterator;
        exports.iterator = getSymbolIterator();
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isIterable.js
var require_isIterable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isIterable.js": function(exports) {
        "use strict";
        var isIterable = function isIterable(input) {
            return isFunction_1.isFunction(input === null || input === void 0 ? void 0 : input[iterator_1.iterator]);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isIterable = void 0;
        var iterator_1 = require_iterator();
        var isFunction_1 = require_isFunction();
        exports.isIterable = isIterable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js
var require_isReadableStreamLike = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isReadableStreamLike.js": function(exports) {
        "use strict";
        var readableStreamLikeToAsyncGenerator = function readableStreamLikeToAsyncGenerator(readableStream) {
            return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
                var reader, _a, value1, done;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            reader = readableStream.getReader();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([
                                1,
                                ,
                                9,
                                10
                            ]);
                            _b.label = 2;
                        case 2:
                            if (false) return [
                                3,
                                8
                            ];
                            return [
                                4,
                                __await(reader.read())
                            ];
                        case 3:
                            _a = _b.sent(), value1 = _a.value, done = _a.done;
                            if (!done) return [
                                3,
                                5
                            ];
                            return [
                                4,
                                __await(void 0)
                            ];
                        case 4:
                            return [
                                2,
                                _b.sent()
                            ];
                        case 5:
                            return [
                                4,
                                __await(value1)
                            ];
                        case 6:
                            return [
                                4,
                                _b.sent()
                            ];
                        case 7:
                            _b.sent();
                            return [
                                3,
                                2
                            ];
                        case 8:
                            return [
                                3,
                                10
                            ];
                        case 9:
                            reader.releaseLock();
                            return [
                                7
                            ];
                        case 10:
                            return [
                                2
                            ];
                    }
                });
            });
        };
        var isReadableStreamLike = function isReadableStreamLike(obj) {
            return isFunction_1.isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
        };
        var __generator = exports && exports.__generator || function(thisArg, body) {
            var verb = function verb(n) {
                return function(v) {
                    return step([
                        n,
                        v
                    ]);
                };
            };
            var step = function step(op) {
                if (f) throw new TypeError("Generator is already executing.");
                while(_23)try {
                    if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
                    if (y = 0, t2) op = [
                        op[0] & 2,
                        t2.value
                    ];
                    switch(op[0]){
                        case 0:
                        case 1:
                            t2 = op;
                            break;
                        case 4:
                            _23.label++;
                            return {
                                value: op[1],
                                done: false
                            };
                        case 5:
                            _23.label++;
                            y = op[1];
                            op = [
                                0
                            ];
                            continue;
                        case 7:
                            op = _23.ops.pop();
                            _23.trys.pop();
                            continue;
                        default:
                            if (!(t2 = _23.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _23 = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                                _23.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _23.label < t2[1]) {
                                _23.label = t2[1];
                                t2 = op;
                                break;
                            }
                            if (t2 && _23.label < t2[2]) {
                                _23.label = t2[2];
                                _23.ops.push(op);
                                break;
                            }
                            if (t2[2]) _23.ops.pop();
                            _23.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _23);
                } catch (e) {
                    op = [
                        6,
                        e
                    ];
                    y = 0;
                } finally{
                    f = t2 = 0;
                }
                if (op[0] & 5) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: true
                };
            };
            var _23 = {
                label: 0,
                sent: function sent() {
                    if (t2[0] & 1) throw t2[1];
                    return t2[1];
                },
                trys: [],
                ops: []
            }, f, y, t2, g;
            return g = {
                next: verb(0),
                "throw": verb(1),
                "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                return this;
            }), g;
        };
        var __await = exports && exports.__await || function(v) {
            return _instanceof(this, __await) ? (this.v = v, this) : new __await(v);
        };
        var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
            var verb = function verb(n) {
                if (g[n]) i[n] = function(v) {
                    return new Promise(function(a, b) {
                        q.push([
                            n,
                            v,
                            a,
                            b
                        ]) > 1 || resume(n, v);
                    });
                };
            };
            var resume = function resume(n, v) {
                try {
                    step(g[n](v));
                } catch (e) {
                    settle(q[0][3], e);
                }
            };
            var step = function step(r) {
                _instanceof(r.value, __await) ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            };
            var fulfill = function fulfill(value1) {
                resume("next", value1);
            };
            var reject = function reject(value1) {
                resume("throw", value1);
            };
            var settle = function settle(f, v) {
                if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            };
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []), i, q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                return this;
            }, i;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isReadableStreamLike = exports.readableStreamLikeToAsyncGenerator = void 0;
        var isFunction_1 = require_isFunction();
        exports.readableStreamLikeToAsyncGenerator = readableStreamLikeToAsyncGenerator;
        exports.isReadableStreamLike = isReadableStreamLike;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js
var require_innerFrom = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/innerFrom.js": function(exports) {
        "use strict";
        var innerFrom = function innerFrom(input) {
            if (_instanceof(input, Observable_1.Observable)) {
                return input;
            }
            if (input != null) {
                if (isInteropObservable_1.isInteropObservable(input)) {
                    return fromInteropObservable(input);
                }
                if (isArrayLike_1.isArrayLike(input)) {
                    return fromArrayLike(input);
                }
                if (isPromise_1.isPromise(input)) {
                    return fromPromise(input);
                }
                if (isAsyncIterable_1.isAsyncIterable(input)) {
                    return fromAsyncIterable(input);
                }
                if (isIterable_1.isIterable(input)) {
                    return fromIterable(input);
                }
                if (isReadableStreamLike_1.isReadableStreamLike(input)) {
                    return fromReadableStreamLike(input);
                }
            }
            throw throwUnobservableError_1.createInvalidObservableTypeError(input);
        };
        var fromInteropObservable = function fromInteropObservable(obj) {
            return new Observable_1.Observable(function(subscriber) {
                var obs = obj[observable_1.observable]();
                if (isFunction_1.isFunction(obs.subscribe)) {
                    return obs.subscribe(subscriber);
                }
                throw new TypeError("Provided object does not correctly implement Symbol.observable");
            });
        };
        var fromArrayLike = function fromArrayLike(array) {
            return new Observable_1.Observable(function(subscriber) {
                for(var i = 0; i < array.length && !subscriber.closed; i++){
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            });
        };
        var fromPromise = function fromPromise(promise) {
            return new Observable_1.Observable(function(subscriber) {
                promise.then(function(value1) {
                    if (!subscriber.closed) {
                        subscriber.next(value1);
                        subscriber.complete();
                    }
                }, function(err) {
                    return subscriber.error(err);
                }).then(null, reportUnhandledError_1.reportUnhandledError);
            });
        };
        var fromIterable = function fromIterable(iterable) {
            return new Observable_1.Observable(function(subscriber) {
                var e_1, _a;
                try {
                    for(var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()){
                        var value1 = iterable_1_1.value;
                        subscriber.next(value1);
                        if (subscriber.closed) {
                            return;
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
                subscriber.complete();
            });
        };
        var fromAsyncIterable = function fromAsyncIterable(asyncIterable) {
            return new Observable_1.Observable(function(subscriber) {
                process2(asyncIterable, subscriber).catch(function(err) {
                    return subscriber.error(err);
                });
            });
        };
        var fromReadableStreamLike = function fromReadableStreamLike(readableStream) {
            return fromAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(readableStream));
        };
        var process2 = function process2(asyncIterable, subscriber) {
            var asyncIterable_1, asyncIterable_1_1;
            var e_2, _a;
            return __awaiter(this, void 0, void 0, function() {
                var value1, e_2_1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _b.trys.push([
                                0,
                                5,
                                6,
                                11
                            ]);
                            asyncIterable_1 = __asyncValues(asyncIterable);
                            _b.label = 1;
                        case 1:
                            return [
                                4,
                                asyncIterable_1.next()
                            ];
                        case 2:
                            if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [
                                3,
                                4
                            ];
                            value1 = asyncIterable_1_1.value;
                            subscriber.next(value1);
                            if (subscriber.closed) {
                                return [
                                    2
                                ];
                            }
                            _b.label = 3;
                        case 3:
                            return [
                                3,
                                1
                            ];
                        case 4:
                            return [
                                3,
                                11
                            ];
                        case 5:
                            e_2_1 = _b.sent();
                            e_2 = {
                                error: e_2_1
                            };
                            return [
                                3,
                                11
                            ];
                        case 6:
                            _b.trys.push([
                                6,
                                ,
                                9,
                                10
                            ]);
                            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [
                                3,
                                8
                            ];
                            return [
                                4,
                                _a.call(asyncIterable_1)
                            ];
                        case 7:
                            _b.sent();
                            _b.label = 8;
                        case 8:
                            return [
                                3,
                                10
                            ];
                        case 9:
                            if (e_2) throw e_2.error;
                            return [
                                7
                            ];
                        case 10:
                            return [
                                7
                            ];
                        case 11:
                            subscriber.complete();
                            return [
                                2
                            ];
                    }
                });
            });
        };
        var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
            var adopt = function adopt(value1) {
                return _instanceof(value1, P) ? value1 : new P(function(resolve) {
                    resolve(value1);
                });
            };
            return new (P || (P = Promise))(function(resolve, reject) {
                var fulfilled = function fulfilled(value1) {
                    try {
                        step(generator.next(value1));
                    } catch (e) {
                        reject(e);
                    }
                };
                var rejected = function rejected(value1) {
                    try {
                        step(generator["throw"](value1));
                    } catch (e) {
                        reject(e);
                    }
                };
                var step = function step(result) {
                    result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                };
                step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
        };
        var __generator = exports && exports.__generator || function(thisArg, body) {
            var verb = function verb(n) {
                return function(v) {
                    return step([
                        n,
                        v
                    ]);
                };
            };
            var step = function step(op) {
                if (f) throw new TypeError("Generator is already executing.");
                while(_23)try {
                    if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
                    if (y = 0, t2) op = [
                        op[0] & 2,
                        t2.value
                    ];
                    switch(op[0]){
                        case 0:
                        case 1:
                            t2 = op;
                            break;
                        case 4:
                            _23.label++;
                            return {
                                value: op[1],
                                done: false
                            };
                        case 5:
                            _23.label++;
                            y = op[1];
                            op = [
                                0
                            ];
                            continue;
                        case 7:
                            op = _23.ops.pop();
                            _23.trys.pop();
                            continue;
                        default:
                            if (!(t2 = _23.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _23 = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                                _23.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _23.label < t2[1]) {
                                _23.label = t2[1];
                                t2 = op;
                                break;
                            }
                            if (t2 && _23.label < t2[2]) {
                                _23.label = t2[2];
                                _23.ops.push(op);
                                break;
                            }
                            if (t2[2]) _23.ops.pop();
                            _23.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _23);
                } catch (e) {
                    op = [
                        6,
                        e
                    ];
                    y = 0;
                } finally{
                    f = t2 = 0;
                }
                if (op[0] & 5) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: true
                };
            };
            var _23 = {
                label: 0,
                sent: function sent() {
                    if (t2[0] & 1) throw t2[1];
                    return t2[1];
                },
                trys: [],
                ops: []
            }, f, y, t2, g;
            return g = {
                next: verb(0),
                "throw": verb(1),
                "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                return this;
            }), g;
        };
        var __asyncValues = exports && exports.__asyncValues || function(o) {
            var verb = function verb(n) {
                i[n] = o[n] && function(v) {
                    return new Promise(function(resolve, reject) {
                        v = o[n](v), settle(resolve, reject, v.done, v.value);
                    });
                };
            };
            var settle = function settle(resolve, reject, d, v) {
                Promise.resolve(v).then(function(v3) {
                    resolve({
                        value: v3,
                        done: d
                    });
                }, reject);
            };
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator], i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
                return this;
            }, i);
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromReadableStreamLike = exports.fromAsyncIterable = exports.fromIterable = exports.fromPromise = exports.fromArrayLike = exports.fromInteropObservable = exports.innerFrom = void 0;
        var isArrayLike_1 = require_isArrayLike();
        var isPromise_1 = require_isPromise();
        var Observable_1 = require_Observable();
        var isInteropObservable_1 = require_isInteropObservable();
        var isAsyncIterable_1 = require_isAsyncIterable();
        var throwUnobservableError_1 = require_throwUnobservableError();
        var isIterable_1 = require_isIterable();
        var isReadableStreamLike_1 = require_isReadableStreamLike();
        var isFunction_1 = require_isFunction();
        var reportUnhandledError_1 = require_reportUnhandledError();
        var observable_1 = require_observable();
        exports.innerFrom = innerFrom;
        exports.fromInteropObservable = fromInteropObservable;
        exports.fromArrayLike = fromArrayLike;
        exports.fromPromise = fromPromise;
        exports.fromIterable = fromIterable;
        exports.fromAsyncIterable = fromAsyncIterable;
        exports.fromReadableStreamLike = fromReadableStreamLike;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js
var require_executeSchedule = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/executeSchedule.js": function(exports) {
        "use strict";
        var executeSchedule = function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
            if (delay === void 0) {
                delay = 0;
            }
            if (repeat === void 0) {
                repeat = false;
            }
            var scheduleSubscription = scheduler.schedule(function() {
                work();
                if (repeat) {
                    parentSubscription.add(this.schedule(null, delay));
                } else {
                    this.unsubscribe();
                }
            }, delay);
            parentSubscription.add(scheduleSubscription);
            if (!repeat) {
                return scheduleSubscription;
            }
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.executeSchedule = void 0;
        exports.executeSchedule = executeSchedule;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/observeOn.js
var require_observeOn = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/observeOn.js": function(exports) {
        "use strict";
        var observeOn = function observeOn(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return lift_1.operate(function(source, subscriber) {
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        return subscriber.next(value1);
                    }, delay);
                }, function() {
                    return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        return subscriber.complete();
                    }, delay);
                }, function(err) {
                    return executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        return subscriber.error(err);
                    }, delay);
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.observeOn = void 0;
        var executeSchedule_1 = require_executeSchedule();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.observeOn = observeOn;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js
var require_subscribeOn = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/subscribeOn.js": function(exports) {
        "use strict";
        var subscribeOn = function subscribeOn(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return lift_1.operate(function(source, subscriber) {
                subscriber.add(scheduler.schedule(function() {
                    return source.subscribe(subscriber);
                }, delay));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.subscribeOn = void 0;
        var lift_1 = require_lift();
        exports.subscribeOn = subscribeOn;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js
var require_scheduleObservable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleObservable.js": function(exports) {
        "use strict";
        var scheduleObservable = function scheduleObservable(input, scheduler) {
            return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduleObservable = void 0;
        var innerFrom_1 = require_innerFrom();
        var observeOn_1 = require_observeOn();
        var subscribeOn_1 = require_subscribeOn();
        exports.scheduleObservable = scheduleObservable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js
var require_schedulePromise = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/schedulePromise.js": function(exports) {
        "use strict";
        var schedulePromise = function schedulePromise(input, scheduler) {
            return innerFrom_1.innerFrom(input).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.schedulePromise = void 0;
        var innerFrom_1 = require_innerFrom();
        var observeOn_1 = require_observeOn();
        var subscribeOn_1 = require_subscribeOn();
        exports.schedulePromise = schedulePromise;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js
var require_scheduleArray = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleArray.js": function(exports) {
        "use strict";
        var scheduleArray = function scheduleArray(input, scheduler) {
            return new Observable_1.Observable(function(subscriber) {
                var i = 0;
                return scheduler.schedule(function() {
                    if (i === input.length) {
                        subscriber.complete();
                    } else {
                        subscriber.next(input[i++]);
                        if (!subscriber.closed) {
                            this.schedule();
                        }
                    }
                });
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduleArray = void 0;
        var Observable_1 = require_Observable();
        exports.scheduleArray = scheduleArray;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js
var require_scheduleIterable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleIterable.js": function(exports) {
        "use strict";
        var scheduleIterable = function scheduleIterable(input, scheduler) {
            return new Observable_1.Observable(function(subscriber) {
                var iterator;
                executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                    iterator = input[iterator_1.iterator]();
                    executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        var _a;
                        var value1;
                        var done;
                        try {
                            _a = iterator.next(), value1 = _a.value, done = _a.done;
                        } catch (err) {
                            subscriber.error(err);
                            return;
                        }
                        if (done) {
                            subscriber.complete();
                        } else {
                            subscriber.next(value1);
                        }
                    }, 0, true);
                });
                return function() {
                    return isFunction_1.isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduleIterable = void 0;
        var Observable_1 = require_Observable();
        var iterator_1 = require_iterator();
        var isFunction_1 = require_isFunction();
        var executeSchedule_1 = require_executeSchedule();
        exports.scheduleIterable = scheduleIterable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js
var require_scheduleAsyncIterable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleAsyncIterable.js": function(exports) {
        "use strict";
        var scheduleAsyncIterable = function scheduleAsyncIterable(input, scheduler) {
            if (!input) {
                throw new Error("Iterable cannot be null");
            }
            return new Observable_1.Observable(function(subscriber) {
                executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                    var iterator = input[Symbol.asyncIterator]();
                    executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        iterator.next().then(function(result) {
                            if (result.done) {
                                subscriber.complete();
                            } else {
                                subscriber.next(result.value);
                            }
                        });
                    }, 0, true);
                });
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduleAsyncIterable = void 0;
        var Observable_1 = require_Observable();
        var executeSchedule_1 = require_executeSchedule();
        exports.scheduleAsyncIterable = scheduleAsyncIterable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js
var require_scheduleReadableStreamLike = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduleReadableStreamLike.js": function(exports) {
        "use strict";
        var scheduleReadableStreamLike = function scheduleReadableStreamLike(input, scheduler) {
            return scheduleAsyncIterable_1.scheduleAsyncIterable(isReadableStreamLike_1.readableStreamLikeToAsyncGenerator(input), scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduleReadableStreamLike = void 0;
        var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
        var isReadableStreamLike_1 = require_isReadableStreamLike();
        exports.scheduleReadableStreamLike = scheduleReadableStreamLike;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js
var require_scheduled = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/scheduled/scheduled.js": function(exports) {
        "use strict";
        var scheduled = function scheduled(input, scheduler) {
            if (input != null) {
                if (isInteropObservable_1.isInteropObservable(input)) {
                    return scheduleObservable_1.scheduleObservable(input, scheduler);
                }
                if (isArrayLike_1.isArrayLike(input)) {
                    return scheduleArray_1.scheduleArray(input, scheduler);
                }
                if (isPromise_1.isPromise(input)) {
                    return schedulePromise_1.schedulePromise(input, scheduler);
                }
                if (isAsyncIterable_1.isAsyncIterable(input)) {
                    return scheduleAsyncIterable_1.scheduleAsyncIterable(input, scheduler);
                }
                if (isIterable_1.isIterable(input)) {
                    return scheduleIterable_1.scheduleIterable(input, scheduler);
                }
                if (isReadableStreamLike_1.isReadableStreamLike(input)) {
                    return scheduleReadableStreamLike_1.scheduleReadableStreamLike(input, scheduler);
                }
            }
            throw throwUnobservableError_1.createInvalidObservableTypeError(input);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scheduled = void 0;
        var scheduleObservable_1 = require_scheduleObservable();
        var schedulePromise_1 = require_schedulePromise();
        var scheduleArray_1 = require_scheduleArray();
        var scheduleIterable_1 = require_scheduleIterable();
        var scheduleAsyncIterable_1 = require_scheduleAsyncIterable();
        var isInteropObservable_1 = require_isInteropObservable();
        var isPromise_1 = require_isPromise();
        var isArrayLike_1 = require_isArrayLike();
        var isIterable_1 = require_isIterable();
        var isAsyncIterable_1 = require_isAsyncIterable();
        var throwUnobservableError_1 = require_throwUnobservableError();
        var isReadableStreamLike_1 = require_isReadableStreamLike();
        var scheduleReadableStreamLike_1 = require_scheduleReadableStreamLike();
        exports.scheduled = scheduled;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/from.js
var require_from = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/from.js": function(exports) {
        "use strict";
        var from3 = function from3(input, scheduler) {
            return scheduler ? scheduled_1.scheduled(input, scheduler) : innerFrom_1.innerFrom(input);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.from = void 0;
        var scheduled_1 = require_scheduled();
        var innerFrom_1 = require_innerFrom();
        exports.from = from3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/of.js
var require_of = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/of.js": function(exports) {
        "use strict";
        var of60 = function of60() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(args);
            return from_1.from(args, scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.of = void 0;
        var args_1 = require_args();
        var from_1 = require_from();
        exports.of = of60;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/throwError.js
var require_throwError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/throwError.js": function(exports) {
        "use strict";
        var throwError = function throwError(errorOrErrorFactory, scheduler) {
            var errorFactory = isFunction_1.isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function errorFactory() {
                return errorOrErrorFactory;
            };
            var init3 = function init3(subscriber) {
                return subscriber.error(errorFactory());
            };
            return new Observable_1.Observable(scheduler ? function(subscriber) {
                return scheduler.schedule(init3, 0, subscriber);
            } : init3);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.throwError = void 0;
        var Observable_1 = require_Observable();
        var isFunction_1 = require_isFunction();
        exports.throwError = throwError;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/Notification.js
var require_Notification = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/Notification.js": function(exports) {
        "use strict";
        var observeNotification = function observeNotification(notification, observer) {
            var _a, _b, _c;
            var _d = notification, kind = _d.kind, value1 = _d.value, error2 = _d.error;
            if (typeof kind !== "string") {
                throw new TypeError('Invalid notification, missing "kind"');
            }
            kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value1) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error2) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.observeNotification = exports.Notification = exports.NotificationKind = void 0;
        var empty_1 = require_empty();
        var of_1 = require_of();
        var throwError_1 = require_throwError();
        var isFunction_1 = require_isFunction();
        var NotificationKind;
        (function(NotificationKind2) {
            NotificationKind2["NEXT"] = "N";
            NotificationKind2["ERROR"] = "E";
            NotificationKind2["COMPLETE"] = "C";
        })(NotificationKind = exports.NotificationKind || (exports.NotificationKind = {}));
        var Notification = function() {
            var Notification2 = function Notification2(kind, value1, error2) {
                this.kind = kind;
                this.value = value1;
                this.error = error2;
                this.hasValue = kind === "N";
            };
            Notification2.prototype.observe = function(observer) {
                return observeNotification(this, observer);
            };
            Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
                var _a = this, kind = _a.kind, value1 = _a.value, error2 = _a.error;
                return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value1) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error2) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
            };
            Notification2.prototype.accept = function(nextOrObserver, error2, complete) {
                var _a;
                return isFunction_1.isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error2, complete);
            };
            Notification2.prototype.toObservable = function() {
                var _a = this, kind = _a.kind, value1 = _a.value, error2 = _a.error;
                var result = kind === "N" ? of_1.of(value1) : kind === "E" ? throwError_1.throwError(function() {
                    return error2;
                }) : kind === "C" ? empty_1.EMPTY : 0;
                if (!result) {
                    throw new TypeError("Unexpected notification kind " + kind);
                }
                return result;
            };
            Notification2.createNext = function(value1) {
                return new Notification2("N", value1);
            };
            Notification2.createError = function(err) {
                return new Notification2("E", void 0, err);
            };
            Notification2.createComplete = function() {
                return Notification2.completeNotification;
            };
            Notification2.completeNotification = new Notification2("C");
            return Notification2;
        }();
        exports.Notification = Notification;
        exports.observeNotification = observeNotification;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isObservable.js
var require_isObservable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isObservable.js": function(exports) {
        "use strict";
        var isObservable = function isObservable(obj) {
            return !!obj && (_instanceof(obj, Observable_1.Observable) || isFunction_1.isFunction(obj.lift) && isFunction_1.isFunction(obj.subscribe));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isObservable = void 0;
        var Observable_1 = require_Observable();
        var isFunction_1 = require_isFunction();
        exports.isObservable = isObservable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/EmptyError.js
var require_EmptyError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/EmptyError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.EmptyError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.EmptyError = createErrorClass_1.createErrorClass(function(_super) {
            return function EmptyErrorImpl() {
                _super(this);
                this.name = "EmptyError";
                this.message = "no elements in sequence";
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/lastValueFrom.js
var require_lastValueFrom = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/lastValueFrom.js": function(exports) {
        "use strict";
        var lastValueFrom = function lastValueFrom(source, config3) {
            var hasConfig = typeof config3 === "object";
            return new Promise(function(resolve, reject) {
                var _hasValue = false;
                var _value;
                source.subscribe({
                    next: function next(value1) {
                        _value = value1;
                        _hasValue = true;
                    },
                    error: reject,
                    complete: function complete() {
                        if (_hasValue) {
                            resolve(_value);
                        } else if (hasConfig) {
                            resolve(config3.defaultValue);
                        } else {
                            reject(new EmptyError_1.EmptyError());
                        }
                    }
                });
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.lastValueFrom = void 0;
        var EmptyError_1 = require_EmptyError();
        exports.lastValueFrom = lastValueFrom;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/firstValueFrom.js
var require_firstValueFrom = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/firstValueFrom.js": function(exports) {
        "use strict";
        var firstValueFrom2 = function firstValueFrom2(source, config3) {
            var hasConfig = typeof config3 === "object";
            return new Promise(function(resolve, reject) {
                var subscriber = new Subscriber_1.SafeSubscriber({
                    next: function next(value1) {
                        resolve(value1);
                        subscriber.unsubscribe();
                    },
                    error: reject,
                    complete: function complete() {
                        if (hasConfig) {
                            resolve(config3.defaultValue);
                        } else {
                            reject(new EmptyError_1.EmptyError());
                        }
                    }
                });
                source.subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.firstValueFrom = void 0;
        var EmptyError_1 = require_EmptyError();
        var Subscriber_1 = require_Subscriber();
        exports.firstValueFrom = firstValueFrom2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js
var require_ArgumentOutOfRangeError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/ArgumentOutOfRangeError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ArgumentOutOfRangeError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.ArgumentOutOfRangeError = createErrorClass_1.createErrorClass(function(_super) {
            return function ArgumentOutOfRangeErrorImpl() {
                _super(this);
                this.name = "ArgumentOutOfRangeError";
                this.message = "argument out of range";
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js
var require_NotFoundError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/NotFoundError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.NotFoundError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.NotFoundError = createErrorClass_1.createErrorClass(function(_super) {
            return function NotFoundErrorImpl(message2) {
                _super(this);
                this.name = "NotFoundError";
                this.message = message2;
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/SequenceError.js
var require_SequenceError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/SequenceError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SequenceError = void 0;
        var createErrorClass_1 = require_createErrorClass();
        exports.SequenceError = createErrorClass_1.createErrorClass(function(_super) {
            return function SequenceErrorImpl(message2) {
                _super(this);
                this.name = "SequenceError";
                this.message = message2;
            };
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/isDate.js
var require_isDate = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/isDate.js": function(exports) {
        "use strict";
        var isValidDate = function isValidDate(value1) {
            return _instanceof(value1, Date) && !isNaN(value1);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isValidDate = void 0;
        exports.isValidDate = isValidDate;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/timeout.js
var require_timeout = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/timeout.js": function(exports) {
        "use strict";
        var timeout = function timeout(config3, schedulerArg) {
            var _a = isDate_1.isValidDate(config3) ? {
                first: config3
            } : typeof config3 === "number" ? {
                each: config3
            } : config3, first2 = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : async_1.asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
            if (first2 == null && each == null) {
                throw new TypeError("No timeout provided.");
            }
            return lift_1.operate(function(source, subscriber) {
                var originalSourceSubscription;
                var timerSubscription;
                var lastValue = null;
                var seen = 0;
                var startTimer = function startTimer(delay) {
                    timerSubscription = executeSchedule_1.executeSchedule(subscriber, scheduler, function() {
                        try {
                            originalSourceSubscription.unsubscribe();
                            innerFrom_1.innerFrom(_with({
                                meta: meta,
                                lastValue: lastValue,
                                seen: seen
                            })).subscribe(subscriber);
                        } catch (err) {
                            subscriber.error(err);
                        }
                    }, delay);
                };
                originalSourceSubscription = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                    seen++;
                    subscriber.next(lastValue = value1);
                    each > 0 && startTimer(each);
                }, void 0, void 0, function() {
                    if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
                        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                    }
                    lastValue = null;
                }));
                !seen && startTimer(first2 != null ? typeof first2 === "number" ? first2 : +first2 - scheduler.now() : each);
            });
        };
        var timeoutErrorFactory = function timeoutErrorFactory(info6) {
            throw new exports.TimeoutError(info6);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.timeout = exports.TimeoutError = void 0;
        var async_1 = require_async();
        var isDate_1 = require_isDate();
        var lift_1 = require_lift();
        var innerFrom_1 = require_innerFrom();
        var createErrorClass_1 = require_createErrorClass();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var executeSchedule_1 = require_executeSchedule();
        exports.TimeoutError = createErrorClass_1.createErrorClass(function(_super) {
            return function TimeoutErrorImpl(info6) {
                if (info6 === void 0) {
                    info6 = null;
                }
                _super(this);
                this.message = "Timeout has occurred";
                this.name = "TimeoutError";
                this.info = info6;
            };
        });
        exports.timeout = timeout;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/map.js
var require_map = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/map.js": function(exports) {
        "use strict";
        var map80 = function map80(project, thisArg) {
            return lift_1.operate(function(source, subscriber) {
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    subscriber.next(project.call(thisArg, value1, index++));
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.map = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.map = map80;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js
var require_mapOneOrManyArgs = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/mapOneOrManyArgs.js": function(exports) {
        "use strict";
        var callOrApply = function callOrApply(fn, args) {
            return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
        };
        var mapOneOrManyArgs = function mapOneOrManyArgs(fn) {
            return map_1.map(function(args) {
                return callOrApply(fn, args);
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mapOneOrManyArgs = void 0;
        var map_1 = require_map();
        var isArray = Array.isArray;
        exports.mapOneOrManyArgs = mapOneOrManyArgs;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js
var require_bindCallbackInternals = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/bindCallbackInternals.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bindCallbackInternals = void 0;
        var isScheduler_1 = require_isScheduler();
        var Observable_1 = require_Observable();
        var subscribeOn_1 = require_subscribeOn();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var observeOn_1 = require_observeOn();
        var AsyncSubject_1 = require_AsyncSubject();
        function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
            if (resultSelector) {
                if (isScheduler_1.isScheduler(resultSelector)) {
                    scheduler = resultSelector;
                } else {
                    return function() {
                        var args = [];
                        for(var _i = 0; _i < arguments.length; _i++){
                            args[_i] = arguments[_i];
                        }
                        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
                    };
                }
            }
            if (scheduler) {
                return function() {
                    var args = [];
                    for(var _i = 0; _i < arguments.length; _i++){
                        args[_i] = arguments[_i];
                    }
                    return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn_1.subscribeOn(scheduler), observeOn_1.observeOn(scheduler));
                };
            }
            return function() {
                var _this = this;
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    args[_i] = arguments[_i];
                }
                var subject = new AsyncSubject_1.AsyncSubject();
                var uninitialized = true;
                return new Observable_1.Observable(function(subscriber) {
                    var subs = subject.subscribe(subscriber);
                    if (uninitialized) {
                        uninitialized = false;
                        var isAsync_1 = false;
                        var isComplete_1 = false;
                        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
                            function() {
                                var results = [];
                                for(var _i2 = 0; _i2 < arguments.length; _i2++){
                                    results[_i2] = arguments[_i2];
                                }
                                if (isNodeStyle) {
                                    var err = results.shift();
                                    if (err != null) {
                                        subject.error(err);
                                        return;
                                    }
                                }
                                subject.next(1 < results.length ? results : results[0]);
                                isComplete_1 = true;
                                if (isAsync_1) {
                                    subject.complete();
                                }
                            }
                        ]));
                        if (isComplete_1) {
                            subject.complete();
                        }
                        isAsync_1 = true;
                    }
                    return subs;
                });
            };
        }
        exports.bindCallbackInternals = bindCallbackInternals;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js
var require_bindCallback = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/bindCallback.js": function(exports) {
        "use strict";
        var bindCallback = function bindCallback(callbackFunc, resultSelector, scheduler) {
            return bindCallbackInternals_1.bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bindCallback = void 0;
        var bindCallbackInternals_1 = require_bindCallbackInternals();
        exports.bindCallback = bindCallback;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js
var require_bindNodeCallback = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/bindNodeCallback.js": function(exports) {
        "use strict";
        var bindNodeCallback = function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
            return bindCallbackInternals_1.bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bindNodeCallback = void 0;
        var bindCallbackInternals_1 = require_bindCallbackInternals();
        exports.bindNodeCallback = bindNodeCallback;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js
var require_argsArgArrayOrObject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/argsArgArrayOrObject.js": function(exports) {
        "use strict";
        var argsArgArrayOrObject = function argsArgArrayOrObject(args) {
            if (args.length === 1) {
                var first_1 = args[0];
                if (isArray(first_1)) {
                    return {
                        args: first_1,
                        keys: null
                    };
                }
                if (isPOJO(first_1)) {
                    var keys2 = getKeys(first_1);
                    return {
                        args: keys2.map(function(key) {
                            return first_1[key];
                        }),
                        keys: keys2
                    };
                }
            }
            return {
                args: args,
                keys: null
            };
        };
        var isPOJO = function isPOJO(obj) {
            return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.argsArgArrayOrObject = void 0;
        var isArray = Array.isArray;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectProto = Object.prototype;
        var getKeys = Object.keys;
        exports.argsArgArrayOrObject = argsArgArrayOrObject;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/createObject.js
var require_createObject = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/createObject.js": function(exports) {
        "use strict";
        var createObject = function createObject(keys2, values) {
            return keys2.reduce(function(result, key, i) {
                return result[key] = values[i], result;
            }, {});
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createObject = void 0;
        exports.createObject = createObject;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js
var require_combineLatest = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/combineLatest.js": function(exports) {
        "use strict";
        var combineLatest42 = function combineLatest42() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(args);
            var resultSelector = args_1.popResultSelector(args);
            var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
            if (observables.length === 0) {
                return from_1.from([], scheduler);
            }
            var result = new Observable_1.Observable(combineLatestInit(observables, scheduler, keys2 ? function(values) {
                return createObject_1.createObject(keys2, values);
            } : identity_1.identity));
            return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
        };
        var combineLatestInit = function combineLatestInit(observables, scheduler, valueTransform) {
            if (valueTransform === void 0) {
                valueTransform = identity_1.identity;
            }
            return function(subscriber) {
                maybeSchedule(scheduler, function() {
                    var length = observables.length;
                    var values = new Array(length);
                    var active = length;
                    var remainingFirstValues = length;
                    var _loop_1 = function _loop_1(i2) {
                        maybeSchedule(scheduler, function() {
                            var source = from_1.from(observables[i2], scheduler);
                            var hasFirstValue = false;
                            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                                values[i2] = value1;
                                if (!hasFirstValue) {
                                    hasFirstValue = true;
                                    remainingFirstValues--;
                                }
                                if (!remainingFirstValues) {
                                    subscriber.next(valueTransform(values.slice()));
                                }
                            }, function() {
                                if (!--active) {
                                    subscriber.complete();
                                }
                            }));
                        }, subscriber);
                    };
                    for(var i = 0; i < length; i++){
                        _loop_1(i);
                    }
                }, subscriber);
            };
        };
        var maybeSchedule = function maybeSchedule(scheduler, execute, subscription) {
            if (scheduler) {
                executeSchedule_1.executeSchedule(subscription, scheduler, execute);
            } else {
                execute();
            }
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.combineLatestInit = exports.combineLatest = void 0;
        var Observable_1 = require_Observable();
        var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
        var from_1 = require_from();
        var identity_1 = require_identity();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var args_1 = require_args();
        var createObject_1 = require_createObject();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var executeSchedule_1 = require_executeSchedule();
        exports.combineLatest = combineLatest42;
        exports.combineLatestInit = combineLatestInit;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js
var require_mergeInternals = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeInternals.js": function(exports) {
        "use strict";
        var mergeInternals = function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
            var buffer = [];
            var active = 0;
            var index = 0;
            var isComplete = false;
            var checkComplete = function checkComplete() {
                if (isComplete && !buffer.length && !active) {
                    subscriber.complete();
                }
            };
            var outerNext = function outerNext(value1) {
                return active < concurrent ? doInnerSub(value1) : buffer.push(value1);
            };
            var doInnerSub = function doInnerSub1(value1) {
                expand2 && subscriber.next(value1);
                active++;
                var innerComplete = false;
                innerFrom_1.innerFrom(project(value1, index++)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
                    onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
                    if (expand2) {
                        outerNext(innerValue);
                    } else {
                        subscriber.next(innerValue);
                    }
                }, function() {
                    innerComplete = true;
                }, void 0, function() {
                    if (innerComplete) {
                        try {
                            active--;
                            var _loop_1 = function _loop_1() {
                                var bufferedValue = buffer.shift();
                                if (innerSubScheduler) {
                                    executeSchedule_1.executeSchedule(subscriber, innerSubScheduler, function() {
                                        return doInnerSub(bufferedValue);
                                    });
                                } else {
                                    doInnerSub(bufferedValue);
                                }
                            };
                            while(buffer.length && active < concurrent){
                                _loop_1();
                            }
                            checkComplete();
                        } catch (err) {
                            subscriber.error(err);
                        }
                    }
                }));
            };
            source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, outerNext, function() {
                isComplete = true;
                checkComplete();
            }));
            return function() {
                additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeInternals = void 0;
        var innerFrom_1 = require_innerFrom();
        var executeSchedule_1 = require_executeSchedule();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.mergeInternals = mergeInternals;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js
var require_mergeMap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeMap.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeMap = void 0;
        var map_1 = require_map();
        var innerFrom_1 = require_innerFrom();
        var lift_1 = require_lift();
        var mergeInternals_1 = require_mergeInternals();
        var isFunction_1 = require_isFunction();
        function mergeMap2(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Infinity;
            }
            if (isFunction_1.isFunction(resultSelector)) {
                return mergeMap2(function(a, i) {
                    return map_1.map(function(b, ii) {
                        return resultSelector(a, b, i, ii);
                    })(innerFrom_1.innerFrom(project(a, i)));
                }, concurrent);
            } else if (typeof resultSelector === "number") {
                concurrent = resultSelector;
            }
            return lift_1.operate(function(source, subscriber) {
                return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent);
            });
        }
        exports.mergeMap = mergeMap2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js
var require_mergeAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeAll.js": function(exports) {
        "use strict";
        var mergeAll = function mergeAll(concurrent) {
            if (concurrent === void 0) {
                concurrent = Infinity;
            }
            return mergeMap_1.mergeMap(identity_1.identity, concurrent);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeAll = void 0;
        var mergeMap_1 = require_mergeMap();
        var identity_1 = require_identity();
        exports.mergeAll = mergeAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/concatAll.js
var require_concatAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/concatAll.js": function(exports) {
        "use strict";
        var concatAll = function concatAll() {
            return mergeAll_1.mergeAll(1);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concatAll = void 0;
        var mergeAll_1 = require_mergeAll();
        exports.concatAll = concatAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/concat.js
var require_concat = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/concat.js": function(exports) {
        "use strict";
        var concat = function concat() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            return concatAll_1.concatAll()(from_1.from(args, args_1.popScheduler(args)));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concat = void 0;
        var concatAll_1 = require_concatAll();
        var args_1 = require_args();
        var from_1 = require_from();
        exports.concat = concat;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/defer.js
var require_defer = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/defer.js": function(exports) {
        "use strict";
        var defer2 = function defer2(observableFactory) {
            return new Observable_1.Observable(function(subscriber) {
                innerFrom_1.innerFrom(observableFactory()).subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.defer = void 0;
        var Observable_1 = require_Observable();
        var innerFrom_1 = require_innerFrom();
        exports.defer = defer2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/connectable.js
var require_connectable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/connectable.js": function(exports) {
        "use strict";
        var connectable = function connectable(source, config3) {
            if (config3 === void 0) {
                config3 = DEFAULT_CONFIG;
            }
            var connection = null;
            var connector = config3.connector, _a = config3.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
            var subject = connector();
            var result = new Observable_1.Observable(function(subscriber) {
                return subject.subscribe(subscriber);
            });
            result.connect = function() {
                if (!connection || connection.closed) {
                    connection = defer_1.defer(function() {
                        return source;
                    }).subscribe(subject);
                    if (resetOnDisconnect) {
                        connection.add(function() {
                            return subject = connector();
                        });
                    }
                }
                return connection;
            };
            return result;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.connectable = void 0;
        var Subject_1 = require_Subject();
        var Observable_1 = require_Observable();
        var defer_1 = require_defer();
        var DEFAULT_CONFIG = {
            connector: function connector() {
                return new Subject_1.Subject();
            },
            resetOnDisconnect: true
        };
        exports.connectable = connectable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js
var require_forkJoin = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/forkJoin.js": function(exports) {
        "use strict";
        var forkJoin = function forkJoin() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var resultSelector = args_1.popResultSelector(args);
            var _a = argsArgArrayOrObject_1.argsArgArrayOrObject(args), sources = _a.args, keys2 = _a.keys;
            var result = new Observable_1.Observable(function(subscriber) {
                var length = sources.length;
                if (!length) {
                    subscriber.complete();
                    return;
                }
                var values = new Array(length);
                var remainingCompletions = length;
                var remainingEmissions = length;
                var _loop_1 = function _loop_1(sourceIndex2) {
                    var hasValue = false;
                    innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                        if (!hasValue) {
                            hasValue = true;
                            remainingEmissions--;
                        }
                        values[sourceIndex2] = value1;
                    }, function() {
                        return remainingCompletions--;
                    }, void 0, function() {
                        if (!remainingCompletions || !hasValue) {
                            if (!remainingEmissions) {
                                subscriber.next(keys2 ? createObject_1.createObject(keys2, values) : values);
                            }
                            subscriber.complete();
                        }
                    }));
                };
                for(var sourceIndex = 0; sourceIndex < length; sourceIndex++){
                    _loop_1(sourceIndex);
                }
            });
            return resultSelector ? result.pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : result;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.forkJoin = void 0;
        var Observable_1 = require_Observable();
        var argsArgArrayOrObject_1 = require_argsArgArrayOrObject();
        var innerFrom_1 = require_innerFrom();
        var args_1 = require_args();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var createObject_1 = require_createObject();
        exports.forkJoin = forkJoin;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js
var require_fromEvent = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/fromEvent.js": function(exports) {
        "use strict";
        var toCommonHandlerRegistry = function toCommonHandlerRegistry(target, eventName) {
            return function(methodName) {
                return function(handler) {
                    return target[methodName](eventName, handler);
                };
            };
        };
        var isNodeStyleEventEmitter = function isNodeStyleEventEmitter(target) {
            return isFunction_1.isFunction(target.addListener) && isFunction_1.isFunction(target.removeListener);
        };
        var isJQueryStyleEventEmitter = function isJQueryStyleEventEmitter(target) {
            return isFunction_1.isFunction(target.on) && isFunction_1.isFunction(target.off);
        };
        var isEventTarget = function isEventTarget(target) {
            return isFunction_1.isFunction(target.addEventListener) && isFunction_1.isFunction(target.removeEventListener);
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromEvent = void 0;
        var innerFrom_1 = require_innerFrom();
        var Observable_1 = require_Observable();
        var mergeMap_1 = require_mergeMap();
        var isArrayLike_1 = require_isArrayLike();
        var isFunction_1 = require_isFunction();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var nodeEventEmitterMethods = [
            "addListener",
            "removeListener"
        ];
        var eventTargetMethods = [
            "addEventListener",
            "removeEventListener"
        ];
        var jqueryMethods = [
            "on",
            "off"
        ];
        function fromEvent(target, eventName, options, resultSelector) {
            if (isFunction_1.isFunction(options)) {
                resultSelector = options;
                options = void 0;
            }
            if (resultSelector) {
                return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
            }
            var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function(methodName) {
                return function(handler) {
                    return target[methodName](eventName, handler, options);
                };
            }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2), add3 = _a[0], remove = _a[1];
            if (!add3) {
                if (isArrayLike_1.isArrayLike(target)) {
                    return mergeMap_1.mergeMap(function(subTarget) {
                        return fromEvent(subTarget, eventName, options);
                    })(innerFrom_1.innerFrom(target));
                }
            }
            if (!add3) {
                throw new TypeError("Invalid event target");
            }
            return new Observable_1.Observable(function(subscriber) {
                var handler = function handler() {
                    var args = [];
                    for(var _i = 0; _i < arguments.length; _i++){
                        args[_i] = arguments[_i];
                    }
                    return subscriber.next(1 < args.length ? args : args[0]);
                };
                add3(handler);
                return function() {
                    return remove(handler);
                };
            });
        }
        exports.fromEvent = fromEvent;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js
var require_fromEventPattern = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/fromEventPattern.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromEventPattern = void 0;
        var Observable_1 = require_Observable();
        var isFunction_1 = require_isFunction();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        function fromEventPattern(addHandler, removeHandler, resultSelector) {
            if (resultSelector) {
                return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector));
            }
            return new Observable_1.Observable(function(subscriber) {
                var handler = function handler() {
                    var e = [];
                    for(var _i = 0; _i < arguments.length; _i++){
                        e[_i] = arguments[_i];
                    }
                    return subscriber.next(e.length === 1 ? e[0] : e);
                };
                var retValue = addHandler(handler);
                return isFunction_1.isFunction(removeHandler) ? function() {
                    return removeHandler(handler, retValue);
                } : void 0;
            });
        }
        exports.fromEventPattern = fromEventPattern;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/generate.js
var require_generate = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/generate.js": function(exports) {
        "use strict";
        var generate3 = function generate3(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
            var _a, _b;
            var resultSelector;
            var initialState;
            if (arguments.length === 1) {
                _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity_1.identity : _b, scheduler = _a.scheduler;
            } else {
                initialState = initialStateOrOptions;
                if (!resultSelectorOrScheduler || isScheduler_1.isScheduler(resultSelectorOrScheduler)) {
                    resultSelector = identity_1.identity;
                    scheduler = resultSelectorOrScheduler;
                } else {
                    resultSelector = resultSelectorOrScheduler;
                }
            }
            function gen2() {
                var state2;
                return __generator(this, function(_a2) {
                    switch(_a2.label){
                        case 0:
                            state2 = initialState;
                            _a2.label = 1;
                        case 1:
                            if (!(!condition || condition(state2))) return [
                                3,
                                4
                            ];
                            return [
                                4,
                                resultSelector(state2)
                            ];
                        case 2:
                            _a2.sent();
                            _a2.label = 3;
                        case 3:
                            state2 = iterate(state2);
                            return [
                                3,
                                1
                            ];
                        case 4:
                            return [
                                2
                            ];
                    }
                });
            }
            return defer_1.defer(scheduler ? function() {
                return scheduleIterable_1.scheduleIterable(gen2(), scheduler);
            } : gen2);
        };
        var __generator = exports && exports.__generator || function(thisArg, body) {
            var verb = function verb(n) {
                return function(v) {
                    return step([
                        n,
                        v
                    ]);
                };
            };
            var step = function step(op) {
                if (f) throw new TypeError("Generator is already executing.");
                while(_23)try {
                    if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
                    if (y = 0, t2) op = [
                        op[0] & 2,
                        t2.value
                    ];
                    switch(op[0]){
                        case 0:
                        case 1:
                            t2 = op;
                            break;
                        case 4:
                            _23.label++;
                            return {
                                value: op[1],
                                done: false
                            };
                        case 5:
                            _23.label++;
                            y = op[1];
                            op = [
                                0
                            ];
                            continue;
                        case 7:
                            op = _23.ops.pop();
                            _23.trys.pop();
                            continue;
                        default:
                            if (!(t2 = _23.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _23 = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                                _23.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _23.label < t2[1]) {
                                _23.label = t2[1];
                                t2 = op;
                                break;
                            }
                            if (t2 && _23.label < t2[2]) {
                                _23.label = t2[2];
                                _23.ops.push(op);
                                break;
                            }
                            if (t2[2]) _23.ops.pop();
                            _23.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _23);
                } catch (e) {
                    op = [
                        6,
                        e
                    ];
                    y = 0;
                } finally{
                    f = t2 = 0;
                }
                if (op[0] & 5) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: true
                };
            };
            var _23 = {
                label: 0,
                sent: function sent() {
                    if (t2[0] & 1) throw t2[1];
                    return t2[1];
                },
                trys: [],
                ops: []
            }, f, y, t2, g;
            return g = {
                next: verb(0),
                "throw": verb(1),
                "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                return this;
            }), g;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generate = void 0;
        var identity_1 = require_identity();
        var isScheduler_1 = require_isScheduler();
        var defer_1 = require_defer();
        var scheduleIterable_1 = require_scheduleIterable();
        exports.generate = generate3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/iif.js
var require_iif = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/iif.js": function(exports) {
        "use strict";
        var iif = function iif(condition, trueResult, falseResult) {
            return defer_1.defer(function() {
                return condition() ? trueResult : falseResult;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.iif = void 0;
        var defer_1 = require_defer();
        exports.iif = iif;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/timer.js
var require_timer = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/timer.js": function(exports) {
        "use strict";
        var timer = function timer(dueTime, intervalOrScheduler, scheduler) {
            if (dueTime === void 0) {
                dueTime = 0;
            }
            if (scheduler === void 0) {
                scheduler = async_1.async;
            }
            var intervalDuration = -1;
            if (intervalOrScheduler != null) {
                if (isScheduler_1.isScheduler(intervalOrScheduler)) {
                    scheduler = intervalOrScheduler;
                } else {
                    intervalDuration = intervalOrScheduler;
                }
            }
            return new Observable_1.Observable(function(subscriber) {
                var due = isDate_1.isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
                if (due < 0) {
                    due = 0;
                }
                var n = 0;
                return scheduler.schedule(function() {
                    if (!subscriber.closed) {
                        subscriber.next(n++);
                        if (0 <= intervalDuration) {
                            this.schedule(void 0, intervalDuration);
                        } else {
                            subscriber.complete();
                        }
                    }
                }, due);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.timer = void 0;
        var Observable_1 = require_Observable();
        var async_1 = require_async();
        var isScheduler_1 = require_isScheduler();
        var isDate_1 = require_isDate();
        exports.timer = timer;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/interval.js
var require_interval = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/interval.js": function(exports) {
        "use strict";
        var interval = function interval(period, scheduler) {
            if (period === void 0) {
                period = 0;
            }
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            if (period < 0) {
                period = 0;
            }
            return timer_1.timer(period, period, scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.interval = void 0;
        var async_1 = require_async();
        var timer_1 = require_timer();
        exports.interval = interval;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/merge.js
var require_merge = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/merge.js": function(exports) {
        "use strict";
        var merge = function merge() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(args);
            var concurrent = args_1.popNumber(args, Infinity);
            var sources = args;
            return !sources.length ? empty_1.EMPTY : sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : mergeAll_1.mergeAll(concurrent)(from_1.from(sources, scheduler));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.merge = void 0;
        var mergeAll_1 = require_mergeAll();
        var innerFrom_1 = require_innerFrom();
        var empty_1 = require_empty();
        var args_1 = require_args();
        var from_1 = require_from();
        exports.merge = merge;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/never.js
var require_never = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/never.js": function(exports) {
        "use strict";
        var never = function never() {
            return exports.NEVER;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.never = exports.NEVER = void 0;
        var Observable_1 = require_Observable();
        var noop_1 = require_noop();
        exports.NEVER = new Observable_1.Observable(noop_1.noop);
        exports.never = never;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js
var require_argsOrArgArray = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/argsOrArgArray.js": function(exports) {
        "use strict";
        var argsOrArgArray = function argsOrArgArray(args) {
            return args.length === 1 && isArray(args[0]) ? args[0] : args;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.argsOrArgArray = void 0;
        var isArray = Array.isArray;
        exports.argsOrArgArray = argsOrArgArray;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js
var require_onErrorResumeNext = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/onErrorResumeNext.js": function(exports) {
        "use strict";
        var onErrorResumeNext = function onErrorResumeNext() {
            var sources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                sources[_i] = arguments[_i];
            }
            var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
            return new Observable_1.Observable(function(subscriber) {
                var sourceIndex = 0;
                var subscribeNext = function subscribeNext1() {
                    if (sourceIndex < nextSources.length) {
                        var nextSource = void 0;
                        try {
                            nextSource = innerFrom_1.innerFrom(nextSources[sourceIndex++]);
                        } catch (err) {
                            subscribeNext();
                            return;
                        }
                        var innerSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, void 0, noop_1.noop, noop_1.noop);
                        nextSource.subscribe(innerSubscriber);
                        innerSubscriber.add(subscribeNext);
                    } else {
                        subscriber.complete();
                    }
                };
                subscribeNext();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.onErrorResumeNext = void 0;
        var Observable_1 = require_Observable();
        var argsOrArgArray_1 = require_argsOrArgArray();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        var innerFrom_1 = require_innerFrom();
        exports.onErrorResumeNext = onErrorResumeNext;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/pairs.js
var require_pairs = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/pairs.js": function(exports) {
        "use strict";
        var pairs = function pairs(obj, scheduler) {
            return from_1.from(Object.entries(obj), scheduler);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.pairs = void 0;
        var from_1 = require_from();
        exports.pairs = pairs;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/util/not.js
var require_not = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/util/not.js": function(exports) {
        "use strict";
        var not = function not(pred, thisArg) {
            return function(value1, index) {
                return !pred.call(thisArg, value1, index);
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.not = void 0;
        exports.not = not;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/filter.js
var require_filter = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/filter.js": function(exports) {
        "use strict";
        var filter = function filter(predicate, thisArg) {
            return lift_1.operate(function(source, subscriber) {
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return predicate.call(thisArg, value1, index++) && subscriber.next(value1);
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.filter = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.filter = filter;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/partition.js
var require_partition = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/partition.js": function(exports) {
        "use strict";
        var partition = function partition(source, predicate, thisArg) {
            return [
                filter_1.filter(predicate, thisArg)(innerFrom_1.innerFrom(source)),
                filter_1.filter(not_1.not(predicate, thisArg))(innerFrom_1.innerFrom(source))
            ];
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.partition = void 0;
        var not_1 = require_not();
        var filter_1 = require_filter();
        var innerFrom_1 = require_innerFrom();
        exports.partition = partition;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/race.js
var require_race = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/race.js": function(exports) {
        "use strict";
        var race = function race() {
            var sources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                sources[_i] = arguments[_i];
            }
            sources = argsOrArgArray_1.argsOrArgArray(sources);
            return sources.length === 1 ? innerFrom_1.innerFrom(sources[0]) : new Observable_1.Observable(raceInit(sources));
        };
        var raceInit = function raceInit(sources) {
            return function(subscriber) {
                var subscriptions = [];
                var _loop_1 = function _loop_1(i2) {
                    subscriptions.push(innerFrom_1.innerFrom(sources[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                        if (subscriptions) {
                            for(var s = 0; s < subscriptions.length; s++){
                                s !== i2 && subscriptions[s].unsubscribe();
                            }
                            subscriptions = null;
                        }
                        subscriber.next(value1);
                    })));
                };
                for(var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++){
                    _loop_1(i);
                }
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.raceInit = exports.race = void 0;
        var Observable_1 = require_Observable();
        var innerFrom_1 = require_innerFrom();
        var argsOrArgArray_1 = require_argsOrArgArray();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.race = race;
        exports.raceInit = raceInit;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/range.js
var require_range = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/range.js": function(exports) {
        "use strict";
        var range = function range(start, count, scheduler) {
            if (count == null) {
                count = start;
                start = 0;
            }
            if (count <= 0) {
                return empty_1.EMPTY;
            }
            var end = count + start;
            return new Observable_1.Observable(scheduler ? function(subscriber) {
                var n = start;
                return scheduler.schedule(function() {
                    if (n < end) {
                        subscriber.next(n++);
                        this.schedule();
                    } else {
                        subscriber.complete();
                    }
                });
            } : function(subscriber) {
                var n = start;
                while(n < end && !subscriber.closed){
                    subscriber.next(n++);
                }
                subscriber.complete();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.range = void 0;
        var Observable_1 = require_Observable();
        var empty_1 = require_empty();
        exports.range = range;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/using.js
var require_using = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/using.js": function(exports) {
        "use strict";
        var using = function using(resourceFactory, observableFactory) {
            return new Observable_1.Observable(function(subscriber) {
                var resource = resourceFactory();
                var result = observableFactory(resource);
                var source = result ? innerFrom_1.innerFrom(result) : empty_1.EMPTY;
                source.subscribe(subscriber);
                return function() {
                    if (resource) {
                        resource.unsubscribe();
                    }
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.using = void 0;
        var Observable_1 = require_Observable();
        var innerFrom_1 = require_innerFrom();
        var empty_1 = require_empty();
        exports.using = using;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/zip.js
var require_zip = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/zip.js": function(exports) {
        "use strict";
        var zip = function zip() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var resultSelector = args_1.popResultSelector(args);
            var sources = argsOrArgArray_1.argsOrArgArray(args);
            return sources.length ? new Observable_1.Observable(function(subscriber) {
                var buffers = sources.map(function() {
                    return [];
                });
                var completed = sources.map(function() {
                    return false;
                });
                subscriber.add(function() {
                    buffers = completed = null;
                });
                var _loop_1 = function _loop_1(sourceIndex2) {
                    innerFrom_1.innerFrom(sources[sourceIndex2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                        buffers[sourceIndex2].push(value1);
                        if (buffers.every(function(buffer) {
                            return buffer.length;
                        })) {
                            var result = buffers.map(function(buffer) {
                                return buffer.shift();
                            });
                            subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
                            if (buffers.some(function(buffer, i) {
                                return !buffer.length && completed[i];
                            })) {
                                subscriber.complete();
                            }
                        }
                    }, function() {
                        completed[sourceIndex2] = true;
                        !buffers[sourceIndex2].length && subscriber.complete();
                    }));
                };
                for(var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++){
                    _loop_1(sourceIndex);
                }
                return function() {
                    buffers = completed = null;
                };
            }) : empty_1.EMPTY;
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.zip = void 0;
        var Observable_1 = require_Observable();
        var innerFrom_1 = require_innerFrom();
        var argsOrArgArray_1 = require_argsOrArgArray();
        var empty_1 = require_empty();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var args_1 = require_args();
        exports.zip = zip;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/types.js
var require_types = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/types.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/audit.js
var require_audit = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/audit.js": function(exports) {
        "use strict";
        var audit = function audit(durationSelector) {
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                var lastValue = null;
                var durationSubscriber = null;
                var isComplete = false;
                var endDuration = function endDuration() {
                    durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                    durationSubscriber = null;
                    if (hasValue) {
                        hasValue = false;
                        var value1 = lastValue;
                        lastValue = null;
                        subscriber.next(value1);
                    }
                    isComplete && subscriber.complete();
                };
                var cleanupDuration = function cleanupDuration() {
                    durationSubscriber = null;
                    isComplete && subscriber.complete();
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    hasValue = true;
                    lastValue = value1;
                    if (!durationSubscriber) {
                        innerFrom_1.innerFrom(durationSelector(value1)).subscribe(durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, endDuration, cleanupDuration));
                    }
                }, function() {
                    isComplete = true;
                    (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.audit = void 0;
        var lift_1 = require_lift();
        var innerFrom_1 = require_innerFrom();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.audit = audit;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/auditTime.js
var require_auditTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/auditTime.js": function(exports) {
        "use strict";
        var auditTime = function auditTime(duration, scheduler) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            return audit_1.audit(function() {
                return timer_1.timer(duration, scheduler);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.auditTime = void 0;
        var async_1 = require_async();
        var audit_1 = require_audit();
        var timer_1 = require_timer();
        exports.auditTime = auditTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/buffer.js
var require_buffer = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/buffer.js": function(exports) {
        "use strict";
        var buffer = function buffer(closingNotifier) {
            return lift_1.operate(function(source, subscriber) {
                var currentBuffer = [];
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return currentBuffer.push(value1);
                }, function() {
                    subscriber.next(currentBuffer);
                    subscriber.complete();
                }));
                innerFrom_1.innerFrom(closingNotifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    var b = currentBuffer;
                    currentBuffer = [];
                    subscriber.next(b);
                }, noop_1.noop));
                return function() {
                    currentBuffer = null;
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.buffer = void 0;
        var lift_1 = require_lift();
        var noop_1 = require_noop();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.buffer = buffer;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js
var require_bufferCount = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/bufferCount.js": function(exports) {
        "use strict";
        var bufferCount = function bufferCount(bufferSize, startBufferEvery) {
            if (startBufferEvery === void 0) {
                startBufferEvery = null;
            }
            startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
            return lift_1.operate(function(source, subscriber) {
                var buffers = [];
                var count = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var e_1, _a, e_2, _b;
                    var toEmit = null;
                    if (count++ % startBufferEvery === 0) {
                        buffers.push([]);
                    }
                    try {
                        for(var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()){
                            var buffer = buffers_1_1.value;
                            buffer.push(value1);
                            if (bufferSize <= buffer.length) {
                                toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                                toEmit.push(buffer);
                            }
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    if (toEmit) {
                        try {
                            for(var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()){
                                var buffer = toEmit_1_1.value;
                                arrRemove_1.arrRemove(buffers, buffer);
                                subscriber.next(buffer);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally{
                            try {
                                if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
                            } finally{
                                if (e_2) throw e_2.error;
                            }
                        }
                    }
                }, function() {
                    var e_3, _a;
                    try {
                        for(var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()){
                            var buffer = buffers_2_1.value;
                            subscriber.next(buffer);
                        }
                    } catch (e_3_1) {
                        e_3 = {
                            error: e_3_1
                        };
                    } finally{
                        try {
                            if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
                        } finally{
                            if (e_3) throw e_3.error;
                        }
                    }
                    subscriber.complete();
                }, void 0, function() {
                    buffers = null;
                }));
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bufferCount = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var arrRemove_1 = require_arrRemove();
        exports.bufferCount = bufferCount;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js
var require_bufferTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/bufferTime.js": function(exports) {
        "use strict";
        var bufferTime = function bufferTime(bufferTimeSpan) {
            var _a, _b;
            var otherArgs = [];
            for(var _i = 1; _i < arguments.length; _i++){
                otherArgs[_i - 1] = arguments[_i];
            }
            var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
            var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
            var maxBufferSize = otherArgs[1] || Infinity;
            return lift_1.operate(function(source, subscriber) {
                var bufferRecords = [];
                var restartOnEmit = false;
                var emit = function emit(record) {
                    var buffer = record.buffer, subs = record.subs;
                    subs.unsubscribe();
                    arrRemove_1.arrRemove(bufferRecords, record);
                    subscriber.next(buffer);
                    restartOnEmit && startBuffer();
                };
                var startBuffer = function startBuffer() {
                    if (bufferRecords) {
                        var subs = new Subscription_1.Subscription();
                        subscriber.add(subs);
                        var buffer = [];
                        var record_1 = {
                            buffer: buffer,
                            subs: subs
                        };
                        bufferRecords.push(record_1);
                        executeSchedule_1.executeSchedule(subs, scheduler, function() {
                            return emit(record_1);
                        }, bufferTimeSpan);
                    }
                };
                if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
                    executeSchedule_1.executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
                } else {
                    restartOnEmit = true;
                }
                startBuffer();
                var bufferTimeSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var e_1, _a2;
                    var recordsCopy = bufferRecords.slice();
                    try {
                        for(var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()){
                            var record = recordsCopy_1_1.value;
                            var buffer = record.buffer;
                            buffer.push(value1);
                            maxBufferSize <= buffer.length && emit(record);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a2 = recordsCopy_1.return)) _a2.call(recordsCopy_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                }, function() {
                    while(bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length){
                        subscriber.next(bufferRecords.shift().buffer);
                    }
                    bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
                    subscriber.complete();
                    subscriber.unsubscribe();
                }, void 0, function() {
                    return bufferRecords = null;
                });
                source.subscribe(bufferTimeSubscriber);
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bufferTime = void 0;
        var Subscription_1 = require_Subscription();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var arrRemove_1 = require_arrRemove();
        var async_1 = require_async();
        var args_1 = require_args();
        var executeSchedule_1 = require_executeSchedule();
        exports.bufferTime = bufferTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js
var require_bufferToggle = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/bufferToggle.js": function(exports) {
        "use strict";
        var bufferToggle = function bufferToggle(openings, closingSelector) {
            return lift_1.operate(function(source, subscriber) {
                var buffers = [];
                innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
                    var buffer = [];
                    buffers.push(buffer);
                    var closingSubscription = new Subscription_1.Subscription();
                    var emitBuffer = function emitBuffer() {
                        arrRemove_1.arrRemove(buffers, buffer);
                        subscriber.next(buffer);
                        closingSubscription.unsubscribe();
                    };
                    closingSubscription.add(innerFrom_1.innerFrom(closingSelector(openValue)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, emitBuffer, noop_1.noop)));
                }, noop_1.noop));
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var e_1, _a;
                    try {
                        for(var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()){
                            var buffer = buffers_1_1.value;
                            buffer.push(value1);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                }, function() {
                    while(buffers.length > 0){
                        subscriber.next(buffers.shift());
                    }
                    subscriber.complete();
                }));
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bufferToggle = void 0;
        var Subscription_1 = require_Subscription();
        var lift_1 = require_lift();
        var innerFrom_1 = require_innerFrom();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        var arrRemove_1 = require_arrRemove();
        exports.bufferToggle = bufferToggle;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js
var require_bufferWhen = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/bufferWhen.js": function(exports) {
        "use strict";
        var bufferWhen = function bufferWhen(closingSelector) {
            return lift_1.operate(function(source, subscriber) {
                var buffer = null;
                var closingSubscriber = null;
                var openBuffer = function openBuffer1() {
                    closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                    var b = buffer;
                    buffer = [];
                    b && subscriber.next(b);
                    innerFrom_1.innerFrom(closingSelector()).subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openBuffer, noop_1.noop));
                };
                openBuffer();
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return buffer === null || buffer === void 0 ? void 0 : buffer.push(value1);
                }, function() {
                    buffer && subscriber.next(buffer);
                    subscriber.complete();
                }, void 0, function() {
                    return buffer = closingSubscriber = null;
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bufferWhen = void 0;
        var lift_1 = require_lift();
        var noop_1 = require_noop();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.bufferWhen = bufferWhen;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/catchError.js
var require_catchError = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/catchError.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.catchError = void 0;
        var innerFrom_1 = require_innerFrom();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var lift_1 = require_lift();
        function catchError6(selector) {
            return lift_1.operate(function(source, subscriber) {
                var innerSub = null;
                var syncUnsub = false;
                var handledResult;
                innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
                    handledResult = innerFrom_1.innerFrom(selector(err, catchError6(selector)(source)));
                    if (innerSub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        handledResult.subscribe(subscriber);
                    } else {
                        syncUnsub = true;
                    }
                }));
                if (syncUnsub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    handledResult.subscribe(subscriber);
                }
            });
        }
        exports.catchError = catchError6;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js
var require_scanInternals = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/scanInternals.js": function(exports) {
        "use strict";
        var scanInternals = function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
            return function(source, subscriber) {
                var hasState = hasSeed;
                var state2 = seed;
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var i = index++;
                    state2 = hasState ? accumulator(state2, value1, i) : (hasState = true, value1);
                    emitOnNext && subscriber.next(state2);
                }, emitBeforeComplete && function() {
                    hasState && subscriber.next(state2);
                    subscriber.complete();
                }));
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scanInternals = void 0;
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.scanInternals = scanInternals;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/reduce.js
var require_reduce = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/reduce.js": function(exports) {
        "use strict";
        var reduce = function reduce(accumulator, seed) {
            return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, false, true));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.reduce = void 0;
        var scanInternals_1 = require_scanInternals();
        var lift_1 = require_lift();
        exports.reduce = reduce;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/toArray.js
var require_toArray = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/toArray.js": function(exports) {
        "use strict";
        var toArray5 = function toArray5() {
            return lift_1.operate(function(source, subscriber) {
                reduce_1.reduce(arrReducer, [])(source).subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.toArray = void 0;
        var reduce_1 = require_reduce();
        var lift_1 = require_lift();
        var arrReducer = function arrReducer(arr, value1) {
            return arr.push(value1), arr;
        };
        exports.toArray = toArray5;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js
var require_joinAllInternals = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/joinAllInternals.js": function(exports) {
        "use strict";
        var joinAllInternals = function joinAllInternals(joinFn, project) {
            return pipe_1.pipe(toArray_1.toArray(), mergeMap_1.mergeMap(function(sources) {
                return joinFn(sources);
            }), project ? mapOneOrManyArgs_1.mapOneOrManyArgs(project) : identity_1.identity);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.joinAllInternals = void 0;
        var identity_1 = require_identity();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var pipe_1 = require_pipe();
        var mergeMap_1 = require_mergeMap();
        var toArray_1 = require_toArray();
        exports.joinAllInternals = joinAllInternals;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js
var require_combineLatestAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/combineLatestAll.js": function(exports) {
        "use strict";
        var combineLatestAll = function combineLatestAll(project) {
            return joinAllInternals_1.joinAllInternals(combineLatest_1.combineLatest, project);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.combineLatestAll = void 0;
        var combineLatest_1 = require_combineLatest();
        var joinAllInternals_1 = require_joinAllInternals();
        exports.combineLatestAll = combineLatestAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/combineAll.js
var require_combineAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/combineAll.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.combineAll = void 0;
        var combineLatestAll_1 = require_combineLatestAll();
        exports.combineAll = combineLatestAll_1.combineLatestAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js
var require_combineLatest2 = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/combineLatest.js": function(exports) {
        "use strict";
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.combineLatest = void 0;
        var combineLatest_1 = require_combineLatest();
        var lift_1 = require_lift();
        var argsOrArgArray_1 = require_argsOrArgArray();
        var mapOneOrManyArgs_1 = require_mapOneOrManyArgs();
        var pipe_1 = require_pipe();
        var args_1 = require_args();
        function combineLatest42() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var resultSelector = args_1.popResultSelector(args);
            return resultSelector ? pipe_1.pipe(combineLatest42.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_1.mapOneOrManyArgs(resultSelector)) : lift_1.operate(function(source, subscriber) {
                combineLatest_1.combineLatestInit(__spreadArray([
                    source
                ], __read(argsOrArgArray_1.argsOrArgArray(args))))(subscriber);
            });
        }
        exports.combineLatest = combineLatest42;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js
var require_combineLatestWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/combineLatestWith.js": function(exports) {
        "use strict";
        var combineLatestWith = function combineLatestWith() {
            var otherSources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                otherSources[_i] = arguments[_i];
            }
            return combineLatest_1.combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.combineLatestWith = void 0;
        var combineLatest_1 = require_combineLatest2();
        exports.combineLatestWith = combineLatestWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/concatMap.js
var require_concatMap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/concatMap.js": function(exports) {
        "use strict";
        var concatMap = function concatMap(project, resultSelector) {
            return isFunction_1.isFunction(resultSelector) ? mergeMap_1.mergeMap(project, resultSelector, 1) : mergeMap_1.mergeMap(project, 1);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concatMap = void 0;
        var mergeMap_1 = require_mergeMap();
        var isFunction_1 = require_isFunction();
        exports.concatMap = concatMap;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js
var require_concatMapTo = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/concatMapTo.js": function(exports) {
        "use strict";
        var concatMapTo = function concatMapTo(innerObservable, resultSelector) {
            return isFunction_1.isFunction(resultSelector) ? concatMap_1.concatMap(function() {
                return innerObservable;
            }, resultSelector) : concatMap_1.concatMap(function() {
                return innerObservable;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concatMapTo = void 0;
        var concatMap_1 = require_concatMap();
        var isFunction_1 = require_isFunction();
        exports.concatMapTo = concatMapTo;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/concat.js
var require_concat2 = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/concat.js": function(exports) {
        "use strict";
        var concat = function concat() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(args);
            return lift_1.operate(function(source, subscriber) {
                concatAll_1.concatAll()(from_1.from(__spreadArray([
                    source
                ], __read(args)), scheduler)).subscribe(subscriber);
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concat = void 0;
        var lift_1 = require_lift();
        var concatAll_1 = require_concatAll();
        var args_1 = require_args();
        var from_1 = require_from();
        exports.concat = concat;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/concatWith.js
var require_concatWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/concatWith.js": function(exports) {
        "use strict";
        var concatWith = function concatWith() {
            var otherSources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                otherSources[_i] = arguments[_i];
            }
            return concat_1.concat.apply(void 0, __spreadArray([], __read(otherSources)));
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.concatWith = void 0;
        var concat_1 = require_concat2();
        exports.concatWith = concatWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js
var require_fromSubscribable = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/observable/fromSubscribable.js": function(exports) {
        "use strict";
        var fromSubscribable = function fromSubscribable(subscribable) {
            return new Observable_1.Observable(function(subscriber) {
                return subscribable.subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.fromSubscribable = void 0;
        var Observable_1 = require_Observable();
        exports.fromSubscribable = fromSubscribable;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/connect.js
var require_connect = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/connect.js": function(exports) {
        "use strict";
        var connect = function connect(selector, config3) {
            if (config3 === void 0) {
                config3 = DEFAULT_CONFIG;
            }
            var connector = config3.connector;
            return lift_1.operate(function(source, subscriber) {
                var subject = connector();
                innerFrom_1.innerFrom(selector(fromSubscribable_1.fromSubscribable(subject))).subscribe(subscriber);
                subscriber.add(source.subscribe(subject));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.connect = void 0;
        var Subject_1 = require_Subject();
        var innerFrom_1 = require_innerFrom();
        var lift_1 = require_lift();
        var fromSubscribable_1 = require_fromSubscribable();
        var DEFAULT_CONFIG = {
            connector: function connector() {
                return new Subject_1.Subject();
            }
        };
        exports.connect = connect;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/count.js
var require_count = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/count.js": function(exports) {
        "use strict";
        var count = function count(predicate) {
            return reduce_1.reduce(function(total, value1, i) {
                return !predicate || predicate(value1, i) ? total + 1 : total;
            }, 0);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.count = void 0;
        var reduce_1 = require_reduce();
        exports.count = count;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/debounce.js
var require_debounce = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/debounce.js": function(exports) {
        "use strict";
        var debounce = function debounce(durationSelector) {
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                var lastValue = null;
                var durationSubscriber = null;
                var emit = function emit() {
                    durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                    durationSubscriber = null;
                    if (hasValue) {
                        hasValue = false;
                        var value1 = lastValue;
                        lastValue = null;
                        subscriber.next(value1);
                    }
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                    hasValue = true;
                    lastValue = value1;
                    durationSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, emit, noop_1.noop);
                    innerFrom_1.innerFrom(durationSelector(value1)).subscribe(durationSubscriber);
                }, function() {
                    emit();
                    subscriber.complete();
                }, void 0, function() {
                    lastValue = durationSubscriber = null;
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.debounce = void 0;
        var lift_1 = require_lift();
        var noop_1 = require_noop();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.debounce = debounce;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js
var require_debounceTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/debounceTime.js": function(exports) {
        "use strict";
        var debounceTime = function debounceTime(dueTime, scheduler) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            return lift_1.operate(function(source, subscriber) {
                var activeTask = null;
                var lastValue = null;
                var lastTime = null;
                var emit = function emit() {
                    if (activeTask) {
                        activeTask.unsubscribe();
                        activeTask = null;
                        var value1 = lastValue;
                        lastValue = null;
                        subscriber.next(value1);
                    }
                };
                function emitWhenIdle() {
                    var targetTime = lastTime + dueTime;
                    var now = scheduler.now();
                    if (now < targetTime) {
                        activeTask = this.schedule(void 0, targetTime - now);
                        subscriber.add(activeTask);
                        return;
                    }
                    emit();
                }
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    lastValue = value1;
                    lastTime = scheduler.now();
                    if (!activeTask) {
                        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                        subscriber.add(activeTask);
                    }
                }, function() {
                    emit();
                    subscriber.complete();
                }, void 0, function() {
                    lastValue = activeTask = null;
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.debounceTime = void 0;
        var async_1 = require_async();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.debounceTime = debounceTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js
var require_defaultIfEmpty = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/defaultIfEmpty.js": function(exports) {
        "use strict";
        var defaultIfEmpty = function defaultIfEmpty(defaultValue) {
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    hasValue = true;
                    subscriber.next(value1);
                }, function() {
                    if (!hasValue) {
                        subscriber.next(defaultValue);
                    }
                    subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.defaultIfEmpty = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.defaultIfEmpty = defaultIfEmpty;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/take.js
var require_take = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/take.js": function(exports) {
        "use strict";
        var take = function take(count) {
            return count <= 0 ? function() {
                return empty_1.EMPTY;
            } : lift_1.operate(function(source, subscriber) {
                var seen = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    if (++seen <= count) {
                        subscriber.next(value1);
                        if (count <= seen) {
                            subscriber.complete();
                        }
                    }
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.take = void 0;
        var empty_1 = require_empty();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.take = take;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js
var require_ignoreElements = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/ignoreElements.js": function(exports) {
        "use strict";
        var ignoreElements = function ignoreElements() {
            return lift_1.operate(function(source, subscriber) {
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, noop_1.noop));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ignoreElements = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        exports.ignoreElements = ignoreElements;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mapTo.js
var require_mapTo = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mapTo.js": function(exports) {
        "use strict";
        var mapTo = function mapTo(value1) {
            return map_1.map(function() {
                return value1;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mapTo = void 0;
        var map_1 = require_map();
        exports.mapTo = mapTo;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js
var require_delayWhen = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/delayWhen.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.delayWhen = void 0;
        var concat_1 = require_concat();
        var take_1 = require_take();
        var ignoreElements_1 = require_ignoreElements();
        var mapTo_1 = require_mapTo();
        var mergeMap_1 = require_mergeMap();
        var innerFrom_1 = require_innerFrom();
        function delayWhen(delayDurationSelector, subscriptionDelay) {
            if (subscriptionDelay) {
                return function(source) {
                    return concat_1.concat(subscriptionDelay.pipe(take_1.take(1), ignoreElements_1.ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
                };
            }
            return mergeMap_1.mergeMap(function(value1, index) {
                return innerFrom_1.innerFrom(delayDurationSelector(value1, index)).pipe(take_1.take(1), mapTo_1.mapTo(value1));
            });
        }
        exports.delayWhen = delayWhen;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/delay.js
var require_delay = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/delay.js": function(exports) {
        "use strict";
        var delay = function delay(due, scheduler) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            var duration = timer_1.timer(due, scheduler);
            return delayWhen_1.delayWhen(function() {
                return duration;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.delay = void 0;
        var async_1 = require_async();
        var delayWhen_1 = require_delayWhen();
        var timer_1 = require_timer();
        exports.delay = delay;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js
var require_dematerialize = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/dematerialize.js": function(exports) {
        "use strict";
        var dematerialize = function dematerialize() {
            return lift_1.operate(function(source, subscriber) {
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(notification) {
                    return Notification_1.observeNotification(notification, subscriber);
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.dematerialize = void 0;
        var Notification_1 = require_Notification();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.dematerialize = dematerialize;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/distinct.js
var require_distinct = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/distinct.js": function(exports) {
        "use strict";
        var distinct = function distinct(keySelector, flushes) {
            return lift_1.operate(function(source, subscriber) {
                var distinctKeys = /* @__PURE__ */ new Set();
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var key = keySelector ? keySelector(value1) : value1;
                    if (!distinctKeys.has(key)) {
                        distinctKeys.add(key);
                        subscriber.next(value1);
                    }
                }));
                flushes && innerFrom_1.innerFrom(flushes).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    return distinctKeys.clear();
                }, noop_1.noop));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.distinct = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        var innerFrom_1 = require_innerFrom();
        exports.distinct = distinct;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js
var require_distinctUntilChanged = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/distinctUntilChanged.js": function(exports) {
        "use strict";
        var distinctUntilChanged2 = function distinctUntilChanged2(comparator, keySelector) {
            if (keySelector === void 0) {
                keySelector = identity_1.identity;
            }
            comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
            return lift_1.operate(function(source, subscriber) {
                var previousKey;
                var first2 = true;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var currentKey = keySelector(value1);
                    if (first2 || !comparator(previousKey, currentKey)) {
                        first2 = false;
                        previousKey = currentKey;
                        subscriber.next(value1);
                    }
                }));
            });
        };
        var defaultCompare = function defaultCompare(a, b) {
            return a === b;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.distinctUntilChanged = void 0;
        var identity_1 = require_identity();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.distinctUntilChanged = distinctUntilChanged2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js
var require_distinctUntilKeyChanged = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/distinctUntilKeyChanged.js": function(exports) {
        "use strict";
        var distinctUntilKeyChanged = function distinctUntilKeyChanged(key, compare) {
            return distinctUntilChanged_1.distinctUntilChanged(function(x, y) {
                return compare ? compare(x[key], y[key]) : x[key] === y[key];
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.distinctUntilKeyChanged = void 0;
        var distinctUntilChanged_1 = require_distinctUntilChanged();
        exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js
var require_throwIfEmpty = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/throwIfEmpty.js": function(exports) {
        "use strict";
        var throwIfEmpty = function throwIfEmpty(errorFactory) {
            if (errorFactory === void 0) {
                errorFactory = defaultErrorFactory;
            }
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    hasValue = true;
                    subscriber.next(value1);
                }, function() {
                    return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
                }));
            });
        };
        var defaultErrorFactory = function defaultErrorFactory() {
            return new EmptyError_1.EmptyError();
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.throwIfEmpty = void 0;
        var EmptyError_1 = require_EmptyError();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.throwIfEmpty = throwIfEmpty;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/elementAt.js
var require_elementAt = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/elementAt.js": function(exports) {
        "use strict";
        var elementAt = function elementAt(index, defaultValue) {
            if (index < 0) {
                throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
            }
            var hasDefaultValue = arguments.length >= 2;
            return function(source) {
                return source.pipe(filter_1.filter(function(v, i) {
                    return i === index;
                }), take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
                    return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
                }));
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.elementAt = void 0;
        var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
        var filter_1 = require_filter();
        var throwIfEmpty_1 = require_throwIfEmpty();
        var defaultIfEmpty_1 = require_defaultIfEmpty();
        var take_1 = require_take();
        exports.elementAt = elementAt;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/endWith.js
var require_endWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/endWith.js": function(exports) {
        "use strict";
        var endWith = function endWith() {
            var values = [];
            for(var _i = 0; _i < arguments.length; _i++){
                values[_i] = arguments[_i];
            }
            return function(source) {
                return concat_1.concat(source, of_1.of.apply(void 0, __spreadArray([], __read(values))));
            };
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.endWith = void 0;
        var concat_1 = require_concat();
        var of_1 = require_of();
        exports.endWith = endWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/every.js
var require_every = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/every.js": function(exports) {
        "use strict";
        var every = function every(predicate, thisArg) {
            return lift_1.operate(function(source, subscriber) {
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    if (!predicate.call(thisArg, value1, index++, source)) {
                        subscriber.next(false);
                        subscriber.complete();
                    }
                }, function() {
                    subscriber.next(true);
                    subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.every = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.every = every;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js
var require_exhaustMap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/exhaustMap.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.exhaustMap = void 0;
        var map_1 = require_map();
        var innerFrom_1 = require_innerFrom();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        function exhaustMap(project, resultSelector) {
            if (resultSelector) {
                return function(source) {
                    return source.pipe(exhaustMap(function(a, i) {
                        return innerFrom_1.innerFrom(project(a, i)).pipe(map_1.map(function(b, ii) {
                            return resultSelector(a, b, i, ii);
                        }));
                    }));
                };
            }
            return lift_1.operate(function(source, subscriber) {
                var index = 0;
                var innerSub = null;
                var isComplete = false;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(outerValue) {
                    if (!innerSub) {
                        innerSub = OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
                            innerSub = null;
                            isComplete && subscriber.complete();
                        });
                        innerFrom_1.innerFrom(project(outerValue, index++)).subscribe(innerSub);
                    }
                }, function() {
                    isComplete = true;
                    !innerSub && subscriber.complete();
                }));
            });
        }
        exports.exhaustMap = exhaustMap;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js
var require_exhaustAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/exhaustAll.js": function(exports) {
        "use strict";
        var exhaustAll = function exhaustAll() {
            return exhaustMap_1.exhaustMap(identity_1.identity);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.exhaustAll = void 0;
        var exhaustMap_1 = require_exhaustMap();
        var identity_1 = require_identity();
        exports.exhaustAll = exhaustAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/exhaust.js
var require_exhaust = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/exhaust.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.exhaust = void 0;
        var exhaustAll_1 = require_exhaustAll();
        exports.exhaust = exhaustAll_1.exhaustAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/expand.js
var require_expand = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/expand.js": function(exports) {
        "use strict";
        var expand2 = function expand2(project, concurrent, scheduler) {
            if (concurrent === void 0) {
                concurrent = Infinity;
            }
            concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
            return lift_1.operate(function(source, subscriber) {
                return mergeInternals_1.mergeInternals(source, subscriber, project, concurrent, void 0, true, scheduler);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.expand = void 0;
        var lift_1 = require_lift();
        var mergeInternals_1 = require_mergeInternals();
        exports.expand = expand2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/finalize.js
var require_finalize = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/finalize.js": function(exports) {
        "use strict";
        var finalize = function finalize(callback) {
            return lift_1.operate(function(source, subscriber) {
                try {
                    source.subscribe(subscriber);
                } finally{
                    subscriber.add(callback);
                }
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.finalize = void 0;
        var lift_1 = require_lift();
        exports.finalize = finalize;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/find.js
var require_find = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/find.js": function(exports) {
        "use strict";
        var find = function find(predicate, thisArg) {
            return lift_1.operate(createFind(predicate, thisArg, "value"));
        };
        var createFind = function createFind(predicate, thisArg, emit) {
            var findIndex = emit === "index";
            return function(source, subscriber) {
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var i = index++;
                    if (predicate.call(thisArg, value1, i, source)) {
                        subscriber.next(findIndex ? i : value1);
                        subscriber.complete();
                    }
                }, function() {
                    subscriber.next(findIndex ? -1 : void 0);
                    subscriber.complete();
                }));
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createFind = exports.find = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.find = find;
        exports.createFind = createFind;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/findIndex.js
var require_findIndex = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/findIndex.js": function(exports) {
        "use strict";
        var findIndex = function findIndex(predicate, thisArg) {
            return lift_1.operate(find_1.createFind(predicate, thisArg, "index"));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.findIndex = void 0;
        var lift_1 = require_lift();
        var find_1 = require_find();
        exports.findIndex = findIndex;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/first.js
var require_first = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/first.js": function(exports) {
        "use strict";
        var first2 = function first2(predicate, defaultValue) {
            var hasDefaultValue = arguments.length >= 2;
            return function(source) {
                return source.pipe(predicate ? filter_1.filter(function(v, i) {
                    return predicate(v, i, source);
                }) : identity_1.identity, take_1.take(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
                    return new EmptyError_1.EmptyError();
                }));
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.first = void 0;
        var EmptyError_1 = require_EmptyError();
        var filter_1 = require_filter();
        var take_1 = require_take();
        var defaultIfEmpty_1 = require_defaultIfEmpty();
        var throwIfEmpty_1 = require_throwIfEmpty();
        var identity_1 = require_identity();
        exports.first = first2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/groupBy.js
var require_groupBy = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/groupBy.js": function(exports) {
        "use strict";
        var groupBy = function groupBy(keySelector, elementOrOptions, duration, connector) {
            return lift_1.operate(function(source, subscriber) {
                var element;
                if (!elementOrOptions || typeof elementOrOptions === "function") {
                    element = elementOrOptions;
                } else {
                    duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
                }
                var groups = /* @__PURE__ */ new Map();
                var notify = function notify(cb) {
                    groups.forEach(cb);
                    cb(subscriber);
                };
                var handleError = function handleError(err) {
                    return notify(function(consumer) {
                        return consumer.error(err);
                    });
                };
                var activeGroups = 0;
                var teardownAttempted = false;
                var groupBySourceSubscriber = new OperatorSubscriber_1.OperatorSubscriber(subscriber, function(value1) {
                    try {
                        var key_1 = keySelector(value1);
                        var group_1 = groups.get(key_1);
                        if (!group_1) {
                            groups.set(key_1, group_1 = connector ? connector() : new Subject_1.Subject());
                            var grouped = createGroupedObservable(key_1, group_1);
                            subscriber.next(grouped);
                            if (duration) {
                                var durationSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(group_1, function() {
                                    group_1.complete();
                                    durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                                }, void 0, void 0, function() {
                                    return groups.delete(key_1);
                                });
                                groupBySourceSubscriber.add(innerFrom_1.innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
                            }
                        }
                        group_1.next(element ? element(value1) : value1);
                    } catch (err) {
                        handleError(err);
                    }
                }, function() {
                    return notify(function(consumer) {
                        return consumer.complete();
                    });
                }, handleError, function() {
                    return groups.clear();
                }, function() {
                    teardownAttempted = true;
                    return activeGroups === 0;
                });
                source.subscribe(groupBySourceSubscriber);
                function createGroupedObservable(key, groupSubject) {
                    var result = new Observable_1.Observable(function(groupSubscriber) {
                        activeGroups++;
                        var innerSub = groupSubject.subscribe(groupSubscriber);
                        return function() {
                            innerSub.unsubscribe();
                            --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
                        };
                    });
                    result.key = key;
                    return result;
                }
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.groupBy = void 0;
        var Observable_1 = require_Observable();
        var innerFrom_1 = require_innerFrom();
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.groupBy = groupBy;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js
var require_isEmpty = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/isEmpty.js": function(exports) {
        "use strict";
        var isEmpty = function isEmpty() {
            return lift_1.operate(function(source, subscriber) {
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    subscriber.next(false);
                    subscriber.complete();
                }, function() {
                    subscriber.next(true);
                    subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.isEmpty = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.isEmpty = isEmpty;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/takeLast.js
var require_takeLast = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/takeLast.js": function(exports) {
        "use strict";
        var takeLast = function takeLast(count) {
            return count <= 0 ? function() {
                return empty_1.EMPTY;
            } : lift_1.operate(function(source, subscriber) {
                var buffer = [];
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    buffer.push(value1);
                    count < buffer.length && buffer.shift();
                }, function() {
                    var e_1, _a;
                    try {
                        for(var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()){
                            var value1 = buffer_1_1.value;
                            subscriber.next(value1);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    subscriber.complete();
                }, void 0, function() {
                    buffer = null;
                }));
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.takeLast = void 0;
        var empty_1 = require_empty();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.takeLast = takeLast;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/last.js
var require_last = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/last.js": function(exports) {
        "use strict";
        var last = function last(predicate, defaultValue) {
            var hasDefaultValue = arguments.length >= 2;
            return function(source) {
                return source.pipe(predicate ? filter_1.filter(function(v, i) {
                    return predicate(v, i, source);
                }) : identity_1.identity, takeLast_1.takeLast(1), hasDefaultValue ? defaultIfEmpty_1.defaultIfEmpty(defaultValue) : throwIfEmpty_1.throwIfEmpty(function() {
                    return new EmptyError_1.EmptyError();
                }));
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.last = void 0;
        var EmptyError_1 = require_EmptyError();
        var filter_1 = require_filter();
        var takeLast_1 = require_takeLast();
        var throwIfEmpty_1 = require_throwIfEmpty();
        var defaultIfEmpty_1 = require_defaultIfEmpty();
        var identity_1 = require_identity();
        exports.last = last;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/materialize.js
var require_materialize = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/materialize.js": function(exports) {
        "use strict";
        var materialize = function materialize() {
            return lift_1.operate(function(source, subscriber) {
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    subscriber.next(Notification_1.Notification.createNext(value1));
                }, function() {
                    subscriber.next(Notification_1.Notification.createComplete());
                    subscriber.complete();
                }, function(err) {
                    subscriber.next(Notification_1.Notification.createError(err));
                    subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.materialize = void 0;
        var Notification_1 = require_Notification();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.materialize = materialize;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/max.js
var require_max = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/max.js": function(exports) {
        "use strict";
        var max3 = function max3(comparer) {
            return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
                return comparer(x, y) > 0 ? x : y;
            } : function(x, y) {
                return x > y ? x : y;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.max = void 0;
        var reduce_1 = require_reduce();
        var isFunction_1 = require_isFunction();
        exports.max = max3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/flatMap.js
var require_flatMap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/flatMap.js": function(exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.flatMap = void 0;
        var mergeMap_1 = require_mergeMap();
        exports.flatMap = mergeMap_1.mergeMap;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js
var require_mergeMapTo = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeMapTo.js": function(exports) {
        "use strict";
        var mergeMapTo = function mergeMapTo(innerObservable, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Infinity;
            }
            if (isFunction_1.isFunction(resultSelector)) {
                return mergeMap_1.mergeMap(function() {
                    return innerObservable;
                }, resultSelector, concurrent);
            }
            if (typeof resultSelector === "number") {
                concurrent = resultSelector;
            }
            return mergeMap_1.mergeMap(function() {
                return innerObservable;
            }, concurrent);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeMapTo = void 0;
        var mergeMap_1 = require_mergeMap();
        var isFunction_1 = require_isFunction();
        exports.mergeMapTo = mergeMapTo;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js
var require_mergeScan = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeScan.js": function(exports) {
        "use strict";
        var mergeScan = function mergeScan(accumulator, seed, concurrent) {
            if (concurrent === void 0) {
                concurrent = Infinity;
            }
            return lift_1.operate(function(source, subscriber) {
                var state2 = seed;
                return mergeInternals_1.mergeInternals(source, subscriber, function(value1, index) {
                    return accumulator(state2, value1, index);
                }, concurrent, function(value1) {
                    state2 = value1;
                }, false, void 0, function() {
                    return state2 = null;
                });
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeScan = void 0;
        var lift_1 = require_lift();
        var mergeInternals_1 = require_mergeInternals();
        exports.mergeScan = mergeScan;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/merge.js
var require_merge2 = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/merge.js": function(exports) {
        "use strict";
        var merge = function merge() {
            var args = [];
            for(var _i = 0; _i < arguments.length; _i++){
                args[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(args);
            var concurrent = args_1.popNumber(args, Infinity);
            args = argsOrArgArray_1.argsOrArgArray(args);
            return lift_1.operate(function(source, subscriber) {
                mergeAll_1.mergeAll(concurrent)(from_1.from(__spreadArray([
                    source
                ], __read(args)), scheduler)).subscribe(subscriber);
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.merge = void 0;
        var lift_1 = require_lift();
        var argsOrArgArray_1 = require_argsOrArgArray();
        var mergeAll_1 = require_mergeAll();
        var args_1 = require_args();
        var from_1 = require_from();
        exports.merge = merge;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js
var require_mergeWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/mergeWith.js": function(exports) {
        "use strict";
        var mergeWith = function mergeWith() {
            var otherSources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                otherSources[_i] = arguments[_i];
            }
            return merge_1.merge.apply(void 0, __spreadArray([], __read(otherSources)));
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.mergeWith = void 0;
        var merge_1 = require_merge2();
        exports.mergeWith = mergeWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/min.js
var require_min = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/min.js": function(exports) {
        "use strict";
        var min = function min(comparer) {
            return reduce_1.reduce(isFunction_1.isFunction(comparer) ? function(x, y) {
                return comparer(x, y) < 0 ? x : y;
            } : function(x, y) {
                return x < y ? x : y;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.min = void 0;
        var reduce_1 = require_reduce();
        var isFunction_1 = require_isFunction();
        exports.min = min;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/multicast.js
var require_multicast = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/multicast.js": function(exports) {
        "use strict";
        var multicast = function multicast(subjectOrSubjectFactory, selector) {
            var subjectFactory = isFunction_1.isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function subjectFactory() {
                return subjectOrSubjectFactory;
            };
            if (isFunction_1.isFunction(selector)) {
                return connect_1.connect(selector, {
                    connector: subjectFactory
                });
            }
            return function(source) {
                return new ConnectableObservable_1.ConnectableObservable(source, subjectFactory);
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.multicast = void 0;
        var ConnectableObservable_1 = require_ConnectableObservable();
        var isFunction_1 = require_isFunction();
        var connect_1 = require_connect();
        exports.multicast = multicast;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js
var require_onErrorResumeNextWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/onErrorResumeNextWith.js": function(exports) {
        "use strict";
        var onErrorResumeNextWith = function onErrorResumeNextWith() {
            var sources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                sources[_i] = arguments[_i];
            }
            var nextSources = argsOrArgArray_1.argsOrArgArray(sources);
            return function(source) {
                return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, __spreadArray([
                    source
                ], __read(nextSources)));
            };
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.onErrorResumeNext = exports.onErrorResumeNextWith = void 0;
        var argsOrArgArray_1 = require_argsOrArgArray();
        var onErrorResumeNext_1 = require_onErrorResumeNext();
        exports.onErrorResumeNextWith = onErrorResumeNextWith;
        exports.onErrorResumeNext = onErrorResumeNextWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/pairwise.js
var require_pairwise = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/pairwise.js": function(exports) {
        "use strict";
        var pairwise = function pairwise() {
            return lift_1.operate(function(source, subscriber) {
                var prev;
                var hasPrev = false;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var p = prev;
                    prev = value1;
                    hasPrev && subscriber.next([
                        p,
                        value1
                    ]);
                    hasPrev = true;
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.pairwise = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.pairwise = pairwise;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/pluck.js
var require_pluck = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/pluck.js": function(exports) {
        "use strict";
        var pluck = function pluck() {
            var properties = [];
            for(var _i = 0; _i < arguments.length; _i++){
                properties[_i] = arguments[_i];
            }
            var length = properties.length;
            if (length === 0) {
                throw new Error("list of properties cannot be empty.");
            }
            return map_1.map(function(x) {
                var currentProp = x;
                for(var i = 0; i < length; i++){
                    var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
                    if (typeof p !== "undefined") {
                        currentProp = p;
                    } else {
                        return void 0;
                    }
                }
                return currentProp;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.pluck = void 0;
        var map_1 = require_map();
        exports.pluck = pluck;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/publish.js
var require_publish = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/publish.js": function(exports) {
        "use strict";
        var publish = function publish(selector) {
            return selector ? function(source) {
                return connect_1.connect(selector)(source);
            } : function(source) {
                return multicast_1.multicast(new Subject_1.Subject())(source);
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.publish = void 0;
        var Subject_1 = require_Subject();
        var multicast_1 = require_multicast();
        var connect_1 = require_connect();
        exports.publish = publish;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js
var require_publishBehavior = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/publishBehavior.js": function(exports) {
        "use strict";
        var publishBehavior = function publishBehavior(initialValue) {
            return function(source) {
                var subject = new BehaviorSubject_1.BehaviorSubject(initialValue);
                return new ConnectableObservable_1.ConnectableObservable(source, function() {
                    return subject;
                });
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.publishBehavior = void 0;
        var BehaviorSubject_1 = require_BehaviorSubject();
        var ConnectableObservable_1 = require_ConnectableObservable();
        exports.publishBehavior = publishBehavior;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/publishLast.js
var require_publishLast = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/publishLast.js": function(exports) {
        "use strict";
        var publishLast = function publishLast() {
            return function(source) {
                var subject = new AsyncSubject_1.AsyncSubject();
                return new ConnectableObservable_1.ConnectableObservable(source, function() {
                    return subject;
                });
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.publishLast = void 0;
        var AsyncSubject_1 = require_AsyncSubject();
        var ConnectableObservable_1 = require_ConnectableObservable();
        exports.publishLast = publishLast;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js
var require_publishReplay = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/publishReplay.js": function(exports) {
        "use strict";
        var publishReplay3 = function publishReplay3(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
            if (selectorOrScheduler && !isFunction_1.isFunction(selectorOrScheduler)) {
                timestampProvider = selectorOrScheduler;
            }
            var selector = isFunction_1.isFunction(selectorOrScheduler) ? selectorOrScheduler : void 0;
            return function(source) {
                return multicast_1.multicast(new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.publishReplay = void 0;
        var ReplaySubject_1 = require_ReplaySubject();
        var multicast_1 = require_multicast();
        var isFunction_1 = require_isFunction();
        exports.publishReplay = publishReplay3;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/raceWith.js
var require_raceWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/raceWith.js": function(exports) {
        "use strict";
        var raceWith = function raceWith() {
            var otherSources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                otherSources[_i] = arguments[_i];
            }
            return !otherSources.length ? identity_1.identity : lift_1.operate(function(source, subscriber) {
                race_1.raceInit(__spreadArray([
                    source
                ], __read(otherSources)))(subscriber);
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.raceWith = void 0;
        var race_1 = require_race();
        var lift_1 = require_lift();
        var identity_1 = require_identity();
        exports.raceWith = raceWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/repeat.js
var require_repeat = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/repeat.js": function(exports) {
        "use strict";
        var repeat = function repeat(countOrConfig) {
            var _a;
            var count = Infinity;
            var delay;
            if (countOrConfig != null) {
                if (typeof countOrConfig === "object") {
                    _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;
                } else {
                    count = countOrConfig;
                }
            }
            return count <= 0 ? function() {
                return empty_1.EMPTY;
            } : lift_1.operate(function(source, subscriber) {
                var soFar = 0;
                var sourceSub;
                var resubscribe = function resubscribe() {
                    sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
                    sourceSub = null;
                    if (delay != null) {
                        var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(soFar));
                        var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                            notifierSubscriber_1.unsubscribe();
                            subscribeToSource();
                        });
                        notifier.subscribe(notifierSubscriber_1);
                    } else {
                        subscribeToSource();
                    }
                };
                var subscribeToSource = function subscribeToSource() {
                    var syncUnsub = false;
                    sourceSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
                        if (++soFar < count) {
                            if (sourceSub) {
                                resubscribe();
                            } else {
                                syncUnsub = true;
                            }
                        } else {
                            subscriber.complete();
                        }
                    }));
                    if (syncUnsub) {
                        resubscribe();
                    }
                };
                subscribeToSource();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.repeat = void 0;
        var empty_1 = require_empty();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        var timer_1 = require_timer();
        exports.repeat = repeat;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js
var require_repeatWhen = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/repeatWhen.js": function(exports) {
        "use strict";
        var repeatWhen = function repeatWhen(notifier) {
            return lift_1.operate(function(source, subscriber) {
                var innerSub;
                var syncResub = false;
                var completions$;
                var isNotifierComplete = false;
                var isMainComplete = false;
                var checkComplete = function checkComplete() {
                    return isMainComplete && isNotifierComplete && (subscriber.complete(), true);
                };
                var getCompletionSubject = function getCompletionSubject() {
                    if (!completions$) {
                        completions$ = new Subject_1.Subject();
                        innerFrom_1.innerFrom(notifier(completions$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                            if (innerSub) {
                                subscribeForRepeatWhen();
                            } else {
                                syncResub = true;
                            }
                        }, function() {
                            isNotifierComplete = true;
                            checkComplete();
                        }));
                    }
                    return completions$;
                };
                var subscribeForRepeatWhen = function subscribeForRepeatWhen1() {
                    isMainComplete = false;
                    innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, function() {
                        isMainComplete = true;
                        !checkComplete() && getCompletionSubject().next();
                    }));
                    if (syncResub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        syncResub = false;
                        subscribeForRepeatWhen();
                    }
                };
                subscribeForRepeatWhen();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.repeatWhen = void 0;
        var innerFrom_1 = require_innerFrom();
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.repeatWhen = repeatWhen;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/retry.js
var require_retry = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/retry.js": function(exports) {
        "use strict";
        var retry = function retry(configOrCount) {
            if (configOrCount === void 0) {
                configOrCount = Infinity;
            }
            var config3;
            if (configOrCount && typeof configOrCount === "object") {
                config3 = configOrCount;
            } else {
                config3 = {
                    count: configOrCount
                };
            }
            var _a = config3.count, count = _a === void 0 ? Infinity : _a, delay = config3.delay, _b = config3.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
            return count <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
                var soFar = 0;
                var innerSub;
                var subscribeForRetry = function subscribeForRetry1() {
                    var syncUnsub = false;
                    innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                        if (resetOnSuccess) {
                            soFar = 0;
                        }
                        subscriber.next(value1);
                    }, void 0, function(err) {
                        if (soFar++ < count) {
                            var resub_1 = function resub_1() {
                                if (innerSub) {
                                    innerSub.unsubscribe();
                                    innerSub = null;
                                    subscribeForRetry();
                                } else {
                                    syncUnsub = true;
                                }
                            };
                            if (delay != null) {
                                var notifier = typeof delay === "number" ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(err, soFar));
                                var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                                    notifierSubscriber_1.unsubscribe();
                                    resub_1();
                                }, function() {
                                    subscriber.complete();
                                });
                                notifier.subscribe(notifierSubscriber_1);
                            } else {
                                resub_1();
                            }
                        } else {
                            subscriber.error(err);
                        }
                    }));
                    if (syncUnsub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        subscribeForRetry();
                    }
                };
                subscribeForRetry();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.retry = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var identity_1 = require_identity();
        var timer_1 = require_timer();
        var innerFrom_1 = require_innerFrom();
        exports.retry = retry;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js
var require_retryWhen = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/retryWhen.js": function(exports) {
        "use strict";
        var retryWhen = function retryWhen(notifier) {
            return lift_1.operate(function(source, subscriber) {
                var innerSub;
                var syncResub = false;
                var errors$;
                var subscribeForRetryWhen = function subscribeForRetryWhen1() {
                    innerSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
                        if (!errors$) {
                            errors$ = new Subject_1.Subject();
                            innerFrom_1.innerFrom(notifier(errors$)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                                return innerSub ? subscribeForRetryWhen() : syncResub = true;
                            }));
                        }
                        if (errors$) {
                            errors$.next(err);
                        }
                    }));
                    if (syncResub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        syncResub = false;
                        subscribeForRetryWhen();
                    }
                };
                subscribeForRetryWhen();
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.retryWhen = void 0;
        var innerFrom_1 = require_innerFrom();
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.retryWhen = retryWhen;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/sample.js
var require_sample = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/sample.js": function(exports) {
        "use strict";
        var sample = function sample(notifier) {
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                var lastValue = null;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    hasValue = true;
                    lastValue = value1;
                }));
                innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    if (hasValue) {
                        hasValue = false;
                        var value1 = lastValue;
                        lastValue = null;
                        subscriber.next(value1);
                    }
                }, noop_1.noop));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sample = void 0;
        var innerFrom_1 = require_innerFrom();
        var lift_1 = require_lift();
        var noop_1 = require_noop();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.sample = sample;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js
var require_sampleTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/sampleTime.js": function(exports) {
        "use strict";
        var sampleTime = function sampleTime(period, scheduler) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            return sample_1.sample(interval_1.interval(period, scheduler));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sampleTime = void 0;
        var async_1 = require_async();
        var sample_1 = require_sample();
        var interval_1 = require_interval();
        exports.sampleTime = sampleTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/scan.js
var require_scan = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/scan.js": function(exports) {
        "use strict";
        var scan = function scan(accumulator, seed) {
            return lift_1.operate(scanInternals_1.scanInternals(accumulator, seed, arguments.length >= 2, true));
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.scan = void 0;
        var lift_1 = require_lift();
        var scanInternals_1 = require_scanInternals();
        exports.scan = scan;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js
var require_sequenceEqual = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/sequenceEqual.js": function(exports) {
        "use strict";
        var sequenceEqual = function sequenceEqual(compareTo, comparator) {
            if (comparator === void 0) {
                comparator = function comparator(a, b) {
                    return a === b;
                };
            }
            return lift_1.operate(function(source, subscriber) {
                var aState = createState();
                var bState = createState();
                var emit = function emit(isEqual) {
                    subscriber.next(isEqual);
                    subscriber.complete();
                };
                var createSubscriber = function createSubscriber(selfState, otherState) {
                    var sequenceEqualSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(a) {
                        var buffer = otherState.buffer, complete = otherState.complete;
                        if (buffer.length === 0) {
                            complete ? emit(false) : selfState.buffer.push(a);
                        } else {
                            !comparator(a, buffer.shift()) && emit(false);
                        }
                    }, function() {
                        selfState.complete = true;
                        var complete = otherState.complete, buffer = otherState.buffer;
                        complete && emit(buffer.length === 0);
                        sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
                    });
                    return sequenceEqualSubscriber;
                };
                source.subscribe(createSubscriber(aState, bState));
                innerFrom_1.innerFrom(compareTo).subscribe(createSubscriber(bState, aState));
            });
        };
        var createState = function createState() {
            return {
                buffer: [],
                complete: false
            };
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.sequenceEqual = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.sequenceEqual = sequenceEqual;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/share.js
var require_share = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/share.js": function(exports) {
        "use strict";
        var share = function share(options) {
            if (options === void 0) {
                options = {};
            }
            var _a = options.connector, connector = _a === void 0 ? function connector() {
                return new Subject_1.Subject();
            } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
            return function(wrapperSource) {
                var connection;
                var resetConnection;
                var subject;
                var refCount3 = 0;
                var hasCompleted = false;
                var hasErrored = false;
                var cancelReset = function cancelReset() {
                    resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
                    resetConnection = void 0;
                };
                var reset = function reset() {
                    cancelReset();
                    connection = subject = void 0;
                    hasCompleted = hasErrored = false;
                };
                var resetAndUnsubscribe = function resetAndUnsubscribe() {
                    var conn = connection;
                    reset();
                    conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
                };
                return lift_1.operate(function(source, subscriber) {
                    refCount3++;
                    if (!hasErrored && !hasCompleted) {
                        cancelReset();
                    }
                    var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
                    subscriber.add(function() {
                        refCount3--;
                        if (refCount3 === 0 && !hasErrored && !hasCompleted) {
                            resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                        }
                    });
                    dest.subscribe(subscriber);
                    if (!connection && refCount3 > 0) {
                        connection = new Subscriber_1.SafeSubscriber({
                            next: function next(value1) {
                                return dest.next(value1);
                            },
                            error: function error(err) {
                                hasErrored = true;
                                cancelReset();
                                resetConnection = handleReset(reset, resetOnError, err);
                                dest.error(err);
                            },
                            complete: function complete() {
                                hasCompleted = true;
                                cancelReset();
                                resetConnection = handleReset(reset, resetOnComplete);
                                dest.complete();
                            }
                        });
                        innerFrom_1.innerFrom(source).subscribe(connection);
                    }
                })(wrapperSource);
            };
        };
        var handleReset = function handleReset(reset, on) {
            var args = [];
            for(var _i = 2; _i < arguments.length; _i++){
                args[_i - 2] = arguments[_i];
            }
            if (on === true) {
                reset();
                return;
            }
            if (on === false) {
                return;
            }
            var onSubscriber = new Subscriber_1.SafeSubscriber({
                next: function next() {
                    onSubscriber.unsubscribe();
                    reset();
                }
            });
            return innerFrom_1.innerFrom(on.apply(void 0, __spreadArray([], __read(args)))).subscribe(onSubscriber);
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.share = void 0;
        var innerFrom_1 = require_innerFrom();
        var Subject_1 = require_Subject();
        var Subscriber_1 = require_Subscriber();
        var lift_1 = require_lift();
        exports.share = share;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js
var require_shareReplay = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/shareReplay.js": function(exports) {
        "use strict";
        var shareReplay = function shareReplay(configOrBufferSize, windowTime, scheduler) {
            var _a, _b, _c;
            var bufferSize;
            var refCount3 = false;
            if (configOrBufferSize && typeof configOrBufferSize === "object") {
                _a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount3 = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler;
            } else {
                bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
            }
            return share_1.share({
                connector: function connector() {
                    return new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
                },
                resetOnError: true,
                resetOnComplete: false,
                resetOnRefCountZero: refCount3
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.shareReplay = void 0;
        var ReplaySubject_1 = require_ReplaySubject();
        var share_1 = require_share();
        exports.shareReplay = shareReplay;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/single.js
var require_single = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/single.js": function(exports) {
        "use strict";
        var single = function single(predicate) {
            return lift_1.operate(function(source, subscriber) {
                var hasValue = false;
                var singleValue;
                var seenValue = false;
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    seenValue = true;
                    if (!predicate || predicate(value1, index++, source)) {
                        hasValue && subscriber.error(new SequenceError_1.SequenceError("Too many matching values"));
                        hasValue = true;
                        singleValue = value1;
                    }
                }, function() {
                    if (hasValue) {
                        subscriber.next(singleValue);
                        subscriber.complete();
                    } else {
                        subscriber.error(seenValue ? new NotFoundError_1.NotFoundError("No matching values") : new EmptyError_1.EmptyError());
                    }
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.single = void 0;
        var EmptyError_1 = require_EmptyError();
        var SequenceError_1 = require_SequenceError();
        var NotFoundError_1 = require_NotFoundError();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.single = single;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/skip.js
var require_skip = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/skip.js": function(exports) {
        "use strict";
        var skip = function skip(count) {
            return filter_1.filter(function(_23, index) {
                return count <= index;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.skip = void 0;
        var filter_1 = require_filter();
        exports.skip = skip;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/skipLast.js
var require_skipLast = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/skipLast.js": function(exports) {
        "use strict";
        var skipLast = function skipLast(skipCount) {
            return skipCount <= 0 ? identity_1.identity : lift_1.operate(function(source, subscriber) {
                var ring = new Array(skipCount);
                var seen = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var valueIndex = seen++;
                    if (valueIndex < skipCount) {
                        ring[valueIndex] = value1;
                    } else {
                        var index = valueIndex % skipCount;
                        var oldValue = ring[index];
                        ring[index] = value1;
                        subscriber.next(oldValue);
                    }
                }));
                return function() {
                    ring = null;
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.skipLast = void 0;
        var identity_1 = require_identity();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.skipLast = skipLast;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js
var require_skipUntil = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/skipUntil.js": function(exports) {
        "use strict";
        var skipUntil = function skipUntil(notifier) {
            return lift_1.operate(function(source, subscriber) {
                var taking = false;
                var skipSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
                    taking = true;
                }, noop_1.noop);
                innerFrom_1.innerFrom(notifier).subscribe(skipSubscriber);
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return taking && subscriber.next(value1);
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.skipUntil = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        var noop_1 = require_noop();
        exports.skipUntil = skipUntil;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js
var require_skipWhile = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/skipWhile.js": function(exports) {
        "use strict";
        var skipWhile = function skipWhile(predicate) {
            return lift_1.operate(function(source, subscriber) {
                var taking = false;
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return (taking || (taking = !predicate(value1, index++))) && subscriber.next(value1);
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.skipWhile = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.skipWhile = skipWhile;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/startWith.js
var require_startWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/startWith.js": function(exports) {
        "use strict";
        var startWith5 = function startWith5() {
            var values = [];
            for(var _i = 0; _i < arguments.length; _i++){
                values[_i] = arguments[_i];
            }
            var scheduler = args_1.popScheduler(values);
            return lift_1.operate(function(source, subscriber) {
                (scheduler ? concat_1.concat(values, source, scheduler) : concat_1.concat(values, source)).subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.startWith = void 0;
        var concat_1 = require_concat();
        var args_1 = require_args();
        var lift_1 = require_lift();
        exports.startWith = startWith5;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/switchMap.js
var require_switchMap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/switchMap.js": function(exports) {
        "use strict";
        var switchMap49 = function switchMap49(project, resultSelector) {
            return lift_1.operate(function(source, subscriber) {
                var innerSubscriber = null;
                var index = 0;
                var isComplete = false;
                var checkComplete = function checkComplete() {
                    return isComplete && !innerSubscriber && subscriber.complete();
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
                    var innerIndex = 0;
                    var outerIndex = index++;
                    innerFrom_1.innerFrom(project(value1, outerIndex)).subscribe(innerSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(innerValue) {
                        return subscriber.next(resultSelector ? resultSelector(value1, innerValue, outerIndex, innerIndex++) : innerValue);
                    }, function() {
                        innerSubscriber = null;
                        checkComplete();
                    }));
                }, function() {
                    isComplete = true;
                    checkComplete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.switchMap = void 0;
        var innerFrom_1 = require_innerFrom();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.switchMap = switchMap49;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/switchAll.js
var require_switchAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/switchAll.js": function(exports) {
        "use strict";
        var switchAll = function switchAll() {
            return switchMap_1.switchMap(identity_1.identity);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.switchAll = void 0;
        var switchMap_1 = require_switchMap();
        var identity_1 = require_identity();
        exports.switchAll = switchAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js
var require_switchMapTo = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/switchMapTo.js": function(exports) {
        "use strict";
        var switchMapTo = function switchMapTo(innerObservable, resultSelector) {
            return isFunction_1.isFunction(resultSelector) ? switchMap_1.switchMap(function() {
                return innerObservable;
            }, resultSelector) : switchMap_1.switchMap(function() {
                return innerObservable;
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.switchMapTo = void 0;
        var switchMap_1 = require_switchMap();
        var isFunction_1 = require_isFunction();
        exports.switchMapTo = switchMapTo;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/switchScan.js
var require_switchScan = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/switchScan.js": function(exports) {
        "use strict";
        var switchScan = function switchScan(accumulator, seed) {
            return lift_1.operate(function(source, subscriber) {
                var state2 = seed;
                switchMap_1.switchMap(function(value1, index) {
                    return accumulator(state2, value1, index);
                }, function(_23, innerValue) {
                    return state2 = innerValue, innerValue;
                })(source).subscribe(subscriber);
                return function() {
                    state2 = null;
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.switchScan = void 0;
        var switchMap_1 = require_switchMap();
        var lift_1 = require_lift();
        exports.switchScan = switchScan;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js
var require_takeUntil = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/takeUntil.js": function(exports) {
        "use strict";
        var takeUntil = function takeUntil(notifier) {
            return lift_1.operate(function(source, subscriber) {
                innerFrom_1.innerFrom(notifier).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    return subscriber.complete();
                }, noop_1.noop));
                !subscriber.closed && source.subscribe(subscriber);
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.takeUntil = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        var noop_1 = require_noop();
        exports.takeUntil = takeUntil;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js
var require_takeWhile = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/takeWhile.js": function(exports) {
        "use strict";
        var takeWhile = function takeWhile(predicate, inclusive) {
            if (inclusive === void 0) {
                inclusive = false;
            }
            return lift_1.operate(function(source, subscriber) {
                var index = 0;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var result = predicate(value1, index++);
                    (result || inclusive) && subscriber.next(value1);
                    !result && subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.takeWhile = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.takeWhile = takeWhile;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/tap.js
var require_tap = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/tap.js": function(exports) {
        "use strict";
        var tap8 = function tap8(observerOrNext, error2, complete) {
            var tapObserver = isFunction_1.isFunction(observerOrNext) || error2 || complete ? {
                next: observerOrNext,
                error: error2,
                complete: complete
            } : observerOrNext;
            return tapObserver ? lift_1.operate(function(source, subscriber) {
                var _a;
                (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                var isUnsub = true;
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var _a2;
                    (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value1);
                    subscriber.next(value1);
                }, function() {
                    var _a2;
                    isUnsub = false;
                    (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
                    subscriber.complete();
                }, function(err) {
                    var _a2;
                    isUnsub = false;
                    (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
                    subscriber.error(err);
                }, function() {
                    var _a2, _b;
                    if (isUnsub) {
                        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
                    }
                    (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
                }));
            }) : identity_1.identity;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.tap = void 0;
        var isFunction_1 = require_isFunction();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var identity_1 = require_identity();
        exports.tap = tap8;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/throttle.js
var require_throttle = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/throttle.js": function(exports) {
        "use strict";
        var throttle = function throttle(durationSelector, config3) {
            if (config3 === void 0) {
                config3 = exports.defaultThrottleConfig;
            }
            return lift_1.operate(function(source, subscriber) {
                var leading = config3.leading, trailing = config3.trailing;
                var hasValue = false;
                var sendValue = null;
                var throttled = null;
                var isComplete = false;
                var endThrottling = function endThrottling() {
                    throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
                    throttled = null;
                    if (trailing) {
                        send();
                        isComplete && subscriber.complete();
                    }
                };
                var cleanupThrottling = function cleanupThrottling() {
                    throttled = null;
                    isComplete && subscriber.complete();
                };
                var startThrottle = function startThrottle(value1) {
                    return throttled = innerFrom_1.innerFrom(durationSelector(value1)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
                };
                var send = function send() {
                    if (hasValue) {
                        hasValue = false;
                        var value1 = sendValue;
                        sendValue = null;
                        subscriber.next(value1);
                        !isComplete && startThrottle(value1);
                    }
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    hasValue = true;
                    sendValue = value1;
                    !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value1));
                }, function() {
                    isComplete = true;
                    !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.throttle = exports.defaultThrottleConfig = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.defaultThrottleConfig = {
            leading: true,
            trailing: false
        };
        exports.throttle = throttle;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js
var require_throttleTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/throttleTime.js": function(exports) {
        "use strict";
        var throttleTime = function throttleTime(duration, scheduler, config3) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            if (config3 === void 0) {
                config3 = throttle_1.defaultThrottleConfig;
            }
            var duration$ = timer_1.timer(duration, scheduler);
            return throttle_1.throttle(function() {
                return duration$;
            }, config3);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.throttleTime = void 0;
        var async_1 = require_async();
        var throttle_1 = require_throttle();
        var timer_1 = require_timer();
        exports.throttleTime = throttleTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js
var require_timeInterval = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/timeInterval.js": function(exports) {
        "use strict";
        var timeInterval = function timeInterval(scheduler) {
            if (scheduler === void 0) {
                scheduler = async_1.asyncScheduler;
            }
            return lift_1.operate(function(source, subscriber) {
                var last = scheduler.now();
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var now = scheduler.now();
                    var interval = now - last;
                    last = now;
                    subscriber.next(new TimeInterval(value1, interval));
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TimeInterval = exports.timeInterval = void 0;
        var async_1 = require_async();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.timeInterval = timeInterval;
        var TimeInterval = function() {
            var TimeInterval2 = function TimeInterval2(value1, interval) {
                this.value = value1;
                this.interval = interval;
            };
            return TimeInterval2;
        }();
        exports.TimeInterval = TimeInterval;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js
var require_timeoutWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/timeoutWith.js": function(exports) {
        "use strict";
        var timeoutWith = function timeoutWith(due, withObservable, scheduler) {
            var first2;
            var each;
            var _with;
            scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async_1.async;
            if (isDate_1.isValidDate(due)) {
                first2 = due;
            } else if (typeof due === "number") {
                each = due;
            }
            if (withObservable) {
                _with = function _with() {
                    return withObservable;
                };
            } else {
                throw new TypeError("No observable provided to switch to");
            }
            if (first2 == null && each == null) {
                throw new TypeError("No timeout provided.");
            }
            return timeout_1.timeout({
                first: first2,
                each: each,
                scheduler: scheduler,
                with: _with
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.timeoutWith = void 0;
        var async_1 = require_async();
        var isDate_1 = require_isDate();
        var timeout_1 = require_timeout();
        exports.timeoutWith = timeoutWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/timestamp.js
var require_timestamp = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/timestamp.js": function(exports) {
        "use strict";
        var timestamp = function timestamp(timestampProvider) {
            if (timestampProvider === void 0) {
                timestampProvider = dateTimestampProvider_1.dateTimestampProvider;
            }
            return map_1.map(function(value1) {
                return {
                    value: value1,
                    timestamp: timestampProvider.now()
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.timestamp = void 0;
        var dateTimestampProvider_1 = require_dateTimestampProvider();
        var map_1 = require_map();
        exports.timestamp = timestamp;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/window.js
var require_window = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/window.js": function(exports) {
        "use strict";
        var window2 = function window2(windowBoundaries) {
            return lift_1.operate(function(source, subscriber) {
                var windowSubject = new Subject_1.Subject();
                subscriber.next(windowSubject.asObservable());
                var errorHandler = function errorHandler(err) {
                    windowSubject.error(err);
                    subscriber.error(err);
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value1);
                }, function() {
                    windowSubject.complete();
                    subscriber.complete();
                }, errorHandler));
                innerFrom_1.innerFrom(windowBoundaries).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function() {
                    windowSubject.complete();
                    subscriber.next(windowSubject = new Subject_1.Subject());
                }, noop_1.noop, errorHandler));
                return function() {
                    windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
                    windowSubject = null;
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.window = void 0;
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        var innerFrom_1 = require_innerFrom();
        exports.window = window2;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/windowCount.js
var require_windowCount = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/windowCount.js": function(exports) {
        "use strict";
        var windowCount = function windowCount(windowSize, startWindowEvery) {
            if (startWindowEvery === void 0) {
                startWindowEvery = 0;
            }
            var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
            return lift_1.operate(function(source, subscriber) {
                var windows = [
                    new Subject_1.Subject()
                ];
                var starts = [];
                var count = 0;
                subscriber.next(windows[0].asObservable());
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var e_1, _a;
                    try {
                        for(var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()){
                            var window_1 = windows_1_1.value;
                            window_1.next(value1);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    var c = count - windowSize + 1;
                    if (c >= 0 && c % startEvery === 0) {
                        windows.shift().complete();
                    }
                    if (++count % startEvery === 0) {
                        var window_2 = new Subject_1.Subject();
                        windows.push(window_2);
                        subscriber.next(window_2.asObservable());
                    }
                }, function() {
                    while(windows.length > 0){
                        windows.shift().complete();
                    }
                    subscriber.complete();
                }, function(err) {
                    while(windows.length > 0){
                        windows.shift().error(err);
                    }
                    subscriber.error(err);
                }, function() {
                    starts = null;
                    windows = null;
                }));
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.windowCount = void 0;
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        exports.windowCount = windowCount;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/windowTime.js
var require_windowTime = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/windowTime.js": function(exports) {
        "use strict";
        var windowTime = function windowTime(windowTimeSpan) {
            var _a, _b;
            var otherArgs = [];
            for(var _i = 1; _i < arguments.length; _i++){
                otherArgs[_i - 1] = arguments[_i];
            }
            var scheduler = (_a = args_1.popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : async_1.asyncScheduler;
            var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
            var maxWindowSize = otherArgs[1] || Infinity;
            return lift_1.operate(function(source, subscriber) {
                var windowRecords = [];
                var restartOnClose = false;
                var closeWindow = function closeWindow(record) {
                    var window2 = record.window, subs = record.subs;
                    window2.complete();
                    subs.unsubscribe();
                    arrRemove_1.arrRemove(windowRecords, record);
                    restartOnClose && startWindow();
                };
                var startWindow = function startWindow() {
                    if (windowRecords) {
                        var subs = new Subscription_1.Subscription();
                        subscriber.add(subs);
                        var window_1 = new Subject_1.Subject();
                        var record_1 = {
                            window: window_1,
                            subs: subs,
                            seen: 0
                        };
                        windowRecords.push(record_1);
                        subscriber.next(window_1.asObservable());
                        executeSchedule_1.executeSchedule(subs, scheduler, function() {
                            return closeWindow(record_1);
                        }, windowTimeSpan);
                    }
                };
                if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                    executeSchedule_1.executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
                } else {
                    restartOnClose = true;
                }
                startWindow();
                var loop = function loop(cb) {
                    return windowRecords.slice().forEach(cb);
                };
                var terminate = function terminate(cb) {
                    loop(function(_a2) {
                        var window2 = _a2.window;
                        return cb(window2);
                    });
                    cb(subscriber);
                    subscriber.unsubscribe();
                };
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    loop(function(record) {
                        record.window.next(value1);
                        maxWindowSize <= ++record.seen && closeWindow(record);
                    });
                }, function() {
                    return terminate(function(consumer) {
                        return consumer.complete();
                    });
                }, function(err) {
                    return terminate(function(consumer) {
                        return consumer.error(err);
                    });
                }));
                return function() {
                    windowRecords = null;
                };
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.windowTime = void 0;
        var Subject_1 = require_Subject();
        var async_1 = require_async();
        var Subscription_1 = require_Subscription();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var arrRemove_1 = require_arrRemove();
        var args_1 = require_args();
        var executeSchedule_1 = require_executeSchedule();
        exports.windowTime = windowTime;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js
var require_windowToggle = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/windowToggle.js": function(exports) {
        "use strict";
        var windowToggle = function windowToggle(openings, closingSelector) {
            return lift_1.operate(function(source, subscriber) {
                var windows = [];
                var handleError = function handleError(err) {
                    while(0 < windows.length){
                        windows.shift().error(err);
                    }
                    subscriber.error(err);
                };
                innerFrom_1.innerFrom(openings).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(openValue) {
                    var window2 = new Subject_1.Subject();
                    windows.push(window2);
                    var closingSubscription = new Subscription_1.Subscription();
                    var closeWindow = function closeWindow() {
                        arrRemove_1.arrRemove(windows, window2);
                        window2.complete();
                        closingSubscription.unsubscribe();
                    };
                    var closingNotifier;
                    try {
                        closingNotifier = innerFrom_1.innerFrom(closingSelector(openValue));
                    } catch (err) {
                        handleError(err);
                        return;
                    }
                    subscriber.next(window2.asObservable());
                    closingSubscription.add(closingNotifier.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, closeWindow, noop_1.noop, handleError)));
                }, noop_1.noop));
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    var e_1, _a;
                    var windowsCopy = windows.slice();
                    try {
                        for(var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()){
                            var window_1 = windowsCopy_1_1.value;
                            window_1.next(value1);
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                }, function() {
                    while(0 < windows.length){
                        windows.shift().complete();
                    }
                    subscriber.complete();
                }, handleError, function() {
                    while(0 < windows.length){
                        windows.shift().unsubscribe();
                    }
                }));
            });
        };
        var __values = exports && exports.__values || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function next() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.windowToggle = void 0;
        var Subject_1 = require_Subject();
        var Subscription_1 = require_Subscription();
        var lift_1 = require_lift();
        var innerFrom_1 = require_innerFrom();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var noop_1 = require_noop();
        var arrRemove_1 = require_arrRemove();
        exports.windowToggle = windowToggle;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js
var require_windowWhen = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/windowWhen.js": function(exports) {
        "use strict";
        var windowWhen = function windowWhen(closingSelector) {
            return lift_1.operate(function(source, subscriber) {
                var window2;
                var closingSubscriber;
                var handleError = function handleError(err) {
                    window2.error(err);
                    subscriber.error(err);
                };
                var openWindow = function openWindow1() {
                    closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                    window2 === null || window2 === void 0 ? void 0 : window2.complete();
                    window2 = new Subject_1.Subject();
                    subscriber.next(window2.asObservable());
                    var closingNotifier;
                    try {
                        closingNotifier = innerFrom_1.innerFrom(closingSelector());
                    } catch (err) {
                        handleError(err);
                        return;
                    }
                    closingNotifier.subscribe(closingSubscriber = OperatorSubscriber_1.createOperatorSubscriber(subscriber, openWindow, openWindow, handleError));
                };
                openWindow();
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    return window2.next(value1);
                }, function() {
                    window2.complete();
                    subscriber.complete();
                }, handleError, function() {
                    closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                    window2 = null;
                }));
            });
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.windowWhen = void 0;
        var Subject_1 = require_Subject();
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        exports.windowWhen = windowWhen;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js
var require_withLatestFrom = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/withLatestFrom.js": function(exports) {
        "use strict";
        var withLatestFrom = function withLatestFrom() {
            var inputs = [];
            for(var _i = 0; _i < arguments.length; _i++){
                inputs[_i] = arguments[_i];
            }
            var project = args_1.popResultSelector(inputs);
            return lift_1.operate(function(source, subscriber) {
                var len = inputs.length;
                var otherValues = new Array(len);
                var hasValue = inputs.map(function() {
                    return false;
                });
                var ready = false;
                var _loop_1 = function _loop_1(i2) {
                    innerFrom_1.innerFrom(inputs[i2]).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                        otherValues[i2] = value1;
                        if (!ready && !hasValue[i2]) {
                            hasValue[i2] = true;
                            (ready = hasValue.every(identity_1.identity)) && (hasValue = null);
                        }
                    }, noop_1.noop));
                };
                for(var i = 0; i < len; i++){
                    _loop_1(i);
                }
                source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function(value1) {
                    if (ready) {
                        var values = __spreadArray([
                            value1
                        ], __read(otherValues));
                        subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
                    }
                }));
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.withLatestFrom = void 0;
        var lift_1 = require_lift();
        var OperatorSubscriber_1 = require_OperatorSubscriber();
        var innerFrom_1 = require_innerFrom();
        var identity_1 = require_identity();
        var noop_1 = require_noop();
        var args_1 = require_args();
        exports.withLatestFrom = withLatestFrom;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/zipAll.js
var require_zipAll = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/zipAll.js": function(exports) {
        "use strict";
        var zipAll = function zipAll(project) {
            return joinAllInternals_1.joinAllInternals(zip_1.zip, project);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.zipAll = void 0;
        var zip_1 = require_zip();
        var joinAllInternals_1 = require_joinAllInternals();
        exports.zipAll = zipAll;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/zip.js
var require_zip2 = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/zip.js": function(exports) {
        "use strict";
        var zip = function zip() {
            var sources = [];
            for(var _i = 0; _i < arguments.length; _i++){
                sources[_i] = arguments[_i];
            }
            return lift_1.operate(function(source, subscriber) {
                zip_1.zip.apply(void 0, __spreadArray([
                    source
                ], __read(sources))).subscribe(subscriber);
            });
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.zip = void 0;
        var zip_1 = require_zip();
        var lift_1 = require_lift();
        exports.zip = zip;
    }
});
// ../../node_modules/rxjs/dist/cjs/internal/operators/zipWith.js
var require_zipWith = __commonJS({
    "../../node_modules/rxjs/dist/cjs/internal/operators/zipWith.js": function(exports) {
        "use strict";
        var zipWith = function zipWith() {
            var otherInputs = [];
            for(var _i = 0; _i < arguments.length; _i++){
                otherInputs[_i] = arguments[_i];
            }
            return zip_1.zip.apply(void 0, __spreadArray([], __read(otherInputs)));
        };
        var __read = exports && exports.__read || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
            } catch (error2) {
                e = {
                    error: error2
                };
            } finally{
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally{
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spreadArray = exports && exports.__spreadArray || function(to, from3) {
            for(var i = 0, il = from3.length, j = to.length; i < il; i++, j++)to[j] = from3[i];
            return to;
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.zipWith = void 0;
        var zip_1 = require_zip2();
        exports.zipWith = zipWith;
    }
});
// ../../node_modules/rxjs/dist/cjs/index.js
var require_cjs = __commonJS({
    "../../node_modules/rxjs/dist/cjs/index.js": function(exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
                enumerable: true,
                get: function get() {
                    return m[k];
                }
            });
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.interval = exports.iif = exports.generate = exports.fromEventPattern = exports.fromEvent = exports.from = exports.forkJoin = exports.empty = exports.defer = exports.connectable = exports.concat = exports.combineLatest = exports.bindNodeCallback = exports.bindCallback = exports.UnsubscriptionError = exports.TimeoutError = exports.SequenceError = exports.ObjectUnsubscribedError = exports.NotFoundError = exports.EmptyError = exports.ArgumentOutOfRangeError = exports.firstValueFrom = exports.lastValueFrom = exports.isObservable = exports.identity = exports.noop = exports.pipe = exports.NotificationKind = exports.Notification = exports.Subscriber = exports.Subscription = exports.Scheduler = exports.VirtualAction = exports.VirtualTimeScheduler = exports.animationFrameScheduler = exports.animationFrame = exports.queueScheduler = exports.queue = exports.asyncScheduler = exports.async = exports.asapScheduler = exports.asap = exports.AsyncSubject = exports.ReplaySubject = exports.BehaviorSubject = exports.Subject = exports.animationFrames = exports.observable = exports.ConnectableObservable = exports.Observable = void 0;
        exports.filter = exports.expand = exports.exhaustMap = exports.exhaustAll = exports.exhaust = exports.every = exports.endWith = exports.elementAt = exports.distinctUntilKeyChanged = exports.distinctUntilChanged = exports.distinct = exports.dematerialize = exports.delayWhen = exports.delay = exports.defaultIfEmpty = exports.debounceTime = exports.debounce = exports.count = exports.connect = exports.concatWith = exports.concatMapTo = exports.concatMap = exports.concatAll = exports.combineLatestWith = exports.combineLatestAll = exports.combineAll = exports.catchError = exports.bufferWhen = exports.bufferToggle = exports.bufferTime = exports.bufferCount = exports.buffer = exports.auditTime = exports.audit = exports.config = exports.NEVER = exports.EMPTY = exports.scheduled = exports.zip = exports.using = exports.timer = exports.throwError = exports.range = exports.race = exports.partition = exports.pairs = exports.onErrorResumeNext = exports.of = exports.never = exports.merge = void 0;
        exports.switchMap = exports.switchAll = exports.subscribeOn = exports.startWith = exports.skipWhile = exports.skipUntil = exports.skipLast = exports.skip = exports.single = exports.shareReplay = exports.share = exports.sequenceEqual = exports.scan = exports.sampleTime = exports.sample = exports.refCount = exports.retryWhen = exports.retry = exports.repeatWhen = exports.repeat = exports.reduce = exports.raceWith = exports.publishReplay = exports.publishLast = exports.publishBehavior = exports.publish = exports.pluck = exports.pairwise = exports.onErrorResumeNextWith = exports.observeOn = exports.multicast = exports.min = exports.mergeWith = exports.mergeScan = exports.mergeMapTo = exports.mergeMap = exports.flatMap = exports.mergeAll = exports.max = exports.materialize = exports.mapTo = exports.map = exports.last = exports.isEmpty = exports.ignoreElements = exports.groupBy = exports.first = exports.findIndex = exports.find = exports.finalize = void 0;
        exports.zipWith = exports.zipAll = exports.withLatestFrom = exports.windowWhen = exports.windowToggle = exports.windowTime = exports.windowCount = exports.window = exports.toArray = exports.timestamp = exports.timeoutWith = exports.timeout = exports.timeInterval = exports.throwIfEmpty = exports.throttleTime = exports.throttle = exports.tap = exports.takeWhile = exports.takeUntil = exports.takeLast = exports.take = exports.switchScan = exports.switchMapTo = void 0;
        var Observable_1 = require_Observable();
        Object.defineProperty(exports, "Observable", {
            enumerable: true,
            get: function get() {
                return Observable_1.Observable;
            }
        });
        var ConnectableObservable_1 = require_ConnectableObservable();
        Object.defineProperty(exports, "ConnectableObservable", {
            enumerable: true,
            get: function get() {
                return ConnectableObservable_1.ConnectableObservable;
            }
        });
        var observable_1 = require_observable();
        Object.defineProperty(exports, "observable", {
            enumerable: true,
            get: function get() {
                return observable_1.observable;
            }
        });
        var animationFrames_1 = require_animationFrames();
        Object.defineProperty(exports, "animationFrames", {
            enumerable: true,
            get: function get() {
                return animationFrames_1.animationFrames;
            }
        });
        var Subject_1 = require_Subject();
        Object.defineProperty(exports, "Subject", {
            enumerable: true,
            get: function get() {
                return Subject_1.Subject;
            }
        });
        var BehaviorSubject_1 = require_BehaviorSubject();
        Object.defineProperty(exports, "BehaviorSubject", {
            enumerable: true,
            get: function get() {
                return BehaviorSubject_1.BehaviorSubject;
            }
        });
        var ReplaySubject_1 = require_ReplaySubject();
        Object.defineProperty(exports, "ReplaySubject", {
            enumerable: true,
            get: function get() {
                return ReplaySubject_1.ReplaySubject;
            }
        });
        var AsyncSubject_1 = require_AsyncSubject();
        Object.defineProperty(exports, "AsyncSubject", {
            enumerable: true,
            get: function get() {
                return AsyncSubject_1.AsyncSubject;
            }
        });
        var asap_1 = require_asap();
        Object.defineProperty(exports, "asap", {
            enumerable: true,
            get: function get() {
                return asap_1.asap;
            }
        });
        Object.defineProperty(exports, "asapScheduler", {
            enumerable: true,
            get: function get() {
                return asap_1.asapScheduler;
            }
        });
        var async_1 = require_async();
        Object.defineProperty(exports, "async", {
            enumerable: true,
            get: function get() {
                return async_1.async;
            }
        });
        Object.defineProperty(exports, "asyncScheduler", {
            enumerable: true,
            get: function get() {
                return async_1.asyncScheduler;
            }
        });
        var queue_1 = require_queue();
        Object.defineProperty(exports, "queue", {
            enumerable: true,
            get: function get() {
                return queue_1.queue;
            }
        });
        Object.defineProperty(exports, "queueScheduler", {
            enumerable: true,
            get: function get() {
                return queue_1.queueScheduler;
            }
        });
        var animationFrame_1 = require_animationFrame();
        Object.defineProperty(exports, "animationFrame", {
            enumerable: true,
            get: function get() {
                return animationFrame_1.animationFrame;
            }
        });
        Object.defineProperty(exports, "animationFrameScheduler", {
            enumerable: true,
            get: function get() {
                return animationFrame_1.animationFrameScheduler;
            }
        });
        var VirtualTimeScheduler_1 = require_VirtualTimeScheduler();
        Object.defineProperty(exports, "VirtualTimeScheduler", {
            enumerable: true,
            get: function get() {
                return VirtualTimeScheduler_1.VirtualTimeScheduler;
            }
        });
        Object.defineProperty(exports, "VirtualAction", {
            enumerable: true,
            get: function get() {
                return VirtualTimeScheduler_1.VirtualAction;
            }
        });
        var Scheduler_1 = require_Scheduler();
        Object.defineProperty(exports, "Scheduler", {
            enumerable: true,
            get: function get() {
                return Scheduler_1.Scheduler;
            }
        });
        var Subscription_1 = require_Subscription();
        Object.defineProperty(exports, "Subscription", {
            enumerable: true,
            get: function get() {
                return Subscription_1.Subscription;
            }
        });
        var Subscriber_1 = require_Subscriber();
        Object.defineProperty(exports, "Subscriber", {
            enumerable: true,
            get: function get() {
                return Subscriber_1.Subscriber;
            }
        });
        var Notification_1 = require_Notification();
        Object.defineProperty(exports, "Notification", {
            enumerable: true,
            get: function get() {
                return Notification_1.Notification;
            }
        });
        Object.defineProperty(exports, "NotificationKind", {
            enumerable: true,
            get: function get() {
                return Notification_1.NotificationKind;
            }
        });
        var pipe_1 = require_pipe();
        Object.defineProperty(exports, "pipe", {
            enumerable: true,
            get: function get() {
                return pipe_1.pipe;
            }
        });
        var noop_1 = require_noop();
        Object.defineProperty(exports, "noop", {
            enumerable: true,
            get: function get() {
                return noop_1.noop;
            }
        });
        var identity_1 = require_identity();
        Object.defineProperty(exports, "identity", {
            enumerable: true,
            get: function get() {
                return identity_1.identity;
            }
        });
        var isObservable_1 = require_isObservable();
        Object.defineProperty(exports, "isObservable", {
            enumerable: true,
            get: function get() {
                return isObservable_1.isObservable;
            }
        });
        var lastValueFrom_1 = require_lastValueFrom();
        Object.defineProperty(exports, "lastValueFrom", {
            enumerable: true,
            get: function get() {
                return lastValueFrom_1.lastValueFrom;
            }
        });
        var firstValueFrom_1 = require_firstValueFrom();
        Object.defineProperty(exports, "firstValueFrom", {
            enumerable: true,
            get: function get() {
                return firstValueFrom_1.firstValueFrom;
            }
        });
        var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
        Object.defineProperty(exports, "ArgumentOutOfRangeError", {
            enumerable: true,
            get: function get() {
                return ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
            }
        });
        var EmptyError_1 = require_EmptyError();
        Object.defineProperty(exports, "EmptyError", {
            enumerable: true,
            get: function get() {
                return EmptyError_1.EmptyError;
            }
        });
        var NotFoundError_1 = require_NotFoundError();
        Object.defineProperty(exports, "NotFoundError", {
            enumerable: true,
            get: function get() {
                return NotFoundError_1.NotFoundError;
            }
        });
        var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
        Object.defineProperty(exports, "ObjectUnsubscribedError", {
            enumerable: true,
            get: function get() {
                return ObjectUnsubscribedError_1.ObjectUnsubscribedError;
            }
        });
        var SequenceError_1 = require_SequenceError();
        Object.defineProperty(exports, "SequenceError", {
            enumerable: true,
            get: function get() {
                return SequenceError_1.SequenceError;
            }
        });
        var timeout_1 = require_timeout();
        Object.defineProperty(exports, "TimeoutError", {
            enumerable: true,
            get: function get() {
                return timeout_1.TimeoutError;
            }
        });
        var UnsubscriptionError_1 = require_UnsubscriptionError();
        Object.defineProperty(exports, "UnsubscriptionError", {
            enumerable: true,
            get: function get() {
                return UnsubscriptionError_1.UnsubscriptionError;
            }
        });
        var bindCallback_1 = require_bindCallback();
        Object.defineProperty(exports, "bindCallback", {
            enumerable: true,
            get: function get() {
                return bindCallback_1.bindCallback;
            }
        });
        var bindNodeCallback_1 = require_bindNodeCallback();
        Object.defineProperty(exports, "bindNodeCallback", {
            enumerable: true,
            get: function get() {
                return bindNodeCallback_1.bindNodeCallback;
            }
        });
        var combineLatest_1 = require_combineLatest();
        Object.defineProperty(exports, "combineLatest", {
            enumerable: true,
            get: function get() {
                return combineLatest_1.combineLatest;
            }
        });
        var concat_1 = require_concat();
        Object.defineProperty(exports, "concat", {
            enumerable: true,
            get: function get() {
                return concat_1.concat;
            }
        });
        var connectable_1 = require_connectable();
        Object.defineProperty(exports, "connectable", {
            enumerable: true,
            get: function get() {
                return connectable_1.connectable;
            }
        });
        var defer_1 = require_defer();
        Object.defineProperty(exports, "defer", {
            enumerable: true,
            get: function get() {
                return defer_1.defer;
            }
        });
        var empty_1 = require_empty();
        Object.defineProperty(exports, "empty", {
            enumerable: true,
            get: function get() {
                return empty_1.empty;
            }
        });
        var forkJoin_1 = require_forkJoin();
        Object.defineProperty(exports, "forkJoin", {
            enumerable: true,
            get: function get() {
                return forkJoin_1.forkJoin;
            }
        });
        var from_1 = require_from();
        Object.defineProperty(exports, "from", {
            enumerable: true,
            get: function get() {
                return from_1.from;
            }
        });
        var fromEvent_1 = require_fromEvent();
        Object.defineProperty(exports, "fromEvent", {
            enumerable: true,
            get: function get() {
                return fromEvent_1.fromEvent;
            }
        });
        var fromEventPattern_1 = require_fromEventPattern();
        Object.defineProperty(exports, "fromEventPattern", {
            enumerable: true,
            get: function get() {
                return fromEventPattern_1.fromEventPattern;
            }
        });
        var generate_1 = require_generate();
        Object.defineProperty(exports, "generate", {
            enumerable: true,
            get: function get() {
                return generate_1.generate;
            }
        });
        var iif_1 = require_iif();
        Object.defineProperty(exports, "iif", {
            enumerable: true,
            get: function get() {
                return iif_1.iif;
            }
        });
        var interval_1 = require_interval();
        Object.defineProperty(exports, "interval", {
            enumerable: true,
            get: function get() {
                return interval_1.interval;
            }
        });
        var merge_1 = require_merge();
        Object.defineProperty(exports, "merge", {
            enumerable: true,
            get: function get() {
                return merge_1.merge;
            }
        });
        var never_1 = require_never();
        Object.defineProperty(exports, "never", {
            enumerable: true,
            get: function get() {
                return never_1.never;
            }
        });
        var of_1 = require_of();
        Object.defineProperty(exports, "of", {
            enumerable: true,
            get: function get() {
                return of_1.of;
            }
        });
        var onErrorResumeNext_1 = require_onErrorResumeNext();
        Object.defineProperty(exports, "onErrorResumeNext", {
            enumerable: true,
            get: function get() {
                return onErrorResumeNext_1.onErrorResumeNext;
            }
        });
        var pairs_1 = require_pairs();
        Object.defineProperty(exports, "pairs", {
            enumerable: true,
            get: function get() {
                return pairs_1.pairs;
            }
        });
        var partition_1 = require_partition();
        Object.defineProperty(exports, "partition", {
            enumerable: true,
            get: function get() {
                return partition_1.partition;
            }
        });
        var race_1 = require_race();
        Object.defineProperty(exports, "race", {
            enumerable: true,
            get: function get() {
                return race_1.race;
            }
        });
        var range_1 = require_range();
        Object.defineProperty(exports, "range", {
            enumerable: true,
            get: function get() {
                return range_1.range;
            }
        });
        var throwError_1 = require_throwError();
        Object.defineProperty(exports, "throwError", {
            enumerable: true,
            get: function get() {
                return throwError_1.throwError;
            }
        });
        var timer_1 = require_timer();
        Object.defineProperty(exports, "timer", {
            enumerable: true,
            get: function get() {
                return timer_1.timer;
            }
        });
        var using_1 = require_using();
        Object.defineProperty(exports, "using", {
            enumerable: true,
            get: function get() {
                return using_1.using;
            }
        });
        var zip_1 = require_zip();
        Object.defineProperty(exports, "zip", {
            enumerable: true,
            get: function get() {
                return zip_1.zip;
            }
        });
        var scheduled_1 = require_scheduled();
        Object.defineProperty(exports, "scheduled", {
            enumerable: true,
            get: function get() {
                return scheduled_1.scheduled;
            }
        });
        var empty_2 = require_empty();
        Object.defineProperty(exports, "EMPTY", {
            enumerable: true,
            get: function get() {
                return empty_2.EMPTY;
            }
        });
        var never_2 = require_never();
        Object.defineProperty(exports, "NEVER", {
            enumerable: true,
            get: function get() {
                return never_2.NEVER;
            }
        });
        __exportStar(require_types(), exports);
        var config_1 = require_config();
        Object.defineProperty(exports, "config", {
            enumerable: true,
            get: function get() {
                return config_1.config;
            }
        });
        var audit_1 = require_audit();
        Object.defineProperty(exports, "audit", {
            enumerable: true,
            get: function get() {
                return audit_1.audit;
            }
        });
        var auditTime_1 = require_auditTime();
        Object.defineProperty(exports, "auditTime", {
            enumerable: true,
            get: function get() {
                return auditTime_1.auditTime;
            }
        });
        var buffer_1 = require_buffer();
        Object.defineProperty(exports, "buffer", {
            enumerable: true,
            get: function get() {
                return buffer_1.buffer;
            }
        });
        var bufferCount_1 = require_bufferCount();
        Object.defineProperty(exports, "bufferCount", {
            enumerable: true,
            get: function get() {
                return bufferCount_1.bufferCount;
            }
        });
        var bufferTime_1 = require_bufferTime();
        Object.defineProperty(exports, "bufferTime", {
            enumerable: true,
            get: function get() {
                return bufferTime_1.bufferTime;
            }
        });
        var bufferToggle_1 = require_bufferToggle();
        Object.defineProperty(exports, "bufferToggle", {
            enumerable: true,
            get: function get() {
                return bufferToggle_1.bufferToggle;
            }
        });
        var bufferWhen_1 = require_bufferWhen();
        Object.defineProperty(exports, "bufferWhen", {
            enumerable: true,
            get: function get() {
                return bufferWhen_1.bufferWhen;
            }
        });
        var catchError_1 = require_catchError();
        Object.defineProperty(exports, "catchError", {
            enumerable: true,
            get: function get() {
                return catchError_1.catchError;
            }
        });
        var combineAll_1 = require_combineAll();
        Object.defineProperty(exports, "combineAll", {
            enumerable: true,
            get: function get() {
                return combineAll_1.combineAll;
            }
        });
        var combineLatestAll_1 = require_combineLatestAll();
        Object.defineProperty(exports, "combineLatestAll", {
            enumerable: true,
            get: function get() {
                return combineLatestAll_1.combineLatestAll;
            }
        });
        var combineLatestWith_1 = require_combineLatestWith();
        Object.defineProperty(exports, "combineLatestWith", {
            enumerable: true,
            get: function get() {
                return combineLatestWith_1.combineLatestWith;
            }
        });
        var concatAll_1 = require_concatAll();
        Object.defineProperty(exports, "concatAll", {
            enumerable: true,
            get: function get() {
                return concatAll_1.concatAll;
            }
        });
        var concatMap_1 = require_concatMap();
        Object.defineProperty(exports, "concatMap", {
            enumerable: true,
            get: function get() {
                return concatMap_1.concatMap;
            }
        });
        var concatMapTo_1 = require_concatMapTo();
        Object.defineProperty(exports, "concatMapTo", {
            enumerable: true,
            get: function get() {
                return concatMapTo_1.concatMapTo;
            }
        });
        var concatWith_1 = require_concatWith();
        Object.defineProperty(exports, "concatWith", {
            enumerable: true,
            get: function get() {
                return concatWith_1.concatWith;
            }
        });
        var connect_1 = require_connect();
        Object.defineProperty(exports, "connect", {
            enumerable: true,
            get: function get() {
                return connect_1.connect;
            }
        });
        var count_1 = require_count();
        Object.defineProperty(exports, "count", {
            enumerable: true,
            get: function get() {
                return count_1.count;
            }
        });
        var debounce_1 = require_debounce();
        Object.defineProperty(exports, "debounce", {
            enumerable: true,
            get: function get() {
                return debounce_1.debounce;
            }
        });
        var debounceTime_1 = require_debounceTime();
        Object.defineProperty(exports, "debounceTime", {
            enumerable: true,
            get: function get() {
                return debounceTime_1.debounceTime;
            }
        });
        var defaultIfEmpty_1 = require_defaultIfEmpty();
        Object.defineProperty(exports, "defaultIfEmpty", {
            enumerable: true,
            get: function get() {
                return defaultIfEmpty_1.defaultIfEmpty;
            }
        });
        var delay_1 = require_delay();
        Object.defineProperty(exports, "delay", {
            enumerable: true,
            get: function get() {
                return delay_1.delay;
            }
        });
        var delayWhen_1 = require_delayWhen();
        Object.defineProperty(exports, "delayWhen", {
            enumerable: true,
            get: function get() {
                return delayWhen_1.delayWhen;
            }
        });
        var dematerialize_1 = require_dematerialize();
        Object.defineProperty(exports, "dematerialize", {
            enumerable: true,
            get: function get() {
                return dematerialize_1.dematerialize;
            }
        });
        var distinct_1 = require_distinct();
        Object.defineProperty(exports, "distinct", {
            enumerable: true,
            get: function get() {
                return distinct_1.distinct;
            }
        });
        var distinctUntilChanged_1 = require_distinctUntilChanged();
        Object.defineProperty(exports, "distinctUntilChanged", {
            enumerable: true,
            get: function get() {
                return distinctUntilChanged_1.distinctUntilChanged;
            }
        });
        var distinctUntilKeyChanged_1 = require_distinctUntilKeyChanged();
        Object.defineProperty(exports, "distinctUntilKeyChanged", {
            enumerable: true,
            get: function get() {
                return distinctUntilKeyChanged_1.distinctUntilKeyChanged;
            }
        });
        var elementAt_1 = require_elementAt();
        Object.defineProperty(exports, "elementAt", {
            enumerable: true,
            get: function get() {
                return elementAt_1.elementAt;
            }
        });
        var endWith_1 = require_endWith();
        Object.defineProperty(exports, "endWith", {
            enumerable: true,
            get: function get() {
                return endWith_1.endWith;
            }
        });
        var every_1 = require_every();
        Object.defineProperty(exports, "every", {
            enumerable: true,
            get: function get() {
                return every_1.every;
            }
        });
        var exhaust_1 = require_exhaust();
        Object.defineProperty(exports, "exhaust", {
            enumerable: true,
            get: function get() {
                return exhaust_1.exhaust;
            }
        });
        var exhaustAll_1 = require_exhaustAll();
        Object.defineProperty(exports, "exhaustAll", {
            enumerable: true,
            get: function get() {
                return exhaustAll_1.exhaustAll;
            }
        });
        var exhaustMap_1 = require_exhaustMap();
        Object.defineProperty(exports, "exhaustMap", {
            enumerable: true,
            get: function get() {
                return exhaustMap_1.exhaustMap;
            }
        });
        var expand_1 = require_expand();
        Object.defineProperty(exports, "expand", {
            enumerable: true,
            get: function get() {
                return expand_1.expand;
            }
        });
        var filter_1 = require_filter();
        Object.defineProperty(exports, "filter", {
            enumerable: true,
            get: function get() {
                return filter_1.filter;
            }
        });
        var finalize_1 = require_finalize();
        Object.defineProperty(exports, "finalize", {
            enumerable: true,
            get: function get() {
                return finalize_1.finalize;
            }
        });
        var find_1 = require_find();
        Object.defineProperty(exports, "find", {
            enumerable: true,
            get: function get() {
                return find_1.find;
            }
        });
        var findIndex_1 = require_findIndex();
        Object.defineProperty(exports, "findIndex", {
            enumerable: true,
            get: function get() {
                return findIndex_1.findIndex;
            }
        });
        var first_1 = require_first();
        Object.defineProperty(exports, "first", {
            enumerable: true,
            get: function get() {
                return first_1.first;
            }
        });
        var groupBy_1 = require_groupBy();
        Object.defineProperty(exports, "groupBy", {
            enumerable: true,
            get: function get() {
                return groupBy_1.groupBy;
            }
        });
        var ignoreElements_1 = require_ignoreElements();
        Object.defineProperty(exports, "ignoreElements", {
            enumerable: true,
            get: function get() {
                return ignoreElements_1.ignoreElements;
            }
        });
        var isEmpty_1 = require_isEmpty();
        Object.defineProperty(exports, "isEmpty", {
            enumerable: true,
            get: function get() {
                return isEmpty_1.isEmpty;
            }
        });
        var last_1 = require_last();
        Object.defineProperty(exports, "last", {
            enumerable: true,
            get: function get() {
                return last_1.last;
            }
        });
        var map_1 = require_map();
        Object.defineProperty(exports, "map", {
            enumerable: true,
            get: function get() {
                return map_1.map;
            }
        });
        var mapTo_1 = require_mapTo();
        Object.defineProperty(exports, "mapTo", {
            enumerable: true,
            get: function get() {
                return mapTo_1.mapTo;
            }
        });
        var materialize_1 = require_materialize();
        Object.defineProperty(exports, "materialize", {
            enumerable: true,
            get: function get() {
                return materialize_1.materialize;
            }
        });
        var max_1 = require_max();
        Object.defineProperty(exports, "max", {
            enumerable: true,
            get: function get() {
                return max_1.max;
            }
        });
        var mergeAll_1 = require_mergeAll();
        Object.defineProperty(exports, "mergeAll", {
            enumerable: true,
            get: function get() {
                return mergeAll_1.mergeAll;
            }
        });
        var flatMap_1 = require_flatMap();
        Object.defineProperty(exports, "flatMap", {
            enumerable: true,
            get: function get() {
                return flatMap_1.flatMap;
            }
        });
        var mergeMap_1 = require_mergeMap();
        Object.defineProperty(exports, "mergeMap", {
            enumerable: true,
            get: function get() {
                return mergeMap_1.mergeMap;
            }
        });
        var mergeMapTo_1 = require_mergeMapTo();
        Object.defineProperty(exports, "mergeMapTo", {
            enumerable: true,
            get: function get() {
                return mergeMapTo_1.mergeMapTo;
            }
        });
        var mergeScan_1 = require_mergeScan();
        Object.defineProperty(exports, "mergeScan", {
            enumerable: true,
            get: function get() {
                return mergeScan_1.mergeScan;
            }
        });
        var mergeWith_1 = require_mergeWith();
        Object.defineProperty(exports, "mergeWith", {
            enumerable: true,
            get: function get() {
                return mergeWith_1.mergeWith;
            }
        });
        var min_1 = require_min();
        Object.defineProperty(exports, "min", {
            enumerable: true,
            get: function get() {
                return min_1.min;
            }
        });
        var multicast_1 = require_multicast();
        Object.defineProperty(exports, "multicast", {
            enumerable: true,
            get: function get() {
                return multicast_1.multicast;
            }
        });
        var observeOn_1 = require_observeOn();
        Object.defineProperty(exports, "observeOn", {
            enumerable: true,
            get: function get() {
                return observeOn_1.observeOn;
            }
        });
        var onErrorResumeNextWith_1 = require_onErrorResumeNextWith();
        Object.defineProperty(exports, "onErrorResumeNextWith", {
            enumerable: true,
            get: function get() {
                return onErrorResumeNextWith_1.onErrorResumeNextWith;
            }
        });
        var pairwise_1 = require_pairwise();
        Object.defineProperty(exports, "pairwise", {
            enumerable: true,
            get: function get() {
                return pairwise_1.pairwise;
            }
        });
        var pluck_1 = require_pluck();
        Object.defineProperty(exports, "pluck", {
            enumerable: true,
            get: function get() {
                return pluck_1.pluck;
            }
        });
        var publish_1 = require_publish();
        Object.defineProperty(exports, "publish", {
            enumerable: true,
            get: function get() {
                return publish_1.publish;
            }
        });
        var publishBehavior_1 = require_publishBehavior();
        Object.defineProperty(exports, "publishBehavior", {
            enumerable: true,
            get: function get() {
                return publishBehavior_1.publishBehavior;
            }
        });
        var publishLast_1 = require_publishLast();
        Object.defineProperty(exports, "publishLast", {
            enumerable: true,
            get: function get() {
                return publishLast_1.publishLast;
            }
        });
        var publishReplay_1 = require_publishReplay();
        Object.defineProperty(exports, "publishReplay", {
            enumerable: true,
            get: function get() {
                return publishReplay_1.publishReplay;
            }
        });
        var raceWith_1 = require_raceWith();
        Object.defineProperty(exports, "raceWith", {
            enumerable: true,
            get: function get() {
                return raceWith_1.raceWith;
            }
        });
        var reduce_1 = require_reduce();
        Object.defineProperty(exports, "reduce", {
            enumerable: true,
            get: function get() {
                return reduce_1.reduce;
            }
        });
        var repeat_1 = require_repeat();
        Object.defineProperty(exports, "repeat", {
            enumerable: true,
            get: function get() {
                return repeat_1.repeat;
            }
        });
        var repeatWhen_1 = require_repeatWhen();
        Object.defineProperty(exports, "repeatWhen", {
            enumerable: true,
            get: function get() {
                return repeatWhen_1.repeatWhen;
            }
        });
        var retry_1 = require_retry();
        Object.defineProperty(exports, "retry", {
            enumerable: true,
            get: function get() {
                return retry_1.retry;
            }
        });
        var retryWhen_1 = require_retryWhen();
        Object.defineProperty(exports, "retryWhen", {
            enumerable: true,
            get: function get() {
                return retryWhen_1.retryWhen;
            }
        });
        var refCount_1 = require_refCount();
        Object.defineProperty(exports, "refCount", {
            enumerable: true,
            get: function get() {
                return refCount_1.refCount;
            }
        });
        var sample_1 = require_sample();
        Object.defineProperty(exports, "sample", {
            enumerable: true,
            get: function get() {
                return sample_1.sample;
            }
        });
        var sampleTime_1 = require_sampleTime();
        Object.defineProperty(exports, "sampleTime", {
            enumerable: true,
            get: function get() {
                return sampleTime_1.sampleTime;
            }
        });
        var scan_1 = require_scan();
        Object.defineProperty(exports, "scan", {
            enumerable: true,
            get: function get() {
                return scan_1.scan;
            }
        });
        var sequenceEqual_1 = require_sequenceEqual();
        Object.defineProperty(exports, "sequenceEqual", {
            enumerable: true,
            get: function get() {
                return sequenceEqual_1.sequenceEqual;
            }
        });
        var share_1 = require_share();
        Object.defineProperty(exports, "share", {
            enumerable: true,
            get: function get() {
                return share_1.share;
            }
        });
        var shareReplay_1 = require_shareReplay();
        Object.defineProperty(exports, "shareReplay", {
            enumerable: true,
            get: function get() {
                return shareReplay_1.shareReplay;
            }
        });
        var single_1 = require_single();
        Object.defineProperty(exports, "single", {
            enumerable: true,
            get: function get() {
                return single_1.single;
            }
        });
        var skip_1 = require_skip();
        Object.defineProperty(exports, "skip", {
            enumerable: true,
            get: function get() {
                return skip_1.skip;
            }
        });
        var skipLast_1 = require_skipLast();
        Object.defineProperty(exports, "skipLast", {
            enumerable: true,
            get: function get() {
                return skipLast_1.skipLast;
            }
        });
        var skipUntil_1 = require_skipUntil();
        Object.defineProperty(exports, "skipUntil", {
            enumerable: true,
            get: function get() {
                return skipUntil_1.skipUntil;
            }
        });
        var skipWhile_1 = require_skipWhile();
        Object.defineProperty(exports, "skipWhile", {
            enumerable: true,
            get: function get() {
                return skipWhile_1.skipWhile;
            }
        });
        var startWith_1 = require_startWith();
        Object.defineProperty(exports, "startWith", {
            enumerable: true,
            get: function get() {
                return startWith_1.startWith;
            }
        });
        var subscribeOn_1 = require_subscribeOn();
        Object.defineProperty(exports, "subscribeOn", {
            enumerable: true,
            get: function get() {
                return subscribeOn_1.subscribeOn;
            }
        });
        var switchAll_1 = require_switchAll();
        Object.defineProperty(exports, "switchAll", {
            enumerable: true,
            get: function get() {
                return switchAll_1.switchAll;
            }
        });
        var switchMap_1 = require_switchMap();
        Object.defineProperty(exports, "switchMap", {
            enumerable: true,
            get: function get() {
                return switchMap_1.switchMap;
            }
        });
        var switchMapTo_1 = require_switchMapTo();
        Object.defineProperty(exports, "switchMapTo", {
            enumerable: true,
            get: function get() {
                return switchMapTo_1.switchMapTo;
            }
        });
        var switchScan_1 = require_switchScan();
        Object.defineProperty(exports, "switchScan", {
            enumerable: true,
            get: function get() {
                return switchScan_1.switchScan;
            }
        });
        var take_1 = require_take();
        Object.defineProperty(exports, "take", {
            enumerable: true,
            get: function get() {
                return take_1.take;
            }
        });
        var takeLast_1 = require_takeLast();
        Object.defineProperty(exports, "takeLast", {
            enumerable: true,
            get: function get() {
                return takeLast_1.takeLast;
            }
        });
        var takeUntil_1 = require_takeUntil();
        Object.defineProperty(exports, "takeUntil", {
            enumerable: true,
            get: function get() {
                return takeUntil_1.takeUntil;
            }
        });
        var takeWhile_1 = require_takeWhile();
        Object.defineProperty(exports, "takeWhile", {
            enumerable: true,
            get: function get() {
                return takeWhile_1.takeWhile;
            }
        });
        var tap_1 = require_tap();
        Object.defineProperty(exports, "tap", {
            enumerable: true,
            get: function get() {
                return tap_1.tap;
            }
        });
        var throttle_1 = require_throttle();
        Object.defineProperty(exports, "throttle", {
            enumerable: true,
            get: function get() {
                return throttle_1.throttle;
            }
        });
        var throttleTime_1 = require_throttleTime();
        Object.defineProperty(exports, "throttleTime", {
            enumerable: true,
            get: function get() {
                return throttleTime_1.throttleTime;
            }
        });
        var throwIfEmpty_1 = require_throwIfEmpty();
        Object.defineProperty(exports, "throwIfEmpty", {
            enumerable: true,
            get: function get() {
                return throwIfEmpty_1.throwIfEmpty;
            }
        });
        var timeInterval_1 = require_timeInterval();
        Object.defineProperty(exports, "timeInterval", {
            enumerable: true,
            get: function get() {
                return timeInterval_1.timeInterval;
            }
        });
        var timeout_2 = require_timeout();
        Object.defineProperty(exports, "timeout", {
            enumerable: true,
            get: function get() {
                return timeout_2.timeout;
            }
        });
        var timeoutWith_1 = require_timeoutWith();
        Object.defineProperty(exports, "timeoutWith", {
            enumerable: true,
            get: function get() {
                return timeoutWith_1.timeoutWith;
            }
        });
        var timestamp_1 = require_timestamp();
        Object.defineProperty(exports, "timestamp", {
            enumerable: true,
            get: function get() {
                return timestamp_1.timestamp;
            }
        });
        var toArray_1 = require_toArray();
        Object.defineProperty(exports, "toArray", {
            enumerable: true,
            get: function get() {
                return toArray_1.toArray;
            }
        });
        var window_1 = require_window();
        Object.defineProperty(exports, "window", {
            enumerable: true,
            get: function get() {
                return window_1.window;
            }
        });
        var windowCount_1 = require_windowCount();
        Object.defineProperty(exports, "windowCount", {
            enumerable: true,
            get: function get() {
                return windowCount_1.windowCount;
            }
        });
        var windowTime_1 = require_windowTime();
        Object.defineProperty(exports, "windowTime", {
            enumerable: true,
            get: function get() {
                return windowTime_1.windowTime;
            }
        });
        var windowToggle_1 = require_windowToggle();
        Object.defineProperty(exports, "windowToggle", {
            enumerable: true,
            get: function get() {
                return windowToggle_1.windowToggle;
            }
        });
        var windowWhen_1 = require_windowWhen();
        Object.defineProperty(exports, "windowWhen", {
            enumerable: true,
            get: function get() {
                return windowWhen_1.windowWhen;
            }
        });
        var withLatestFrom_1 = require_withLatestFrom();
        Object.defineProperty(exports, "withLatestFrom", {
            enumerable: true,
            get: function get() {
                return withLatestFrom_1.withLatestFrom;
            }
        });
        var zipAll_1 = require_zipAll();
        Object.defineProperty(exports, "zipAll", {
            enumerable: true,
            get: function get() {
                return zipAll_1.zipAll;
            }
        });
        var zipWith_1 = require_zipWith();
        Object.defineProperty(exports, "zipWith", {
            enumerable: true,
            get: function get() {
                return zipWith_1.zipWith;
            }
        });
    }
});
// node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var require_bytes2 = __commonJS({
    "node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js": function(exports, module2) {
        var lenIn3 = 171005;
        var lenOut3 = 339466;
        var bytes5 = "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";
        module2.exports = {
            bytes: bytes5,
            lenIn: lenIn3,
            lenOut: lenOut3
        };
    }
});
// src/index.tsx
var src_exports = {};
__export(src_exports, {
    Checkout: function() {
        return Checkout_default;
    },
    LibraProviders: function() {
        return LibraProviders;
    }
});
module.exports = __toCommonJS(src_exports);
// src/components/Checkout/index.tsx
var import_styled_components4 = __toESM(require("styled-components"));
var import_antd8 = require("antd");
// src/components/Checkout/CheckoutSummary.tsx
var import_styled_components = __toESM(require("styled-components"));
var import_antd = require("antd");
// src/components/LibraLogo.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function LibraLogo(param) {
    var height = param.height, width = param.width, _param_fill = param.fill, fill = _param_fill === void 0 ? "rgb(30, 37, 53)" : _param_fill;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", {
        height: height,
        width: width,
        fill: fill,
        viewBox: "0 0 500 158.9",
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polygon", {
                points: "236.37 40.29 220.82 40.29 220.82 132.35 280.22 132.35 280.22 117.13 236.47 117.13 236.37 40.29"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", {
                x: "289.68",
                y: "62.3",
                width: "14.79",
                height: "70.05"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("rect", {
                x: "289.4",
                y: "36.93",
                width: "15.35",
                height: "15.41"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M376.98,71.9c-2.47-3.17-5.61-5.71-9.34-7.55-3.74-1.85-8.14-2.79-13.09-2.79-5.66,0-10.54,1.1-14.52,3.28-3.02,1.65-5.6,3.86-7.69,6.6v-31.22h-14.79v92.32h14.79v-10.36c.89,1.87,3.27,6.04,7.66,8.63,3.75,2.22,8.51,3.29,14.55,3.29,4.99,0,9.41-.94,13.13-2.79,3.71-1.85,6.84-4.4,9.31-7.58,2.45-3.17,4.31-6.91,5.52-11.14,1.2-4.19,1.81-8.77,1.81-13.63,0-4.55-.57-11.45-1.81-15.84-1.21-4.29-3.07-8.06-5.52-11.2Zm-8.22,34.91c0,4.12-1.57,7.37-4.8,9.92-3.25,2.57-7.52,3.87-12.68,3.87-6.12,0-10.86-1.74-14.07-5.17-3.39-3.62-4.87-5.75-4.87-10.99v-10.99c0-5.33,1.64-9.79,4.87-13.27,3.21-3.45,7.94-5.2,14.07-5.2,5.16,0,9.43,1.31,12.68,3.9,3.23,2.57,4.8,5.82,4.8,9.95v17.98Z"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polygon", {
                points: "391.44 132.35 406.23 132.35 406.23 75.35 428.33 75.35 428.33 62.3 391.44 62.3 391.44 132.35"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M489.52,119.37v-31.95c0-4.76-.82-9.59-2.13-12.61-1.42-3.26-3.46-5.97-6.06-8.06-2.57-2.07-5.63-3.63-9.1-4.66-3.43-1.02-7.19-1.53-11.16-1.53s-7.74,.59-11.2,1.75c-3.48,1.17-6.55,2.86-9.12,5.01-2.59,2.16-4.68,4.76-6.21,7.71-1.55,2.98-2.33,6.3-2.33,9.88v1h14.79v-1c0-2.2,.32-4.1,.94-5.65,.61-1.5,1.52-2.72,2.72-3.62,2.52-1.89,5.98-2.86,10.27-2.86,2.18,0,4.18,.21,5.95,.63,1.7,.41,3.16,1.11,4.35,2.09,1.18,.97,2.11,2.32,2.76,4,.67,1.73,1.01,3.97,1.01,6.66v2.95l-22.8,2.11c-7.14,.64-12.5,2.97-16.06,6.99-3.57,4.02-5.36,8.84-5.36,14.46,0,2.84,.51,5.56,1.54,8.17,1.03,2.61,2.48,4.85,4.36,6.73,2.11,2.15,4.6,3.78,7.48,4.87,2.88,1.1,6.11,1.65,9.68,1.65,5.35,0,9.95-1.22,13.8-3.67,3.84-2.45,6.75-6.21,8.72-11.29l.1,2.11,.23,11.11h23.66v-12.98h-10.84Zm-14.51-16.17c0,5.63-1.44,10.23-4.31,13.79-2.87,3.56-6.8,5.33-11.79,5.33-3.51,0-6.27-.67-8.26-2.01-2-1.34-2.99-3.44-2.99-6.32v-5.51c0-1.8,.29-3.21,.87-4.25,.58-1.04,2-1.64,4.28-1.8l22.21-2.05v2.82Z"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M109.66,93.9c-.6-.13-.97-.29-1.13-.4-1.04-4.09,1.98-22.96,20.75-67.58l-14.13-5.94c-28.54,67.86-22.29,77.58-19.62,81.73,1.65,2.57,4.9,5.91,10.96,7.19,1.74,.37,3.59,.53,5.52,.53,16.48,0,38.61-12.15,42.77-14.88l-8.43-12.8c-7.86,5.18-28.25,13.93-36.68,12.15Z"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M89.22,138.06c-16.71,6.89-30.75,7.34-41.74,1.32-29.16-15.97-14.36-84.2-2.46-118.05l-14.46-5.08c-1.69,4.81-10.3,30.2-13.86,58.16-5.17,40.69,2.7,67.07,23.41,78.41,7.98,4.37,16.36,6.07,24.6,6.07,28.57,0,55.32-20.54,56.76-21.66l-9.43-12.09c-.09,.07-9.66,7.48-22.82,12.91Z"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M57.65,79.99c4.19-29.82,18.48-67.54,21.12-73.73L64.66,.25c-3.34,7.84-17.8,46.29-22.2,77.61l15.18,2.13Z"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
                d: "M81.48,88.48C88.3,47.79,107.13,6.91,107.32,6.51L93.44,0c-.2,.42-19.92,43.24-27.08,85.95l15.12,2.53Z"
            })
        ]
    });
}
// src/config/index.ts
var APP_NAME = "libra-checkout";
var ASSET_METADATA = {
    dot: {
        decimals: 10,
        symbol: "DOT",
        logo: "https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png",
        network: {
            name: "Polkadot",
            type: "substrate",
            config: {
                ss58Prefix: 0,
                rpc: "wss://apps-rpc.polkadot.io"
            }
        }
    },
    ksm: {
        decimals: 12,
        symbol: "KSM",
        logo: "https://raw.githubusercontent.com/paritytech/polkadot-staking-dashboard/master/src/img/kusama_icon.svg",
        network: {
            name: "Kusama",
            type: "substrate",
            config: {
                ss58Prefix: 2,
                rpc: "wss://apps-rpc.polkadot.io"
            }
        }
    },
    wnd: {
        decimals: 12,
        symbol: "WND",
        logo: "https://raw.githubusercontent.com/paritytech/polkadot-staking-dashboard/master/src/img/westend_icon.svg",
        network: {
            name: "Westend",
            type: "substrate",
            config: {
                ss58Prefix: 42,
                rpc: "wss://westend-rpc.polkadot.io"
            }
        }
    }
};
var EXTENSIONS = [
    {
        id: "polkadot-js",
        name: "Polkadot.{Js}",
        installURL: "https://polkadot.js.org/extension/"
    }
];
// src/utils/index.ts
var import_jsbi = __toESM(require("jsbi"));
function toReverseArray(str) {
    var splitString = str.split("");
    var reverseArray = splitString.reverse();
    return reverseArray;
}
var getZeroLength = function(stringNumber) {
    var reversedArray = toReverseArray(stringNumber);
    var count = 0;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = reversedArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var number3 = _step.value;
            if (number3 !== "0") {
                return count;
            }
            count += 1;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return count;
};
function formatBalance(amount, asset) {
    var metadata = ASSET_METADATA[asset];
    if (!metadata) {
        return Number(amount);
    }
    var decimals = metadata.decimals;
    var zeroLength = getZeroLength(amount);
    if (zeroLength < metadata.decimals) {
        var nextAmount = amount.slice(0, amount.length - zeroLength);
        var nextDecimals = decimals - zeroLength;
        var intNumberPart = nextAmount.slice(0, nextDecimals);
        var decimalNumberPart = nextAmount.slice(nextDecimals, nextAmount.length);
        var decimalNumber = Number(decimalNumberPart) / Math.pow(10, Number(decimalNumberPart.length));
        return Number(intNumberPart) + decimalNumber;
    }
    var scale = import_jsbi.default.exponentiate(import_jsbi.default.BigInt(10), import_jsbi.default.BigInt(metadata.decimals));
    var result = import_jsbi.default.divide(import_jsbi.default.BigInt(amount), scale).toString();
    return Number(result);
}
var getCheckoutPrice = function(param, assetMetadata) {
    var price = param.price, asset = param.asset;
    var nextPrice = typeof price !== "number" ? formatBalance(price, asset) : price;
    var unit = assetMetadata ? assetMetadata.symbol : asset;
    var formattedPrice = nextPrice.toLocaleString("en-US", {
        style: "decimal"
    });
    return "".concat(formattedPrice, " ").concat(unit);
};
// src/components/Checkout/CheckoutSummary.tsx
var import_react_i18next = require("react-i18next");
var import_jsx_runtime2 = require("react/jsx-runtime");
var _import_antd_Typography = import_antd.Typography, Paragraph = _import_antd_Typography.Paragraph, Link = _import_antd_Typography.Link;
var ImageWrapper = import_styled_components.default.div(_templateObject());
var ProductInfoWrapper = import_styled_components.default.div(_templateObject1());
var ProductInformation = function(param) {
    var product = param.product, asset = param.asset, loading = param.loading;
    var _ref = product || {}, name = _ref.name, description = _ref.description, price = _ref.price, image = _ref.image;
    var assetMetadata = ASSET_METADATA[asset];
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(ProductInfoWrapper, {
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Skeleton, {
                active: true,
                className: "product-name-skeleton",
                paragraph: false,
                loading: loading,
                children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Typography.Title, {
                    type: "secondary",
                    level: 4,
                    style: {
                        marginBottom: 0,
                        fontWeight: 400
                    },
                    children: name || "Product name"
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Skeleton, {
                active: true,
                className: "product-price-skeleton",
                paragraph: false,
                loading: loading,
                children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_antd.Space, {
                    align: "center",
                    style: {
                        marginTop: 10
                    },
                    children: [
                        assetMetadata && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Avatar, {
                            src: assetMetadata.logo,
                            children: asset
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Typography.Title, {
                            level: 3,
                            style: {
                                margin: 0,
                                fontSize: 32
                            },
                            children: price ? getCheckoutPrice({
                                price: price,
                                asset: asset
                            }, assetMetadata) : "0"
                        })
                    ]
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Skeleton, {
                active: true,
                className: "product-description-skeleton",
                paragraph: false,
                loading: loading,
                children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Typography.Paragraph, {
                    type: "secondary",
                    children: description
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ImageWrapper, {
                children: loading ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Skeleton.Avatar, {
                    shape: "square",
                    active: true,
                    className: "product-image-skeleton"
                }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Image, {
                    src: image,
                    preview: false,
                    style: {
                        maxWidth: 300,
                        maxHeight: 300
                    }
                })
            })
        ]
    });
};
var FooterLink = (0, import_styled_components.default)(Link)(_templateObject2());
function FooterLinks() {
    var _ref = (0, import_react_i18next.useTranslation)(), t2 = _ref.t;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_antd.Space, {
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Paragraph, {
                style: {
                    margin: 0
                },
                strong: true,
                children: t2("footer.poweredBy")
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(LibraLogo, {
                height: 18
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_antd.Divider, {
                type: "vertical",
                style: {
                    height: 20
                }
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(FooterLink, {
                children: [
                    " ",
                    t2("footer.privacy")
                ]
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(FooterLink, {
                children: t2("footer.terms")
            })
        ]
    });
}
var CheckoutSummaryWrapper = import_styled_components.default.div(_templateObject3());
var CheckoutSummary = function(param) {
    var product = param.product, asset = param.asset, previewMode = param.previewMode, loading = param.loading;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(CheckoutSummaryWrapper, {
        style: previewMode ? {
            maxHeight: 550
        } : {},
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ProductInformation, {
                product: product,
                asset: asset,
                loading: loading
            }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", {
                children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(FooterLinks, {})
            })
        ]
    });
};
var CheckoutSummary_default = CheckoutSummary;
// src/components/Checkout/PaymentSummary.tsx
var import_react7 = require("react");
var import_antd5 = require("antd");
var import_react_i18next2 = require("react-i18next");
// src/components/Account/AccountInfo.tsx
var import_react3 = require("react");
var import_antd2 = require("antd");
// ../../node_modules/@ant-design/icons/es/components/Context.js
var import_react = require("react");
var IconContext = /* @__PURE__ */ (0, import_react.createContext)({});
var Context_default = IconContext;
// ../../node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function _typeof(obj2) {
        return typeof obj2;
    } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
}
// ../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
// ../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
// ../../node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value1) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value1,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value1;
    }
    return obj;
}
// ../../node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys1(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys1(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// ../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
// ../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = false;
            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true);
        } catch (err) {
            _d = true, _e = err;
        } finally{
            try {
                if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
}
// ../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
// ../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
// ../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// ../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
// ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// ../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
// ../../node_modules/@ant-design/icons/es/components/AntdIcon.js
var React2 = __toESM(require("react"));
var import_classnames = __toESM(require_classnames());
// ../../node_modules/@ctrl/tinycolor/dist/module/util.js
function bound01(n, max3) {
    if (isOnePointZero(n)) {
        n = "100%";
    }
    var isPercent = isPercentage(n);
    n = max3 === 360 ? n : Math.min(max3, Math.max(0, parseFloat(n)));
    if (isPercent) {
        n = parseInt(String(n * max3), 10) / 100;
    }
    if (Math.abs(n - max3) < 1e-6) {
        return 1;
    }
    if (max3 === 360) {
        n = (n < 0 ? n % max3 + max3 : n % max3) / parseFloat(String(max3));
    } else {
        n = n % max3 / parseFloat(String(max3));
    }
    return n;
}
function isOnePointZero(n) {
    return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }
    return a;
}
function convertToPercentage(n) {
    if (n <= 1) {
        return "".concat(Number(n) * 100, "%");
    }
    return n;
}
function pad2(c) {
    return c.length === 1 ? "0" + c : String(c);
}
// ../../node_modules/@ctrl/tinycolor/dist/module/conversion.js
function rgbToRgb(r, g, b) {
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}
function hue2rgb(p, q, t2) {
    if (t2 < 0) {
        t2 += 1;
    }
    if (t2 > 1) {
        t2 -= 1;
    }
    if (t2 < 1 / 6) {
        return p + (q - p) * (6 * t2);
    }
    if (t2 < 1 / 2) {
        return q;
    }
    if (t2 < 2 / 3) {
        return p + (q - p) * (2 / 3 - t2) * 6;
    }
    return p;
}
function hslToRgb(h, s, l13) {
    var r;
    var g;
    var b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l13 = bound01(l13, 100);
    if (s === 0) {
        g = l13;
        b = l13;
        r = l13;
    } else {
        var q = l13 < 0.5 ? l13 * (1 + s) : l13 + s - l13 * s;
        var p = 2 * l13 - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max3 = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var v = max3;
    var d = max3 - min;
    var s = max3 === 0 ? 0 : d / max3;
    if (max3 === min) {
        h = 0;
    } else {
        switch(max3){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
            default:
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        v: v
    };
}
function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t2 = v * (1 - (1 - f) * s);
    var mod2 = i % 6;
    var r = [
        v,
        q,
        p,
        p,
        t2,
        v
    ][mod2];
    var g = [
        t2,
        v,
        v,
        q,
        p,
        p
    ][mod2];
    var b = [
        p,
        p,
        t2,
        v,
        v,
        q
    ][mod2];
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
function rgbToHex(r, g, b, allow3Char) {
    var hex3 = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16))
    ];
    if (allow3Char && hex3[0].startsWith(hex3[0].charAt(1)) && hex3[1].startsWith(hex3[1].charAt(1)) && hex3[2].startsWith(hex3[2].charAt(1))) {
        return hex3[0].charAt(0) + hex3[1].charAt(0) + hex3[2].charAt(0);
    }
    return hex3.join("");
}
function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
    return parseInt(val, 16);
}
// ../../node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
};
// ../../node_modules/@ctrl/tinycolor/dist/module/format-input.js
function inputToRGB(color) {
    var rgb = {
        r: 0,
        g: 0,
        b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l13 = null;
    var ok = false;
    var format = false;
    if (typeof color === "string") {
        color = stringInputToObject(color);
    }
    if (typeof color === "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l13 = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l13);
            ok = true;
            format = "hsl";
        }
        if (Object.prototype.hasOwnProperty.call(color, "a")) {
            a = color.a;
        }
    }
    a = boundAlpha(a);
    return {
        ok: ok,
        format: color.format || format,
        r: Math.min(255, Math.max(rgb.r, 0)),
        g: Math.min(255, Math.max(rgb.g, 0)),
        b: Math.min(255, Math.max(rgb.b, 0)),
        a: a
    };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
        return false;
    }
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    } else if (color === "transparent") {
        return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
        };
    }
    var match = matchers.rgb.exec(color);
    if (match) {
        return {
            r: match[1],
            g: match[2],
            b: match[3]
        };
    }
    match = matchers.rgba.exec(color);
    if (match) {
        return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
        };
    }
    match = matchers.hsl.exec(color);
    if (match) {
        return {
            h: match[1],
            s: match[2],
            l: match[3]
        };
    }
    match = matchers.hsla.exec(color);
    if (match) {
        return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
        };
    }
    match = matchers.hsv.exec(color);
    if (match) {
        return {
            h: match[1],
            s: match[2],
            v: match[3]
        };
    }
    match = matchers.hsva.exec(color);
    if (match) {
        return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
        };
    }
    match = matchers.hex8.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    match = matchers.hex6.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    match = matchers.hex4.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1] + match[1]),
            g: parseIntFromHex(match[2] + match[2]),
            b: parseIntFromHex(match[3] + match[3]),
            a: convertHexToDecimal(match[4] + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    match = matchers.hex3.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1] + match[1]),
            g: parseIntFromHex(match[2] + match[2]),
            b: parseIntFromHex(match[3] + match[3]),
            format: named ? "name" : "hex"
        };
    }
    return false;
}
function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
// ../../node_modules/@ant-design/colors/es/generate.js
var hueStep = 2;
var saturationStep = 0.16;
var saturationStep2 = 0.05;
var brightnessStep1 = 0.05;
var brightnessStep2 = 0.15;
var lightColorCount = 5;
var darkColorCount = 4;
var darkColorMap = [
    {
        index: 7,
        opacity: 0.15
    },
    {
        index: 6,
        opacity: 0.25
    },
    {
        index: 5,
        opacity: 0.3
    },
    {
        index: 5,
        opacity: 0.45
    },
    {
        index: 5,
        opacity: 0.65
    },
    {
        index: 5,
        opacity: 0.85
    },
    {
        index: 4,
        opacity: 0.9
    },
    {
        index: 3,
        opacity: 0.95
    },
    {
        index: 2,
        opacity: 0.97
    },
    {
        index: 1,
        opacity: 0.98
    }
];
function toHsv(_ref) {
    var r = _ref.r, g = _ref.g, b = _ref.b;
    var hsv = rgbToHsv(r, g, b);
    return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v
    };
}
function toHex(_ref2) {
    var r = _ref2.r, g = _ref2.g, b = _ref2.b;
    return "#".concat(rgbToHex(r, g, b, false));
}
function mix(rgb1, rgb2, amount) {
    var p = amount / 100;
    var rgb = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b
    };
    return rgb;
}
function getHue(hsv, i, light) {
    var hue;
    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
        hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    } else {
        hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    }
    if (hue < 0) {
        hue += 360;
    } else if (hue >= 360) {
        hue -= 360;
    }
    return hue;
}
function getSaturation(hsv, i, light) {
    if (hsv.h === 0 && hsv.s === 0) {
        return hsv.s;
    }
    var saturation;
    if (light) {
        saturation = hsv.s - saturationStep * i;
    } else if (i === darkColorCount) {
        saturation = hsv.s + saturationStep;
    } else {
        saturation = hsv.s + saturationStep2 * i;
    }
    if (saturation > 1) {
        saturation = 1;
    }
    if (light && i === lightColorCount && saturation > 0.1) {
        saturation = 0.1;
    }
    if (saturation < 0.06) {
        saturation = 0.06;
    }
    return Number(saturation.toFixed(2));
}
function getValue(hsv, i, light) {
    var value1;
    if (light) {
        value1 = hsv.v + brightnessStep1 * i;
    } else {
        value1 = hsv.v - brightnessStep2 * i;
    }
    if (value1 > 1) {
        value1 = 1;
    }
    return Number(value1.toFixed(2));
}
function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);
    for(var i = lightColorCount; i > 0; i -= 1){
        var hsv = toHsv(pColor);
        var colorString = toHex(inputToRGB({
            h: getHue(hsv, i, true),
            s: getSaturation(hsv, i, true),
            v: getValue(hsv, i, true)
        }));
        patterns.push(colorString);
    }
    patterns.push(toHex(pColor));
    for(var _i = 1; _i <= darkColorCount; _i += 1){
        var _hsv = toHsv(pColor);
        var _colorString = toHex(inputToRGB({
            h: getHue(_hsv, _i),
            s: getSaturation(_hsv, _i),
            v: getValue(_hsv, _i)
        }));
        patterns.push(_colorString);
    }
    if (opts.theme === "dark") {
        return darkColorMap.map(function(_ref3) {
            var index = _ref3.index, opacity = _ref3.opacity;
            var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || "#141414"), inputToRGB(patterns[index]), opacity * 100));
            return darkColorString;
        });
    }
    return patterns;
}
// ../../node_modules/@ant-design/colors/es/index.js
var presetPrimaryColors = {
    red: "#F5222D",
    volcano: "#FA541C",
    orange: "#FA8C16",
    gold: "#FAAD14",
    yellow: "#FADB14",
    lime: "#A0D911",
    green: "#52C41A",
    cyan: "#13C2C2",
    blue: "#1677FF",
    geekblue: "#2F54EB",
    purple: "#722ED1",
    magenta: "#EB2F96",
    grey: "#666666"
};
var presetPalettes = {};
var presetDarkPalettes = {};
Object.keys(presetPrimaryColors).forEach(function(key) {
    presetPalettes[key] = generate(presetPrimaryColors[key]);
    presetPalettes[key].primary = presetPalettes[key][5];
    presetDarkPalettes[key] = generate(presetPrimaryColors[key], {
        theme: "dark",
        backgroundColor: "#141414"
    });
    presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
});
var red = presetPalettes.red;
var volcano = presetPalettes.volcano;
var gold = presetPalettes.gold;
var orange = presetPalettes.orange;
var yellow = presetPalettes.yellow;
var lime = presetPalettes.lime;
var green = presetPalettes.green;
var cyan = presetPalettes.cyan;
var blue = presetPalettes.blue;
var geekblue = presetPalettes.geekblue;
var purple = presetPalettes.purple;
var magenta = presetPalettes.magenta;
var grey = presetPalettes.grey;
var gray = presetPalettes.grey;
// ../../node_modules/@ant-design/icons/es/utils.js
var import_react2 = __toESM(require("react"));
// ../../node_modules/rc-util/es/warning.js
var warned = {};
function warning(valid, message2) {
    if (process.env.NODE_ENV !== "production" && !valid && console !== void 0) {
        console.error("Warning: ".concat(message2));
    }
}
function call(method, valid, message2) {
    if (!valid && !warned[message2]) {
        method(false, message2);
        warned[message2] = true;
    }
}
function warningOnce(valid, message2) {
    call(warning, valid, message2);
}
var warning_default = warningOnce;
// ../../node_modules/rc-util/es/Dom/canUseDom.js
function canUseDom() {
    return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
// ../../node_modules/rc-util/es/Dom/contains.js
function contains(root, n) {
    if (!root) {
        return false;
    }
    if (root.contains) {
        return root.contains(n);
    }
    var node = n;
    while(node){
        if (node === root) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}
// ../../node_modules/rc-util/es/Dom/dynamicCSS.js
var APPEND_ORDER = "data-rc-order";
var MARK_KEY = "rc-util-key";
var containerCache = /* @__PURE__ */ new Map();
function getMark() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, mark = _ref.mark;
    if (mark) {
        return mark.startsWith("data-") ? mark : "data-".concat(mark);
    }
    return MARK_KEY;
}
function getContainer(option) {
    if (option.attachTo) {
        return option.attachTo;
    }
    var head = document.querySelector("head");
    return head || document.body;
}
function getOrder(prepend) {
    if (prepend === "queue") {
        return "prependQueue";
    }
    return prepend ? "prepend" : "append";
}
function findStyles(container) {
    return Array.from((containerCache.get(container) || container).children).filter(function(node) {
        return node.tagName === "STYLE";
    });
}
function injectCSS(css) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!canUseDom()) {
        return null;
    }
    var csp = option.csp, prepend = option.prepend;
    var styleNode = document.createElement("style");
    styleNode.setAttribute(APPEND_ORDER, getOrder(prepend));
    if (csp !== null && csp !== void 0 && csp.nonce) {
        styleNode.nonce = csp === null || csp === void 0 ? void 0 : csp.nonce;
    }
    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;
    if (prepend) {
        if (prepend === "queue") {
            var existStyle = findStyles(container).filter(function(node) {
                return [
                    "prepend",
                    "prependQueue"
                ].includes(node.getAttribute(APPEND_ORDER));
            });
            if (existStyle.length) {
                container.insertBefore(styleNode, existStyle[existStyle.length - 1].nextSibling);
                return styleNode;
            }
        }
        container.insertBefore(styleNode, firstChild);
    } else {
        container.appendChild(styleNode);
    }
    return styleNode;
}
function findExistNode(key) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var container = getContainer(option);
    return findStyles(container).find(function(node) {
        return node.getAttribute(getMark(option)) === key;
    });
}
function syncRealContainer(container, option) {
    var cachedRealContainer = containerCache.get(container);
    if (!cachedRealContainer || !contains(document, cachedRealContainer)) {
        var placeholderStyle = injectCSS("", option);
        var parentNode = placeholderStyle.parentNode;
        containerCache.set(container, parentNode);
        container.removeChild(placeholderStyle);
    }
}
function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var container = getContainer(option);
    syncRealContainer(container, option);
    var existNode = findExistNode(key, option);
    if (existNode) {
        var _option$csp, _option$csp2;
        if ((_option$csp = option.csp) !== null && _option$csp !== void 0 && _option$csp.nonce && existNode.nonce !== ((_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce)) {
            var _option$csp3;
            existNode.nonce = (_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce;
        }
        if (existNode.innerHTML !== css) {
            existNode.innerHTML = css;
        }
        return existNode;
    }
    var newNode = injectCSS(css, option);
    newNode.setAttribute(getMark(option), key);
    return newNode;
}
// ../../node_modules/@ant-design/icons/es/utils.js
function warning2(valid, message2) {
    warning_default(valid, "[@ant-design/icons] ".concat(message2));
}
function isIconDefinition(target) {
    return _typeof(target) === "object" && typeof target.name === "string" && typeof target.theme === "string" && (_typeof(target.icon) === "object" || typeof target.icon === "function");
}
function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.keys(attrs).reduce(function(acc, key) {
        var val = attrs[key];
        switch(key){
            case "class":
                acc.className = val;
                delete acc.class;
                break;
            default:
                acc[key] = val;
        }
        return acc;
    }, {});
}
function generate2(node, key, rootProps) {
    if (!rootProps) {
        return /* @__PURE__ */ import_react2.default.createElement(node.tag, _objectSpread2({
            key: key
        }, normalizeAttrs(node.attrs)), (node.children || []).map(function(child, index) {
            return generate2(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
        }));
    }
    return /* @__PURE__ */ import_react2.default.createElement(node.tag, _objectSpread2(_objectSpread2({
        key: key
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function(child, index) {
        return generate2(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
}
function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
        return [];
    }
    return Array.isArray(twoToneColor) ? twoToneColor : [
        twoToneColor
    ];
}
var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
var useInsertStyles = function useInsertStyles2() {
    var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles;
    var _useContext = (0, import_react2.useContext)(Context_default), csp = _useContext.csp, prefixCls = _useContext.prefixCls;
    var mergedStyleStr = styleStr;
    if (prefixCls) {
        mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);
    }
    (0, import_react2.useEffect)(function() {
        updateCSS(mergedStyleStr, "@ant-design-icons", {
            prepend: true,
            csp: csp
        });
    }, []);
};
// ../../node_modules/@ant-design/icons/es/components/IconBase.js
var _excluded = [
    "icon",
    "className",
    "onClick",
    "style",
    "primaryColor",
    "secondaryColor"
];
var twoToneColorPalette = {
    primaryColor: "#333",
    secondaryColor: "#E6E6E6",
    calculated: false
};
function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
}
var IconBase = function IconBase2(props) {
    var icon = props.icon, className = props.className, onClick = props.onClick, style = props.style, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, restProps = _objectWithoutProperties(props, _excluded);
    var colors = twoToneColorPalette;
    if (primaryColor) {
        colors = {
            primaryColor: primaryColor,
            secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
        };
    }
    useInsertStyles();
    warning2(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));
    if (!isIconDefinition(icon)) {
        return null;
    }
    var target = icon;
    if (target && typeof target.icon === "function") {
        target = _objectSpread2(_objectSpread2({}, target), {}, {
            icon: target.icon(colors.primaryColor, colors.secondaryColor)
        });
    }
    return generate2(target.icon, "svg-".concat(target.name), _objectSpread2({
        className: className,
        onClick: onClick,
        style: style,
        "data-icon": target.name,
        width: "1em",
        height: "1em",
        fill: "currentColor",
        "aria-hidden": "true"
    }, restProps));
};
IconBase.displayName = "IconReact";
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
var IconBase_default = IconBase;
// ../../node_modules/@ant-design/icons/es/components/twoTonePrimaryColor.js
function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return IconBase_default.setTwoToneColors({
        primaryColor: primaryColor,
        secondaryColor: secondaryColor
    });
}
function getTwoToneColor() {
    var colors = IconBase_default.getTwoToneColors();
    if (!colors.calculated) {
        return colors.primaryColor;
    }
    return [
        colors.primaryColor,
        colors.secondaryColor
    ];
}
// ../../node_modules/@ant-design/icons/es/components/AntdIcon.js
var _excluded2 = [
    "className",
    "icon",
    "spin",
    "rotate",
    "tabIndex",
    "onClick",
    "twoToneColor"
];
setTwoToneColor("#1890ff");
var Icon = /* @__PURE__ */ React2.forwardRef(function(props, ref) {
    var _classNames;
    var className = props.className, icon = props.icon, spin = props.spin, rotate = props.rotate, tabIndex = props.tabIndex, onClick = props.onClick, twoToneColor = props.twoToneColor, restProps = _objectWithoutProperties(props, _excluded2);
    var _React$useContext = React2.useContext(Context_default), _React$useContext$pre = _React$useContext.prefixCls, prefixCls = _React$useContext$pre === void 0 ? "anticon" : _React$useContext$pre, rootClassName = _React$useContext.rootClassName;
    var classString = (0, import_classnames.default)(rootClassName, prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _defineProperty(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === "loading"), _classNames), className);
    var iconTabIndex = tabIndex;
    if (iconTabIndex === void 0 && onClick) {
        iconTabIndex = -1;
    }
    var svgStyle = rotate ? {
        msTransform: "rotate(".concat(rotate, "deg)"),
        transform: "rotate(".concat(rotate, "deg)")
    } : void 0;
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
    return /* @__PURE__ */ React2.createElement("span", _objectSpread2(_objectSpread2({
        role: "img",
        "aria-label": icon.name
    }, restProps), {}, {
        ref: ref,
        tabIndex: iconTabIndex,
        onClick: onClick,
        className: classString
    }), /* @__PURE__ */ React2.createElement(IconBase_default, {
        icon: icon,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        style: svgStyle
    }));
});
Icon.displayName = "AntdIcon";
Icon.getTwoToneColor = getTwoToneColor;
Icon.setTwoToneColor = setTwoToneColor;
var AntdIcon_default = Icon;
// ../../node_modules/@ant-design/icons/es/icons/DownOutlined.js
var React3 = __toESM(require("react"));
// ../../node_modules/@ant-design/icons-svg/es/asn/DownOutlined.js
var DownOutlined = {
    "icon": {
        "tag": "svg",
        "attrs": {
            "viewBox": "64 64 896 896",
            "focusable": "false"
        },
        "children": [
            {
                "tag": "path",
                "attrs": {
                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                }
            }
        ]
    },
    "name": "down",
    "theme": "outlined"
};
var DownOutlined_default = DownOutlined;
// ../../node_modules/@ant-design/icons/es/icons/DownOutlined.js
var DownOutlined2 = function DownOutlined3(props, ref) {
    return /* @__PURE__ */ React3.createElement(AntdIcon_default, _objectSpread2(_objectSpread2({}, props), {}, {
        ref: ref,
        icon: DownOutlined_default
    }));
};
DownOutlined2.displayName = "DownOutlined";
var DownOutlined_default2 = /* @__PURE__ */ React3.forwardRef(DownOutlined2);
// src/components/Account/AccountInfo.tsx
var import_react_identicon = __toESM(require("@polkadot/react-identicon"));
var import_jsx_runtime3 = require("react/jsx-runtime");
var _import_antd2_Typography = import_antd2.Typography, Paragraph2 = _import_antd2_Typography.Paragraph;
function AccountInfo(param) {
    var account3 = param.account, _param_variant = param.variant, variant = _param_variant === void 0 ? "default" : _param_variant;
    var name = account3.name, address = account3.address;
    var _import_antd2_theme_useToken = import_antd2.theme.useToken(), _import_antd2_theme_useToken_token = _import_antd2_theme_useToken.token, colorPrimary = _import_antd2_theme_useToken_token.colorPrimary, colorBorder = _import_antd2_theme_useToken_token.colorBorder;
    var _ref = _sliced_to_array((0, import_react3.useState)(false), 2), hovered = _ref[0], setHovered = _ref[1];
    var shortedAddress = "".concat(account3.address.slice(0, 16), "...").concat(account3.address.slice(-12));
    var style = {
        display: "flex",
        justifyContent: "space-between",
        padding: "8px 16px",
        borderRadius: "8px"
    };
    if (variant === "select") {
        style = _object_spread_props(_object_spread({}, style), {
            cursor: "pointer",
            border: "solid 1px ".concat(hovered ? colorPrimary : colorBorder)
        });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", {
        style: style,
        onMouseEnter: function() {
            return setHovered(true);
        },
        onMouseLeave: function() {
            return setHovered(false);
        },
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_antd2.Space, {
                align: "center",
                size: "middle",
                children: [
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_react_identicon.default, {
                        value: address,
                        size: 24,
                        theme: "substrate"
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_antd2.Space, {
                        direction: "vertical",
                        size: 4,
                        children: [
                            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Paragraph2, {
                                strong: true,
                                style: {
                                    marginBottom: 0
                                },
                                children: name
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Paragraph2, {
                                style: {
                                    marginBottom: "0",
                                    fontSize: "12px"
                                },
                                children: shortedAddress
                            })
                        ]
                    })
                ]
            }),
            variant === "select" && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DownOutlined_default2, {
                style: {
                    color: hovered ? colorPrimary : colorBorder
                }
            })
        ]
    });
}
// src/components/Account/index.tsx
var import_styled_components2 = __toESM(require("styled-components"));
// src/contexts/extensions/index.tsx
var import_react4 = __toESM(require("react"));
var import_jsx_runtime4 = require("react/jsx-runtime");
var defaultExtensionsContext = {
    extensions: [],
    isReady: false
};
var MAX_RETRY = 10;
var ExtensionsContext = import_react4.default.createContext(defaultExtensionsContext);
var useExtensions = function() {
    return import_react4.default.useContext(ExtensionsContext);
};
function hasInjectedWeb3() {
    return !!window.injectedWeb3;
}
function getExtensions() {
    var injectedWeb3 = window.injectedWeb3;
    var extensions = [];
    if (!injectedWeb3) {
        return [];
    }
    EXTENSIONS.forEach(function(config3) {
        if (injectedWeb3[config3.id]) {
            extensions.push(_object_spread({}, config3, injectedWeb3[config3.id]));
        }
    });
    return extensions;
}
var ExtensionsProvider = function(param) {
    var children = param.children;
    var _ref = _sliced_to_array((0, import_react4.useState)([]), 2), extensions = _ref[0], setExtensions = _ref[1];
    var _ref1 = _sliced_to_array((0, import_react4.useState)(false), 2), isReady3 = _ref1[0], setIsReady = _ref1[1];
    var retryCounter = 0;
    var retryInterval;
    (0, import_react4.useEffect)(function() {
        retryInterval = setInterval(function() {
            if (hasInjectedWeb3()) {
                setExtensions(getExtensions());
                setIsReady(true);
                clearInterval(retryInterval);
            }
            if (++retryCounter === MAX_RETRY) {
                setIsReady(true);
                clearInterval(retryInterval);
            }
        }, 500);
        return function() {
            return clearInterval(retryInterval);
        };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ExtensionsContext.Provider, {
        value: {
            extensions: extensions,
            isReady: isReady3
        },
        children: children
    });
};
// src/components/Account/index.tsx
var import_react6 = require("react");
// src/components/Account/AccountSelect.tsx
var import_antd3 = require("antd");
var import_react5 = require("react");
var import_jsx_runtime5 = require("react/jsx-runtime");
function getItems(accounts2) {
    return accounts2.map(function(account3) {
        return {
            key: account3.address,
            label: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(AccountInfo, {
                account: account3
            })
        };
    });
}
function AccountSelect(param) {
    var accounts2 = param.accounts, onChange = param.onChange;
    var _ref = _sliced_to_array((0, import_react5.useState)(), 2), selected = _ref[0], setSelected = _ref[1];
    (0, import_react5.useEffect)(function() {
        setSelected(accounts2[0]);
    }, [
        accounts2
    ]);
    (0, import_react5.useEffect)(function() {
        onChange && onChange(selected);
    }, [
        selected
    ]);
    if (accounts2.length === 0) {
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_antd3.Skeleton.Input, {
            active: true
        });
    }
    var items = getItems(accounts2);
    var handleSelect = function(param) {
        var key = param.key;
        var account3 = accounts2.find(function(account4) {
            return account4.address === key;
        });
        setSelected(account3);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_antd3.Dropdown, {
        trigger: [
            "click"
        ],
        menu: {
            items: items,
            onClick: handleSelect
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("a", {
            onClick: function(e) {
                return e.preventDefault();
            },
            children: !selected ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_antd3.Button, {
                size: "large",
                block: true,
                children: [
                    " ",
                    "Select an account"
                ]
            }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(AccountInfo, {
                variant: "select",
                account: selected
            })
        })
    });
}
// src/utils/extensions.ts
var saveConnectedExtension = function(extensionId) {
    localStorage.setItem(extensionId, "connected");
};
var isExtensionConnected = function(extensionId) {
    var isConnected = localStorage.getItem(extensionId) === "connected";
    return isConnected;
};
// src/components/Account/index.tsx
var import_antd4 = require("antd");
var import_jsx_runtime6 = require("react/jsx-runtime");
var Wrapper = import_styled_components2.default.div(_templateObject4());
function AccountConnection(param) {
    var onAccountConnected = param.onAccountConnected;
    var _useExtensions = useExtensions(), extensions = _useExtensions.extensions, isReady3 = _useExtensions.isReady;
    var _ref = _sliced_to_array((0, import_react6.useState)(), 2), extension = _ref[0], setExtension = _ref[1];
    var _ref1 = _sliced_to_array((0, import_react6.useState)([]), 2), accounts2 = _ref1[0], setAccounts = _ref1[1];
    var _ref2 = _sliced_to_array((0, import_react6.useState)(), 2), signer = _ref2[0], setSinger = _ref2[1];
    var _ref3 = _sliced_to_array((0, import_react6.useState)(false), 2), loading = _ref3[0], setLoading = _ref3[1];
    var connectExtension = function() {
        var _ref = _async_to_generator(function() {
            var result;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        setLoading(true);
                        if (!extension) return [
                            3,
                            3
                        ];
                        return [
                            4,
                            extension.enable(APP_NAME)
                        ];
                    case 1:
                        result = _state.sent();
                        setSinger(result.signer);
                        return [
                            4,
                            result.accounts.get()
                        ];
                    case 2:
                        setAccounts.apply(void 0, [
                            _state.sent()
                        ]);
                        saveConnectedExtension(extension.id);
                        _state.label = 3;
                    case 3:
                        setLoading(false);
                        return [
                            2
                        ];
                }
            });
        });
        return function connectExtension() {
            return _ref.apply(this, arguments);
        };
    }();
    (0, import_react6.useEffect)(function() {
        if (isReady3) {
            var polkadotJs = extensions.find(function(item) {
                return item.id === "polkadot-js";
            });
            setExtension(polkadotJs);
        }
    }, [
        isReady3
    ]);
    (0, import_react6.useEffect)(function() {
        if (extension && isExtensionConnected(extension.id)) {
            connectExtension();
        }
    }, [
        extension
    ]);
    var handleAccountSelected = function(account3) {
        onAccountConnected && onAccountConnected(_object_spread_props(_object_spread({}, account3), {
            signer: signer
        }));
    };
    if (loading || !isReady3) {
        return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_antd4.Skeleton, {
            active: true
        });
    }
    if (extension && !isExtensionConnected(extension.id)) {
        return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, {
            children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_antd4.Button, {
                loading: loading,
                disabled: loading,
                size: "large",
                block: true,
                onClick: connectExtension,
                children: "Connect Wallet"
            })
        });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Wrapper, {
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(AccountSelect, {
            accounts: accounts2,
            onChange: handleAccountSelected
        })
    });
}
// ../../node_modules/@polkadot/x-textdecoder/node.js
var import_util3 = __toESM(require("util"), 1);
// ../../node_modules/@polkadot/x-global/index.js
function evaluateThis(fn) {
    return fn("return this");
}
var xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
function extractGlobal(name, fallback) {
    return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
}
// ../../node_modules/@polkadot/x-textdecoder/node.js
var TextDecoder2 = extractGlobal("TextDecoder", import_util3.default.TextDecoder);
// ../../node_modules/@polkadot/x-textencoder/node.js
var import_util4 = __toESM(require("util"), 1);
var _encoder;
var Fallback = /*#__PURE__*/ function() {
    function Fallback() {
        _class_call_check(this, Fallback);
        __privateAdd(this, _encoder, void 0);
        __privateSet(this, _encoder, new import_util4.default.TextEncoder());
    }
    _create_class(Fallback, [
        {
            // For a Jest 26.0.1 environment, Buffer !== Uint8Array
            key: "encode",
            value: function encode(value1) {
                return Uint8Array.from(__privateGet(this, _encoder).encode(value1));
            }
        }
    ]);
    return Fallback;
}();
_encoder = new WeakMap();
var TextEncoder2 = extractGlobal("TextEncoder", Fallback);
// ../../node_modules/@polkadot/util/is/function.js
function isFunction(value1) {
    return typeof value1 === "function";
}
// ../../node_modules/@polkadot/util/array/chunk.js
function arrayChunk(array, chunkSize) {
    var outputSize = Math.ceil(array.length / chunkSize);
    if (outputSize === 1) {
        return [
            array
        ];
    }
    var output4 = Array(outputSize);
    for(var i = 0; i < outputSize; i++){
        var offset = i * chunkSize;
        output4[i] = array.slice(offset, offset + chunkSize);
    }
    return output4;
}
// ../../node_modules/@polkadot/util/array/flatten.js
function arrayFlatten(arrays) {
    if (arrays.length === 0) {
        return [];
    } else if (arrays.length === 1) {
        return arrays[0];
    }
    var size = 0;
    for(var i2 = 0; i2 < arrays.length; i2++){
        size += arrays[i2].length;
    }
    var output4 = new Array(size);
    var i = -1;
    for(var j = 0; j < arrays.length; j++){
        var a = arrays[j];
        for(var e = 0; e < a.length; e++){
            output4[++i] = a[e];
        }
    }
    return output4;
}
// ../../node_modules/@polkadot/util/assert.js
function assert(condition, message2) {
    if (!condition) {
        throw new Error(isFunction(message2) ? message2() : message2);
    }
}
function assertReturn(value1, message2) {
    assert(value1 !== void 0 && value1 !== null, message2);
    return value1;
}
function assertUnreachable(x) {
    throw new Error("This codepath should be unreachable. Unhandled input: ".concat(x));
}
// ../../node_modules/@polkadot/x-bigint/index.js
var BigInt2 = typeof xglobal.BigInt === "function" && typeof xglobal.BigInt.asIntN === "function" ? xglobal.BigInt : function() {
    return Number.NaN;
};
// ../../node_modules/@polkadot/util/bi/consts.js
var _0n = /* @__PURE__ */ BigInt2(0);
var _1n = /* @__PURE__ */ BigInt2(1);
var _1Bn = /* @__PURE__ */ BigInt2(1e9);
var _1Qn = _1Bn * _1Bn;
var _2pow53n = /* @__PURE__ */ BigInt2(Number.MAX_SAFE_INTEGER);
// ../../node_modules/@polkadot/util/hex/toU8a.js
var CHR = "0123456789abcdef";
var U8 = new Uint8Array(256);
var U16 = new Uint8Array(256 * 256);
for(var i = 0; i < CHR.length; i++){
    U8[CHR[i].charCodeAt(0) | 0] = i | 0;
    if (i > 9) {
        U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
    }
}
for(var i1 = 0; i1 < 256; i1++){
    var s = i1 << 8;
    for(var j = 0; j < 256; j++){
        U16[s | j] = U8[i1] << 4 | U8[j];
    }
}
function hexToU8a(value1) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
    if (!value1) {
        return new Uint8Array();
    }
    var s = value1.startsWith("0x") ? 2 : 0;
    var decLength = Math.ceil((value1.length - s) / 2);
    var endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
    var result = new Uint8Array(endLength);
    var offset = endLength > decLength ? endLength - decLength : 0;
    for(var i = offset; i < endLength; i++, s += 2){
        result[i] = U16[value1.charCodeAt(s) << 8 | value1.charCodeAt(s + 1)];
    }
    return result;
}
// ../../node_modules/@polkadot/util/bn/bn.js
var import_bn = __toESM(require_bn(), 1);
// ../../node_modules/@polkadot/util/is/bn.js
function isBn(value1) {
    return import_bn.default.isBN(value1);
}
// ../../node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
function isHex(value1) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, ignoreLength = arguments.length > 2 ? arguments[2] : void 0;
    return typeof value1 === "string" && (value1 === "0x" || REGEX_HEX_PREFIXED.test(value1)) && (bitLength === -1 ? ignoreLength || value1.length % 2 === 0 : value1.length === 2 + Math.ceil(bitLength / 4));
}
// ../../node_modules/@polkadot/util/is/object.js
function isObject(value1) {
    return !!value1 && typeof value1 === "object";
}
// ../../node_modules/@polkadot/util/is/helpers.js
function isOn() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
        fns[_key] = arguments[_key];
    }
    return function(value1) {
        return (isObject(value1) || isFunction(value1)) && fns.every(function(f) {
            return isFunction(value1[f]);
        });
    };
}
function isOnFunction() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
        fns[_key] = arguments[_key];
    }
    return function(value1) {
        return isFunction(value1) && fns.every(function(f) {
            return isFunction(value1[f]);
        });
    };
}
function isOnObject() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){
        fns[_key] = arguments[_key];
    }
    return function(value1) {
        return isObject(value1) && fns.every(function(f) {
            return isFunction(value1[f]);
        });
    };
}
// ../../node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt = /* @__PURE__ */ isOn("toBigInt");
// ../../node_modules/@polkadot/util/is/toBn.js
var isToBn = /* @__PURE__ */ isOn("toBn");
// ../../node_modules/@polkadot/util/bi/helpers.js
function createCmp(cmp) {
    return function() {
        for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){
            items[_key] = arguments[_key];
        }
        if (items.length === 0) {
            throw new Error("Must provide one or more arguments");
        }
        var result = items[0];
        for(var i = 1; i < items.length; i++){
            if (cmp(items[i], result)) {
                result = items[i];
            }
        }
        return result;
    };
}
// ../../node_modules/@polkadot/util/has.js
var hasBigInt = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess = typeof xglobal.process === "object";
// ../../node_modules/@polkadot/util/is/buffer.js
function isBuffer(value1) {
    return hasBuffer && isFunction(value1 && value1.readDoubleLE) && xglobal.Buffer.isBuffer(value1);
}
// ../../node_modules/@polkadot/util/is/u8a.js
function isU8a(value1) {
    return (value1 && value1.constructor) === Uint8Array || _instanceof(value1, Uint8Array);
}
// ../../node_modules/@polkadot/util/string/toU8a.js
var encoder = new TextEncoder2();
function stringToU8a(value1) {
    return value1 ? encoder.encode(value1.toString()) : new Uint8Array();
}
// ../../node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a(value1) {
    return isU8a(value1) ? isBuffer(value1) ? new Uint8Array(value1) : value1 : isHex(value1) ? hexToU8a(value1) : Array.isArray(value1) ? new Uint8Array(value1) : stringToU8a(value1);
}
// ../../node_modules/@polkadot/util/u8a/concat.js
function u8aConcat() {
    for(var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++){
        list[_key] = arguments[_key];
    }
    var u8as = new Array(list.length);
    var length = 0;
    for(var i = 0; i < list.length; i++){
        u8as[i] = u8aToU8a(list[i]);
        length += u8as[i].length;
    }
    return u8aConcatStrict(u8as, length);
}
function u8aConcatStrict(u8as) {
    var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var offset = 0;
    if (!length) {
        for(var i = 0; i < u8as.length; i++){
            length += u8as[i].length;
        }
    }
    var result = new Uint8Array(length);
    for(var i1 = 0; i1 < u8as.length; i1++){
        result.set(u8as[i1], offset);
        offset += u8as[i1].length;
    }
    return result;
}
// ../../node_modules/@polkadot/util/u8a/eq.js
function u8aEq(a, b) {
    var u8aa = u8aToU8a(a);
    var u8ab = u8aToU8a(b);
    if (u8aa.length === u8ab.length) {
        var dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
        var dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
        var mod2 = u8aa.length % 4 | 0;
        var length = u8aa.length - mod2 | 0;
        for(var i = 0; i < length; i += 4){
            if (dvA.getUint32(i) !== dvB.getUint32(i)) {
                return false;
            }
        }
        for(var i1 = length; i1 < u8aa.length; i1++){
            if (u8aa[i1] !== u8ab[i1]) {
                return false;
            }
        }
        return true;
    }
    return false;
}
// ../../node_modules/@polkadot/util/u8a/toFloat.js
function u8aToFloat(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_bitLength = _ref.bitLength, bitLength = _ref_bitLength === void 0 ? 32 : _ref_bitLength, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? true : _ref_isLe;
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error("Invalid bitLength provided, expected 32 or 64");
    } else if (value1.length < bitLength / 8) {
        throw new Error("Invalid input buffer provided, expected at least ".concat(bitLength / 8, " bytes, found ").concat(value1.length));
    }
    var dv = new DataView(value1.buffer, value1.byteOffset);
    return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}
// ../../node_modules/@polkadot/util/u8a/toBn.js
function u8aToBn(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? true : _ref_isLe, _ref_isNegative = _ref.isNegative, isNegative = _ref_isNegative === void 0 ? false : _ref_isNegative;
    var count = value1.length;
    if (count <= 6) {
        if (isNegative) {
            var result = 0;
            if (isLe) {
                switch(count){
                    case 0:
                        return new import_bn.default(0);
                    case 1:
                        result = value1[0] ^ 255;
                        break;
                    case 2:
                        result = value1[0] + (value1[1] << 8) ^ 65535;
                        break;
                    case 3:
                        result = value1[0] + (value1[1] << 8) + (value1[2] << 16) ^ 16777215;
                        break;
                    case 4:
                        result = value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295;
                        break;
                    case 5:
                        result = (value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295) + (value1[4] ^ 255) * 4294967296;
                        break;
                    default:
                        result = (value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295) + (value1[4] + (value1[5] << 8) ^ 65535) * 4294967296;
                        break;
                }
            } else {
                for(var i = 0; i < count; i++){
                    result = result * 256 + (value1[i] ^ 255);
                }
            }
            return count ? new import_bn.default(result * -1 - 1) : new import_bn.default(0);
        } else if (isLe) {
            switch(count){
                case 0:
                    return new import_bn.default(0);
                case 1:
                    return new import_bn.default(value1[0]);
                case 2:
                    return new import_bn.default(value1[0] + (value1[1] << 8));
                case 3:
                    return new import_bn.default(value1[0] + (value1[1] << 8) + (value1[2] << 16));
                case 4:
                    return new import_bn.default(value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216);
                case 5:
                    return new import_bn.default(value1[0] + (value1[1] << 8) + (value1[2] << 16) + (value1[3] + (value1[4] << 8)) * 16777216);
                default:
                    return new import_bn.default(value1[0] + (value1[1] << 8) + (value1[2] << 16) + (value1[3] + (value1[4] << 8) + (value1[5] << 16)) * 16777216);
            }
        } else {
            var result1 = 0;
            for(var i1 = 0; i1 < count; i1++){
                result1 = result1 * 256 + value1[i1];
            }
            return new import_bn.default(result1);
        }
    }
    return isNegative ? new import_bn.default(value1, isLe ? "le" : "be").fromTwos(value1.length * 8) : new import_bn.default(value1, isLe ? "le" : "be");
}
// ../../node_modules/@polkadot/util/u8a/toHex.js
var U82 = new Array(256);
var U162 = new Array(256 * 256);
for(var n = 0; n < 256; n++){
    U82[n] = n.toString(16).padStart(2, "0");
}
for(var i2 = 0; i2 < 256; i2++){
    var s1 = i2 << 8;
    for(var j1 = 0; j1 < 256; j1++){
        U162[s1 | j1] = U82[i2] + U82[j1];
    }
}
function hex(value1, result) {
    var mod2 = value1.length % 2 | 0;
    var length = value1.length - mod2 | 0;
    for(var i = 0; i < length; i += 2){
        result += U162[value1[i] << 8 | value1[i + 1]];
    }
    if (mod2) {
        result += U82[value1[length] | 0];
    }
    return result;
}
function u8aToHex(value1) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, isPrefixed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var empty2 = isPrefixed ? "0x" : "";
    if (!value1 || !value1.length) {
        return empty2;
    } else if (bitLength > 0) {
        var length = Math.ceil(bitLength / 8);
        if (value1.length > length) {
            return "".concat(hex(value1.subarray(0, length / 2), empty2), "…").concat(hex(value1.subarray(value1.length - length / 2), ""));
        }
    }
    return hex(value1, empty2);
}
// ../../node_modules/@polkadot/util/u8a/toNumber.js
function u8aToNumber(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_isNegative = _ref.isNegative, isNegative = _ref_isNegative === void 0 ? false : _ref_isNegative;
    var count = value1.length;
    if (isNegative) {
        var result = 0;
        switch(count){
            case 0:
                return 0;
            case 1:
                result = value1[0] ^ 255;
                break;
            case 2:
                result = value1[0] + (value1[1] << 8) ^ 65535;
                break;
            case 3:
                result = value1[0] + (value1[1] << 8) + (value1[2] << 16) ^ 16777215;
                break;
            case 4:
                result = value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295;
                break;
            case 5:
                result = (value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295) + (value1[4] ^ 255) * 4294967296;
                break;
            case 6:
                result = (value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216 ^ 4294967295) + (value1[4] + (value1[5] << 8) ^ 65535) * 4294967296;
                break;
            default:
                throw new Error("Value more than 48-bits cannot be reliably converted");
        }
        return result * -1 - 1;
    }
    switch(count){
        case 0:
            return 0;
        case 1:
            return value1[0];
        case 2:
            return value1[0] + (value1[1] << 8);
        case 3:
            return value1[0] + (value1[1] << 8) + (value1[2] << 16);
        case 4:
            return value1[0] + (value1[1] << 8) + (value1[2] << 16) + value1[3] * 16777216;
        case 5:
            return value1[0] + (value1[1] << 8) + (value1[2] << 16) + (value1[3] + (value1[4] << 8)) * 16777216;
        case 6:
            return value1[0] + (value1[1] << 8) + (value1[2] << 16) + (value1[3] + (value1[4] << 8) + (value1[5] << 16)) * 16777216;
        default:
            throw new Error("Value more than 48-bits cannot be reliably converted");
    }
}
// ../../node_modules/@polkadot/util/u8a/toString.js
var decoder = new TextDecoder2("utf-8");
function u8aToString(value1) {
    return value1 ? decoder.decode(value1) : "";
}
// ../../node_modules/@polkadot/util/bn/consts.js
var BN_ZERO = /* @__PURE__ */ new import_bn.default(0);
var BN_ONE = /* @__PURE__ */ new import_bn.default(1);
var BN_TWO = /* @__PURE__ */ new import_bn.default(2);
var BN_HUNDRED = /* @__PURE__ */ new import_bn.default(100);
var BN_MILLION = /* @__PURE__ */ new import_bn.default(1e6);
var BN_BILLION = /* @__PURE__ */ new import_bn.default(1e9);
var BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
var BN_MAX_INTEGER = /* @__PURE__ */ new import_bn.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER = /* @__PURE__ */ new import_bn.default(94906265);
// ../../node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix(value1) {
    if (!value1 || value1 === "0x") {
        return "";
    } else if (REGEX_HEX_PREFIXED.test(value1)) {
        return value1.substring(2);
    } else if (REGEX_HEX_NOPREFIX.test(value1)) {
        return value1;
    }
    throw new Error("Expected hex value to convert, found '".concat(value1, "'"));
}
// ../../node_modules/@polkadot/util/hex/toBn.js
function hexToBn(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? false : _ref_isLe, _ref_isNegative = _ref.isNegative, isNegative = _ref_isNegative === void 0 ? false : _ref_isNegative;
    if (!value1 || value1 === "0x") {
        return new import_bn.default(0);
    }
    var stripped = hexStripPrefix(value1);
    var bn = new import_bn.default(stripped, 16, isLe ? "le" : "be");
    return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}
// ../../node_modules/@polkadot/util/bn/min.js
var bnMax = /* @__PURE__ */ createCmp(function(a, b) {
    return a.gt(b);
});
var bnMin = /* @__PURE__ */ createCmp(function(a, b) {
    return a.lt(b);
});
// ../../node_modules/@polkadot/util/is/bigInt.js
function isBigInt(value1) {
    return (typeof value1 === "undefined" ? "undefined" : _type_of(value1)) === "bigint";
}
// ../../node_modules/@polkadot/util/bn/toBn.js
function bnToBn(value1) {
    return value1 ? import_bn.default.isBN(value1) ? value1 : isHex(value1) ? hexToBn(value1.toString()) : isBigInt(value1) ? new import_bn.default(value1.toString()) : isToBn(value1) ? value1.toBn() : isToBigInt(value1) ? new import_bn.default(value1.toBigInt().toString()) : new import_bn.default(value1) : new import_bn.default(0);
}
// ../../node_modules/@polkadot/util/bn/sqrt.js
function bnSqrt(value1) {
    var n = bnToBn(value1);
    if (n.isNeg()) {
        throw new Error("square root of negative numbers is not supported");
    }
    if (n.lte(BN_MAX_INTEGER)) {
        return new import_bn.default(~~Math.sqrt(n.toNumber()));
    }
    var x0 = BN_SQRT_MAX_INTEGER.clone();
    while(true){
        var x1 = n.div(x0).iadd(x0).ishrn(1);
        if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
            return x0;
        }
        x0 = x1;
    }
}
// ../../node_modules/@polkadot/util/bn/toU8a.js
var DEFAULT_OPTS = {
    bitLength: -1,
    isLe: true,
    isNegative: false
};
function bnToU8a(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_OPTS, _ref_bitLength = _ref.bitLength, bitLength = _ref_bitLength === void 0 ? -1 : _ref_bitLength, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? true : _ref_isLe, _ref_isNegative = _ref.isNegative, isNegative = _ref_isNegative === void 0 ? false : _ref_isNegative;
    var valueBn = bnToBn(value1);
    var byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
    if (!value1) {
        return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
    }
    var output4 = new Uint8Array(byteLength);
    var bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output4.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
    return output4;
}
// ../../node_modules/@polkadot/util/bn/toHex.js
function bnToHex(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_bitLength = _ref.bitLength, bitLength = _ref_bitLength === void 0 ? -1 : _ref_bitLength, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? false : _ref_isLe, _ref_isNegative = _ref.isNegative, isNegative = _ref_isNegative === void 0 ? false : _ref_isNegative;
    return u8aToHex(bnToU8a(value1, {
        bitLength: bitLength,
        isLe: isLe,
        isNegative: isNegative
    }));
}
// ../../node_modules/@polkadot/util/compact/toU8a.js
var MAX_U8 = BN_TWO.pow(new import_bn.default(8 - 2)).isub(BN_ONE);
var MAX_U16 = BN_TWO.pow(new import_bn.default(16 - 2)).isub(BN_ONE);
var MAX_U32 = BN_TWO.pow(new import_bn.default(32 - 2)).isub(BN_ONE);
var BL_16 = {
    bitLength: 16
};
var BL_32 = {
    bitLength: 32
};
function compactToU8a(value1) {
    var bn = bnToBn(value1);
    if (bn.lte(MAX_U8)) {
        return new Uint8Array([
            bn.toNumber() << 2
        ]);
    } else if (bn.lte(MAX_U16)) {
        return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
    } else if (bn.lte(MAX_U32)) {
        return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
    }
    var u8a = bnToU8a(bn);
    var length = u8a.length;
    while(u8a[length - 1] === 0){
        length--;
    }
    if (length < 4) {
        throw new Error("Invalid length, previous checks match anything less than 2^30");
    }
    return u8aConcatStrict([
        // subtract 4 as minimum (also catered for in decoding)
        new Uint8Array([
            (length - 4 << 2) + 3
        ]),
        u8a.subarray(0, length)
    ]);
}
// ../../node_modules/@polkadot/util/compact/addLength.js
function compactAddLength(input) {
    return u8aConcatStrict([
        compactToU8a(input.length),
        input
    ]);
}
// ../../node_modules/@polkadot/util/compact/fromU8a.js
function compactFromU8a(input) {
    var u8a = u8aToU8a(input);
    switch(u8a[0] & 3){
        case 0:
            return [
                1,
                new import_bn.default(u8a[0] >>> 2)
            ];
        case 1:
            return [
                2,
                new import_bn.default(u8a[0] + (u8a[1] << 8) >>> 2)
            ];
        case 2:
            return [
                4,
                new import_bn.default(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)
            ];
        default:
            {
                var offset = (u8a[0] >>> 2) + 5;
                switch(offset){
                    case 5:
                        return [
                            5,
                            new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)
                        ];
                    case 6:
                        return [
                            6,
                            new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)
                        ];
                    case 7:
                        return [
                            7,
                            new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)
                        ];
                    default:
                        return [
                            offset,
                            u8aToBn(u8a.subarray(1, offset))
                        ];
                }
            }
    }
}
function compactFromU8aLim(u8a) {
    switch(u8a[0] & 3){
        case 0:
            return [
                1,
                u8a[0] >>> 2
            ];
        case 1:
            return [
                2,
                u8a[0] + (u8a[1] << 8) >>> 2
            ];
        case 2:
            return [
                4,
                u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2
            ];
        default:
            {
                switch((u8a[0] >>> 2) + 5){
                    case 5:
                        return [
                            5,
                            u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216
                        ];
                    case 6:
                        return [
                            6,
                            u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216
                        ];
                    case 7:
                        return [
                            7,
                            u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216
                        ];
                    default:
                        throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
                }
            }
    }
}
// ../../node_modules/@polkadot/util/compact/stripLength.js
function compactStripLength(input) {
    var _compactFromU8a = _sliced_to_array(compactFromU8a(input), 2), offset = _compactFromU8a[0], length = _compactFromU8a[1];
    var total = offset + length.toNumber();
    return [
        total,
        input.subarray(offset, total)
    ];
}
// ../../node_modules/@polkadot/util/float/toU8a.js
function floatToU8a() {
    var value1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_bitLength = _ref.bitLength, bitLength = _ref_bitLength === void 0 ? 32 : _ref_bitLength, _ref_isLe = _ref.isLe, isLe = _ref_isLe === void 0 ? true : _ref_isLe;
    if (bitLength !== 32 && bitLength !== 64) {
        throw new Error("Invalid bitLength provided, expected 32 or 64");
    }
    var result = new Uint8Array(bitLength / 8);
    var dv = new DataView(result.buffer, result.byteOffset);
    if (bitLength === 32) {
        dv.setFloat32(0, Number(value1), isLe);
    } else {
        dv.setFloat64(0, Number(value1), isLe);
    }
    return result;
}
// ../../node_modules/@polkadot/util/is/boolean.js
function isBoolean(value1) {
    return typeof value1 === "boolean";
}
// ../../node_modules/@polkadot/util/format/formatDecimal.js
var NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal(value1) {
    var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ",";
    var isNegative = value1[0].startsWith("-");
    var matched = isNegative ? value1.substring(1).match(NUMBER_REGEX) : value1.match(NUMBER_REGEX);
    return matched ? "".concat(isNegative ? "-" : "").concat(matched.join(separator)) : value1;
}
// ../../node_modules/@polkadot/util/format/getSeparator.js
function getSeparator(locale) {
    return {
        decimal: 0.1.toLocaleString(locale).substring(1, 2),
        thousand: 1e3.toLocaleString(locale).substring(1, 2)
    };
}
// ../../node_modules/@polkadot/util/format/si.js
var SI_MID = 8;
var SI = [
    {
        power: -24,
        text: "yocto",
        value: "y"
    },
    {
        power: -21,
        text: "zepto",
        value: "z"
    },
    {
        power: -18,
        text: "atto",
        value: "a"
    },
    {
        power: -15,
        text: "femto",
        value: "f"
    },
    {
        power: -12,
        text: "pico",
        value: "p"
    },
    {
        power: -9,
        text: "nano",
        value: "n"
    },
    {
        power: -6,
        text: "micro",
        value: "\xb5"
    },
    {
        power: -3,
        text: "milli",
        value: "m"
    },
    {
        power: 0,
        text: "Unit",
        value: "-"
    },
    // position 8
    {
        power: 3,
        text: "Kilo",
        value: "k"
    },
    {
        power: 6,
        text: "Mill",
        value: "M"
    },
    // Mega, M
    {
        power: 9,
        text: "Bill",
        value: "B"
    },
    // Giga, G
    {
        power: 12,
        text: "Tril",
        value: "T"
    },
    // Tera, T
    {
        power: 15,
        text: "Peta",
        value: "P"
    },
    {
        power: 18,
        text: "Exa",
        value: "E"
    },
    {
        power: 21,
        text: "Zeta",
        value: "Z"
    },
    {
        power: 24,
        text: "Yotta",
        value: "Y"
    }
];
function findSi(type) {
    for(var i = 0; i < SI.length; i++){
        if (SI[i].value === type) {
            return SI[i];
        }
    }
    return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
        return findSi(forceUnit);
    }
    var siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}
// ../../node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS = 0;
var DEFAULT_UNIT = SI[SI_MID].text;
var defaultDecimals = DEFAULT_DECIMALS;
var defaultUnit = DEFAULT_UNIT;
function _formatBalance(input) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_decimals = _ref.decimals, decimals = _ref_decimals === void 0 ? defaultDecimals : _ref_decimals, forceUnit = _ref.forceUnit, _ref_locale = _ref.locale, locale = _ref_locale === void 0 ? "en" : _ref_locale, _ref_withAll = _ref.withAll, withAll = _ref_withAll === void 0 ? false : _ref_withAll, _ref_withSi = _ref.withSi, withSi = _ref_withSi === void 0 ? true : _ref_withSi, _ref_withSiFull = _ref.withSiFull, withSiFull = _ref_withSiFull === void 0 ? false : _ref_withSiFull, _ref_withUnit = _ref.withUnit, withUnit = _ref_withUnit === void 0 ? true : _ref_withUnit, _ref_withZero = _ref.withZero, withZero = _ref_withZero === void 0 ? true : _ref_withZero;
    var text = bnToBn(input).toString();
    if (text.length === 0 || text === "0") {
        return "0";
    }
    var sign2 = "";
    if (text[0].startsWith("-")) {
        sign2 = "-";
        text = text.substring(1);
    }
    var si = calcSi(text, decimals, forceUnit);
    var mid = text.length - (decimals + si.power);
    var pre = mid <= 0 ? "0" : text.substring(0, mid);
    var post = text.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
    if (!withZero) {
        var end = post.length - 1;
        do {
            if (post[end] === "0") {
                end--;
            }
        }while (post[end] === "0");
        post = post.substring(0, end + 1);
    }
    var unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
    var units = withSi || withSiFull ? si.value === "-" ? withUnit ? " ".concat(unit) : "" : " ".concat(withSiFull ? "".concat(si.text).concat(withUnit ? " " : "") : si.value).concat(withUnit ? unit : "") : "";
    var _getSeparator = getSeparator(locale), decimal = _getSeparator.decimal, thousand = _getSeparator.thousand;
    return "".concat(sign2).concat(formatDecimal(pre, thousand)).concat(post && "".concat(decimal).concat(post)).concat(units);
}
var formatBalance2 = _formatBalance;
formatBalance2.calcSi = function(text) {
    var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDecimals;
    return calcSi(text, decimals);
};
formatBalance2.findSi = findSi;
formatBalance2.getDefaults = function() {
    return {
        decimals: defaultDecimals,
        unit: defaultUnit
    };
};
formatBalance2.getOptions = function() {
    var decimals = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultDecimals;
    return SI.filter(function(param) {
        var power = param.power;
        return power < 0 ? decimals + power >= 0 : true;
    });
};
formatBalance2.setDefaults = function(param) {
    var decimals = param.decimals, unit = param.unit;
    defaultDecimals = decimals === void 0 ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
    defaultUnit = unit === void 0 ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
    SI[SI_MID].text = defaultUnit;
};
// ../../node_modules/@polkadot/util/format/formatDate.js
function zeroPad(value1) {
    return value1.toString().padStart(2, "0");
}
function formatDate(date) {
    var year = date.getFullYear().toString();
    var month = zeroPad(date.getMonth() + 1);
    var day = zeroPad(date.getDate());
    var hour = zeroPad(date.getHours());
    var minute = zeroPad(date.getMinutes());
    var second = zeroPad(date.getSeconds());
    return "".concat(year, "-").concat(month, "-").concat(day, " ").concat(hour, ":").concat(minute, ":").concat(second);
}
// ../../node_modules/@polkadot/util/format/formatNumber.js
function formatNumber(value1) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_locale = _ref.locale, locale = _ref_locale === void 0 ? "en" : _ref_locale;
    var thousand = getSeparator(locale).thousand;
    return formatDecimal(bnToBn(value1).toString(), thousand);
}
// ../../node_modules/@polkadot/util/is/string.js
function isString(value1) {
    return typeof value1 === "string" || _instanceof(value1, String);
}
// ../../node_modules/@polkadot/util/is/ascii.js
function isAsciiStr(str) {
    var count = str.length | 0;
    for(var i = 0; i < count; i++){
        var b = str.charCodeAt(i);
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
function isAsciiBytes(u8a) {
    var count = u8a.length | 0;
    for(var i = 0; i < count; i++){
        var b = u8a[i] | 0;
        if (b < 32 || b > 126) {
            return false;
        }
    }
    return true;
}
function isAscii(value1) {
    return isString(value1) ? isHex(value1) ? isAsciiBytes(u8aToU8a(value1)) : isAsciiStr(value1) : value1 ? isAsciiBytes(value1) : false;
}
// ../../node_modules/@polkadot/util/is/class.js
var isClass = /* @__PURE__ */ isOnFunction("isPrototypeOf", "hasOwnProperty");
// ../../node_modules/@polkadot/util/is/childClass.js
function isChildClass(Parent, Child) {
    return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}
// ../../node_modules/@polkadot/util/is/codec.js
var checkCodec = /* @__PURE__ */ isOnObject("toHex", "toU8a");
var checkRegistry = /* @__PURE__ */ isOnObject("get");
function isCodec(value1) {
    return checkCodec(value1) && checkRegistry(value1.registry);
}
// ../../node_modules/@polkadot/util/is/compact.js
var isCompact = /* @__PURE__ */ isOnObject("toBigInt", "toBn", "toNumber", "unwrap");
// ../../node_modules/@polkadot/util/stringify.js
function replacer(_23, v) {
    return isBigInt(v) ? v.toString() : v;
}
function stringify(value1, space) {
    return JSON.stringify(value1, replacer, space);
}
// ../../node_modules/@polkadot/util/is/null.js
function isNull(value1) {
    return value1 === null;
}
// ../../node_modules/@polkadot/util/is/number.js
function isNumber(value1) {
    return typeof value1 === "number";
}
// ../../node_modules/@polkadot/util/is/undefined.js
function isUndefined(value1) {
    return value1 === void 0;
}
// ../../node_modules/@polkadot/util/is/utf8.js
function isUtf8(value1) {
    if (!value1) {
        return isString(value1);
    }
    var u8a = u8aToU8a(value1);
    var len = u8a.length;
    var i = 0;
    while(i < len){
        if (u8a[i] <= 127) {
            i += 1;
        } else if (u8a[i] >= 194 && u8a[i] <= 223) {
            if (i + 1 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 2;
        } else if (u8a[i] === 224) {
            if (i + 2 < len) {
                if (u8a[i + 1] < 160 || u8a[i + 1] > 191) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 3;
        } else if (u8a[i] >= 225 && u8a[i] <= 236) {
            if (i + 2 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 3;
        } else if (u8a[i] === 237) {
            if (i + 2 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 159) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 3;
        } else if (u8a[i] >= 238 && u8a[i] <= 239) {
            if (i + 2 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 3;
        } else if (u8a[i] === 240) {
            if (i + 3 < len) {
                if (u8a[i + 1] < 144 || u8a[i + 1] > 191) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
                if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 4;
        } else if (u8a[i] >= 241 && u8a[i] <= 243) {
            if (i + 3 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
                if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 4;
        } else if (u8a[i] === 244) {
            if (i + 3 < len) {
                if (u8a[i + 1] < 128 || u8a[i + 1] > 143) {
                    return false;
                }
                if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
                    return false;
                }
                if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
                    return false;
                }
            } else {
                return false;
            }
            i += 4;
        } else {
            return false;
        }
    }
    return true;
}
// ../../node_modules/@polkadot/util/lazy.js
function lazyMethod(result, item, creator, getName) {
    var index = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    var name = getName ? getName(item, index) : item.toString();
    var value1;
    Object.defineProperty(result, name, {
        // This allows for re-configuration with the embedded defineProperty below
        // and ensures that on tested browsers and Node, it _will_ be redefined
        // and thus short-circuited for future access
        configurable: true,
        enumerable: true,
        // Use a function here, we don't want to capture the outer this, i.e.
        // don't use arrow functions in this context since we have a this inside
        get: function get() {
            if (value1 === void 0) {
                value1 = creator(item, index, this);
                try {
                    Object.defineProperty(this, name, {
                        value: value1
                    });
                } catch (e) {}
            }
            return value1;
        }
    });
}
function lazyMethods(result, items, creator, getName) {
    for(var i = 0; i < items.length; i++){
        lazyMethod(result, items[i], creator, getName, i);
    }
    return result;
}
// ../../node_modules/@polkadot/util/logger.js
var logTo = {
    debug: "log",
    error: "error",
    log: "log",
    warn: "warn"
};
function formatOther(value1) {
    if (value1 && isObject(value1) && value1.constructor === Object) {
        var result = {};
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.keys(value1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var k = _step.value;
                result[k] = loggerFormat(value1[k]);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return result;
    }
    return value1;
}
function loggerFormat(value1) {
    if (Array.isArray(value1)) {
        return value1.map(loggerFormat);
    } else if (isBn(value1)) {
        return value1.toString();
    } else if (isU8a(value1) || isBuffer(value1)) {
        return u8aToHex(u8aToU8a(value1));
    }
    return formatOther(value1);
}
function formatWithLength(maxLength) {
    return function(v) {
        if (maxLength <= 0) {
            return v;
        }
        var r = "".concat(v);
        return r.length < maxLength ? v : "".concat(r.substring(0, maxLength), " ...");
    };
}
function apply(log2, type, values) {
    var maxSize = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;
    var _console;
    if (values.length === 1 && isFunction(values[0])) {
        var fnResult = values[0]();
        return apply(log2, type, Array.isArray(fnResult) ? fnResult : [
            fnResult
        ], maxSize);
    }
    (_console = console)[logTo[log2]].apply(_console, [
        formatDate(/* @__PURE__ */ new Date()),
        type
    ].concat(_to_consumable_array(values.map(loggerFormat).map(formatWithLength(maxSize)))));
}
function noop() {}
function isDebugOn(e, type) {
    return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
    return !!e && e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1)));
}
function getDebugFlag(env, type) {
    var flag = false;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = env[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var e = _step.value;
            if (isDebugOn(e, type)) {
                flag = true;
            } else if (isDebugOff(e, type)) {
                flag = false;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return flag;
}
function parseEnv(type) {
    var env = (hasProcess ? xglobal.process : {}).env || {};
    var maxSize = parseInt(env.DEBUG_MAX || "-1", 10);
    return [
        getDebugFlag((env.DEBUG || "").toLowerCase().split(","), type),
        isNaN(maxSize) ? -1 : maxSize
    ];
}
function logger(_type3) {
    var type = "".concat(_type3.toUpperCase(), ":").padStart(16);
    var _parseEnv = _sliced_to_array(parseEnv(_type3.toLowerCase()), 2), isDebug = _parseEnv[0], maxSize = _parseEnv[1];
    return {
        debug: isDebug ? function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return apply("debug", type, values, maxSize);
        } : noop,
        error: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return apply("error", type, values);
        },
        log: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return apply("log", type, values);
        },
        noop: noop,
        warn: function() {
            for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                values[_key] = arguments[_key];
            }
            return apply("warn", type, values);
        }
    };
}
// ../../node_modules/@polkadot/util/memoize.js
function defaultGetId() {
    return "none";
}
function memoize(fn) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_getInstanceId = _ref.getInstanceId, getInstanceId = _ref_getInstanceId === void 0 ? defaultGetId : _ref_getInstanceId;
    var cache = {};
    var memoized = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var stringParams = stringify(args);
        var instanceId = getInstanceId();
        if (!cache[instanceId]) {
            cache[instanceId] = {};
        }
        if (cache[instanceId][stringParams] === void 0) {
            cache[instanceId][stringParams] = fn.apply(void 0, _to_consumable_array(args));
        }
        return cache[instanceId][stringParams];
    };
    memoized.unmemoize = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var stringParams = stringify(args);
        var instanceId = getInstanceId();
        if (cache[instanceId] && cache[instanceId][stringParams] !== void 0) {
            delete cache[instanceId][stringParams];
        }
    };
    return memoized;
}
// ../../node_modules/@polkadot/util/nextTick.js
function nextTick(onExec, onError) {
    setTimeout(function() {
        Promise.resolve().then(function() {
            onExec();
        }).catch(function(error2) {
            if (onError) {
                onError(error2);
            } else {
                console.error(error2);
            }
        });
    }, 0);
}
// ../../node_modules/@polkadot/util/object/clear.js
function objectClear(value1) {
    var keys2 = Object.keys(value1);
    for(var i = 0; i < keys2.length; i++){
        delete value1[keys2[i]];
    }
    return value1;
}
// ../../node_modules/@polkadot/util/object/spread.js
function objectSpread(dest) {
    for(var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        sources[_key - 1] = arguments[_key];
    }
    for(var i = 0; i < sources.length; i++){
        var src = sources[i];
        if (src) {
            if (typeof src.entries === "function") {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = src.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], value1 = _step_value[1];
                        dest[key] = value1;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                Object.assign(dest, src);
            }
        }
    }
    return dest;
}
// ../../node_modules/@polkadot/util/object/property.js
function objectProperty(that, key, getter, getName) {
    var index = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    var name = getName ? getName(key, index) : key;
    if (!(name in that)) {
        Object.defineProperty(that, name, {
            enumerable: true,
            // Unlike in lazy, we always call into the upper function, i.e. this method
            // does not cache old values (it is expected to be used for dynamic values)
            get: function get() {
                return getter(key, index, this);
            }
        });
    }
}
function objectProperties(that, keys2, getter, getName) {
    for(var i = 0; i < keys2.length; i++){
        objectProperty(that, keys2[i], getter, getName, i);
    }
}
// ../../node_modules/@polkadot/util/string/camelCase.js
var CC_TO_UP = new Array(256);
var CC_TO_LO = new Array(256);
for(var i3 = 0; i3 < CC_TO_UP.length; i3++){
    CC_TO_LO[i3] = String.fromCharCode(i3).toLowerCase();
    CC_TO_UP[i3] = String.fromCharCode(i3).toUpperCase();
}
function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
function converter(format) {
    return function(value1) {
        var parts = value1.replace(/[-_., ]+/g, " ").trim().split(" ");
        var count = parts.length;
        var result = "";
        for(var i = 0; i < count; i++){
            var w = parts[i];
            result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
        }
        return result;
    };
}
var stringCamelCase = /* @__PURE__ */ converter(function(w, i) {
    return(// lowercase for first letter/first word, else uppercase first, rest unchanged
    (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
});
var stringPascalCase = /* @__PURE__ */ converter(function(w) {
    return(// uppercase the first character, leave the rest unchanged
    CC_TO_UP[w.charCodeAt(0)] + w.slice(1));
});
// ../../node_modules/@polkadot/util/string/lowerFirst.js
function converter2(map80) {
    return function(value1) {
        return value1 ? map80[value1.charCodeAt(0)] + value1.slice(1) : "";
    };
}
var stringUpperFirst = /* @__PURE__ */ converter2(CC_TO_UP);
// ../../node_modules/@polkadot/util/string/toHex.js
function stringToHex(value1) {
    return u8aToHex(stringToU8a(value1));
}
// ../../node_modules/@polkadot/api/packageInfo.js
var import_meta = {};
var packageInfo = {
    name: "@polkadot/api",
    path: import_meta && import_meta.url ? new URL(import_meta.url).pathname.substring(0, new URL(import_meta.url).pathname.lastIndexOf("/") + 1) : "auto",
    type: "esm",
    version: "9.14.2"
};
// ../../node_modules/@polkadot/x-randomvalues/node.js
var import_crypto = __toESM(require("crypto"), 1);
function getRandomValues(output4) {
    var bytes5 = import_crypto.default.randomBytes(output4.length);
    for(var i = 0; i < bytes5.length; i++){
        output4[i] = bytes5[i];
    }
    return output4;
}
// ../../node_modules/@noble/secp256k1/lib/esm/index.js
var nodeCrypto = __toESM(require("crypto"), 1);
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _3n = BigInt(3);
var _8n = BigInt(8);
var CURVE = Object.freeze({
    a: _0n2,
    b: BigInt(7),
    P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
    n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
    h: _1n2,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
});
var divNearest = function(a, b) {
    return (a + b / _2n) / b;
};
var endo = {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: function splitScalar(k) {
        var n = CURVE.n;
        var a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
        var b1 = -_1n2 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
        var a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
        var b2 = a1;
        var POW_2_128 = BigInt("0x100000000000000000000000000000000");
        var c1 = divNearest(b2 * k, n);
        var c2 = divNearest(-b1 * k, n);
        var k1 = mod(k - c1 * a1 - c2 * a2, n);
        var k2 = mod(-c1 * b1 - c2 * b2, n);
        var k1neg = k1 > POW_2_128;
        var k2neg = k2 > POW_2_128;
        if (k1neg) k1 = n - k1;
        if (k2neg) k2 = n - k2;
        if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalarEndo: Endomorphism failed, k=" + k);
        }
        return {
            k1neg: k1neg,
            k1: k1,
            k2neg: k2neg,
            k2: k2
        };
    }
};
var fieldLen = 32;
var groupLen = 32;
var compressedLen = fieldLen + 1;
var uncompressedLen = 2 * fieldLen + 1;
function weierstrass(x) {
    var a = CURVE.a, b = CURVE.b;
    var x2 = mod(x * x);
    var x3 = mod(x2 * x);
    return mod(x3 + a * x + b);
}
var USE_ENDOMORPHISM = CURVE.a === _0n2;
var ShaError = /*#__PURE__*/ function(Error1) {
    _inherits(ShaError, Error1);
    var _super = _create_super(ShaError);
    function ShaError(message2) {
        _class_call_check(this, ShaError);
        return _super.call(this, message2);
    }
    return ShaError;
}(_wrap_native_super(Error));
function assertJacPoint(other) {
    if (!_instanceof(other, JacobianPoint)) throw new TypeError("JacobianPoint expected");
}
var JacobianPoint = /*#__PURE__*/ function() {
    function JacobianPoint1(x, y, z) {
        _class_call_check(this, JacobianPoint1);
        this.x = x;
        this.y = y;
        this.z = z;
    }
    _create_class(JacobianPoint1, [
        {
            key: "equals",
            value: function equals(other) {
                assertJacPoint(other);
                var _this = this, X1 = _this.x, Y1 = _this.y, Z1 = _this.z;
                var X2 = other.x, Y2 = other.y, Z2 = other.z;
                var Z1Z1 = mod(Z1 * Z1);
                var Z2Z2 = mod(Z2 * Z2);
                var U1 = mod(X1 * Z2Z2);
                var U2 = mod(X2 * Z1Z1);
                var S1 = mod(mod(Y1 * Z2) * Z2Z2);
                var S2 = mod(mod(Y2 * Z1) * Z1Z1);
                return U1 === U2 && S1 === S2;
            }
        },
        {
            key: "negate",
            value: function negate() {
                return new JacobianPoint(this.x, mod(-this.y), this.z);
            }
        },
        {
            key: "double",
            value: function double() {
                var _this = this, X1 = _this.x, Y1 = _this.y, Z1 = _this.z;
                var A = mod(X1 * X1);
                var B = mod(Y1 * Y1);
                var C = mod(B * B);
                var x1b = X1 + B;
                var D = mod(_2n * (mod(x1b * x1b) - A - C));
                var E = mod(_3n * A);
                var F = mod(E * E);
                var X3 = mod(F - _2n * D);
                var Y3 = mod(E * (D - X3) - _8n * C);
                var Z3 = mod(_2n * Y1 * Z1);
                return new JacobianPoint(X3, Y3, Z3);
            }
        },
        {
            key: "add",
            value: function add(other) {
                assertJacPoint(other);
                var _this = this, X1 = _this.x, Y1 = _this.y, Z1 = _this.z;
                var X2 = other.x, Y2 = other.y, Z2 = other.z;
                if (X2 === _0n2 || Y2 === _0n2) return this;
                if (X1 === _0n2 || Y1 === _0n2) return other;
                var Z1Z1 = mod(Z1 * Z1);
                var Z2Z2 = mod(Z2 * Z2);
                var U1 = mod(X1 * Z2Z2);
                var U2 = mod(X2 * Z1Z1);
                var S1 = mod(mod(Y1 * Z2) * Z2Z2);
                var S2 = mod(mod(Y2 * Z1) * Z1Z1);
                var H = mod(U2 - U1);
                var r = mod(S2 - S1);
                if (H === _0n2) {
                    if (r === _0n2) {
                        return this.double();
                    } else {
                        return JacobianPoint.ZERO;
                    }
                }
                var HH = mod(H * H);
                var HHH = mod(H * HH);
                var V = mod(U1 * HH);
                var X3 = mod(r * r - HHH - _2n * V);
                var Y3 = mod(r * (V - X3) - S1 * HHH);
                var Z3 = mod(Z1 * Z2 * H);
                return new JacobianPoint(X3, Y3, Z3);
            }
        },
        {
            key: "subtract",
            value: function subtract(other) {
                return this.add(other.negate());
            }
        },
        {
            key: "multiplyUnsafe",
            value: function multiplyUnsafe(scalar) {
                var P0 = JacobianPoint.ZERO;
                if ((typeof scalar === "undefined" ? "undefined" : _type_of(scalar)) === "bigint" && scalar === _0n2) return P0;
                var n = normalizeScalar(scalar);
                if (n === _1n2) return this;
                if (!USE_ENDOMORPHISM) {
                    var p = P0;
                    var d2 = this;
                    while(n > _0n2){
                        if (n & _1n2) p = p.add(d2);
                        d2 = d2.double();
                        n >>= _1n2;
                    }
                    return p;
                }
                var _endo_splitScalar = endo.splitScalar(n), k1neg = _endo_splitScalar.k1neg, k1 = _endo_splitScalar.k1, k2neg = _endo_splitScalar.k2neg, k2 = _endo_splitScalar.k2;
                var k1p = P0;
                var k2p = P0;
                var d = this;
                while(k1 > _0n2 || k2 > _0n2){
                    if (k1 & _1n2) k1p = k1p.add(d);
                    if (k2 & _1n2) k2p = k2p.add(d);
                    d = d.double();
                    k1 >>= _1n2;
                    k2 >>= _1n2;
                }
                if (k1neg) k1p = k1p.negate();
                if (k2neg) k2p = k2p.negate();
                k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
                return k1p.add(k2p);
            }
        },
        {
            key: "precomputeWindow",
            value: function precomputeWindow(W) {
                var windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
                var points = [];
                var p = this;
                var base = p;
                for(var window2 = 0; window2 < windows; window2++){
                    base = p;
                    points.push(base);
                    for(var i = 1; i < Math.pow(2, W - 1); i++){
                        base = base.add(p);
                        points.push(base);
                    }
                    p = base.double();
                }
                return points;
            }
        },
        {
            key: "wNAF",
            value: function wNAF(n, affinePoint) {
                if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;
                var W = affinePoint && affinePoint._WINDOW_SIZE || 1;
                if (256 % W) {
                    throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
                }
                var precomputes = affinePoint && pointPrecomputes.get(affinePoint);
                if (!precomputes) {
                    precomputes = this.precomputeWindow(W);
                    if (affinePoint && W !== 1) {
                        precomputes = JacobianPoint.normalizeZ(precomputes);
                        pointPrecomputes.set(affinePoint, precomputes);
                    }
                }
                var p = JacobianPoint.ZERO;
                var f = JacobianPoint.BASE;
                var windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
                var windowSize = Math.pow(2, W - 1);
                var mask = BigInt(Math.pow(2, W) - 1);
                var maxNumber = Math.pow(2, W);
                var shiftBy = BigInt(W);
                for(var window2 = 0; window2 < windows; window2++){
                    var offset = window2 * windowSize;
                    var wbits = Number(n & mask);
                    n >>= shiftBy;
                    if (wbits > windowSize) {
                        wbits -= maxNumber;
                        n += _1n2;
                    }
                    var offset1 = offset;
                    var offset2 = offset + Math.abs(wbits) - 1;
                    var cond1 = window2 % 2 !== 0;
                    var cond2 = wbits < 0;
                    if (wbits === 0) {
                        f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                    } else {
                        p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                    }
                }
                return {
                    p: p,
                    f: f
                };
            }
        },
        {
            key: "multiply",
            value: function multiply(scalar, affinePoint) {
                var n = normalizeScalar(scalar);
                var point;
                var fake;
                if (USE_ENDOMORPHISM) {
                    var _endo_splitScalar = endo.splitScalar(n), k1neg = _endo_splitScalar.k1neg, k1 = _endo_splitScalar.k1, k2neg = _endo_splitScalar.k2neg, k2 = _endo_splitScalar.k2;
                    var _this_wNAF = this.wNAF(k1, affinePoint), k1p = _this_wNAF.p, f1p = _this_wNAF.f;
                    var _this_wNAF1 = this.wNAF(k2, affinePoint), k2p = _this_wNAF1.p, f2p = _this_wNAF1.f;
                    k1p = constTimeNegate(k1neg, k1p);
                    k2p = constTimeNegate(k2neg, k2p);
                    k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
                    point = k1p.add(k2p);
                    fake = f1p.add(f2p);
                } else {
                    var _this_wNAF2 = this.wNAF(n, affinePoint), p = _this_wNAF2.p, f = _this_wNAF2.f;
                    point = p;
                    fake = f;
                }
                return JacobianPoint.normalizeZ([
                    point,
                    fake
                ])[0];
            }
        },
        {
            key: "toAffine",
            value: function toAffine(invZ) {
                var _this = this, x = _this.x, y = _this.y, z = _this.z;
                var is0 = this.equals(JacobianPoint.ZERO);
                if (invZ == null) invZ = is0 ? _8n : invert(z);
                var iz1 = invZ;
                var iz2 = mod(iz1 * iz1);
                var iz3 = mod(iz2 * iz1);
                var ax = mod(x * iz2);
                var ay = mod(y * iz3);
                var zz = mod(z * iz1);
                if (is0) return Point.ZERO;
                if (zz !== _1n2) throw new Error("invZ was invalid");
                return new Point(ax, ay);
            }
        }
    ], [
        {
            key: "fromAffine",
            value: function fromAffine(p) {
                if (!_instanceof(p, Point)) {
                    throw new TypeError("JacobianPoint#fromAffine: expected Point");
                }
                if (p.equals(Point.ZERO)) return JacobianPoint.ZERO;
                return new JacobianPoint(p.x, p.y, _1n2);
            }
        },
        {
            key: "toAffineBatch",
            value: function toAffineBatch(points) {
                var toInv = invertBatch(points.map(function(p) {
                    return p.z;
                }));
                return points.map(function(p, i) {
                    return p.toAffine(toInv[i]);
                });
            }
        },
        {
            key: "normalizeZ",
            value: function normalizeZ(points) {
                return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
            }
        }
    ]);
    return JacobianPoint1;
}();
JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n2);
JacobianPoint.ZERO = new JacobianPoint(_0n2, _1n2, _0n2);
function constTimeNegate(condition, item) {
    var neg = item.negate();
    return condition ? neg : item;
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var Point = /*#__PURE__*/ function() {
    function Point1(x, y) {
        _class_call_check(this, Point1);
        this.x = x;
        this.y = y;
    }
    _create_class(Point1, [
        {
            key: "_setWindowSize",
            value: function _setWindowSize(windowSize) {
                this._WINDOW_SIZE = windowSize;
                pointPrecomputes.delete(this);
            }
        },
        {
            key: "hasEvenY",
            value: function hasEvenY() {
                return this.y % _2n === _0n2;
            }
        },
        {
            key: "toRawBytes",
            value: function toRawBytes() {
                var isCompressed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                return hexToBytes(this.toHex(isCompressed));
            }
        },
        {
            key: "toHex",
            value: function toHex() {
                var isCompressed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                var x = numTo32bStr(this.x);
                if (isCompressed) {
                    var prefix2 = this.hasEvenY() ? "02" : "03";
                    return "".concat(prefix2).concat(x);
                } else {
                    return "04".concat(x).concat(numTo32bStr(this.y));
                }
            }
        },
        {
            key: "toHexX",
            value: function toHexX() {
                return this.toHex(true).slice(2);
            }
        },
        {
            key: "toRawX",
            value: function toRawX() {
                return this.toRawBytes(true).slice(1);
            }
        },
        {
            key: "assertValidity",
            value: function assertValidity() {
                var msg = "Point is not on elliptic curve";
                var _this = this, x = _this.x, y = _this.y;
                if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);
                var left = mod(y * y);
                var right = weierstrass(x);
                if (mod(left - right) !== _0n2) throw new Error(msg);
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                return this.x === other.x && this.y === other.y;
            }
        },
        {
            key: "negate",
            value: function negate() {
                return new Point(this.x, mod(-this.y));
            }
        },
        {
            key: "double",
            value: function double() {
                return JacobianPoint.fromAffine(this).double().toAffine();
            }
        },
        {
            key: "add",
            value: function add(other) {
                return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
            }
        },
        {
            key: "subtract",
            value: function subtract(other) {
                return this.add(other.negate());
            }
        },
        {
            key: "multiply",
            value: function multiply(scalar) {
                return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
            }
        },
        {
            key: "multiplyAndAddUnsafe",
            value: function multiplyAndAddUnsafe(Q, a, b) {
                var P = JacobianPoint.fromAffine(this);
                var aP = a === _0n2 || a === _1n2 || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);
                var bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
                var sum = aP.add(bQ);
                return sum.equals(JacobianPoint.ZERO) ? void 0 : sum.toAffine();
            }
        }
    ], [
        {
            key: "fromCompressedHex",
            value: function fromCompressedHex(bytes5) {
                var isShort = bytes5.length === 32;
                var x = bytesToNumber(isShort ? bytes5 : bytes5.subarray(1));
                if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
                var y2 = weierstrass(x);
                var y = sqrtMod(y2);
                var isYOdd = (y & _1n2) === _1n2;
                if (isShort) {
                    if (isYOdd) y = mod(-y);
                } else {
                    var isFirstByteOdd = (bytes5[0] & 1) === 1;
                    if (isFirstByteOdd !== isYOdd) y = mod(-y);
                }
                var point = new Point(x, y);
                point.assertValidity();
                return point;
            }
        },
        {
            key: "fromUncompressedHex",
            value: function fromUncompressedHex(bytes5) {
                var x = bytesToNumber(bytes5.subarray(1, fieldLen + 1));
                var y = bytesToNumber(bytes5.subarray(fieldLen + 1, fieldLen * 2 + 1));
                var point = new Point(x, y);
                point.assertValidity();
                return point;
            }
        },
        {
            key: "fromHex",
            value: function fromHex(hex3) {
                var bytes5 = ensureBytes(hex3);
                var len = bytes5.length;
                var header = bytes5[0];
                if (len === fieldLen) return this.fromCompressedHex(bytes5);
                if (len === compressedLen && (header === 2 || header === 3)) {
                    return this.fromCompressedHex(bytes5);
                }
                if (len === uncompressedLen && header === 4) return this.fromUncompressedHex(bytes5);
                throw new Error("Point.fromHex: received invalid point. Expected 32-".concat(compressedLen, " compressed bytes or ").concat(uncompressedLen, " uncompressed bytes, not ").concat(len));
            }
        },
        {
            key: "fromPrivateKey",
            value: function fromPrivateKey(privateKey) {
                return Point.BASE.multiply(normalizePrivateKey(privateKey));
            }
        },
        {
            key: "fromSignature",
            value: function fromSignature(msgHash, signature, recovery) {
                var _normalizeSignature = normalizeSignature(signature), r = _normalizeSignature.r, s = _normalizeSignature.s;
                if (![
                    0,
                    1,
                    2,
                    3
                ].includes(recovery)) throw new Error("Cannot recover: invalid recovery bit");
                var h = truncateHash(ensureBytes(msgHash));
                var n = CURVE.n;
                var radj = recovery === 2 || recovery === 3 ? r + n : r;
                var rinv = invert(radj, n);
                var u1 = mod(-h * rinv, n);
                var u2 = mod(s * rinv, n);
                var prefix2 = recovery & 1 ? "03" : "02";
                var R = Point.fromHex(prefix2 + numTo32bStr(radj));
                var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
                if (!Q) throw new Error("Cannot recover signature: point at infinify");
                Q.assertValidity();
                return Q;
            }
        }
    ]);
    return Point1;
}();
Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
Point.ZERO = new Point(_0n2, _0n2);
function sliceDER(s) {
    return Number.parseInt(s[0], 16) >= 8 ? "00" + s : s;
}
function parseDERInt(data) {
    if (data.length < 2 || data[0] !== 2) {
        throw new Error("Invalid signature integer tag: ".concat(bytesToHex(data)));
    }
    var len = data[1];
    var res = data.subarray(2, len + 2);
    if (!len || res.length !== len) {
        throw new Error("Invalid signature integer: wrong length");
    }
    if (res[0] === 0 && res[1] <= 127) {
        throw new Error("Invalid signature integer: trailing length");
    }
    return {
        data: bytesToNumber(res),
        left: data.subarray(len + 2)
    };
}
function parseDERSignature(data) {
    if (data.length < 2 || data[0] != 48) {
        throw new Error("Invalid signature tag: ".concat(bytesToHex(data)));
    }
    if (data[1] !== data.length - 2) {
        throw new Error("Invalid signature: incorrect length");
    }
    var _parseDERInt = parseDERInt(data.subarray(2)), r = _parseDERInt.data, sBytes = _parseDERInt.left;
    var _parseDERInt1 = parseDERInt(sBytes), s = _parseDERInt1.data, rBytesLeft = _parseDERInt1.left;
    if (rBytesLeft.length) {
        throw new Error("Invalid signature: left bytes after parsing: ".concat(bytesToHex(rBytesLeft)));
    }
    return {
        r: r,
        s: s
    };
}
var Signature = /*#__PURE__*/ function() {
    function Signature1(r, s) {
        _class_call_check(this, Signature1);
        this.r = r;
        this.s = s;
        this.assertValidity();
    }
    _create_class(Signature1, [
        {
            key: "assertValidity",
            value: function assertValidity() {
                var _this = this, r = _this.r, s = _this.s;
                if (!isWithinCurveOrder(r)) throw new Error("Invalid Signature: r must be 0 < r < n");
                if (!isWithinCurveOrder(s)) throw new Error("Invalid Signature: s must be 0 < s < n");
            }
        },
        {
            key: "hasHighS",
            value: function hasHighS() {
                var HALF = CURVE.n >> _1n2;
                return this.s > HALF;
            }
        },
        {
            key: "normalizeS",
            value: function normalizeS() {
                return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;
            }
        },
        {
            key: "toDERRawBytes",
            value: function toDERRawBytes() {
                return hexToBytes(this.toDERHex());
            }
        },
        {
            key: "toDERHex",
            value: function toDERHex() {
                var sHex = sliceDER(numberToHexUnpadded(this.s));
                var rHex = sliceDER(numberToHexUnpadded(this.r));
                var sHexL = sHex.length / 2;
                var rHexL = rHex.length / 2;
                var sLen = numberToHexUnpadded(sHexL);
                var rLen = numberToHexUnpadded(rHexL);
                var length = numberToHexUnpadded(rHexL + sHexL + 4);
                return "30".concat(length, "02").concat(rLen).concat(rHex, "02").concat(sLen).concat(sHex);
            }
        },
        {
            key: "toRawBytes",
            value: function toRawBytes() {
                return this.toDERRawBytes();
            }
        },
        {
            key: "toHex",
            value: function toHex() {
                return this.toDERHex();
            }
        },
        {
            key: "toCompactRawBytes",
            value: function toCompactRawBytes() {
                return hexToBytes(this.toCompactHex());
            }
        },
        {
            key: "toCompactHex",
            value: function toCompactHex() {
                return numTo32bStr(this.r) + numTo32bStr(this.s);
            }
        }
    ], [
        {
            key: "fromCompact",
            value: function fromCompact(hex3) {
                var arr = _instanceof(hex3, Uint8Array);
                var name = "Signature.fromCompact";
                if (typeof hex3 !== "string" && !arr) throw new TypeError("".concat(name, ": Expected string or Uint8Array"));
                var str = arr ? bytesToHex(hex3) : hex3;
                if (str.length !== 128) throw new Error("".concat(name, ": Expected 64-byte hex"));
                return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
            }
        },
        {
            key: "fromDER",
            value: function fromDER(hex3) {
                var arr = _instanceof(hex3, Uint8Array);
                if (typeof hex3 !== "string" && !arr) throw new TypeError("Signature.fromDER: Expected string or Uint8Array");
                var _parseDERSignature = parseDERSignature(arr ? hex3 : hexToBytes(hex3)), r = _parseDERSignature.r, s = _parseDERSignature.s;
                return new Signature(r, s);
            }
        },
        {
            key: "fromHex",
            value: function fromHex(hex3) {
                return this.fromDER(hex3);
            }
        }
    ]);
    return Signature1;
}();
function concatBytes() {
    for(var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++){
        arrays[_key] = arguments[_key];
    }
    if (!arrays.every(function(b) {
        return _instanceof(b, Uint8Array);
    })) throw new Error("Uint8Array list expected");
    if (arrays.length === 1) return arrays[0];
    var length = arrays.reduce(function(a, arr) {
        return a + arr.length;
    }, 0);
    var result = new Uint8Array(length);
    for(var i = 0, pad = 0; i < arrays.length; i++){
        var arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
var hexes = Array.from({
    length: 256
}, function(v, i) {
    return i.toString(16).padStart(2, "0");
});
function bytesToHex(uint8a) {
    if (!_instanceof(uint8a, Uint8Array)) throw new Error("Expected Uint8Array");
    var hex3 = "";
    for(var i = 0; i < uint8a.length; i++){
        hex3 += hexes[uint8a[i]];
    }
    return hex3;
}
var POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
function numTo32bStr(num) {
    if ((typeof num === "undefined" ? "undefined" : _type_of(num)) !== "bigint") throw new Error("Expected bigint");
    if (!(_0n2 <= num && num < POW_2_256)) throw new Error("Expected number 0 <= n < 2^256");
    return num.toString(16).padStart(64, "0");
}
function numTo32b(num) {
    var b = hexToBytes(numTo32bStr(num));
    if (b.length !== 32) throw new Error("Error: expected 32 bytes");
    return b;
}
function numberToHexUnpadded(num) {
    var hex3 = num.toString(16);
    return hex3.length & 1 ? "0".concat(hex3) : hex3;
}
function hexToNumber(hex3) {
    if (typeof hex3 !== "string") {
        throw new TypeError("hexToNumber: expected string, got " + (typeof hex3 === "undefined" ? "undefined" : _type_of(hex3)));
    }
    return BigInt("0x".concat(hex3));
}
function hexToBytes(hex3) {
    if (typeof hex3 !== "string") {
        throw new TypeError("hexToBytes: expected string, got " + (typeof hex3 === "undefined" ? "undefined" : _type_of(hex3)));
    }
    if (hex3.length % 2) throw new Error("hexToBytes: received invalid unpadded hex" + hex3.length);
    var array = new Uint8Array(hex3.length / 2);
    for(var i = 0; i < array.length; i++){
        var j = i * 2;
        var hexByte = hex3.slice(j, j + 2);
        var byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
function bytesToNumber(bytes5) {
    return hexToNumber(bytesToHex(bytes5));
}
function ensureBytes(hex3) {
    return _instanceof(hex3, Uint8Array) ? Uint8Array.from(hex3) : hexToBytes(hex3);
}
function normalizeScalar(num) {
    if (typeof num === "number" && Number.isSafeInteger(num) && num > 0) return BigInt(num);
    if ((typeof num === "undefined" ? "undefined" : _type_of(num)) === "bigint" && isWithinCurveOrder(num)) return num;
    throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
}
function mod(a) {
    var b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CURVE.P;
    var result = a % b;
    return result >= _0n2 ? result : b + result;
}
function pow2(x, power) {
    var P = CURVE.P;
    var res = x;
    while(power-- > _0n2){
        res *= res;
        res %= P;
    }
    return res;
}
function sqrtMod(x) {
    var P = CURVE.P;
    var _6n = BigInt(6);
    var _11n2 = BigInt(11);
    var _22n = BigInt(22);
    var _23n2 = BigInt(23);
    var _44n = BigInt(44);
    var _88n = BigInt(88);
    var b2 = x * x * x % P;
    var b3 = b2 * b2 * x % P;
    var b6 = pow2(b3, _3n) * b3 % P;
    var b9 = pow2(b6, _3n) * b3 % P;
    var b11 = pow2(b9, _2n) * b2 % P;
    var b22 = pow2(b11, _11n2) * b11 % P;
    var b44 = pow2(b22, _22n) * b22 % P;
    var b88 = pow2(b44, _44n) * b44 % P;
    var b176 = pow2(b88, _88n) * b88 % P;
    var b220 = pow2(b176, _44n) * b44 % P;
    var b223 = pow2(b220, _3n) * b3 % P;
    var t1 = pow2(b223, _23n2) * b22 % P;
    var t2 = pow2(t1, _6n) * b2 % P;
    var rt = pow2(t2, _2n);
    var xc = rt * rt % P;
    if (xc !== x) throw new Error("Cannot find square root");
    return rt;
}
function invert(number3) {
    var modulo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CURVE.P;
    if (number3 === _0n2 || modulo <= _0n2) {
        throw new Error("invert: expected positive integers, got n=".concat(number3, " mod=").concat(modulo));
    }
    var a = mod(number3, modulo);
    var b = modulo;
    var x = _0n2, y = _1n2, u = _1n2, v = _0n2;
    while(a !== _0n2){
        var q = b / a;
        var r = b % a;
        var m = x - u * q;
        var n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    var gcd2 = b;
    if (gcd2 !== _1n2) throw new Error("invert: does not exist");
    return mod(x, modulo);
}
function invertBatch(nums) {
    var p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CURVE.P;
    var scratch = new Array(nums.length);
    var lastMultiplied = nums.reduce(function(acc, num, i) {
        if (num === _0n2) return acc;
        scratch[i] = acc;
        return mod(acc * num, p);
    }, _1n2);
    var inverted = invert(lastMultiplied, p);
    nums.reduceRight(function(acc, num, i) {
        if (num === _0n2) return acc;
        scratch[i] = mod(acc * scratch[i], p);
        return mod(acc * num, p);
    }, inverted);
    return scratch;
}
function bits2int_2(bytes5) {
    var delta = bytes5.length * 8 - groupLen * 8;
    var num = bytesToNumber(bytes5);
    return delta > 0 ? num >> BigInt(delta) : num;
}
function truncateHash(hash3) {
    var truncateOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var h = bits2int_2(hash3);
    if (truncateOnly) return h;
    var n = CURVE.n;
    return h >= n ? h - n : h;
}
var _sha256Sync;
var _hmacSha256Sync;
function isWithinCurveOrder(num) {
    return _0n2 < num && num < CURVE.n;
}
function isValidFieldElement(num) {
    return _0n2 < num && num < CURVE.P;
}
function normalizePrivateKey(key) {
    var num;
    if ((typeof key === "undefined" ? "undefined" : _type_of(key)) === "bigint") {
        num = key;
    } else if (typeof key === "number" && Number.isSafeInteger(key) && key > 0) {
        num = BigInt(key);
    } else if (typeof key === "string") {
        if (key.length !== 2 * groupLen) throw new Error("Expected 32 bytes of private key");
        num = hexToNumber(key);
    } else if (_instanceof(key, Uint8Array)) {
        if (key.length !== groupLen) throw new Error("Expected 32 bytes of private key");
        num = bytesToNumber(key);
    } else {
        throw new TypeError("Expected valid private key");
    }
    if (!isWithinCurveOrder(num)) throw new Error("Expected private key: 0 < key < n");
    return num;
}
function normalizeSignature(signature) {
    if (_instanceof(signature, Signature)) {
        signature.assertValidity();
        return signature;
    }
    try {
        return Signature.fromDER(signature);
    } catch (error2) {
        return Signature.fromCompact(signature);
    }
}
Point.BASE._setWindowSize(8);
var crypto2 = {
    node: nodeCrypto,
    web: typeof self === "object" && "crypto" in self ? self.crypto : void 0
};
var TAGGED_HASH_PREFIXES = {};
var utils = {
    bytesToHex: bytesToHex,
    hexToBytes: hexToBytes,
    concatBytes: concatBytes,
    mod: mod,
    invert: invert,
    isValidPrivateKey: function isValidPrivateKey(privateKey) {
        try {
            normalizePrivateKey(privateKey);
            return true;
        } catch (error2) {
            return false;
        }
    },
    _bigintTo32Bytes: numTo32b,
    _normalizePrivateKey: normalizePrivateKey,
    hashToPrivateKey: function(hash3) {
        hash3 = ensureBytes(hash3);
        var minLen = groupLen + 8;
        if (hash3.length < minLen || hash3.length > 1024) {
            throw new Error("Expected valid bytes of private key as per FIPS 186");
        }
        var num = mod(bytesToNumber(hash3), CURVE.n - _1n2) + _1n2;
        return numTo32b(num);
    },
    randomBytes: function() {
        var bytesLength = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 32;
        if (crypto2.web) {
            return crypto2.web.getRandomValues(new Uint8Array(bytesLength));
        } else if (crypto2.node) {
            var randomBytes = crypto2.node.randomBytes;
            return Uint8Array.from(randomBytes(bytesLength));
        } else {
            throw new Error("The environment doesn't have randomBytes function");
        }
    },
    randomPrivateKey: function() {
        return utils.hashToPrivateKey(utils.randomBytes(groupLen + 8));
    },
    precompute: function precompute() {
        var windowSize = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8, point = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Point.BASE;
        var cached = point === Point.BASE ? point : new Point(point.x, point.y);
        cached._setWindowSize(windowSize);
        cached.multiply(_3n);
        return cached;
    },
    sha256: /*#__PURE__*/ _async_to_generator(function() {
        var _len, messages, _key, buffer, createHash, hash3;
        var _arguments = arguments;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    for(_len = _arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++){
                        messages[_key] = _arguments[_key];
                    }
                    if (!crypto2.web) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        crypto2.web.subtle.digest("SHA-256", concatBytes.apply(void 0, _to_consumable_array(messages)))
                    ];
                case 1:
                    buffer = _state.sent();
                    return [
                        2,
                        new Uint8Array(buffer)
                    ];
                case 2:
                    if (crypto2.node) {
                        createHash = crypto2.node.createHash;
                        hash3 = createHash("sha256");
                        messages.forEach(function(m) {
                            return hash3.update(m);
                        });
                        return [
                            2,
                            Uint8Array.from(hash3.digest())
                        ];
                    } else {
                        throw new Error("The environment doesn't have sha256 function");
                    }
                    _state.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    }),
    hmacSha256: function() {
        var _ref = _async_to_generator(function(key) {
            var _len, messages, _key, ckey, message2, buffer, createHmac, hash3;
            var _arguments = arguments;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        for(_len = _arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            messages[_key - 1] = _arguments[_key];
                        }
                        if (!crypto2.web) return [
                            3,
                            3
                        ];
                        return [
                            4,
                            crypto2.web.subtle.importKey("raw", key, {
                                name: "HMAC",
                                hash: {
                                    name: "SHA-256"
                                }
                            }, false, [
                                "sign"
                            ])
                        ];
                    case 1:
                        ckey = _state.sent();
                        message2 = concatBytes.apply(void 0, _to_consumable_array(messages));
                        return [
                            4,
                            crypto2.web.subtle.sign("HMAC", ckey, message2)
                        ];
                    case 2:
                        buffer = _state.sent();
                        return [
                            2,
                            new Uint8Array(buffer)
                        ];
                    case 3:
                        if (crypto2.node) {
                            createHmac = crypto2.node.createHmac;
                            hash3 = createHmac("sha256", key);
                            messages.forEach(function(m) {
                                return hash3.update(m);
                            });
                            return [
                                2,
                                Uint8Array.from(hash3.digest())
                            ];
                        } else {
                            throw new Error("The environment doesn't have hmac-sha256 function");
                        }
                        _state.label = 4;
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
        return function(key) {
            return _ref.apply(this, arguments);
        };
    }(),
    sha256Sync: void 0,
    hmacSha256Sync: void 0,
    taggedHash: function() {
        var _ref = _async_to_generator(function(tag) {
            var _len, messages, _key, _utils, tagP, tagH;
            var _arguments = arguments;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        for(_len = _arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            messages[_key - 1] = _arguments[_key];
                        }
                        tagP = TAGGED_HASH_PREFIXES[tag];
                        if (!(tagP === void 0)) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            utils.sha256(Uint8Array.from(tag, function(c) {
                                return c.charCodeAt(0);
                            }))
                        ];
                    case 1:
                        tagH = _state.sent();
                        tagP = concatBytes(tagH, tagH);
                        TAGGED_HASH_PREFIXES[tag] = tagP;
                        _state.label = 2;
                    case 2:
                        return [
                            2,
                            (_utils = utils).sha256.apply(_utils, [
                                tagP
                            ].concat(_to_consumable_array(messages)))
                        ];
                }
            });
        });
        return function(tag) {
            return _ref.apply(this, arguments);
        };
    }(),
    taggedHashSync: function(tag) {
        for(var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            messages[_key - 1] = arguments[_key];
        }
        if (typeof _sha256Sync !== "function") throw new ShaError("sha256Sync is undefined, you need to set it");
        var tagP = TAGGED_HASH_PREFIXES[tag];
        if (tagP === void 0) {
            var tagH = _sha256Sync(Uint8Array.from(tag, function(c) {
                return c.charCodeAt(0);
            }));
            tagP = concatBytes(tagH, tagH);
            TAGGED_HASH_PREFIXES[tag] = tagP;
        }
        return _sha256Sync.apply(void 0, [
            tagP
        ].concat(_to_consumable_array(messages)));
    },
    _JacobianPoint: JacobianPoint
};
Object.defineProperties(utils, {
    sha256Sync: {
        configurable: false,
        get: function get() {
            return _sha256Sync;
        },
        set: function set(val) {
            if (!_sha256Sync) _sha256Sync = val;
        }
    },
    hmacSha256Sync: {
        configurable: false,
        get: function get() {
            return _hmacSha256Sync;
        },
        set: function set(val) {
            if (!_hmacSha256Sync) _hmacSha256Sync = val;
        }
    }
});
// ../../node_modules/@polkadot/wasm-bridge/wbg.js
var DEFAULT_CRYPTO = {
    getRandomValues: getRandomValues
};
var DEFAULT_SELF = {
    crypto: DEFAULT_CRYPTO
};
var _bridge;
var Wbg = function Wbg(bridge3) {
    var _this = this;
    _class_call_check(this, Wbg);
    __privateAdd(this, _bridge, void 0);
    /** @internal */ __publicField(this, "abort", function() {
        throw new Error("abort");
    });
    /** @internal */ __publicField(this, "__wbindgen_is_undefined", function(idx) {
        return __privateGet(_this, _bridge).getObject(idx) === void 0;
    });
    /** @internal */ __publicField(this, "__wbindgen_throw", function(ptr, len) {
        throw new Error(__privateGet(_this, _bridge).getString(ptr, len));
    });
    /** @internal */ __publicField(this, "__wbg_self_1b7a39e3a92c949c", function() {
        return __privateGet(_this, _bridge).addObject(DEFAULT_SELF);
    });
    /** @internal */ __publicField(this, "__wbg_require_604837428532a733", function(ptr, len) {
        throw new Error("Unable to require ".concat(__privateGet(_this, _bridge).getString(ptr, len)));
    });
    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    __publicField(this, "__wbg_crypto_968f1772287e2df0", function(_idx) {
        return __privateGet(_this, _bridge).addObject(DEFAULT_CRYPTO);
    });
    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    __publicField(this, "__wbg_getRandomValues_a3d34b4fee3c2869", function(_idx) {
        return __privateGet(_this, _bridge).addObject(DEFAULT_CRYPTO.getRandomValues);
    });
    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    __publicField(this, "__wbg_getRandomValues_f5e14ab7ac8e995d", function(_arg0, ptr, len) {
        DEFAULT_CRYPTO.getRandomValues(__privateGet(_this, _bridge).getU8a(ptr, len));
    });
    /** @internal */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
    __publicField(this, "__wbg_randomFillSync_d5bd2d655fdf256a", function(_idx, _ptr, _len) {
        throw new Error("randomFillsync is not available");
    });
    /** @internal */ __publicField(this, "__wbindgen_object_drop_ref", function(idx) {
        __privateGet(_this, _bridge).takeObject(idx);
    });
    __privateSet(this, _bridge, bridge3);
};
_bridge = new WeakMap();
// ../../node_modules/@polkadot/wasm-bridge/bridge.js
var _cachegetInt32, _cachegetUint8, _createWasm, _heap, _heapNext, _wasm, _wasmError, _wasmPromise, _wbg, _type;
var Bridge = /*#__PURE__*/ function() {
    function Bridge(createWasm3) {
        _class_call_check(this, Bridge);
        __privateAdd(this, _cachegetInt32, void 0);
        __privateAdd(this, _cachegetUint8, void 0);
        __privateAdd(this, _createWasm, void 0);
        __privateAdd(this, _heap, void 0);
        __privateAdd(this, _heapNext, void 0);
        __privateAdd(this, _wasm, void 0);
        __privateAdd(this, _wasmError, void 0);
        __privateAdd(this, _wasmPromise, void 0);
        __privateAdd(this, _wbg, void 0);
        __privateAdd(this, _type, void 0);
        __privateSet(this, _createWasm, createWasm3);
        __privateSet(this, _cachegetInt32, null);
        __privateSet(this, _cachegetUint8, null);
        __privateSet(this, _heap, new Array(32).fill(void 0).concat(void 0, null, true, false));
        __privateSet(this, _heapNext, __privateGet(this, _heap).length);
        __privateSet(this, _type, "none");
        __privateSet(this, _wasm, null);
        __privateSet(this, _wasmError, null);
        __privateSet(this, _wasmPromise, null);
        __privateSet(this, _wbg, _object_spread({}, new Wbg(this)));
    }
    _create_class(Bridge, [
        {
            key: "error",
            get: /** @description Returns the init error */ function get() {
                return __privateGet(this, _wasmError);
            }
        },
        {
            key: "type",
            get: /** @description Returns the init type */ function get() {
                return __privateGet(this, _type);
            }
        },
        {
            key: "wasm",
            get: /** @description Returns the created wasm interface */ function get() {
                return __privateGet(this, _wasm);
            }
        },
        {
            key: "init",
            value: /** @description Performs the wasm initialization */ function init(createWasm3) {
                var _this = this;
                return _async_to_generator(function() {
                    var _ref, error2, type, wasm;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!__privateGet(_this, _wasmPromise) || createWasm3) {
                                    __privateSet(_this, _wasmPromise, (createWasm3 || __privateGet(_this, _createWasm))(__privateGet(_this, _wbg)));
                                }
                                return [
                                    4,
                                    __privateGet(_this, _wasmPromise)
                                ];
                            case 1:
                                _ref = _state.sent(), error2 = _ref.error, type = _ref.type, wasm = _ref.wasm;
                                __privateSet(_this, _type, type);
                                __privateSet(_this, _wasm, wasm);
                                __privateSet(_this, _wasmError, error2);
                                return [
                                    2,
                                    __privateGet(_this, _wasm)
                                ];
                        }
                    });
                })();
            }
        },
        {
            /**
   * @internal
   * @description Gets an object from the heap
   */ key: "getObject",
            value: function getObject(idx) {
                return __privateGet(this, _heap)[idx];
            }
        },
        {
            /**
   * @internal
   * @description Removes an object from the heap
   */ key: "dropObject",
            value: function dropObject(idx) {
                if (idx < 36) {
                    return;
                }
                __privateGet(this, _heap)[idx] = __privateGet(this, _heapNext);
                __privateSet(this, _heapNext, idx);
            }
        },
        {
            /**
   * @internal
   * @description Retrieves and removes an object to the heap
   */ key: "takeObject",
            value: function takeObject(idx) {
                var ret = this.getObject(idx);
                this.dropObject(idx);
                return ret;
            }
        },
        {
            /**
   * @internal
   * @description Adds an object to the heap
   */ key: "addObject",
            value: function addObject(obj) {
                if (__privateGet(this, _heapNext) === __privateGet(this, _heap).length) {
                    __privateGet(this, _heap).push(__privateGet(this, _heap).length + 1);
                }
                var idx = __privateGet(this, _heapNext);
                __privateSet(this, _heapNext, __privateGet(this, _heap)[idx]);
                __privateGet(this, _heap)[idx] = obj;
                return idx;
            }
        },
        {
            /**
   * @internal
   * @description Retrieve an Int32 in the WASM interface
   */ key: "getInt32",
            value: function getInt32() {
                if (__privateGet(this, _cachegetInt32) === null || __privateGet(this, _cachegetInt32).buffer !== __privateGet(this, _wasm).memory.buffer) {
                    __privateSet(this, _cachegetInt32, new Int32Array(__privateGet(this, _wasm).memory.buffer));
                }
                return __privateGet(this, _cachegetInt32);
            }
        },
        {
            /**
   * @internal
   * @description Retrieve an Uint8Array in the WASM interface
   */ key: "getUint8",
            value: function getUint8() {
                if (__privateGet(this, _cachegetUint8) === null || __privateGet(this, _cachegetUint8).buffer !== __privateGet(this, _wasm).memory.buffer) {
                    __privateSet(this, _cachegetUint8, new Uint8Array(__privateGet(this, _wasm).memory.buffer));
                }
                return __privateGet(this, _cachegetUint8);
            }
        },
        {
            /**
   * @internal
   * @description Retrieves an Uint8Array in the WASM interface
   */ key: "getU8a",
            value: function getU8a(ptr, len) {
                return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
            }
        },
        {
            /**
   * @internal
   * @description Retrieves a string in the WASM interface
   */ key: "getString",
            value: function getString(ptr, len) {
                return u8aToString(this.getU8a(ptr, len));
            }
        },
        {
            /**
   * @internal
   * @description Allocates an Uint8Array in the WASM interface
   */ key: "allocU8a",
            value: function allocU8a(arg) {
                var ptr = __privateGet(this, _wasm).__wbindgen_malloc(arg.length * 1);
                this.getUint8().set(arg, ptr / 1);
                return [
                    ptr,
                    arg.length
                ];
            }
        },
        {
            /**
   * @internal
   * @description Allocates a string in the WASM interface
   */ key: "allocString",
            value: function allocString(arg) {
                return this.allocU8a(stringToU8a(arg));
            }
        },
        {
            /**
   * @internal
   * @description Retrieves an Uint8Array from the WASM interface
   */ key: "resultU8a",
            value: function resultU8a() {
                var r0 = this.getInt32()[8 / 4 + 0];
                var r1 = this.getInt32()[8 / 4 + 1];
                var ret = this.getU8a(r0, r1).slice();
                __privateGet(this, _wasm).__wbindgen_free(r0, r1 * 1);
                return ret;
            }
        },
        {
            /**
   * @internal
   * @description Retrieve a string from the WASM interface
   */ key: "resultString",
            value: function resultString() {
                return u8aToString(this.resultU8a());
            }
        }
    ]);
    return Bridge;
}();
_cachegetInt32 = new WeakMap();
_cachegetUint8 = new WeakMap();
_createWasm = new WeakMap();
_heap = new WeakMap();
_heapNext = new WeakMap();
_wasm = new WeakMap();
_wasmError = new WeakMap();
_wasmPromise = new WeakMap();
_wbg = new WeakMap();
_type = new WeakMap();
// ../../node_modules/@polkadot/wasm-bridge/init.js
function createWasmFn(root, wasmBytes3, asmFn) {
    return function() {
        var _ref = _async_to_generator(function(wbg) {
            var result, source, error2;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        result = {
                            error: null,
                            type: "none",
                            wasm: null
                        };
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        if (!wasmBytes3 || !wasmBytes3.length) {
                            throw new Error("No WebAssembly provided for initialization");
                        } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
                            throw new Error("WebAssembly is not available in your environment");
                        }
                        return [
                            4,
                            WebAssembly.instantiate(wasmBytes3, {
                                wbg: wbg
                            })
                        ];
                    case 2:
                        source = _state.sent();
                        result.wasm = source.instance.exports;
                        result.type = "wasm";
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error2 = _state.sent();
                        if (typeof asmFn === "function") {
                            result.wasm = asmFn(wbg);
                            result.type = "asm";
                        } else {
                            result.error = "FATAL: Unable to initialize @polkadot/wasm-".concat(root, ":: ").concat(error2.message);
                            console.error(result.error);
                        }
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2,
                            result
                        ];
                }
            });
        });
        return function(wbg) {
            return _ref.apply(this, arguments);
        };
    }();
}
// ../../node_modules/@polkadot/wasm-util/base64.js
var chr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var map = new Array(256);
for(var i4 = 0; i4 < chr.length; i4++){
    map[chr.charCodeAt(i4)] = i4;
}
function base64Decode(data, out) {
    var len = out.length;
    var byte = 0;
    var bits3 = 0;
    var pos = -1;
    for(var i = 0; pos < len; i++){
        byte = byte << 6 | map[data.charCodeAt(i)];
        if ((bits3 += 6) >= 8) {
            out[++pos] = byte >>> (bits3 -= 8) & 255;
        }
    }
    return out;
}
// ../../node_modules/@polkadot/wasm-util/fflate.js
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var clim = new u8([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */ 0,
    0,
    /* impossible */ 0
]);
var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */ 0,
    0
]);
var freb = function(eb, start) {
    var b = new u16(31);
    for(var i = 0; i < 31; ++i){
        b[i] = start += 1 << eb[i - 1];
    }
    var r = new u32(b[30]);
    for(var i1 = 1; i1 < 30; ++i1){
        for(var j = b[i1]; j < b[i1 + 1]; ++j){
            r[j] = j - b[i1] << 5 | i1;
        }
    }
    return [
        b,
        r
    ];
};
var _freb = _sliced_to_array(freb(fleb, 2), 2), fl = _freb[0], revfl = _freb[1];
fl[28] = 258, revfl[258] = 28;
var _freb1 = _sliced_to_array(freb(fdeb, 0), 1), fd = _freb1[0];
var rev = new u16(32768);
for(var i5 = 0; i5 < 32768; ++i5){
    var x = (i5 & 43690) >>> 1 | (i5 & 21845) << 1;
    x = (x & 52428) >>> 2 | (x & 13107) << 2;
    x = (x & 61680) >>> 4 | (x & 3855) << 4;
    rev[i5] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
}
var hMap = function(cd, mb, r) {
    var s = cd.length;
    var i = 0;
    var l13 = new u16(mb);
    for(; i < s; ++i)++l13[cd[i] - 1];
    var le = new u16(mb);
    for(i = 0; i < mb; ++i){
        le[i] = le[i - 1] + l13[i - 1] << 1;
    }
    var co;
    if (r) {
        co = new u16(1 << mb);
        var rvb = 15 - mb;
        for(i = 0; i < s; ++i){
            if (cd[i]) {
                var sv = i << 4 | cd[i];
                var r2 = mb - cd[i];
                var v = le[cd[i] - 1]++ << r2;
                for(var m = v | (1 << r2) - 1; v <= m; ++v){
                    co[rev[v] >>> rvb] = sv;
                }
            }
        }
    } else {
        co = new u16(s);
        for(i = 0; i < s; ++i)co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
    }
    return co;
};
var flt = new u8(288);
for(var i6 = 0; i6 < 144; ++i6)flt[i6] = 8;
for(var i7 = 144; i7 < 256; ++i7)flt[i7] = 9;
for(var i8 = 256; i8 < 280; ++i8)flt[i8] = 7;
for(var i9 = 280; i9 < 288; ++i9)flt[i9] = 8;
var fdt = new u8(32);
for(var i10 = 0; i10 < 32; ++i10)fdt[i10] = 5;
var flrm = hMap(flt, 9, 1);
var fdrm = hMap(fdt, 5, 1);
var bits = function(d, p, m) {
    var o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
var bits16 = function(d, p) {
    var o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
var shft = function(p) {
    return (p >>> 3) + (p & 7 && 1);
};
var slc = function(v, s, e) {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    var n = new (_instanceof(v, u16) ? u16 : _instanceof(v, u32) ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
var max = function(a) {
    var m = a[0];
    for(var i = 1; i < a.length; ++i){
        if (a[i] > m) m = a[i];
    }
    return m;
};
var inflt = function(dat, buf, st) {
    var noSt = !st || st.i;
    if (!st) st = {};
    var sl = dat.length;
    var noBuf = !buf || !noSt;
    if (!buf) buf = new u8(sl * 3);
    var cbuf = function(l13) {
        var bl = buf.length;
        if (l13 > bl) {
            var nbuf = new u8(Math.max(bl << 1, l13));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm) return buf;
    var tbts = sl << 3;
    do {
        if (!lm) {
            st.f = final = bits(dat, pos, 1);
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                var s = shft(pos) + 4, l13 = dat[s - 4] | dat[s - 3] << 8, t2 = s + l13;
                if (t2 > sl) {
                    if (noSt) throw "unexpected EOF";
                    break;
                }
                if (noBuf) cbuf(bt + l13);
                buf.set(dat.subarray(s, t2), bt);
                st.b = bt += l13, st.p = pos = t2 << 3;
                continue;
            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                var ldt = new u8(tl);
                var clt = new u8(19);
                for(var i = 0; i < hcLen; ++i){
                    clt[clim[i]] = bits(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts) break;
                var clm = hMap(clt, clb, 1);
                for(var i1 = 0; i1 < tl;){
                    var r = clm[bits(dat, pos, clbmsk)];
                    pos += r & 15;
                    var s1 = r >>> 4;
                    if (s1 < 16) {
                        ldt[i1++] = s1;
                    } else {
                        var c = 0, n = 0;
                        if (s1 == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i1 - 1];
                        else if (s1 == 17) n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s1 == 18) n = 11 + bits(dat, pos, 127), pos += 7;
                        while(n--)ldt[i1++] = c;
                    }
                }
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                lbt = max(lt);
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            } else throw "invalid block type";
            if (pos > tbts) throw "unexpected EOF";
        }
        if (noBuf) cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while(noSt || pos + mxa < tbts){
            var c1 = lm[bits16(dat, pos) & lms], sym = c1 >>> 4;
            pos += c1 & 15;
            if (pos > tbts) throw "unexpected EOF";
            if (!c1) throw "invalid length/literal";
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
                lm = void 0;
                break;
            } else {
                var add3 = sym - 254;
                if (sym > 264) {
                    var i2 = sym - 257, b = fleb[i2];
                    add3 = bits(dat, pos, (1 << b) - 1) + fl[i2];
                    pos += b;
                }
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d) throw "invalid distance";
                pos += d & 15;
                var dt1 = fd[dsym];
                if (dsym > 3) {
                    var b1 = fdeb[dsym];
                    dt1 += bits16(dat, pos) & (1 << b1) - 1, pos += b1;
                }
                if (pos > tbts) throw "unexpected EOF";
                if (noBuf) cbuf(bt + 131072);
                var end = bt + add3;
                for(; bt < end; bt += 4){
                    buf[bt] = buf[bt - dt1];
                    buf[bt + 1] = buf[bt + 1 - dt1];
                    buf[bt + 2] = buf[bt + 2 - dt1];
                    buf[bt + 3] = buf[bt + 3 - dt1];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    }while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
var zlv = function(d) {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw "invalid zlib data";
    if (d[1] & 32) throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}
// ../../node_modules/@polkadot/wasm-crypto-wasm/bundle.js
var import_bytes = __toESM(require_bytes(), 1);
var wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode(import_bytes.bytes, new Uint8Array(import_bytes.lenIn)), new Uint8Array(import_bytes.lenOut));
// ../../node_modules/@polkadot/wasm-crypto-init/wasm.js
var createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);
// ../../node_modules/@polkadot/wasm-crypto/init.js
var bridge = new Bridge(createWasm);
function initBridge(createWasm3) {
    return _initBridge.apply(this, arguments);
}
function _initBridge() {
    _initBridge = _async_to_generator(function(createWasm3) {
        return __generator(this, function(_state) {
            return [
                2,
                bridge.init(createWasm3)
            ];
        });
    });
    return _initBridge.apply(this, arguments);
}
// ../../node_modules/@polkadot/wasm-crypto/bundle.js
function withWasm(fn) {
    return function() {
        for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){
            params[_key] = arguments[_key];
        }
        if (!bridge.wasm) {
            throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
        }
        return fn.apply(void 0, [
            bridge.wasm
        ].concat(_to_consumable_array(params)));
    };
}
var secp256k1Expand = /* @__PURE__ */ withWasm(function(wasm, pubkey) {
    var _wasm;
    (_wasm = wasm).ext_secp_pub_expand.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge.allocU8a(pubkey))));
    return bridge.resultU8a();
});
var blake2b = /* @__PURE__ */ withWasm(function(wasm, data, key, size) {
    var _wasm;
    (_wasm = wasm).ext_blake2b.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge.allocU8a(data)), _to_consumable_array(bridge.allocU8a(key)), [
        size
    ]));
    return bridge.resultU8a();
});
var keccak256 = /* @__PURE__ */ withWasm(function(wasm, data) {
    var _wasm;
    (_wasm = wasm).ext_keccak256.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge.allocU8a(data))));
    return bridge.resultU8a();
});
var keccak512 = /* @__PURE__ */ withWasm(function(wasm, data) {
    var _wasm;
    (_wasm = wasm).ext_keccak512.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge.allocU8a(data))));
    return bridge.resultU8a();
});
var twox = /* @__PURE__ */ withWasm(function(wasm, data, rounds) {
    var _wasm;
    (_wasm = wasm).ext_twox.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge.allocU8a(data)), [
        rounds
    ]));
    return bridge.resultU8a();
});
function isReady() {
    return !!bridge.wasm;
}
function waitReady() {
    return _waitReady.apply(this, arguments);
}
function _waitReady() {
    _waitReady = _async_to_generator(function() {
        var wasm, e;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        initBridge()
                    ];
                case 1:
                    wasm = _state.sent();
                    return [
                        2,
                        !!wasm
                    ];
                case 2:
                    e = _state.sent();
                    return [
                        2,
                        false
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _waitReady.apply(this, arguments);
}
// ../../node_modules/@polkadot/util-crypto/crypto.js
function cryptoWaitReady() {
    return waitReady().then(function() {
        if (!isReady()) {
            throw new Error("Unable to initialize @polkadot/util-crypto");
        }
        return true;
    }).catch(function() {
        return false;
    });
}
// ../../node_modules/@noble/hashes/esm/_assert.js
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error("Wrong positive integer: ".concat(n));
}
function bool(b) {
    if (typeof b !== "boolean") throw new Error("Expected boolean, not ".concat(b));
}
function bytes2(b) {
    for(var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        lengths[_key - 1] = arguments[_key];
    }
    if (!_instanceof(b, Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError("Expected Uint8Array of length ".concat(lengths, ", not of length=").concat(b.length));
}
function hash(hash3) {
    if (typeof hash3 !== "function" || typeof hash3.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash3.outputLen);
    number(hash3.blockLen);
}
function exists(instance2) {
    var checkFinished = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (instance2.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance2.finished) throw new Error("Hash#digest() has already been called");
}
function output(out, instance2) {
    bytes2(out);
    var min = instance2.outputLen;
    if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least ".concat(min));
    }
}
var assert2 = {
    number: number,
    bool: bool,
    bytes: bytes2,
    hash: hash,
    exists: exists,
    output: output
};
var assert_default = assert2;
// ../../node_modules/@noble/hashes/esm/utils.js
var u322 = function(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
};
var isLE = new Uint8Array(new Uint32Array([
    287454020
]).buffer)[0] === 68;
if (!isLE) throw new Error("Non little-endian hardware is not supported");
var hexes2 = Array.from({
    length: 256
}, function(v, i) {
    return i.toString(16).padStart(2, "0");
});
function utf8ToBytes(str) {
    if (typeof str !== "string") {
        throw new TypeError("utf8ToBytes expected string, got ".concat(typeof str === "undefined" ? "undefined" : _type_of(str)));
    }
    return new TextEncoder().encode(str);
}
function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!_instanceof(data, Uint8Array)) throw new TypeError("Expected input type is Uint8Array (got ".concat(typeof data === "undefined" ? "undefined" : _type_of(data), ")"));
    return data;
}
var Hash = /*#__PURE__*/ function() {
    function Hash() {
        _class_call_check(this, Hash);
    }
    _create_class(Hash, [
        {
            // Safe version that clones internal state
            key: "clone",
            value: function clone() {
                return this._cloneInto();
            }
        }
    ]);
    return Hash;
}();
function wrapConstructor(hashConstructor) {
    var hashC = function(message2) {
        return hashConstructor().update(toBytes(message2)).digest();
    };
    var tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = function() {
        return hashConstructor();
    };
    return hashC;
}
function wrapConstructorWithOpts(hashCons) {
    var hashC = function(msg, opts) {
        return hashCons(opts).update(toBytes(msg)).digest();
    };
    var tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = function(opts) {
        return hashCons(opts);
    };
    return hashC;
}
// ../../node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(Math.pow(2, 32) - 1);
var _32n = BigInt(32);
function fromBig(n) {
    var le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
function split(lst) {
    var le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var Ah = new Uint32Array(lst.length);
    var Al = new Uint32Array(lst.length);
    for(var i = 0; i < lst.length; i++){
        var _fromBig = fromBig(lst[i], le), h = _fromBig.h, l13 = _fromBig.l;
        var ref;
        ref = [
            h,
            l13
        ], Ah[i] = ref[0], Al[i] = ref[1], ref;
    }
    return [
        Ah,
        Al
    ];
}
var toBig = function(h, l13) {
    return BigInt(h >>> 0) << _32n | BigInt(l13 >>> 0);
};
var shrSH = function(h, l13, s) {
    return h >>> s;
};
var shrSL = function(h, l13, s) {
    return h << 32 - s | l13 >>> s;
};
var rotrSH = function(h, l13, s) {
    return h >>> s | l13 << 32 - s;
};
var rotrSL = function(h, l13, s) {
    return h << 32 - s | l13 >>> s;
};
var rotrBH = function(h, l13, s) {
    return h << 64 - s | l13 >>> s - 32;
};
var rotrBL = function(h, l13, s) {
    return h >>> s - 32 | l13 << 64 - s;
};
var rotr32H = function(h, l13) {
    return l13;
};
var rotr32L = function(h, l13) {
    return h;
};
var rotlSH = function(h, l13, s) {
    return h << s | l13 >>> 32 - s;
};
var rotlSL = function(h, l13, s) {
    return l13 << s | h >>> 32 - s;
};
var rotlBH = function(h, l13, s) {
    return l13 << s - 32 | h >>> 64 - s;
};
var rotlBL = function(h, l13, s) {
    return h << s - 32 | l13 >>> 64 - s;
};
function add(Ah, Al, Bh, Bl) {
    var l13 = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l13 / Math.pow(2, 32) | 0) | 0,
        l: l13 | 0
    };
}
var add3L = function(Al, Bl, Cl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
};
var add3H = function(low, Ah, Bh, Ch) {
    return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;
};
var add4L = function(Al, Bl, Cl, Dl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
};
var add4H = function(low, Ah, Bh, Ch, Dh) {
    return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;
};
var add5L = function(Al, Bl, Cl, Dl, El) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
};
var add5H = function(low, Ah, Bh, Ch, Dh, Eh) {
    return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;
};
var u64 = {
    fromBig: fromBig,
    split: split,
    toBig: toBig,
    shrSH: shrSH,
    shrSL: shrSL,
    rotrSH: rotrSH,
    rotrSL: rotrSL,
    rotrBH: rotrBH,
    rotrBL: rotrBL,
    rotr32H: rotr32H,
    rotr32L: rotr32L,
    rotlSH: rotlSH,
    rotlSL: rotlSL,
    rotlBH: rotlBH,
    rotlBL: rotlBL,
    add: add,
    add3L: add3L,
    add3H: add3H,
    add4L: add4L,
    add4H: add4H,
    add5H: add5H,
    add5L: add5L
};
var u64_default = u64;
// ../../node_modules/@scure/base/lib/esm/index.js
function assertNumber(n) {
    if (!Number.isSafeInteger(n)) throw new Error("Wrong integer: ".concat(n));
}
function chain() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    var wrap = function(a, b) {
        return function(c) {
            return a(b(c));
        };
    };
    var encode = Array.from(args).reverse().reduce(function(acc, i) {
        return acc ? wrap(acc, i.encode) : i.encode;
    }, void 0);
    var decode2 = args.reduce(function(acc, i) {
        return acc ? wrap(acc, i.decode) : i.decode;
    }, void 0);
    return {
        encode: encode,
        decode: decode2
    };
}
function alphabet(alphabet2) {
    return {
        encode: function(digits) {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("alphabet.encode input should be an array of numbers");
            return digits.map(function(i) {
                assertNumber(i);
                if (i < 0 || i >= alphabet2.length) throw new Error("Digit index outside alphabet: ".concat(i, " (alphabet: ").concat(alphabet2.length, ")"));
                return alphabet2[i];
            });
        },
        decode: function(input) {
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("alphabet.decode input should be array of strings");
            return input.map(function(letter) {
                if (typeof letter !== "string") throw new Error("alphabet.decode: not string element=".concat(letter));
                var index = alphabet2.indexOf(letter);
                if (index === -1) throw new Error('Unknown letter: "'.concat(letter, '". Allowed: ').concat(alphabet2));
                return index;
            });
        }
    };
}
function join() {
    var separator = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (typeof separator !== "string") throw new Error("join separator should be string");
    return {
        encode: function(from3) {
            if (!Array.isArray(from3) || from3.length && typeof from3[0] !== "string") throw new Error("join.encode input should be array of strings");
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = from3[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var i = _step.value;
                    if (typeof i !== "string") throw new Error("join.encode: non-string input=".concat(i));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return from3.join(separator);
        },
        decode: function(to) {
            if (typeof to !== "string") throw new Error("join.decode input should be string");
            return to.split(separator);
        }
    };
}
function padding(bits3) {
    var chr3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "=";
    assertNumber(bits3);
    if (typeof chr3 !== "string") throw new Error("padding chr should be string");
    return {
        encode: function encode(data) {
            if (!Array.isArray(data) || data.length && typeof data[0] !== "string") throw new Error("padding.encode input should be array of strings");
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var i = _step.value;
                    if (typeof i !== "string") throw new Error("padding.encode: non-string input=".concat(i));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            while(data.length * bits3 % 8)data.push(chr3);
            return data;
        },
        decode: function decode(input) {
            if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("padding.encode input should be array of strings");
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var i = _step.value;
                    if (typeof i !== "string") throw new Error("padding.decode: non-string input=".concat(i));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            var end = input.length;
            if (end * bits3 % 8) throw new Error("Invalid padding: string should have whole number of bytes");
            for(; end > 0 && input[end - 1] === chr3; end--){
                if (!((end - 1) * bits3 % 8)) throw new Error("Invalid padding: string has too much padding");
            }
            return input.slice(0, end);
        }
    };
}
function normalize(fn) {
    if (typeof fn !== "function") throw new Error("normalize fn should be function");
    return {
        encode: function(from3) {
            return from3;
        },
        decode: function(to) {
            return fn(to);
        }
    };
}
function convertRadix(data, from3, to) {
    if (from3 < 2) throw new Error("convertRadix: wrong from=".concat(from3, ", base cannot be less than 2"));
    if (to < 2) throw new Error("convertRadix: wrong to=".concat(to, ", base cannot be less than 2"));
    if (!Array.isArray(data)) throw new Error("convertRadix: data should be array");
    if (!data.length) return [];
    var pos = 0;
    var res = [];
    var digits = Array.from(data);
    digits.forEach(function(d) {
        assertNumber(d);
        if (d < 0 || d >= from3) throw new Error("Wrong integer: ".concat(d));
    });
    while(true){
        var carry = 0;
        var done = true;
        for(var i = pos; i < digits.length; i++){
            var digit = digits[i];
            var digitBase = from3 * carry + digit;
            if (!Number.isSafeInteger(digitBase) || from3 * carry / from3 !== carry || digitBase - digit !== from3 * carry) {
                throw new Error("convertRadix: carry overflow");
            }
            carry = digitBase % to;
            digits[i] = Math.floor(digitBase / to);
            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase) throw new Error("convertRadix: carry overflow");
            if (!done) continue;
            else if (!digits[i]) pos = i;
            else done = false;
        }
        res.push(carry);
        if (done) break;
    }
    for(var i1 = 0; i1 < data.length - 1 && data[i1] === 0; i1++)res.push(0);
    return res.reverse();
}
var gcd = function(a, b) {
    return !b ? a : gcd(b, a % b);
};
var radix2carry = function(from3, to) {
    return from3 + (to - gcd(from3, to));
};
function convertRadix2(data, from3, to, padding2) {
    if (!Array.isArray(data)) throw new Error("convertRadix2: data should be array");
    if (from3 <= 0 || from3 > 32) throw new Error("convertRadix2: wrong from=".concat(from3));
    if (to <= 0 || to > 32) throw new Error("convertRadix2: wrong to=".concat(to));
    if (radix2carry(from3, to) > 32) {
        throw new Error("convertRadix2: carry overflow from=".concat(from3, " to=").concat(to, " carryBits=").concat(radix2carry(from3, to)));
    }
    var carry = 0;
    var pos = 0;
    var mask = Math.pow(2, to) - 1;
    var res = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var n = _step.value;
            assertNumber(n);
            if (n >= Math.pow(2, from3)) throw new Error("convertRadix2: invalid data word=".concat(n, " from=").concat(from3));
            carry = carry << from3 | n;
            if (pos + from3 > 32) throw new Error("convertRadix2: carry overflow pos=".concat(pos, " from=").concat(from3));
            pos += from3;
            for(; pos >= to; pos -= to)res.push((carry >> pos - to & mask) >>> 0);
            carry &= Math.pow(2, pos) - 1;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    carry = carry << to - pos & mask;
    if (!padding2 && pos >= from3) throw new Error("Excess padding");
    if (!padding2 && carry) throw new Error("Non-zero padding: ".concat(carry));
    if (padding2 && pos > 0) res.push(carry >>> 0);
    return res;
}
function radix(num) {
    assertNumber(num);
    return {
        encode: function(bytes5) {
            if (!_instanceof(bytes5, Uint8Array)) throw new Error("radix.encode input should be Uint8Array");
            return convertRadix(Array.from(bytes5), Math.pow(2, 8), num);
        },
        decode: function(digits) {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix.decode input should be array of strings");
            return Uint8Array.from(convertRadix(digits, num, Math.pow(2, 8)));
        }
    };
}
function radix2(bits3) {
    var revPadding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    assertNumber(bits3);
    if (bits3 <= 0 || bits3 > 32) throw new Error("radix2: bits should be in (0..32]");
    if (radix2carry(8, bits3) > 32 || radix2carry(bits3, 8) > 32) throw new Error("radix2: carry overflow");
    return {
        encode: function(bytes5) {
            if (!_instanceof(bytes5, Uint8Array)) throw new Error("radix2.encode input should be Uint8Array");
            return convertRadix2(Array.from(bytes5), 8, bits3, !revPadding);
        },
        decode: function(digits) {
            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix2.decode input should be array of strings");
            return Uint8Array.from(convertRadix2(digits, bits3, 8, revPadding));
        }
    };
}
function unsafeWrapper(fn) {
    if (typeof fn !== "function") throw new Error("unsafeWrapper fn should be function");
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        try {
            return fn.apply(null, args);
        } catch (e) {}
    };
}
var base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
var base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
var base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
var base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize(function(s) {
    return s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1");
}));
var base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
var base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
var genBase58 = function(abc) {
    return chain(radix(58), alphabet(abc), join(""));
};
var base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
var base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
var base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
var XMR_BLOCK_LEN = [
    0,
    2,
    3,
    5,
    6,
    7,
    9,
    10,
    11
];
var base58xmr = {
    encode: function encode(data) {
        var res = "";
        for(var i = 0; i < data.length; i += 8){
            var block = data.subarray(i, i + 8);
            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
        }
        return res;
    },
    decode: function decode(str) {
        var res = [];
        for(var i = 0; i < str.length; i += 11){
            var slice = str.slice(i, i + 11);
            var blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            var block = base58.decode(slice);
            for(var j = 0; j < block.length - blockLen; j++){
                if (block[j] !== 0) throw new Error("base58xmr: wrong padding");
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
    }
};
var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
var POLYMOD_GENERATORS = [
    996825010,
    642813549,
    513874426,
    1027748829,
    705979059
];
function bech32Polymod(pre) {
    var b = pre >> 25;
    var chk = (pre & 33554431) << 5;
    for(var i = 0; i < POLYMOD_GENERATORS.length; i++){
        if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
}
function bechChecksum(prefix2, words) {
    var encodingConst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var len = prefix2.length;
    var chk = 1;
    for(var i = 0; i < len; i++){
        var c = prefix2.charCodeAt(i);
        if (c < 33 || c > 126) throw new Error("Invalid prefix (".concat(prefix2, ")"));
        chk = bech32Polymod(chk) ^ c >> 5;
    }
    chk = bech32Polymod(chk);
    for(var i1 = 0; i1 < len; i1++)chk = bech32Polymod(chk) ^ prefix2.charCodeAt(i1) & 31;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = words[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var v = _step.value;
            chk = bech32Polymod(chk) ^ v;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    for(var i2 = 0; i2 < 6; i2++)chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([
        chk % Math.pow(2, 30)
    ], 30, 5, false));
}
function genBech32(encoding) {
    var encode = function encode(prefix2, words) {
        var limit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 90;
        if (typeof prefix2 !== "string") throw new Error("bech32.encode prefix should be string, not ".concat(typeof prefix2 === "undefined" ? "undefined" : _type_of(prefix2)));
        if (!Array.isArray(words) || words.length && typeof words[0] !== "number") throw new Error("bech32.encode words should be array of numbers, not ".concat(typeof words === "undefined" ? "undefined" : _type_of(words)));
        var actualLength = prefix2.length + 7 + words.length;
        if (limit !== false && actualLength > limit) throw new TypeError("Length ".concat(actualLength, " exceeds limit ").concat(limit));
        prefix2 = prefix2.toLowerCase();
        return "".concat(prefix2, "1").concat(BECH_ALPHABET.encode(words)).concat(bechChecksum(prefix2, words, ENCODING_CONST));
    };
    var decode2 = function decode2(str) {
        var limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 90;
        if (typeof str !== "string") throw new Error("bech32.decode input should be string, not ".concat(typeof str === "undefined" ? "undefined" : _type_of(str)));
        if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError("Wrong string length: ".concat(str.length, " (").concat(str, "). Expected (8..").concat(limit, ")"));
        var lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase()) throw new Error("String must be lowercase or uppercase");
        str = lowered;
        var sepIndex = str.lastIndexOf("1");
        if (sepIndex === 0 || sepIndex === -1) throw new Error('Letter "1" must be present between prefix and data only');
        var prefix2 = str.slice(0, sepIndex);
        var _words2 = str.slice(sepIndex + 1);
        if (_words2.length < 6) throw new Error("Data must be at least 6 characters long");
        var words = BECH_ALPHABET.decode(_words2).slice(0, -6);
        var sum = bechChecksum(prefix2, words, ENCODING_CONST);
        if (!_words2.endsWith(sum)) throw new Error("Invalid checksum in ".concat(str, ': expected "').concat(sum, '"'));
        return {
            prefix: prefix2,
            words: words
        };
    };
    var decodeToBytes = function decodeToBytes(str) {
        var _decode2 = decode2(str, false), prefix2 = _decode2.prefix, words = _decode2.words;
        return {
            prefix: prefix2,
            words: words,
            bytes: fromWords(words)
        };
    };
    var ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
    var _words = radix2(5);
    var fromWords = _words.decode;
    var toWords = _words.encode;
    var fromWordsUnsafe = unsafeWrapper(fromWords);
    var decodeUnsafe = unsafeWrapper(decode2);
    return {
        encode: encode,
        decode: decode2,
        decodeToBytes: decodeToBytes,
        decodeUnsafe: decodeUnsafe,
        fromWords: fromWords,
        fromWordsUnsafe: fromWordsUnsafe,
        toWords: toWords
    };
}
var bech32 = genBech32("bech32");
var bech32m = genBech32("bech32m");
var utf8 = {
    encode: function(data) {
        return new TextDecoder().decode(data);
    },
    decode: function(str) {
        return new TextEncoder().encode(str);
    }
};
var hex2 = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize(function(s) {
    if (typeof s !== "string" || s.length % 2) throw new TypeError("hex.decode: expected string, got ".concat(typeof s === "undefined" ? "undefined" : _type_of(s), " with length ").concat(s.length));
    return s.toLowerCase();
}));
var CODERS = {
    utf8: utf8,
    hex: hex2,
    base16: base16,
    base32: base32,
    base64: base64,
    base64url: base64url,
    base58: base58,
    base58xmr: base58xmr
};
var coderTypeError = "Invalid encoding type. Available types: ".concat(Object.keys(CODERS).join(", "));
// ../../node_modules/@polkadot/util-crypto/base32/helpers.js
function createDecode(param, validate) {
    var coder = param.coder, ipfs = param.ipfs;
    return function(value1, ipfsCompat) {
        validate(value1, ipfsCompat);
        return coder.decode(ipfs && ipfsCompat ? value1.substring(1) : value1);
    };
}
function createEncode(param) {
    var coder = param.coder, ipfs = param.ipfs;
    return function(value1, ipfsCompat) {
        var out = coder.encode(u8aToU8a(value1));
        return ipfs && ipfsCompat ? "".concat(ipfs).concat(out) : out;
    };
}
function createValidate(param) {
    var chars2 = param.chars, ipfs = param.ipfs, type = param.type;
    return function(value1, ipfsCompat) {
        if (!value1 || typeof value1 !== "string") {
            throw new Error("Expected non-null, non-empty ".concat(type, " string input"));
        }
        if (ipfs && ipfsCompat && value1[0] !== ipfs) {
            throw new Error("Expected ipfs-compatible ".concat(type, " to start with '").concat(ipfs, "'"));
        }
        for(var i = ipfsCompat ? 1 : 0; i < value1.length; i++){
            if (!(chars2.includes(value1[i]) || value1[i] === "=" && (i === value1.length - 1 || !chars2.includes(value1[i + 1])))) {
                throw new Error("Invalid ".concat(type, ' character "').concat(value1[i], '" (0x').concat(value1.charCodeAt(i).toString(16), ") at index ").concat(i));
            }
        }
        return true;
    };
}
// ../../node_modules/@polkadot/util-crypto/base58/bs58.js
var config = {
    chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    coder: base58,
    ipfs: "z",
    type: "base58"
};
var base58Validate = /* @__PURE__ */ createValidate(config);
var base58Decode = /* @__PURE__ */ createDecode(config, base58Validate);
var base58Encode = /* @__PURE__ */ createEncode(config);
// ../../node_modules/@noble/hashes/esm/_blake2.js
var SIGMA = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
]);
var BLAKE2 = /*#__PURE__*/ function(Hash) {
    _inherits(BLAKE2, Hash);
    var _super = _create_super(BLAKE2);
    function BLAKE2(blockLen, outputLen) {
        var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, keyLen = arguments.length > 3 ? arguments[3] : void 0, saltLen = arguments.length > 4 ? arguments[4] : void 0, persLen = arguments.length > 5 ? arguments[5] : void 0;
        _class_call_check(this, BLAKE2);
        var _this;
        _this = _super.call(this);
        _this.blockLen = blockLen;
        _this.outputLen = outputLen;
        _this.length = 0;
        _this.pos = 0;
        _this.finished = false;
        _this.destroyed = false;
        assert_default.number(blockLen);
        assert_default.number(outputLen);
        assert_default.number(keyLen);
        if (outputLen < 0 || outputLen > keyLen) throw new Error("Blake2: outputLen bigger than keyLen");
        if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error("Key should be up 1..".concat(keyLen, " byte long or undefined"));
        if (opts.salt !== void 0 && opts.salt.length !== saltLen) throw new Error("Salt should be ".concat(saltLen, " byte long or undefined"));
        if (opts.personalization !== void 0 && opts.personalization.length !== persLen) throw new Error("Personalization should be ".concat(persLen, " byte long or undefined"));
        _this.buffer32 = u322(_this.buffer = new Uint8Array(blockLen));
        return _this;
    }
    _create_class(BLAKE2, [
        {
            key: "update",
            value: function update(data) {
                assert_default.exists(this);
                var _this = this, blockLen = _this.blockLen, buffer = _this.buffer, buffer32 = _this.buffer32;
                data = toBytes(data);
                var len = data.length;
                for(var pos = 0; pos < len;){
                    if (this.pos === blockLen) {
                        this.compress(buffer32, 0, false);
                        this.pos = 0;
                    }
                    var take = Math.min(blockLen - this.pos, len - pos);
                    var dataOffset = data.byteOffset + pos;
                    if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                        var data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                        for(var pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen){
                            this.length += blockLen;
                            this.compress(data32, pos32, false);
                        }
                        continue;
                    }
                    buffer.set(data.subarray(pos, pos + take), this.pos);
                    this.pos += take;
                    this.length += take;
                    pos += take;
                }
                return this;
            }
        },
        {
            key: "digestInto",
            value: function digestInto(out) {
                assert_default.exists(this);
                assert_default.output(out, this);
                var _this = this, pos = _this.pos, buffer32 = _this.buffer32;
                this.finished = true;
                this.buffer.subarray(pos).fill(0);
                this.compress(buffer32, 0, true);
                var out32 = u322(out);
                this.get().forEach(function(v, i) {
                    return out32[i] = v;
                });
            }
        },
        {
            key: "digest",
            value: function digest() {
                var _this = this, buffer = _this.buffer, outputLen = _this.outputLen;
                this.digestInto(buffer);
                var res = buffer.slice(0, outputLen);
                this.destroy();
                return res;
            }
        },
        {
            key: "_cloneInto",
            value: function _cloneInto(to) {
                var _to;
                var _this = this, buffer = _this.buffer, length = _this.length, finished = _this.finished, destroyed = _this.destroyed, outputLen = _this.outputLen, pos = _this.pos;
                to || (to = new this.constructor({
                    dkLen: outputLen
                }));
                (_to = to).set.apply(_to, _to_consumable_array(this.get()));
                to.length = length;
                to.finished = finished;
                to.destroyed = destroyed;
                to.outputLen = outputLen;
                to.buffer.set(buffer);
                to.pos = pos;
                return to;
            }
        }
    ]);
    return BLAKE2;
}(Hash);
// ../../node_modules/@noble/hashes/esm/blake2b.js
var IV = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
]);
var BUF = new Uint32Array(32);
function G1(a, b, c, d, msg, x) {
    var Xl = msg[x], Xh = msg[x + 1];
    var Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    var Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    var Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
    var Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    var ll = u64_default.add3L(Al, Bl, Xl);
    Ah = u64_default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    var ref;
    ref = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    }, Dh = ref.Dh, Dl = ref.Dl, ref;
    var ref1;
    ref1 = {
        Dh: u64_default.rotr32H(Dh, Dl),
        Dl: u64_default.rotr32L(Dh, Dl)
    }, Dh = ref1.Dh, Dl = ref1.Dl, ref1;
    var ref2;
    ref2 = u64_default.add(Ch, Cl, Dh, Dl), Ch = ref2.h, Cl = ref2.l, ref2;
    var ref3;
    ref3 = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    }, Bh = ref3.Bh, Bl = ref3.Bl, ref3;
    var ref4;
    ref4 = {
        Bh: u64_default.rotrSH(Bh, Bl, 24),
        Bl: u64_default.rotrSL(Bh, Bl, 24)
    }, Bh = ref4.Bh, Bl = ref4.Bl, ref4;
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
function G2(a, b, c, d, msg, x) {
    var Xl = msg[x], Xh = msg[x + 1];
    var Al = BUF[2 * a], Ah = BUF[2 * a + 1];
    var Bl = BUF[2 * b], Bh = BUF[2 * b + 1];
    var Cl = BUF[2 * c], Ch = BUF[2 * c + 1];
    var Dl = BUF[2 * d], Dh = BUF[2 * d + 1];
    var ll = u64_default.add3L(Al, Bl, Xl);
    Ah = u64_default.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    var ref;
    ref = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    }, Dh = ref.Dh, Dl = ref.Dl, ref;
    var ref1;
    ref1 = {
        Dh: u64_default.rotrSH(Dh, Dl, 16),
        Dl: u64_default.rotrSL(Dh, Dl, 16)
    }, Dh = ref1.Dh, Dl = ref1.Dl, ref1;
    var ref2;
    ref2 = u64_default.add(Ch, Cl, Dh, Dl), Ch = ref2.h, Cl = ref2.l, ref2;
    var ref3;
    ref3 = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    }, Bh = ref3.Bh, Bl = ref3.Bl, ref3;
    var ref4;
    ref4 = {
        Bh: u64_default.rotrBH(Bh, Bl, 63),
        Bl: u64_default.rotrBL(Bh, Bl, 63)
    }, Bh = ref4.Bh, Bl = ref4.Bl, ref4;
    BUF[2 * a] = Al, BUF[2 * a + 1] = Ah;
    BUF[2 * b] = Bl, BUF[2 * b + 1] = Bh;
    BUF[2 * c] = Cl, BUF[2 * c + 1] = Ch;
    BUF[2 * d] = Dl, BUF[2 * d + 1] = Dh;
}
var BLAKE2b = /*#__PURE__*/ function(BLAKE2) {
    _inherits(BLAKE2b, BLAKE2);
    var _super = _create_super(BLAKE2b);
    function BLAKE2b() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _class_call_check(this, BLAKE2b);
        var _this;
        _this = _super.call(this, 128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
        _this.v0l = IV[0] | 0;
        _this.v0h = IV[1] | 0;
        _this.v1l = IV[2] | 0;
        _this.v1h = IV[3] | 0;
        _this.v2l = IV[4] | 0;
        _this.v2h = IV[5] | 0;
        _this.v3l = IV[6] | 0;
        _this.v3h = IV[7] | 0;
        _this.v4l = IV[8] | 0;
        _this.v4h = IV[9] | 0;
        _this.v5l = IV[10] | 0;
        _this.v5h = IV[11] | 0;
        _this.v6l = IV[12] | 0;
        _this.v6h = IV[13] | 0;
        _this.v7l = IV[14] | 0;
        _this.v7h = IV[15] | 0;
        var keyLength = opts.key ? opts.key.length : 0;
        _this.v0l ^= _this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
        if (opts.salt) {
            var salt = u322(toBytes(opts.salt));
            _this.v4l ^= salt[0];
            _this.v4h ^= salt[1];
            _this.v5l ^= salt[2];
            _this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            var pers = u322(toBytes(opts.personalization));
            _this.v6l ^= pers[0];
            _this.v6h ^= pers[1];
            _this.v7l ^= pers[2];
            _this.v7h ^= pers[3];
        }
        if (opts.key) {
            var tmp = new Uint8Array(_this.blockLen);
            tmp.set(toBytes(opts.key));
            _this.update(tmp);
        }
        return _this;
    }
    _create_class(BLAKE2b, [
        {
            // prettier-ignore
            key: "get",
            value: function get() {
                var _this = this, v0l = _this.v0l, v0h = _this.v0h, v1l = _this.v1l, v1h = _this.v1h, v2l = _this.v2l, v2h = _this.v2h, v3l = _this.v3l, v3h = _this.v3h, v4l = _this.v4l, v4h = _this.v4h, v5l = _this.v5l, v5h = _this.v5h, v6l = _this.v6l, v6h = _this.v6h, v7l = _this.v7l, v7h = _this.v7h;
                return [
                    v0l,
                    v0h,
                    v1l,
                    v1h,
                    v2l,
                    v2h,
                    v3l,
                    v3h,
                    v4l,
                    v4h,
                    v5l,
                    v5h,
                    v6l,
                    v6h,
                    v7l,
                    v7h
                ];
            }
        },
        {
            // prettier-ignore
            key: "set",
            value: function set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
                this.v0l = v0l | 0;
                this.v0h = v0h | 0;
                this.v1l = v1l | 0;
                this.v1h = v1h | 0;
                this.v2l = v2l | 0;
                this.v2h = v2h | 0;
                this.v3l = v3l | 0;
                this.v3h = v3h | 0;
                this.v4l = v4l | 0;
                this.v4h = v4h | 0;
                this.v5l = v5l | 0;
                this.v5h = v5h | 0;
                this.v6l = v6l | 0;
                this.v6h = v6h | 0;
                this.v7l = v7l | 0;
                this.v7h = v7h | 0;
            }
        },
        {
            key: "compress",
            value: function compress(msg, offset, isLast) {
                this.get().forEach(function(v, i) {
                    return BUF[i] = v;
                });
                BUF.set(IV, 16);
                var _u64_default_fromBig = u64_default.fromBig(BigInt(this.length)), h = _u64_default_fromBig.h, l13 = _u64_default_fromBig.l;
                BUF[24] = IV[8] ^ l13;
                BUF[25] = IV[9] ^ h;
                if (isLast) {
                    BUF[28] = ~BUF[28];
                    BUF[29] = ~BUF[29];
                }
                var j = 0;
                var s = SIGMA;
                for(var i = 0; i < 12; i++){
                    G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                    G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                    G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                    G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                    G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                    G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                    G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                    G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                    G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                    G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                    G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                    G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                    G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                    G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                    G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
                    G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
                }
                this.v0l ^= BUF[0] ^ BUF[16];
                this.v0h ^= BUF[1] ^ BUF[17];
                this.v1l ^= BUF[2] ^ BUF[18];
                this.v1h ^= BUF[3] ^ BUF[19];
                this.v2l ^= BUF[4] ^ BUF[20];
                this.v2h ^= BUF[5] ^ BUF[21];
                this.v3l ^= BUF[6] ^ BUF[22];
                this.v3h ^= BUF[7] ^ BUF[23];
                this.v4l ^= BUF[8] ^ BUF[24];
                this.v4h ^= BUF[9] ^ BUF[25];
                this.v5l ^= BUF[10] ^ BUF[26];
                this.v5h ^= BUF[11] ^ BUF[27];
                this.v6l ^= BUF[12] ^ BUF[28];
                this.v6h ^= BUF[13] ^ BUF[29];
                this.v7l ^= BUF[14] ^ BUF[30];
                this.v7h ^= BUF[15] ^ BUF[31];
                BUF.fill(0);
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                this.destroyed = true;
                this.buffer32.fill(0);
                this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
    ]);
    return BLAKE2b;
}(BLAKE2);
var blake2b2 = wrapConstructorWithOpts(function(opts) {
    return new BLAKE2b(opts);
});
// ../../node_modules/@polkadot/util-crypto/helpers.js
function createAsHex(fn) {
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return u8aToHex(fn.apply(void 0, _to_consumable_array(args)));
    };
}
function createDualHasher(wa, js) {
    return function(value1) {
        var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 256, onlyJs = arguments.length > 2 ? arguments[2] : void 0;
        var u8a = u8aToU8a(value1);
        return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
    };
}
// ../../node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a(data) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 256, key = arguments.length > 2 ? arguments[2] : void 0, onlyJs = arguments.length > 3 ? arguments[3] : void 0;
    var byteLength = Math.ceil(bitLength / 8);
    var u8a = u8aToU8a(data);
    return !hasBigInt || !onlyJs && isReady() ? blake2b(u8a, u8aToU8a(key), byteLength) : blake2b2(u8a, {
        dkLen: byteLength,
        key: key || void 0
    });
}
var blake2AsHex = createAsHex(blake2AsU8a);
// ../../node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX = stringToU8a("SS58PRE");
function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
}
// ../../node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum(decoded) {
    var ss58Length = decoded[0] & 64 ? 2 : 1;
    var ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
    var isPublicKey = [
        34 + ss58Length,
        35 + ss58Length
    ].includes(decoded.length);
    var length = decoded.length - (isPublicKey ? 2 : 1);
    var hash3 = sshash(decoded.subarray(0, length));
    var isValid = (decoded[0] & 128) === 0 && ![
        46,
        47
    ].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash3[0] && decoded[decoded.length - 1] === hash3[1] : decoded[decoded.length - 1] === hash3[0]);
    return [
        isValid,
        length,
        ss58Length,
        ss58Decoded
    ];
}
// ../../node_modules/@substrate/ss58-registry/esm/index.js
var esm_default = [
    {
        "prefix": 0,
        "network": "polkadot",
        "displayName": "Polkadot Relay Chain",
        "symbols": [
            "DOT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://polkadot.network"
    },
    {
        "prefix": 1,
        "network": "BareSr25519",
        "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Sr25519",
        "website": null
    },
    {
        "prefix": 2,
        "network": "kusama",
        "displayName": "Kusama Relay Chain",
        "symbols": [
            "KSM"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kusama.network"
    },
    {
        "prefix": 3,
        "network": "BareEd25519",
        "displayName": "Bare 32-bit Ed25519 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "Ed25519",
        "website": null
    },
    {
        "prefix": 4,
        "network": "katalchain",
        "displayName": "Katal Chain",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 5,
        "network": "astar",
        "displayName": "Astar Network",
        "symbols": [
            "ASTR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://astar.network"
    },
    {
        "prefix": 6,
        "network": "bifrost",
        "displayName": "Bifrost",
        "symbols": [
            "BNC"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://bifrost.finance/"
    },
    {
        "prefix": 7,
        "network": "edgeware",
        "displayName": "Edgeware",
        "symbols": [
            "EDG"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://edgewa.re"
    },
    {
        "prefix": 8,
        "network": "karura",
        "displayName": "Karura",
        "symbols": [
            "KAR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://karura.network/"
    },
    {
        "prefix": 9,
        "network": "reynolds",
        "displayName": "Laminar Reynolds Canary",
        "symbols": [
            "REY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
    },
    {
        "prefix": 10,
        "network": "acala",
        "displayName": "Acala",
        "symbols": [
            "ACA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://acala.network/"
    },
    {
        "prefix": 11,
        "network": "laminar",
        "displayName": "Laminar",
        "symbols": [
            "LAMI"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "http://laminar.network/"
    },
    {
        "prefix": 12,
        "network": "polymesh",
        "displayName": "Polymesh",
        "symbols": [
            "POLYX"
        ],
        "decimals": [
            6
        ],
        "standardAccount": "*25519",
        "website": "https://polymath.network/"
    },
    {
        "prefix": 13,
        "network": "integritee",
        "displayName": "Integritee",
        "symbols": [
            "TEER"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
    },
    {
        "prefix": 14,
        "network": "totem",
        "displayName": "Totem",
        "symbols": [
            "TOTEM"
        ],
        "decimals": [
            0
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
    },
    {
        "prefix": 15,
        "network": "synesthesia",
        "displayName": "Synesthesia",
        "symbols": [
            "SYN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://synesthesia.network/"
    },
    {
        "prefix": 16,
        "network": "kulupu",
        "displayName": "Kulupu",
        "symbols": [
            "KLP"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kulupu.network/"
    },
    {
        "prefix": 17,
        "network": "dark",
        "displayName": "Dark Mainnet",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 18,
        "network": "darwinia",
        "displayName": "Darwinia Network",
        "symbols": [
            "RING",
            "KTON"
        ],
        "decimals": [
            9,
            9
        ],
        "standardAccount": "*25519",
        "website": "https://darwinia.network/"
    },
    {
        "prefix": 19,
        "network": "watr",
        "displayName": "Watr Protocol",
        "symbols": [
            "WATR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.watr.org"
    },
    {
        "prefix": 20,
        "network": "stafi",
        "displayName": "Stafi",
        "symbols": [
            "FIS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://stafi.io"
    },
    {
        "prefix": 22,
        "network": "dock-pos-mainnet",
        "displayName": "Dock Mainnet",
        "symbols": [
            "DCK"
        ],
        "decimals": [
            6
        ],
        "standardAccount": "*25519",
        "website": "https://dock.io"
    },
    {
        "prefix": 23,
        "network": "shift",
        "displayName": "ShiftNrg",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 24,
        "network": "zero",
        "displayName": "ZERO",
        "symbols": [
            "ZERO"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
    },
    {
        "prefix": 25,
        "network": "zero-alphaville",
        "displayName": "ZERO Alphaville",
        "symbols": [
            "ZERO"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://zero.io"
    },
    {
        "prefix": 26,
        "network": "jupiter",
        "displayName": "Jupiter",
        "symbols": [
            "jDOT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://jupiter.patract.io"
    },
    {
        "prefix": 27,
        "network": "kabocha",
        "displayName": "Kabocha",
        "symbols": [
            "KAB"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://kabocha.network"
    },
    {
        "prefix": 28,
        "network": "subsocial",
        "displayName": "Subsocial",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 29,
        "network": "cord",
        "displayName": "CORD Network",
        "symbols": [
            "DHI",
            "WAY"
        ],
        "decimals": [
            12,
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cord.network/"
    },
    {
        "prefix": 30,
        "network": "phala",
        "displayName": "Phala Network",
        "symbols": [
            "PHA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://phala.network"
    },
    {
        "prefix": 31,
        "network": "litentry",
        "displayName": "Litentry Network",
        "symbols": [
            "LIT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
    },
    {
        "prefix": 32,
        "network": "robonomics",
        "displayName": "Robonomics",
        "symbols": [
            "XRT"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://robonomics.network"
    },
    {
        "prefix": 33,
        "network": "datahighway",
        "displayName": "DataHighway",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": null
    },
    {
        "prefix": 34,
        "network": "ares",
        "displayName": "Ares Protocol",
        "symbols": [
            "ARES"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://www.aresprotocol.com/"
    },
    {
        "prefix": 35,
        "network": "vln",
        "displayName": "Valiu Liquidity Network",
        "symbols": [
            "USDv"
        ],
        "decimals": [
            15
        ],
        "standardAccount": "*25519",
        "website": "https://valiu.com/"
    },
    {
        "prefix": 36,
        "network": "centrifuge",
        "displayName": "Centrifuge Chain",
        "symbols": [
            "CFG"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
    },
    {
        "prefix": 37,
        "network": "nodle",
        "displayName": "Nodle Chain",
        "symbols": [
            "NODL"
        ],
        "decimals": [
            11
        ],
        "standardAccount": "*25519",
        "website": "https://nodle.io/"
    },
    {
        "prefix": 38,
        "network": "kilt",
        "displayName": "KILT Spiritnet",
        "symbols": [
            "KILT"
        ],
        "decimals": [
            15
        ],
        "standardAccount": "*25519",
        "website": "https://kilt.io/"
    },
    {
        "prefix": 39,
        "network": "mathchain",
        "displayName": "MathChain mainnet",
        "symbols": [
            "MATH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
    },
    {
        "prefix": 40,
        "network": "mathchain-testnet",
        "displayName": "MathChain testnet",
        "symbols": [
            "MATH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://mathwallet.org"
    },
    {
        "prefix": 41,
        "network": "poli",
        "displayName": "Polimec Chain",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://polimec.io/"
    },
    {
        "prefix": 42,
        "network": "substrate",
        "displayName": "Substrate",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://substrate.io/"
    },
    {
        "prefix": 43,
        "network": "BareSecp256k1",
        "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
        "symbols": [],
        "decimals": [],
        "standardAccount": "secp256k1",
        "website": null
    },
    {
        "prefix": 44,
        "network": "chainx",
        "displayName": "ChainX",
        "symbols": [
            "PCX"
        ],
        "decimals": [
            8
        ],
        "standardAccount": "*25519",
        "website": "https://chainx.org/"
    },
    {
        "prefix": 45,
        "network": "uniarts",
        "displayName": "UniArts Network",
        "symbols": [
            "UART",
            "UINK"
        ],
        "decimals": [
            12,
            12
        ],
        "standardAccount": "*25519",
        "website": "https://uniarts.me"
    },
    {
        "prefix": 46,
        "network": "reserved46",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
    },
    {
        "prefix": 47,
        "network": "reserved47",
        "displayName": "This prefix is reserved.",
        "symbols": [],
        "decimals": [],
        "standardAccount": null,
        "website": null
    },
    {
        "prefix": 48,
        "network": "neatcoin",
        "displayName": "Neatcoin Mainnet",
        "symbols": [
            "NEAT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://neatcoin.org"
    },
    {
        "prefix": 49,
        "network": "picasso",
        "displayName": "Picasso",
        "symbols": [
            "PICA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://picasso.composable.finance"
    },
    {
        "prefix": 50,
        "network": "composable",
        "displayName": "Composable",
        "symbols": [
            "LAYR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://composable.finance"
    },
    {
        "prefix": 51,
        "network": "oak",
        "displayName": "OAK Network",
        "symbols": [
            "OAK",
            "TUR"
        ],
        "decimals": [
            10,
            10
        ],
        "standardAccount": "*25519",
        "website": "https://oak.tech"
    },
    {
        "prefix": 52,
        "network": "KICO",
        "displayName": "KICO",
        "symbols": [
            "KICO"
        ],
        "decimals": [
            14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
    },
    {
        "prefix": 53,
        "network": "DICO",
        "displayName": "DICO",
        "symbols": [
            "DICO"
        ],
        "decimals": [
            14
        ],
        "standardAccount": "*25519",
        "website": "https://dico.io"
    },
    {
        "prefix": 54,
        "network": "cere",
        "displayName": "Cere Network",
        "symbols": [
            "CERE"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://cere.network"
    },
    {
        "prefix": 55,
        "network": "xxnetwork",
        "displayName": "xx network",
        "symbols": [
            "XX"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://xx.network"
    },
    {
        "prefix": 56,
        "network": "pendulum",
        "displayName": "Pendulum chain",
        "symbols": [
            "PEN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
    },
    {
        "prefix": 57,
        "network": "amplitude",
        "displayName": "Amplitude chain",
        "symbols": [
            "AMPE"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://pendulumchain.org/"
    },
    {
        "prefix": 63,
        "network": "hydradx",
        "displayName": "HydraDX",
        "symbols": [
            "HDX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://hydradx.io"
    },
    {
        "prefix": 65,
        "network": "aventus",
        "displayName": "AvN Mainnet",
        "symbols": [
            "AVT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://aventus.io"
    },
    {
        "prefix": 66,
        "network": "crust",
        "displayName": "Crust Network",
        "symbols": [
            "CRU"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://crust.network"
    },
    {
        "prefix": 67,
        "network": "genshiro",
        "displayName": "Genshiro Network",
        "symbols": [
            "GENS",
            "EQD",
            "LPT0"
        ],
        "decimals": [
            9,
            9,
            9
        ],
        "standardAccount": "*25519",
        "website": "https://genshiro.equilibrium.io"
    },
    {
        "prefix": 68,
        "network": "equilibrium",
        "displayName": "Equilibrium Network",
        "symbols": [
            "EQ"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://equilibrium.io"
    },
    {
        "prefix": 69,
        "network": "sora",
        "displayName": "SORA Network",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 71,
        "network": "p3d",
        "displayName": "3DP network",
        "symbols": [
            "P3D"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
    },
    {
        "prefix": 72,
        "network": "p3dt",
        "displayName": "3DP test network",
        "symbols": [
            "P3Dt"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://3dpass.org"
    },
    {
        "prefix": 73,
        "network": "zeitgeist",
        "displayName": "Zeitgeist",
        "symbols": [
            "ZTG"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://zeitgeist.pm"
    },
    {
        "prefix": 77,
        "network": "manta",
        "displayName": "Manta network",
        "symbols": [
            "MANTA"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
    },
    {
        "prefix": 78,
        "network": "calamari",
        "displayName": "Calamari: Manta Canary Network",
        "symbols": [
            "KMA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://manta.network"
    },
    {
        "prefix": 81,
        "network": "sora_dot_para",
        "displayName": "SORA Polkadot Parachain",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 88,
        "network": "polkadex",
        "displayName": "Polkadex Mainnet",
        "symbols": [
            "PDEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
    },
    {
        "prefix": 89,
        "network": "polkadexparachain",
        "displayName": "Polkadex Parachain",
        "symbols": [
            "PDEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://polkadex.trade"
    },
    {
        "prefix": 90,
        "network": "frequency",
        "displayName": "Frequency",
        "symbols": [
            "FRQCY"
        ],
        "decimals": [
            8
        ],
        "standardAccount": "*25519",
        "website": "https://www.frequency.xyz"
    },
    {
        "prefix": 92,
        "network": "anmol",
        "displayName": "Anmol Network",
        "symbols": [
            "ANML"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
    },
    {
        "prefix": 93,
        "network": "fragnova",
        "displayName": "Fragnova Network",
        "symbols": [
            "NOVA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://fragnova.com"
    },
    {
        "prefix": 98,
        "network": "polkasmith",
        "displayName": "PolkaSmith Canary Network",
        "symbols": [
            "PKS"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
    },
    {
        "prefix": 99,
        "network": "polkafoundry",
        "displayName": "PolkaFoundry Network",
        "symbols": [
            "PKF"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://polkafoundry.com"
    },
    {
        "prefix": 100,
        "network": "ibtida",
        "displayName": "Anmol Network Ibtida Canary network",
        "symbols": [
            "IANML"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://anmol.network/"
    },
    {
        "prefix": 101,
        "network": "origintrail-parachain",
        "displayName": "OriginTrail Parachain",
        "symbols": [
            "OTP"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parachain.origintrail.io/"
    },
    {
        "prefix": 105,
        "network": "pontem-network",
        "displayName": "Pontem Network",
        "symbols": [
            "PONT"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://pontem.network"
    },
    {
        "prefix": 110,
        "network": "heiko",
        "displayName": "Heiko",
        "symbols": [
            "HKO"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
    },
    {
        "prefix": 113,
        "network": "integritee-incognito",
        "displayName": "Integritee Incognito",
        "symbols": [],
        "decimals": [],
        "standardAccount": "*25519",
        "website": "https://integritee.network"
    },
    {
        "prefix": 117,
        "network": "tinker",
        "displayName": "Tinker",
        "symbols": [
            "TNKR"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://invarch.network"
    },
    {
        "prefix": 126,
        "network": "joystream",
        "displayName": "Joystream",
        "symbols": [
            "JOY"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://www.joystream.org"
    },
    {
        "prefix": 128,
        "network": "clover",
        "displayName": "Clover Finance",
        "symbols": [
            "CLV"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://clover.finance"
    },
    {
        "prefix": 129,
        "network": "dorafactory-polkadot",
        "displayName": "Dorafactory Polkadot Network",
        "symbols": [
            "DORA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://dorafactory.org"
    },
    {
        "prefix": 131,
        "network": "litmus",
        "displayName": "Litmus Network",
        "symbols": [
            "LIT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://litentry.com/"
    },
    {
        "prefix": 136,
        "network": "altair",
        "displayName": "Altair",
        "symbols": [
            "AIR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://centrifuge.io/"
    },
    {
        "prefix": 137,
        "network": "vara",
        "displayName": "Vara Network",
        "symbols": [
            "VARA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://vara-network.io/"
    },
    {
        "prefix": 172,
        "network": "parallel",
        "displayName": "Parallel",
        "symbols": [
            "PARA"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://parallel.fi/"
    },
    {
        "prefix": 252,
        "network": "social-network",
        "displayName": "Social Network",
        "symbols": [
            "NET"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://social.network"
    },
    {
        "prefix": 255,
        "network": "quartz_mainnet",
        "displayName": "QUARTZ by UNIQUE",
        "symbols": [
            "QTZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 268,
        "network": "pioneer_network",
        "displayName": "Pioneer Network by Bit.Country",
        "symbols": [
            "NEER"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://bit.country"
    },
    {
        "prefix": 420,
        "network": "sora_kusama_para",
        "displayName": "SORA Kusama Parachain",
        "symbols": [
            "XOR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://sora.org"
    },
    {
        "prefix": 789,
        "network": "geek",
        "displayName": "GEEK Network",
        "symbols": [
            "GEEK"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://geek.gl"
    },
    {
        "prefix": 995,
        "network": "ternoa",
        "displayName": "Ternoa",
        "symbols": [
            "CAPS"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.ternoa.network"
    },
    {
        "prefix": 1110,
        "network": "efinity",
        "displayName": "Efinity",
        "symbols": [
            "EFI"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://efinity.io/"
    },
    {
        "prefix": 1221,
        "network": "peaq",
        "displayName": "Peaq Network",
        "symbols": [
            "PEAQ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
    },
    {
        "prefix": 1222,
        "network": "krest",
        "displayName": "Krest Network",
        "symbols": [
            "KREST"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "Sr25519",
        "website": "https://www.peaq.network/"
    },
    {
        "prefix": 1284,
        "network": "moonbeam",
        "displayName": "Moonbeam",
        "symbols": [
            "GLMR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
    },
    {
        "prefix": 1285,
        "network": "moonriver",
        "displayName": "Moonriver",
        "symbols": [
            "MOVR"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "secp256k1",
        "website": "https://moonbeam.network"
    },
    {
        "prefix": 1328,
        "network": "ajuna",
        "displayName": "Ajuna Network",
        "symbols": [
            "AJUN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
    },
    {
        "prefix": 1337,
        "network": "bajun",
        "displayName": "Bajun Network",
        "symbols": [
            "BAJU"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://ajuna.io"
    },
    {
        "prefix": 1516,
        "network": "societal",
        "displayName": "Societal",
        "symbols": [
            "SCTL"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://www.sctl.xyz"
    },
    {
        "prefix": 1985,
        "network": "seals",
        "displayName": "Seals Network",
        "symbols": [
            "SEAL"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://seals.app"
    },
    {
        "prefix": 2007,
        "network": "kapex",
        "displayName": "Kapex",
        "symbols": [
            "KAPEX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://totemaccounting.com"
    },
    {
        "prefix": 2009,
        "network": "cloudwalk_mainnet",
        "displayName": "CloudWalk Network Mainnet",
        "symbols": [
            "CWN"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://explorer.mainnet.cloudwalk.io"
    },
    {
        "prefix": 2032,
        "network": "interlay",
        "displayName": "Interlay",
        "symbols": [
            "INTR"
        ],
        "decimals": [
            10
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
    },
    {
        "prefix": 2092,
        "network": "kintsugi",
        "displayName": "Kintsugi",
        "symbols": [
            "KINT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://interlay.io/"
    },
    {
        "prefix": 2106,
        "network": "bitgreen",
        "displayName": "Bitgreen",
        "symbols": [
            "BBB"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://bitgreen.org/"
    },
    {
        "prefix": 2112,
        "network": "chainflip",
        "displayName": "Chainflip",
        "symbols": [
            "FLIP"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://chainflip.io/"
    },
    {
        "prefix": 2206,
        "network": "ICE",
        "displayName": "ICE Network",
        "symbols": [
            "ICY"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
    },
    {
        "prefix": 2207,
        "network": "SNOW",
        "displayName": "SNOW: ICE Canary Network",
        "symbols": [
            "ICZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://icenetwork.io"
    },
    {
        "prefix": 2254,
        "network": "subspace_testnet",
        "displayName": "Subspace testnet",
        "symbols": [
            "tSSC"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://subspace.network"
    },
    {
        "prefix": 4006,
        "network": "tangle",
        "displayName": "Tangle Network",
        "symbols": [
            "TNT"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.webb.tools/"
    },
    {
        "prefix": 4450,
        "network": "g1",
        "displayName": "Ğ1",
        "symbols": [
            "G1"
        ],
        "decimals": [
            2
        ],
        "standardAccount": "*25519",
        "website": "https://duniter.org"
    },
    {
        "prefix": 5234,
        "network": "humanode",
        "displayName": "Humanode Network",
        "symbols": [
            "HMND"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://humanode.io"
    },
    {
        "prefix": 6094,
        "network": "subspace",
        "displayName": "Subspace",
        "symbols": [
            "SSC"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://subspace.network"
    },
    {
        "prefix": 7007,
        "network": "tidefi",
        "displayName": "Tidefi",
        "symbols": [
            "TDFY"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://tidefi.com"
    },
    {
        "prefix": 7013,
        "network": "gm",
        "displayName": "GM",
        "symbols": [
            "FREN",
            "GM",
            "GN"
        ],
        "decimals": [
            12,
            0,
            0
        ],
        "standardAccount": "*25519",
        "website": "https://gmordie.com"
    },
    {
        "prefix": 7391,
        "network": "unique_mainnet",
        "displayName": "Unique Network",
        "symbols": [
            "UNQ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 8883,
        "network": "sapphire_mainnet",
        "displayName": "Sapphire by Unique",
        "symbols": [
            "QTZ"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://unique.network"
    },
    {
        "prefix": 9072,
        "network": "hashed",
        "displayName": "Hashed Network",
        "symbols": [
            "HASH"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://hashed.network"
    },
    {
        "prefix": 9807,
        "network": "dentnet",
        "displayName": "DENTNet",
        "symbols": [
            "DENTX"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://www.dentnet.io"
    },
    {
        "prefix": 9935,
        "network": "t3rn",
        "displayName": "t3rn",
        "symbols": [
            "TRN"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://t3rn.io/"
    },
    {
        "prefix": 10041,
        "network": "basilisk",
        "displayName": "Basilisk",
        "symbols": [
            "BSX"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://bsx.fi"
    },
    {
        "prefix": 11330,
        "network": "cess-testnet",
        "displayName": "CESS Testnet",
        "symbols": [
            "TCESS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
    },
    {
        "prefix": 11331,
        "network": "cess",
        "displayName": "CESS",
        "symbols": [
            "CESS"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://cess.cloud"
    },
    {
        "prefix": 11486,
        "network": "luhn",
        "displayName": "Luhn Network",
        "symbols": [
            "LUHN"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://luhn.network"
    },
    {
        "prefix": 11820,
        "network": "contextfree",
        "displayName": "Automata ContextFree",
        "symbols": [
            "CTX"
        ],
        "decimals": [
            18
        ],
        "standardAccount": "*25519",
        "website": "https://ata.network"
    },
    {
        "prefix": 12191,
        "network": "nftmart",
        "displayName": "NFTMart",
        "symbols": [
            "NMT"
        ],
        "decimals": [
            12
        ],
        "standardAccount": "*25519",
        "website": "https://nftmart.io"
    },
    {
        "prefix": 13116,
        "network": "bittensor",
        "displayName": "Bittensor",
        "symbols": [
            "TAO"
        ],
        "decimals": [
            9
        ],
        "standardAccount": "*25519",
        "website": "https://bittensor.com"
    }
];
// ../../node_modules/@polkadot/networks/defaults/genesis.js
var knownGenesis = {
    acala: [
        "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
        "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
        "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
        "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
        "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
        "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
        "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    centrifuge: [
        "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
        "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    composable: [
        "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
        "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
        "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
        "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
        "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    equilibrium: [
        "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
        "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
        "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
        // HydraDX Parachain
        "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
        // Snakenet Gen3-1
        "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
        // Snakenet Gen3
        "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
        // Snakenet Gen2
        "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    ],
    "interlay-parachain": [
        "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
        "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
        "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
        "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
        "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
        // Kusama CC3,
        "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
        // Kusama CC2
        "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    ],
    nodle: [
        "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
        "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    parallel: [
        "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
        "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
        "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
        "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
        "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
        "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
        "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
        "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    rococo: [
        "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
        "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
        "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
        "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
        "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
        "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
        "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
        "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
        "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
        "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
        "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
        "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
        "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
        "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
        "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
        "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
        "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
        "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
        "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
        "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
        "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
        "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
        "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ]
};
// ../../node_modules/@polkadot/networks/defaults/icons.js
var knownIcon = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
};
// ../../node_modules/@polkadot/networks/defaults/ledger.js
var knownLedger = {
    acala: 787,
    ajuna: 354,
    "aleph-node": 643,
    astar: 810,
    bifrost: 788,
    "bifrost-kusama": 788,
    centrifuge: 747,
    composable: 354,
    darwinia: 354,
    "dock-mainnet": 594,
    edgeware: 523,
    equilibrium: 99999997,
    genshiro: 99999996,
    hydradx: 354,
    "interlay-parachain": 354,
    karura: 686,
    khala: 434,
    kusama: 434,
    nodle: 1003,
    origintrail: 354,
    parallel: 354,
    pendulum: 354,
    phala: 354,
    picasso: 434,
    polkadex: 799,
    polkadot: 354,
    polymesh: 595,
    sora: 617,
    stafi: 907,
    statemine: 434,
    // common-good on Kusama, shares derivation
    statemint: 354,
    // common-good on Polkadot, shares derivation
    ternoa: 995,
    unique: 354,
    vtb: 694,
    xxnetwork: 1955
};
// ../../node_modules/@polkadot/networks/defaults/testnets.js
var knownTestnet = {
    "": true,
    // this is the default non-network entry
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
};
// ../../node_modules/@polkadot/networks/interfaces.js
var UNSORTED = [
    0,
    2,
    42
];
var TESTNETS = [
    "testnet"
];
function toExpanded(o) {
    var network = o.network || "";
    var nameParts = network.replace(/_/g, "-").split("-");
    var n = o;
    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || "substrate";
    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
    return n;
}
function filterSelectable(param) {
    var genesisHash = param.genesisHash, prefix2 = param.prefix;
    return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
    var isUnSortedA = UNSORTED.includes(a.prefix);
    var isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
var allNetworks = esm_default.map(toExpanded);
var availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
var selectableNetworks = availableNetworks.filter(filterSelectable);
// ../../node_modules/@polkadot/util-crypto/address/defaults.js
var defaults = {
    allowedDecodedLengths: [
        1,
        2,
        4,
        8,
        32,
        33
    ],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [
        3,
        4,
        6,
        10,
        35,
        36,
        37,
        38
    ],
    allowedPrefix: availableNetworks.map(function(param) {
        var prefix2 = param.prefix;
        return prefix2;
    }),
    prefix: 42
};
// ../../node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress(encoded, ignoreChecksum) {
    var ss58Format = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1;
    if (!encoded) {
        throw new Error("Invalid empty address passed");
    }
    if (isU8a(encoded) || isHex(encoded)) {
        return u8aToU8a(encoded);
    }
    try {
        var decoded = base58Decode(encoded);
        if (!defaults.allowedEncodedLengths.includes(decoded.length)) {
            throw new Error("Invalid decoded address length");
        }
        var _checkAddressChecksum = _sliced_to_array(checkAddressChecksum(decoded), 4), isValid = _checkAddressChecksum[0], endPos = _checkAddressChecksum[1], ss58Length = _checkAddressChecksum[2], ss58Decoded = _checkAddressChecksum[3];
        if (!isValid && !ignoreChecksum) {
            throw new Error("Invalid decoded address checksum");
        } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
            throw new Error("Expected ss58Format ".concat(ss58Format, ", received ").concat(ss58Decoded));
        }
        return decoded.slice(ss58Length, endPos);
    } catch (error2) {
        throw new Error("Decoding ".concat(encoded, ": ").concat(error2.message));
    }
}
// ../../node_modules/@polkadot/util-crypto/bn.js
var BN_BE_256_OPTS = {
    bitLength: 256,
    isLe: false
};
// ../../node_modules/@polkadot/util-crypto/address/encode.js
function encodeAddress(key) {
    var ss58Format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaults.prefix;
    var u8a = decodeAddress(key);
    if (ss58Format < 0 || ss58Format > 16383 || [
        46,
        47
    ].includes(ss58Format)) {
        throw new Error("Out of range ss58Format specified");
    } else if (!defaults.allowedDecodedLengths.includes(u8a.length)) {
        throw new Error("Expected a valid key to convert, with length ".concat(defaults.allowedDecodedLengths.join(", ")));
    }
    var input = u8aConcat(ss58Format < 64 ? [
        ss58Format
    ] : [
        (ss58Format & 252) >> 2 | 64,
        ss58Format >> 8 | (ss58Format & 3) << 6
    ], u8a);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, [
        32,
        33
    ].includes(u8a.length) ? 2 : 1)));
}
// ../../node_modules/@noble/hashes/esm/sha3.js
var SHA3_PI = [], SHA3_ROTL = [], _SHA3_IOTA = [];
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
var _2n2 = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
for(var round = 0, R = _1n3, x1 = 1, y = 0; round < 24; round++){
    var ref;
    ref = [
        y,
        (2 * x1 + 3 * y) % 5
    ], x1 = ref[0], y = ref[1], ref;
    SHA3_PI.push(2 * (5 * y + x1));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    var t2 = _0n3;
    for(var j2 = 0; j2 < 7; j2++){
        R = (R << _1n3 ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n2) t2 ^= _1n3 << (_1n3 << BigInt(j2)) - _1n3;
    }
    _SHA3_IOTA.push(t2);
}
var _u64_default_split = _sliced_to_array(u64_default.split(_SHA3_IOTA, true), 2), SHA3_IOTA_H = _u64_default_split[0], SHA3_IOTA_L = _u64_default_split[1];
var rotlH = function(h, l13, s) {
    return s > 32 ? u64_default.rotlBH(h, l13, s) : u64_default.rotlSH(h, l13, s);
};
var rotlL = function(h, l13, s) {
    return s > 32 ? u64_default.rotlBL(h, l13, s) : u64_default.rotlSL(h, l13, s);
};
function keccakP(s) {
    var rounds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 24;
    var B = new Uint32Array(5 * 2);
    for(var round = 24 - rounds; round < 24; round++){
        for(var x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(var x1 = 0; x1 < 10; x1 += 2){
            var idx1 = (x1 + 8) % 10;
            var idx0 = (x1 + 2) % 10;
            var B0 = B[idx0];
            var B1 = B[idx0 + 1];
            var Th = rotlH(B0, B1, 1) ^ B[idx1];
            var Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(var y = 0; y < 50; y += 10){
                s[x1 + y] ^= Th;
                s[x1 + y + 1] ^= Tl;
            }
        }
        var curH = s[2];
        var curL = s[3];
        for(var t2 = 0; t2 < 24; t2++){
            var shift = SHA3_ROTL[t2];
            var Th1 = rotlH(curH, curL, shift);
            var Tl1 = rotlL(curH, curL, shift);
            var PI = SHA3_PI[t2];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th1;
            s[PI + 1] = Tl1;
        }
        for(var y1 = 0; y1 < 50; y1 += 10){
            for(var x2 = 0; x2 < 10; x2++)B[x2] = s[y1 + x2];
            for(var x3 = 0; x3 < 10; x3++)s[y1 + x3] ^= ~B[(x3 + 2) % 10] & B[(x3 + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
var Keccak = /*#__PURE__*/ function(Hash) {
    _inherits(Keccak1, Hash);
    var _super = _create_super(Keccak1);
    function Keccak1(blockLen, suffix, outputLen) {
        var enableXOF = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, rounds = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 24;
        _class_call_check(this, Keccak1);
        var _this;
        _this = _super.call(this);
        _this.blockLen = blockLen;
        _this.suffix = suffix;
        _this.outputLen = outputLen;
        _this.enableXOF = enableXOF;
        _this.rounds = rounds;
        _this.pos = 0;
        _this.posOut = 0;
        _this.finished = false;
        _this.destroyed = false;
        assert_default.number(outputLen);
        if (0 >= _this.blockLen || _this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        _this.state = new Uint8Array(200);
        _this.state32 = u322(_this.state);
        return _this;
    }
    _create_class(Keccak1, [
        {
            key: "keccak",
            value: function keccak() {
                keccakP(this.state32, this.rounds);
                this.posOut = 0;
                this.pos = 0;
            }
        },
        {
            key: "update",
            value: function update(data) {
                assert_default.exists(this);
                var _this = this, blockLen = _this.blockLen, state2 = _this.state;
                data = toBytes(data);
                var len = data.length;
                for(var pos = 0; pos < len;){
                    var take = Math.min(blockLen - this.pos, len - pos);
                    for(var i = 0; i < take; i++)state2[this.pos++] ^= data[pos++];
                    if (this.pos === blockLen) this.keccak();
                }
                return this;
            }
        },
        {
            key: "finish",
            value: function finish() {
                if (this.finished) return;
                this.finished = true;
                var _this = this, state2 = _this.state, suffix = _this.suffix, pos = _this.pos, blockLen = _this.blockLen;
                state2[pos] ^= suffix;
                if ((suffix & 128) !== 0 && pos === blockLen - 1) this.keccak();
                state2[blockLen - 1] ^= 128;
                this.keccak();
            }
        },
        {
            key: "writeInto",
            value: function writeInto(out) {
                assert_default.exists(this, false);
                assert_default.bytes(out);
                this.finish();
                var bufferOut = this.state;
                var blockLen = this.blockLen;
                for(var pos = 0, len = out.length; pos < len;){
                    if (this.posOut >= blockLen) this.keccak();
                    var take = Math.min(blockLen - this.posOut, len - pos);
                    out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
                    this.posOut += take;
                    pos += take;
                }
                return out;
            }
        },
        {
            key: "xofInto",
            value: function xofInto(out) {
                if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
                return this.writeInto(out);
            }
        },
        {
            key: "xof",
            value: function xof(bytes5) {
                assert_default.number(bytes5);
                return this.xofInto(new Uint8Array(bytes5));
            }
        },
        {
            key: "digestInto",
            value: function digestInto(out) {
                assert_default.output(out, this);
                if (this.finished) throw new Error("digest() was already called");
                this.writeInto(out);
                this.destroy();
                return out;
            }
        },
        {
            key: "digest",
            value: function digest() {
                return this.digestInto(new Uint8Array(this.outputLen));
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                this.destroyed = true;
                this.state.fill(0);
            }
        },
        {
            key: "_cloneInto",
            value: function _cloneInto(to) {
                var _this = this, blockLen = _this.blockLen, suffix = _this.suffix, outputLen = _this.outputLen, rounds = _this.rounds, enableXOF = _this.enableXOF;
                to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
                to.state32.set(this.state32);
                to.pos = this.pos;
                to.posOut = this.posOut;
                to.finished = this.finished;
                to.rounds = rounds;
                to.suffix = suffix;
                to.outputLen = outputLen;
                to.enableXOF = enableXOF;
                to.destroyed = this.destroyed;
                return to;
            }
        }
    ]);
    return Keccak1;
}(Hash);
var gen = function(suffix, blockLen, outputLen) {
    return wrapConstructor(function() {
        return new Keccak(blockLen, suffix, outputLen);
    });
};
var sha3_224 = gen(6, 144, 224 / 8);
var sha3_256 = gen(6, 136, 256 / 8);
var sha3_384 = gen(6, 104, 384 / 8);
var sha3_512 = gen(6, 72, 512 / 8);
var keccak_224 = gen(1, 144, 224 / 8);
var keccak_256 = gen(1, 136, 256 / 8);
var keccak_384 = gen(1, 104, 384 / 8);
var keccak_512 = gen(1, 72, 512 / 8);
var genShake = function(suffix, blockLen, outputLen) {
    return wrapConstructorWithOpts(function() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true);
    });
};
var shake128 = genShake(31, 168, 128 / 8);
var shake256 = genShake(31, 136, 256 / 8);
// ../../node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a = /* @__PURE__ */ createDualHasher({
    256: keccak256,
    512: keccak512
}, {
    256: keccak_256,
    512: keccak_512
});
var keccakAsHex = createAsHex(keccakAsU8a);
// ../../node_modules/@polkadot/util-crypto/secp256k1/expand.js
function secp256k1Expand2(publicKey, onlyJs) {
    if (publicKey.length === 65) {
        return publicKey.subarray(1);
    }
    if (publicKey.length !== 33) {
        throw new Error("Invalid publicKey provided");
    }
    if (!hasBigInt || !onlyJs && isReady()) {
        return secp256k1Expand(publicKey).subarray(1);
    }
    var _Point_fromHex = Point.fromHex(publicKey), x = _Point_fromHex.x, y = _Point_fromHex.y;
    return u8aConcat(bnToU8a(x, BN_BE_256_OPTS), bnToU8a(y, BN_BE_256_OPTS));
}
// ../../node_modules/@polkadot/util-crypto/ethereum/encode.js
function getH160(u8a) {
    if ([
        33,
        65
    ].includes(u8a.length)) {
        u8a = keccakAsU8a(secp256k1Expand2(u8a));
    }
    return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
        return "0x";
    }
    var u8aAddress = u8aToU8a(addressOrPublic);
    if (![
        20,
        32,
        33,
        65
    ].includes(u8aAddress.length)) {
        throw new Error("Invalid address or publicKey passed");
    }
    var address = u8aToHex(getH160(u8aAddress), -1, false);
    var hash3 = u8aToHex(keccakAsU8a(address), -1, false);
    var result = "";
    for(var i = 0; i < 40; i++){
        result = "".concat(result).concat(parseInt(hash3[i], 16) > 7 ? address[i].toUpperCase() : address[i]);
    }
    return "0x".concat(result);
}
// ../../node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
function isInvalidChar(char, byte) {
    return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}
function isEthereumChecksum(_address) {
    var address = _address.replace("0x", "");
    var hash3 = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
    for(var i = 0; i < 40; i++){
        if (isInvalidChar(address[i], parseInt(hash3[i], 16))) {
            return false;
        }
    }
    return true;
}
// ../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js
function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        return true;
    }
    return isEthereumChecksum(address);
}
// ../../node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
var P64_1 = BigInt2("11400714785074694791");
var P64_2 = BigInt2("14029467366897019727");
var P64_3 = BigInt2("1609587929392839161");
var P64_4 = BigInt2("9650029242287828579");
var P64_5 = BigInt2("2870177450012600261");
var U64 = BigInt2("0xffffffffffffffff");
var _7n2 = BigInt2(7);
var _11n = BigInt2(11);
var _12n = BigInt2(12);
var _16n = BigInt2(16);
var _18n = BigInt2(18);
var _23n = BigInt2(23);
var _27n = BigInt2(27);
var _29n = BigInt2(29);
var _31n = BigInt2(31);
var _32n2 = BigInt2(32);
var _33n = BigInt2(33);
var _64n = BigInt2(64);
var _256n2 = BigInt2(256);
function rotl(a, b) {
    var c = a & U64;
    return (c << b | c >> _64n - b) & U64;
}
function fromU8a(u8a, p, count) {
    var bigints = new Array(count);
    var offset = 0;
    for(var i = 0; i < count; i++, offset += 2){
        bigints[i] = BigInt2(u8a[p + offset] | u8a[p + 1 + offset] << 8);
    }
    var result = _0n;
    for(var i1 = count - 1; i1 >= 0; i1--){
        result = (result << _16n) + bigints[i1];
    }
    return result;
}
function toU8a(h64) {
    var result = new Uint8Array(8);
    for(var i = 7; i >= 0; i--){
        result[i] = Number(h64 % _256n2);
        h64 = h64 / _256n2;
    }
    return result;
}
function state(initSeed) {
    var seed = BigInt2(initSeed);
    return {
        seed: seed,
        u8a: new Uint8Array(32),
        u8asize: 0,
        v1: seed + P64_1 + P64_2,
        v2: seed + P64_2,
        v3: seed,
        v4: seed - P64_1
    };
}
function init(state2, input) {
    if (input.length < 32) {
        state2.u8a.set(input);
        state2.u8asize = input.length;
        return state2;
    }
    var limit = input.length - 32;
    var p = 0;
    if (limit >= 0) {
        var adjustV = function(v) {
            return P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
        };
        do {
            state2.v1 = adjustV(state2.v1);
            p += 8;
            state2.v2 = adjustV(state2.v2);
            p += 8;
            state2.v3 = adjustV(state2.v3);
            p += 8;
            state2.v4 = adjustV(state2.v4);
            p += 8;
        }while (p <= limit);
    }
    if (p < input.length) {
        state2.u8a.set(input.subarray(p, input.length));
        state2.u8asize = input.length - p;
    }
    return state2;
}
function xxhash64(input, initSeed) {
    var _init = init(state(initSeed), input), seed = _init.seed, u8a = _init.u8a, u8asize = _init.u8asize, v16 = _init.v1, v22 = _init.v2, v3 = _init.v3, v4 = _init.v4;
    var p = 0;
    var h64 = U64 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl(v16, _1n) + rotl(v22, _7n2) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v16 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
    while(p <= u8asize - 8){
        h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
        p += 8;
    }
    if (p + 4 <= u8asize) {
        h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
        p += 4;
    }
    while(p < u8asize){
        h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt2(u8a[p++]), _11n);
    }
    h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
    h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
    return toU8a(U64 & (h64 ^ h64 >> _32n2));
}
// ../../node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a(data) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 64, onlyJs = arguments.length > 2 ? arguments[2] : void 0;
    var rounds = Math.ceil(bitLength / 64);
    var u8a = u8aToU8a(data);
    if (!hasBigInt || !onlyJs && isReady()) {
        return twox(u8a, rounds);
    }
    var result = new Uint8Array(rounds * 8);
    for(var seed = 0; seed < rounds; seed++){
        result.set(xxhash64(u8a, seed).reverse(), seed * 8);
    }
    return result;
}
var xxhashAsHex = createAsHex(xxhashAsU8a);
// ../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js
function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
// ../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js
var id = 0;
function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
}
// ../../node_modules/@polkadot/rpc-provider/coder/error.js
var UNKNOWN = -99999;
function extend(that, name, value1) {
    Object.defineProperty(that, name, {
        configurable: true,
        enumerable: false,
        value: value1
    });
}
var RpcError = /*#__PURE__*/ function(Error1) {
    _inherits(RpcError, Error1);
    var _super = _create_super(RpcError);
    function RpcError() {
        var message2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", code = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UNKNOWN, data = arguments.length > 2 ? arguments[2] : void 0;
        _class_call_check(this, RpcError);
        var _this;
        _this = _super.call(this);
        extend(_assert_this_initialized(_this), "message", String(message2));
        extend(_assert_this_initialized(_this), "name", _this.constructor.name);
        extend(_assert_this_initialized(_this), "data", data);
        extend(_assert_this_initialized(_this), "code", code);
        if (isFunction(Error.captureStackTrace)) {
            Error.captureStackTrace(_assert_this_initialized(_this), _this.constructor);
        } else {
            var stack = new Error(message2).stack;
            stack && extend(_assert_this_initialized(_this), "stack", stack);
        }
        return _this;
    }
    return RpcError;
}(_wrap_native_super(Error));
__publicField(RpcError, "CODES", {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    // Rust client
    UNKNOWN: UNKNOWN
});
// ../../node_modules/@polkadot/rpc-provider/coder/index.js
function formatErrorData(data) {
    if (isUndefined(data)) {
        return "";
    }
    var formatted = ": ".concat(isString(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify(data));
    return formatted.length <= 256 ? formatted : "".concat(formatted.substring(0, 255), "…");
}
function checkError(error2) {
    if (error2) {
        var code = error2.code, data = error2.data, message2 = error2.message;
        throw new RpcError("".concat(code, ": ").concat(message2).concat(formatErrorData(data)), code, data);
    }
}
var _id;
var RpcCoder = /*#__PURE__*/ function() {
    function RpcCoder() {
        _class_call_check(this, RpcCoder);
        __privateAdd(this, _id, 0);
    }
    _create_class(RpcCoder, [
        {
            key: "decodeResponse",
            value: function decodeResponse(response) {
                if (!response || response.jsonrpc !== "2.0") {
                    throw new Error("Invalid jsonrpc field in decoded object");
                }
                var isSubscription = !isUndefined(response.params) && !isUndefined(response.method);
                if (!isNumber(response.id) && (!isSubscription || !isNumber(response.params.subscription) && !isString(response.params.subscription))) {
                    throw new Error("Invalid id field in decoded object");
                }
                checkError(response.error);
                if (response.result === void 0 && !isSubscription) {
                    throw new Error("No result found in jsonrpc response");
                }
                if (isSubscription) {
                    checkError(response.params.error);
                    return response.params.result;
                }
                return response.result;
            }
        },
        {
            key: "encodeJson",
            value: function encodeJson(method, params) {
                var _this_encodeObject = _sliced_to_array(this.encodeObject(method, params), 2), id2 = _this_encodeObject[0], data = _this_encodeObject[1];
                return [
                    id2,
                    stringify(data)
                ];
            }
        },
        {
            key: "encodeObject",
            value: function encodeObject(method, params) {
                var id2 = ++__privateWrapper(this, _id)._;
                return [
                    id2,
                    {
                        id: id2,
                        jsonrpc: "2.0",
                        method: method,
                        params: params
                    }
                ];
            }
        }
    ]);
    return RpcCoder;
}();
_id = new WeakMap();
// ../../node_modules/@polkadot/rpc-provider/defaults.js
var HTTP_URL = "http://127.0.0.1:9933";
var WS_URL = "ws://127.0.0.1:9944";
var defaults_default = {
    HTTP_URL: HTTP_URL,
    WS_URL: WS_URL
};
// ../../node_modules/@polkadot/rpc-provider/lru.js
var DEFAULT_CAPACITY = 128;
var LRUNode = function LRUNode(key) {
    _class_call_check(this, LRUNode);
    this.key = key;
    this.next = this.prev = this;
};
var _data = /* @__PURE__ */ _classPrivateFieldKey("data");
var _refs = /* @__PURE__ */ _classPrivateFieldKey("refs");
var _length = /* @__PURE__ */ _classPrivateFieldKey("length");
var _head = /* @__PURE__ */ _classPrivateFieldKey("head");
var _tail = /* @__PURE__ */ _classPrivateFieldKey("tail");
var _toHead = /* @__PURE__ */ _classPrivateFieldKey("toHead");
var LRUCache = /*#__PURE__*/ function() {
    function LRUCache() {
        var capacity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_CAPACITY;
        _class_call_check(this, LRUCache);
        Object.defineProperty(this, _toHead, {
            value: _toHead2
        });
        this.capacity = void 0;
        Object.defineProperty(this, _data, {
            writable: true,
            value: /* @__PURE__ */ new Map()
        });
        Object.defineProperty(this, _refs, {
            writable: true,
            value: /* @__PURE__ */ new Map()
        });
        Object.defineProperty(this, _length, {
            writable: true,
            value: 0
        });
        Object.defineProperty(this, _head, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _tail, {
            writable: true,
            value: void 0
        });
        this.capacity = capacity;
        _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = new LRUNode("<empty>");
    }
    _create_class(LRUCache, [
        {
            key: "length",
            get: function get() {
                return _classPrivateFieldBase(this, _length)[_length];
            }
        },
        {
            key: "lengthData",
            get: function get() {
                return _classPrivateFieldBase(this, _data)[_data].size;
            }
        },
        {
            key: "lengthRefs",
            get: function get() {
                return _classPrivateFieldBase(this, _refs)[_refs].size;
            }
        },
        {
            key: "entries",
            value: function entries() {
                var keys2 = this.keys();
                var entries = new Array(keys2.length);
                for(var i = 0; i < keys2.length; i++){
                    var key = keys2[i];
                    entries[i] = [
                        key,
                        _classPrivateFieldBase(this, _data)[_data].get(key)
                    ];
                }
                return entries;
            }
        },
        {
            key: "keys",
            value: function keys() {
                var keys2 = [];
                if (_classPrivateFieldBase(this, _length)[_length]) {
                    var curr = _classPrivateFieldBase(this, _head)[_head];
                    while(curr !== _classPrivateFieldBase(this, _tail)[_tail]){
                        keys2.push(curr.key);
                        curr = curr.next;
                    }
                    keys2.push(curr.key);
                }
                return keys2;
            }
        },
        {
            key: "get",
            value: function get(key) {
                var data = _classPrivateFieldBase(this, _data)[_data].get(key);
                if (data) {
                    _classPrivateFieldBase(this, _toHead)[_toHead](key);
                    return data;
                }
                return null;
            }
        },
        {
            key: "set",
            value: function set(key, value1) {
                if (_classPrivateFieldBase(this, _data)[_data].has(key)) {
                    _classPrivateFieldBase(this, _toHead)[_toHead](key);
                } else {
                    var node = new LRUNode(key);
                    _classPrivateFieldBase(this, _refs)[_refs].set(node.key, node);
                    if (this.length === 0) {
                        _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = node;
                    } else {
                        _classPrivateFieldBase(this, _head)[_head].prev = node;
                        node.next = _classPrivateFieldBase(this, _head)[_head];
                        _classPrivateFieldBase(this, _head)[_head] = node;
                    }
                    if (_classPrivateFieldBase(this, _length)[_length] === this.capacity) {
                        _classPrivateFieldBase(this, _data)[_data].delete(_classPrivateFieldBase(this, _tail)[_tail].key);
                        _classPrivateFieldBase(this, _refs)[_refs].delete(_classPrivateFieldBase(this, _tail)[_tail].key);
                        _classPrivateFieldBase(this, _tail)[_tail] = _classPrivateFieldBase(this, _tail)[_tail].prev;
                        _classPrivateFieldBase(this, _tail)[_tail].next = _classPrivateFieldBase(this, _head)[_head];
                    } else {
                        _classPrivateFieldBase(this, _length)[_length] += 1;
                    }
                }
                _classPrivateFieldBase(this, _data)[_data].set(key, value1);
            }
        }
    ]);
    return LRUCache;
}();
function _toHead2(key) {
    var ref = _classPrivateFieldBase(this, _refs)[_refs].get(key);
    if (ref && ref !== _classPrivateFieldBase(this, _head)[_head]) {
        ref.prev.next = ref.next;
        ref.next.prev = ref.prev;
        ref.next = _classPrivateFieldBase(this, _head)[_head];
        _classPrivateFieldBase(this, _head)[_head].prev = ref;
        _classPrivateFieldBase(this, _head)[_head] = ref;
    }
}
// ../../node_modules/eventemitter3/index.mjs
var import_index = __toESM(require_eventemitter3(), 1);
var eventemitter3_default = import_index.default;
// ../../node_modules/@polkadot/x-ws/node.js
var import_websocket = __toESM(require_websocket2(), 1);
var WebSocket = extractGlobal("WebSocket", import_websocket.default.w3cwebsocket);
// ../../node_modules/@polkadot/rpc-provider/ws/errors.js
var known = {
    1e3: "Normal Closure",
    1001: "Going Away",
    1002: "Protocol Error",
    1003: "Unsupported Data",
    1004: "(For future)",
    1005: "No Status Received",
    1006: "Abnormal Closure",
    1007: "Invalid frame payload data",
    1008: "Policy Violation",
    1009: "Message too big",
    1010: "Missing Extension",
    1011: "Internal Error",
    1012: "Service Restart",
    1013: "Try Again Later",
    1014: "Bad Gateway",
    1015: "TLS Handshake"
};
function getUnmapped(code) {
    if (code <= 1999) {
        return "(For WebSocket standard)";
    } else if (code <= 2999) {
        return "(For WebSocket extensions)";
    } else if (code <= 3999) {
        return "(For libraries and frameworks)";
    } else if (code <= 4999) {
        return "(For applications)";
    }
}
function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
        return "(Unused)";
    }
    return known[code] || getUnmapped(code) || "(Unknown)";
}
// ../../node_modules/@polkadot/rpc-provider/ws/index.js
var ALIASES = {
    chain_finalisedHead: "chain_finalizedHead",
    chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
    chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
};
var RETRY_DELAY = 2500;
var DEFAULT_TIMEOUT_MS = 60 * 1e3;
var TIMEOUT_INTERVAL = 5e3;
var MEGABYTE = 1024 * 1024;
var l = logger("api-ws");
function eraseRecord(record, cb) {
    Object.keys(record).forEach(function(key) {
        if (cb) {
            cb(record[key]);
        }
        delete record[key];
    });
}
var _callCache = /* @__PURE__ */ _classPrivateFieldKey("callCache");
var _coder = /* @__PURE__ */ _classPrivateFieldKey("coder");
var _endpoints = /* @__PURE__ */ _classPrivateFieldKey("endpoints");
var _headers = /* @__PURE__ */ _classPrivateFieldKey("headers");
var _eventemitter = /* @__PURE__ */ _classPrivateFieldKey("eventemitter");
var _handlers = /* @__PURE__ */ _classPrivateFieldKey("handlers");
var _isReadyPromise = /* @__PURE__ */ _classPrivateFieldKey("isReadyPromise");
var _stats = /* @__PURE__ */ _classPrivateFieldKey("stats");
var _waitingForId = /* @__PURE__ */ _classPrivateFieldKey("waitingForId");
var _autoConnectMs = /* @__PURE__ */ _classPrivateFieldKey("autoConnectMs");
var _endpointIndex = /* @__PURE__ */ _classPrivateFieldKey("endpointIndex");
var _isConnected = /* @__PURE__ */ _classPrivateFieldKey("isConnected");
var _subscriptions = /* @__PURE__ */ _classPrivateFieldKey("subscriptions");
var _timeoutId = /* @__PURE__ */ _classPrivateFieldKey("timeoutId");
var _websocket = /* @__PURE__ */ _classPrivateFieldKey("websocket");
var _timeout = /* @__PURE__ */ _classPrivateFieldKey("timeout");
var _send = /* @__PURE__ */ _classPrivateFieldKey("send");
var _emit = /* @__PURE__ */ _classPrivateFieldKey("emit");
var _onSocketClose = /* @__PURE__ */ _classPrivateFieldKey("onSocketClose");
var _onSocketError = /* @__PURE__ */ _classPrivateFieldKey("onSocketError");
var _onSocketMessage = /* @__PURE__ */ _classPrivateFieldKey("onSocketMessage");
var _onSocketMessageResult = /* @__PURE__ */ _classPrivateFieldKey("onSocketMessageResult");
var _onSocketMessageSubscribe = /* @__PURE__ */ _classPrivateFieldKey("onSocketMessageSubscribe");
var _onSocketOpen = /* @__PURE__ */ _classPrivateFieldKey("onSocketOpen");
var _resubscribe = /* @__PURE__ */ _classPrivateFieldKey("resubscribe");
var _timeoutHandlers = /* @__PURE__ */ _classPrivateFieldKey("timeoutHandlers");
var WsProvider = /*#__PURE__*/ function() {
    function WsProvider1() {
        var endpoint = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaults_default.WS_URL, autoConnectMs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : RETRY_DELAY, headers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, timeout = arguments.length > 3 ? arguments[3] : void 0;
        var _this = this;
        _class_call_check(this, WsProvider1);
        Object.defineProperty(this, _send, {
            value: _send2
        });
        Object.defineProperty(this, _callCache, {
            writable: true,
            value: new LRUCache()
        });
        Object.defineProperty(this, _coder, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _endpoints, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _headers, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _eventemitter, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _handlers, {
            writable: true,
            value: {}
        });
        Object.defineProperty(this, _isReadyPromise, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _stats, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _waitingForId, {
            writable: true,
            value: {}
        });
        Object.defineProperty(this, _autoConnectMs, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _endpointIndex, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _isConnected, {
            writable: true,
            value: false
        });
        Object.defineProperty(this, _subscriptions, {
            writable: true,
            value: {}
        });
        Object.defineProperty(this, _timeoutId, {
            writable: true,
            value: null
        });
        Object.defineProperty(this, _websocket, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _timeout, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, _emit, {
            writable: true,
            value: function(type) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                var _classPrivateFieldBase__eventemitter;
                (_classPrivateFieldBase__eventemitter = _classPrivateFieldBase(_this, _eventemitter)[_eventemitter]).emit.apply(_classPrivateFieldBase__eventemitter, [
                    type
                ].concat(_to_consumable_array(args)));
            }
        });
        Object.defineProperty(this, _onSocketClose, {
            writable: true,
            value: function(event) {
                var error2 = new Error("disconnected from ".concat(_classPrivateFieldBase(_this, _endpoints)[_endpoints][_classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex]], ": ").concat(event.code, ":: ").concat(event.reason || getWSErrorString(event.code)));
                if (_classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs] > 0) {
                    l.error(error2.message);
                }
                _classPrivateFieldBase(_this, _isConnected)[_isConnected] = false;
                if (_classPrivateFieldBase(_this, _websocket)[_websocket]) {
                    _classPrivateFieldBase(_this, _websocket)[_websocket].onclose = null;
                    _classPrivateFieldBase(_this, _websocket)[_websocket].onerror = null;
                    _classPrivateFieldBase(_this, _websocket)[_websocket].onmessage = null;
                    _classPrivateFieldBase(_this, _websocket)[_websocket].onopen = null;
                    _classPrivateFieldBase(_this, _websocket)[_websocket] = null;
                }
                if (_classPrivateFieldBase(_this, _timeoutId)[_timeoutId]) {
                    clearInterval(_classPrivateFieldBase(_this, _timeoutId)[_timeoutId]);
                    _classPrivateFieldBase(_this, _timeoutId)[_timeoutId] = null;
                }
                _classPrivateFieldBase(_this, _emit)[_emit]("disconnected");
                eraseRecord(_classPrivateFieldBase(_this, _handlers)[_handlers], function(h) {
                    try {
                        h.callback(error2, void 0);
                    } catch (err) {
                        l.error(err);
                    }
                });
                eraseRecord(_classPrivateFieldBase(_this, _waitingForId)[_waitingForId]);
                if (_classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs] > 0) {
                    setTimeout(function() {
                        _this.connectWithRetry().catch(function() {});
                    }, _classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs]);
                }
            }
        });
        Object.defineProperty(this, _onSocketError, {
            writable: true,
            value: function(error2) {
                l.debug(function() {
                    return [
                        "socket error",
                        error2
                    ];
                });
                _classPrivateFieldBase(_this, _emit)[_emit]("error", error2);
            }
        });
        Object.defineProperty(this, _onSocketMessage, {
            writable: true,
            value: function(message2) {
                l.debug(function() {
                    return [
                        "received",
                        message2.data
                    ];
                });
                _classPrivateFieldBase(_this, _stats)[_stats].total.bytesRecv += message2.data.length;
                var response = JSON.parse(message2.data);
                return isUndefined(response.method) ? _classPrivateFieldBase(_this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldBase(_this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
            }
        });
        Object.defineProperty(this, _onSocketMessageResult, {
            writable: true,
            value: function(response) {
                var handler = _classPrivateFieldBase(_this, _handlers)[_handlers][response.id];
                if (!handler) {
                    l.debug(function() {
                        return "Unable to find handler for id=".concat(response.id);
                    });
                    return;
                }
                try {
                    var method = handler.method, params = handler.params, subscription = handler.subscription;
                    var result = _classPrivateFieldBase(_this, _coder)[_coder].decodeResponse(response);
                    handler.callback(null, result);
                    if (subscription) {
                        var subId = "".concat(subscription.type, "::").concat(result);
                        _classPrivateFieldBase(_this, _subscriptions)[_subscriptions][subId] = objectSpread({}, subscription, {
                            method: method,
                            params: params
                        });
                        if (_classPrivateFieldBase(_this, _waitingForId)[_waitingForId][subId]) {
                            _classPrivateFieldBase(_this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldBase(_this, _waitingForId)[_waitingForId][subId]);
                        }
                    }
                } catch (error2) {
                    _classPrivateFieldBase(_this, _stats)[_stats].total.errors++;
                    handler.callback(error2, void 0);
                }
                delete _classPrivateFieldBase(_this, _handlers)[_handlers][response.id];
            }
        });
        Object.defineProperty(this, _onSocketMessageSubscribe, {
            writable: true,
            value: function(response) {
                var method = ALIASES[response.method] || response.method || "invalid";
                var subId = "".concat(method, "::").concat(response.params.subscription);
                var handler = _classPrivateFieldBase(_this, _subscriptions)[_subscriptions][subId];
                if (!handler) {
                    _classPrivateFieldBase(_this, _waitingForId)[_waitingForId][subId] = response;
                    l.debug(function() {
                        return "Unable to find handler for subscription=".concat(subId);
                    });
                    return;
                }
                delete _classPrivateFieldBase(_this, _waitingForId)[_waitingForId][subId];
                try {
                    var result = _classPrivateFieldBase(_this, _coder)[_coder].decodeResponse(response);
                    handler.callback(null, result);
                } catch (error2) {
                    _classPrivateFieldBase(_this, _stats)[_stats].total.errors++;
                    handler.callback(error2, void 0);
                }
            }
        });
        Object.defineProperty(this, _onSocketOpen, {
            writable: true,
            value: function() {
                if (_classPrivateFieldBase(_this, _websocket)[_websocket] === null) {
                    throw new Error("WebSocket cannot be null in onOpen");
                }
                l.debug(function() {
                    return [
                        "connected to",
                        _classPrivateFieldBase(_this, _endpoints)[_endpoints][_classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex]]
                    ];
                });
                _classPrivateFieldBase(_this, _isConnected)[_isConnected] = true;
                _classPrivateFieldBase(_this, _emit)[_emit]("connected");
                _classPrivateFieldBase(_this, _resubscribe)[_resubscribe]();
                return true;
            }
        });
        Object.defineProperty(this, _resubscribe, {
            writable: true,
            value: function() {
                var subscriptions = _classPrivateFieldBase(_this, _subscriptions)[_subscriptions];
                _classPrivateFieldBase(_this, _subscriptions)[_subscriptions] = {};
                var _this1 = _this;
                Promise.all(Object.keys(subscriptions).map(function() {
                    var _ref = _async_to_generator(function(id2) {
                        var _subscriptions_id2, callback, method, params, type, error2;
                        return __generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    _subscriptions_id2 = subscriptions[id2], callback = _subscriptions_id2.callback, method = _subscriptions_id2.method, params = _subscriptions_id2.params, type = _subscriptions_id2.type;
                                    if (type.startsWith("author_")) {
                                        return [
                                            2
                                        ];
                                    }
                                    _state.label = 1;
                                case 1:
                                    _state.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]);
                                    return [
                                        4,
                                        _this1.subscribe(type, method, params, callback)
                                    ];
                                case 2:
                                    _state.sent();
                                    return [
                                        3,
                                        4
                                    ];
                                case 3:
                                    error2 = _state.sent();
                                    l.error(error2);
                                    return [
                                        3,
                                        4
                                    ];
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return function(id2) {
                        return _ref.apply(this, arguments);
                    };
                }())).catch(l.error);
            }
        });
        Object.defineProperty(this, _timeoutHandlers, {
            writable: true,
            value: function() {
                var now = Date.now();
                var ids = Object.keys(_classPrivateFieldBase(_this, _handlers)[_handlers]);
                for(var i = 0; i < ids.length; i++){
                    var handler = _classPrivateFieldBase(_this, _handlers)[_handlers][ids[i]];
                    if (now - handler.start > _classPrivateFieldBase(_this, _timeout)[_timeout]) {
                        try {
                            handler.callback(new Error("No response received from RPC endpoint in ".concat(_classPrivateFieldBase(_this, _timeout)[_timeout] / 1e3, "s")), void 0);
                        } catch (e) {}
                        _classPrivateFieldBase(_this, _stats)[_stats].total.timeout++;
                        delete _classPrivateFieldBase(_this, _handlers)[_handlers][ids[i]];
                    }
                }
            }
        });
        var endpoints = Array.isArray(endpoint) ? endpoint : [
            endpoint
        ];
        if (endpoints.length === 0) {
            throw new Error("WsProvider requires at least one Endpoint");
        }
        endpoints.forEach(function(endpoint2) {
            if (!/^(wss|ws):\/\//.test(endpoint2)) {
                throw new Error("Endpoint should start with 'ws://', received '".concat(endpoint2, "'"));
            }
        });
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter] = new eventemitter3_default();
        _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
        _classPrivateFieldBase(this, _coder)[_coder] = new RpcCoder();
        _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = -1;
        _classPrivateFieldBase(this, _endpoints)[_endpoints] = endpoints;
        _classPrivateFieldBase(this, _headers)[_headers] = headers;
        _classPrivateFieldBase(this, _websocket)[_websocket] = null;
        _classPrivateFieldBase(this, _stats)[_stats] = {
            active: {
                requests: 0,
                subscriptions: 0
            },
            total: {
                bytesRecv: 0,
                bytesSent: 0,
                cached: 0,
                errors: 0,
                requests: 0,
                subscriptions: 0,
                timeout: 0
            }
        };
        _classPrivateFieldBase(this, _timeout)[_timeout] = timeout || DEFAULT_TIMEOUT_MS;
        if (autoConnectMs > 0) {
            this.connectWithRetry().catch(function() {});
        }
        _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(function(resolve) {
            _classPrivateFieldBase(_this, _eventemitter)[_eventemitter].once("connected", function() {
                resolve(_this);
            });
        });
    }
    _create_class(WsProvider1, [
        {
            key: "hasSubscriptions",
            get: /**
   * @summary `true` when this provider supports subscriptions
   */ function get() {
                return true;
            }
        },
        {
            key: "isClonable",
            get: /**
   * @summary `true` when this provider supports clone()
   */ function get() {
                return true;
            }
        },
        {
            key: "isConnected",
            get: /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */ function get() {
                return _classPrivateFieldBase(this, _isConnected)[_isConnected];
            }
        },
        {
            key: "isReady",
            get: /**
   * @description Promise that resolves the first time we are connected and loaded
   */ function get() {
                return _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise];
            }
        },
        {
            /**
   * @description Returns a clone of the object
   */ key: "clone",
            value: function clone() {
                return new WsProvider(_classPrivateFieldBase(this, _endpoints)[_endpoints]);
            }
        },
        {
            key: "connect",
            value: /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */ // eslint-disable-next-line @typescript-eslint/require-await
            function connect() {
                var _this = this;
                return _async_to_generator(function() {
                    return __generator(this, function(_state) {
                        if (_classPrivateFieldBase(_this, _websocket)[_websocket]) {
                            throw new Error("WebSocket is already connected");
                        }
                        try {
                            _classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldBase(_this, _endpoints)[_endpoints].length;
                            _classPrivateFieldBase(_this, _websocket)[_websocket] = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(_classPrivateFieldBase(_this, _endpoints)[_endpoints][_classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex]]) : new WebSocket(_classPrivateFieldBase(_this, _endpoints)[_endpoints][_classPrivateFieldBase(_this, _endpointIndex)[_endpointIndex]], void 0, void 0, _classPrivateFieldBase(_this, _headers)[_headers], void 0, {
                                // default: true
                                fragmentOutgoingMessages: true,
                                // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)
                                fragmentationThreshold: 1 * MEGABYTE,
                                // default: 1MiB (also align with maxReceivedMessageSize)
                                maxReceivedFrameSize: 24 * MEGABYTE,
                                // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that, 16M is ok there)
                                maxReceivedMessageSize: 24 * MEGABYTE
                            });
                            if (_classPrivateFieldBase(_this, _websocket)[_websocket]) {
                                _classPrivateFieldBase(_this, _websocket)[_websocket].onclose = _classPrivateFieldBase(_this, _onSocketClose)[_onSocketClose];
                                _classPrivateFieldBase(_this, _websocket)[_websocket].onerror = _classPrivateFieldBase(_this, _onSocketError)[_onSocketError];
                                _classPrivateFieldBase(_this, _websocket)[_websocket].onmessage = _classPrivateFieldBase(_this, _onSocketMessage)[_onSocketMessage];
                                _classPrivateFieldBase(_this, _websocket)[_websocket].onopen = _classPrivateFieldBase(_this, _onSocketOpen)[_onSocketOpen];
                            }
                            _classPrivateFieldBase(_this, _timeoutId)[_timeoutId] = setInterval(function() {
                                return _classPrivateFieldBase(_this, _timeoutHandlers)[_timeoutHandlers]();
                            }, TIMEOUT_INTERVAL);
                        } catch (error2) {
                            l.error(error2);
                            _classPrivateFieldBase(_this, _emit)[_emit]("error", error2);
                            throw error2;
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "connectWithRetry",
            value: /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */ function connectWithRetry() {
                var _this = this;
                return _async_to_generator(function() {
                    var error2;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!(_classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs] > 0)) return [
                                    3,
                                    4
                                ];
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    3,
                                    ,
                                    4
                                ]);
                                return [
                                    4,
                                    _this.connect()
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    3,
                                    4
                                ];
                            case 3:
                                error2 = _state.sent();
                                setTimeout(function() {
                                    _this.connectWithRetry().catch(function() {});
                                }, _classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs]);
                                return [
                                    3,
                                    4
                                ];
                            case 4:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "disconnect",
            value: /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */ // eslint-disable-next-line @typescript-eslint/require-await
            function disconnect() {
                var _this = this;
                return _async_to_generator(function() {
                    return __generator(this, function(_state) {
                        _classPrivateFieldBase(_this, _autoConnectMs)[_autoConnectMs] = 0;
                        try {
                            if (_classPrivateFieldBase(_this, _websocket)[_websocket]) {
                                _classPrivateFieldBase(_this, _websocket)[_websocket].close(1e3);
                            }
                        } catch (error2) {
                            l.error(error2);
                            _classPrivateFieldBase(_this, _emit)[_emit]("error", error2);
                            throw error2;
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "stats",
            get: /**
   * @description Returns the connection stats
   */ function get() {
                return {
                    active: {
                        requests: Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]).length,
                        subscriptions: Object.keys(_classPrivateFieldBase(this, _subscriptions)[_subscriptions]).length
                    },
                    total: _classPrivateFieldBase(this, _stats)[_stats].total
                };
            }
        },
        {
            /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */ key: "on",
            value: function on(type, sub) {
                var _this = this;
                _classPrivateFieldBase(this, _eventemitter)[_eventemitter].on(type, sub);
                return function() {
                    _classPrivateFieldBase(_this, _eventemitter)[_eventemitter].removeListener(type, sub);
                };
            }
        },
        {
            /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */ key: "send",
            value: function send(method, params, isCacheable, subscription) {
                _classPrivateFieldBase(this, _stats)[_stats].total.requests++;
                var _classPrivateFieldBase__coder_encodeJson = _sliced_to_array(_classPrivateFieldBase(this, _coder)[_coder].encodeJson(method, params), 2), id2 = _classPrivateFieldBase__coder_encodeJson[0], body = _classPrivateFieldBase__coder_encodeJson[1];
                var resultPromise = isCacheable ? _classPrivateFieldBase(this, _callCache)[_callCache].get(body) : null;
                if (!resultPromise) {
                    resultPromise = _classPrivateFieldBase(this, _send)[_send](id2, body, method, params, subscription);
                    if (isCacheable) {
                        _classPrivateFieldBase(this, _callCache)[_callCache].set(body, resultPromise);
                    }
                } else {
                    _classPrivateFieldBase(this, _stats)[_stats].total.cached++;
                }
                return resultPromise;
            }
        },
        {
            /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */ key: "subscribe",
            value: function subscribe(type, method, params, callback) {
                _classPrivateFieldBase(this, _stats)[_stats].total.subscriptions++;
                return this.send(method, params, false, {
                    callback: callback,
                    type: type
                });
            }
        },
        {
            key: "unsubscribe",
            value: /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */ function unsubscribe(type, method, id2) {
                var _this = this;
                return _async_to_generator(function() {
                    var subscription;
                    return __generator(this, function(_state) {
                        subscription = "".concat(type, "::").concat(id2);
                        if (isUndefined(_classPrivateFieldBase(_this, _subscriptions)[_subscriptions][subscription])) {
                            l.debug(function() {
                                return "Unable to find active subscription=".concat(subscription);
                            });
                            return [
                                2,
                                false
                            ];
                        }
                        delete _classPrivateFieldBase(_this, _subscriptions)[_subscriptions][subscription];
                        try {
                            return [
                                2,
                                _this.isConnected && !isNull(_classPrivateFieldBase(_this, _websocket)[_websocket]) ? _this.send(method, [
                                    id2
                                ]) : true
                            ];
                        } catch (error2) {
                            return [
                                2,
                                false
                            ];
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        }
    ]);
    return WsProvider1;
}();
function _send2(id2, body, method, params, subscription) {
    return __send2.apply(this, arguments);
}
function __send2() {
    __send2 = _async_to_generator(function(id2, body, method, params, subscription) {
        var _this;
        return __generator(this, function(_state) {
            _this = this;
            return [
                2,
                new Promise(function(resolve, reject) {
                    try {
                        if (!_this.isConnected || _classPrivateFieldBase(_this, _websocket)[_websocket] === null) {
                            throw new Error("WebSocket is not connected");
                        }
                        var callback = function(error2, result) {
                            error2 ? reject(error2) : resolve(result);
                        };
                        l.debug(function() {
                            return [
                                "calling",
                                method,
                                body
                            ];
                        });
                        _classPrivateFieldBase(_this, _handlers)[_handlers][id2] = {
                            callback: callback,
                            method: method,
                            params: params,
                            start: Date.now(),
                            subscription: subscription
                        };
                        _classPrivateFieldBase(_this, _stats)[_stats].total.bytesSent += body.length;
                        _classPrivateFieldBase(_this, _websocket)[_websocket].send(body);
                    } catch (error2) {
                        _classPrivateFieldBase(_this, _stats)[_stats].total.errors++;
                        reject(error2);
                    }
                })
            ];
        });
    });
    return __send2.apply(this, arguments);
}
// ../../node_modules/@polkadot/api/submittable/createClass.js
var import_rxjs86 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/accounts/index.js
var accounts_exports = {};
__export(accounts_exports, {
    _flags: function() {
        return _flags;
    },
    _identity: function() {
        return _identity;
    },
    accountId: function() {
        return accountId;
    },
    flags: function() {
        return flags;
    },
    hasIdentity: function() {
        return hasIdentity;
    },
    hasIdentityMulti: function() {
        return hasIdentityMulti;
    },
    idAndIndex: function() {
        return idAndIndex;
    },
    idToIndex: function() {
        return idToIndex;
    },
    identity: function() {
        return identity;
    },
    indexToId: function() {
        return indexToId;
    },
    indexes: function() {
        return indexes;
    },
    info: function() {
        return info;
    }
});
// ../../node_modules/@polkadot/api-derive/accounts/accountId.js
var import_rxjs6 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/rpc-core/bundle.js
var import_rxjs4 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/types/interfaces/definitions.js
var definitions_exports = {};
__export(definitions_exports, {
    assets: function() {
        return definitions_default4;
    },
    attestations: function() {
        return definitions_default47;
    },
    aura: function() {
        return definitions_default6;
    },
    author: function() {
        return definitions_default63;
    },
    authorship: function() {
        return definitions_default5;
    },
    babe: function() {
        return definitions_default7;
    },
    balances: function() {
        return definitions_default8;
    },
    beefy: function() {
        return definitions_default9;
    },
    benchmark: function() {
        return definitions_default10;
    },
    blockbuilder: function() {
        return definitions_default11;
    },
    bridges: function() {
        return definitions_default48;
    },
    chain: function() {
        return definitions_default64;
    },
    childstate: function() {
        return definitions_default65;
    },
    claims: function() {
        return definitions_default49;
    },
    collective: function() {
        return definitions_default12;
    },
    consensus: function() {
        return definitions_default13;
    },
    contracts: function() {
        return definitions_default14;
    },
    contractsAbi: function() {
        return definitions_default57;
    },
    crowdloan: function() {
        return definitions_default50;
    },
    cumulus: function() {
        return definitions_default51;
    },
    democracy: function() {
        return definitions_default15;
    },
    dev: function() {
        return definitions_default16;
    },
    discovery: function() {
        return definitions_default17;
    },
    elections: function() {
        return definitions_default18;
    },
    engine: function() {
        return definitions_default19;
    },
    eth: function() {
        return definitions_default58;
    },
    evm: function() {
        return definitions_default20;
    },
    extrinsics: function() {
        return definitions_default21;
    },
    finality: function() {
        return definitions_default52;
    },
    genericAsset: function() {
        return definitions_default22;
    },
    gilt: function() {
        return definitions_default23;
    },
    grandpa: function() {
        return definitions_default24;
    },
    identity: function() {
        return definitions_default25;
    },
    imOnline: function() {
        return definitions_default26;
    },
    lottery: function() {
        return definitions_default27;
    },
    metadata: function() {
        return definitions_default;
    },
    mmr: function() {
        return definitions_default28;
    },
    nimbus: function() {
        return definitions_default59;
    },
    nompools: function() {
        return definitions_default29;
    },
    offchain: function() {
        return definitions_default66;
    },
    offences: function() {
        return definitions_default30;
    },
    ormlOracle: function() {
        return definitions_default60;
    },
    ormlTokens: function() {
        return definitions_default61;
    },
    parachains: function() {
        return definitions_default53;
    },
    payment: function() {
        return definitions_default67;
    },
    poll: function() {
        return definitions_default54;
    },
    pow: function() {
        return definitions_default31;
    },
    proxy: function() {
        return definitions_default32;
    },
    purchase: function() {
        return definitions_default55;
    },
    recovery: function() {
        return definitions_default33;
    },
    rpc: function() {
        return definitions_default62;
    },
    runtime: function() {
        return definitions_default2;
    },
    scaleInfo: function() {
        return definitions_default3;
    },
    scheduler: function() {
        return definitions_default34;
    },
    session: function() {
        return definitions_default35;
    },
    society: function() {
        return definitions_default36;
    },
    staking: function() {
        return definitions_default37;
    },
    state: function() {
        return definitions_default68;
    },
    support: function() {
        return definitions_default38;
    },
    syncstate: function() {
        return definitions_default39;
    },
    system: function() {
        return definitions_default40;
    },
    treasury: function() {
        return definitions_default41;
    },
    txpayment: function() {
        return definitions_default42;
    },
    txqueue: function() {
        return definitions_default43;
    },
    uniques: function() {
        return definitions_default44;
    },
    utility: function() {
        return definitions_default45;
    },
    vesting: function() {
        return definitions_default46;
    },
    xcm: function() {
        return definitions_default56;
    }
});
// ../../node_modules/@polkadot/types/interfaces/metadata/hashers.js
var AllHashers = {
    Blake2_128: null,
    // eslint-disable-line camelcase
    Blake2_256: null,
    // eslint-disable-line camelcase
    Blake2_128Concat: null,
    // eslint-disable-line camelcase
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
};
// ../../node_modules/@polkadot/types/interfaces/metadata/runtime.js
var runtime = {
    Metadata: [
        {
            methods: {
                metadata: {
                    description: "Returns the metadata of a runtime",
                    params: [],
                    type: "OpaqueMetadata"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v9.js
var v9 = {
    // v9
    ErrorMetadataV9: {
        name: "Text",
        docs: "Vec<Text>"
    },
    EventMetadataV9: {
        name: "Text",
        args: "Vec<Type>",
        docs: "Vec<Text>"
    },
    FunctionArgumentMetadataV9: {
        name: "Text",
        type: "Type"
    },
    FunctionMetadataV9: {
        name: "Text",
        args: "Vec<FunctionArgumentMetadataV9>",
        docs: "Vec<Text>"
    },
    MetadataV9: {
        modules: "Vec<ModuleMetadataV9>"
    },
    ModuleConstantMetadataV9: {
        name: "Text",
        type: "Type",
        value: "Bytes",
        docs: "Vec<Text>"
    },
    ModuleMetadataV9: {
        name: "Text",
        storage: "Option<StorageMetadataV9>",
        calls: "Option<Vec<FunctionMetadataV9>>",
        events: "Option<Vec<EventMetadataV9>>",
        constants: "Vec<ModuleConstantMetadataV9>",
        errors: "Vec<ErrorMetadataV9>"
    },
    StorageEntryMetadataV9: {
        name: "Text",
        modifier: "StorageEntryModifierV9",
        type: "StorageEntryTypeV9",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryModifierV9: {
        _enum: [
            "Optional",
            "Default",
            "Required"
        ]
    },
    StorageEntryTypeV9: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV9",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV9",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV9"
            }
        }
    },
    StorageHasherV9: {
        _enum: {
            Blake2_128: null,
            // eslint-disable-line camelcase
            Blake2_256: null,
            // eslint-disable-line camelcase
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    },
    StorageMetadataV9: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV9>"
    }
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v10.js
var v10 = {
    // v10
    ErrorMetadataV10: "ErrorMetadataV9",
    EventMetadataV10: "EventMetadataV9",
    FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
    FunctionMetadataV10: "FunctionMetadataV9",
    MetadataV10: {
        modules: "Vec<ModuleMetadataV10>"
    },
    ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
    ModuleMetadataV10: {
        name: "Text",
        storage: "Option<StorageMetadataV10>",
        calls: "Option<Vec<FunctionMetadataV10>>",
        events: "Option<Vec<EventMetadataV10>>",
        constants: "Vec<ModuleConstantMetadataV10>",
        errors: "Vec<ErrorMetadataV10>"
    },
    StorageEntryModifierV10: "StorageEntryModifierV9",
    StorageEntryMetadataV10: {
        name: "Text",
        modifier: "StorageEntryModifierV10",
        type: "StorageEntryTypeV10",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV10: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV10",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV10",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV10"
            }
        }
    },
    StorageMetadataV10: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV10>"
    },
    StorageHasherV10: {
        _enum: {
            Blake2_128: null,
            // eslint-disable-line camelcase
            Blake2_256: null,
            // eslint-disable-line camelcase
            Blake2_128Concat: null,
            // eslint-disable-line camelcase
            Twox128: null,
            Twox256: null,
            Twox64Concat: null
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v11.js
var v11 = {
    // v11
    ErrorMetadataV11: "ErrorMetadataV10",
    EventMetadataV11: "EventMetadataV10",
    ExtrinsicMetadataV11: {
        version: "u8",
        signedExtensions: "Vec<Text>"
    },
    FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
    FunctionMetadataV11: "FunctionMetadataV10",
    MetadataV11: {
        modules: "Vec<ModuleMetadataV11>",
        extrinsic: "ExtrinsicMetadataV11"
    },
    ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
    ModuleMetadataV11: {
        name: "Text",
        storage: "Option<StorageMetadataV11>",
        calls: "Option<Vec<FunctionMetadataV11>>",
        events: "Option<Vec<EventMetadataV11>>",
        constants: "Vec<ModuleConstantMetadataV11>",
        errors: "Vec<ErrorMetadataV11>"
    },
    StorageEntryModifierV11: "StorageEntryModifierV10",
    StorageEntryMetadataV11: {
        name: "Text",
        modifier: "StorageEntryModifierV11",
        type: "StorageEntryTypeV11",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV11: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV11",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV11",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV11"
            }
        }
    },
    StorageMetadataV11: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV11>"
    },
    StorageHasherV11: {
        _enum: AllHashers
    }
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v12.js
var v12 = {
    // v12
    ErrorMetadataV12: "ErrorMetadataV11",
    EventMetadataV12: "EventMetadataV11",
    ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
    FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
    FunctionMetadataV12: "FunctionMetadataV11",
    MetadataV12: {
        modules: "Vec<ModuleMetadataV12>",
        extrinsic: "ExtrinsicMetadataV12"
    },
    ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
    ModuleMetadataV12: {
        name: "Text",
        storage: "Option<StorageMetadataV12>",
        calls: "Option<Vec<FunctionMetadataV12>>",
        events: "Option<Vec<EventMetadataV12>>",
        constants: "Vec<ModuleConstantMetadataV12>",
        errors: "Vec<ErrorMetadataV12>",
        index: "u8"
    },
    StorageEntryModifierV12: "StorageEntryModifierV11",
    StorageEntryMetadataV12: "StorageEntryMetadataV11",
    StorageEntryTypeV12: "StorageEntryTypeV11",
    StorageMetadataV12: "StorageMetadataV11",
    StorageHasherV12: "StorageHasherV11"
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v13.js
var v13 = {
    // v13
    ErrorMetadataV13: "ErrorMetadataV12",
    EventMetadataV13: "EventMetadataV12",
    ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
    FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
    FunctionMetadataV13: "FunctionMetadataV12",
    MetadataV13: {
        modules: "Vec<ModuleMetadataV13>",
        extrinsic: "ExtrinsicMetadataV13"
    },
    ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
    ModuleMetadataV13: {
        name: "Text",
        storage: "Option<StorageMetadataV13>",
        calls: "Option<Vec<FunctionMetadataV13>>",
        events: "Option<Vec<EventMetadataV13>>",
        constants: "Vec<ModuleConstantMetadataV13>",
        errors: "Vec<ErrorMetadataV13>",
        index: "u8"
    },
    StorageEntryModifierV13: "StorageEntryModifierV12",
    StorageEntryMetadataV13: {
        name: "Text",
        modifier: "StorageEntryModifierV13",
        type: "StorageEntryTypeV13",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryTypeV13: {
        _enum: {
            Plain: "Type",
            Map: {
                hasher: "StorageHasherV13",
                key: "Type",
                value: "Type",
                linked: "bool"
            },
            DoubleMap: {
                hasher: "StorageHasherV13",
                key1: "Type",
                key2: "Type",
                value: "Type",
                key2Hasher: "StorageHasherV13"
            },
            NMap: {
                keyVec: "Vec<Type>",
                hashers: "Vec<StorageHasherV13>",
                value: "Type"
            }
        }
    },
    StorageMetadataV13: {
        prefix: "Text",
        items: "Vec<StorageEntryMetadataV13>"
    },
    StorageHasherV13: "StorageHasherV12"
};
// ../../node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
var Si1Variant = {
    name: "Text",
    fields: "Vec<Si1Field>",
    index: "u8",
    docs: "Vec<Text>"
};
var v1 = {
    Si1Field: {
        name: "Option<Text>",
        type: "Si1LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
    },
    Si1LookupTypeId: "Compact<u32>",
    Si1Path: "Si0Path",
    Si1Type: {
        path: "Si1Path",
        params: "Vec<Si1TypeParameter>",
        def: "Si1TypeDef",
        docs: "Vec<Text>"
    },
    Si1TypeDef: {
        _enum: {
            Composite: "Si1TypeDefComposite",
            Variant: "Si1TypeDefVariant",
            Sequence: "Si1TypeDefSequence",
            Array: "Si1TypeDefArray",
            Tuple: "Si1TypeDefTuple",
            Primitive: "Si1TypeDefPrimitive",
            Compact: "Si1TypeDefCompact",
            BitSequence: "Si1TypeDefBitSequence",
            // NOTE: This is specific to the implementation for pre-v14 metadata
            // compatibility (always keep this as the last entry in the enum)
            HistoricMetaCompat: "Type"
        }
    },
    Si1TypeDefArray: {
        len: "u32",
        type: "Si1LookupTypeId"
    },
    Si1TypeDefBitSequence: {
        bitStoreType: "Si1LookupTypeId",
        bitOrderType: "Si1LookupTypeId"
    },
    Si1TypeDefCompact: {
        type: "Si1LookupTypeId"
    },
    Si1TypeDefComposite: {
        fields: "Vec<Si1Field>"
    },
    Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
    Si1TypeDefSequence: {
        type: "Si1LookupTypeId"
    },
    Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
    Si1TypeParameter: {
        name: "Text",
        type: "Option<Si1LookupTypeId>"
    },
    Si1TypeDefVariant: {
        variants: "Vec<Si1Variant>"
    },
    Si1Variant: Si1Variant
};
// ../../node_modules/@polkadot/types/interfaces/metadata/v14.js
var v14 = {
    // registry
    PortableTypeV14: {
        id: "Si1LookupTypeId",
        type: "Si1Type"
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: objectSpread({}, Si1Variant, {
        args: "Vec<Type>"
    }),
    EventMetadataV14: objectSpread({}, Si1Variant, {
        args: "Vec<Type>"
    }),
    FunctionArgumentMetadataV14: {
        name: "Text",
        type: "Type",
        typeName: "Option<Type>"
    },
    FunctionMetadataV14: objectSpread({}, Si1Variant, {
        args: "Vec<FunctionArgumentMetadataV14>"
    }),
    // V14
    ExtrinsicMetadataV14: {
        type: "SiLookupTypeId",
        version: "u8",
        signedExtensions: "Vec<SignedExtensionMetadataV14>"
    },
    MetadataV14: {
        lookup: "PortableRegistry",
        pallets: "Vec<PalletMetadataV14>",
        extrinsic: "ExtrinsicMetadataV14",
        type: "SiLookupTypeId"
    },
    PalletCallMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletConstantMetadataV14: {
        name: "Text",
        type: "SiLookupTypeId",
        value: "Bytes",
        docs: "Vec<Text>"
    },
    PalletErrorMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletEventMetadataV14: {
        type: "SiLookupTypeId"
    },
    PalletMetadataV14: {
        name: "Text",
        storage: "Option<PalletStorageMetadataV14>",
        calls: "Option<PalletCallMetadataV14>",
        events: "Option<PalletEventMetadataV14>",
        constants: "Vec<PalletConstantMetadataV14>",
        errors: "Option<PalletErrorMetadataV14>",
        index: "u8"
    },
    PalletStorageMetadataV14: {
        prefix: "Text",
        // NOTE: Renamed from entries
        items: "Vec<StorageEntryMetadataV14>"
    },
    SignedExtensionMetadataV14: {
        identifier: "Text",
        type: "SiLookupTypeId",
        additionalSigned: "SiLookupTypeId"
    },
    StorageEntryMetadataV14: {
        name: "Text",
        modifier: "StorageEntryModifierV14",
        type: "StorageEntryTypeV14",
        fallback: "Bytes",
        docs: "Vec<Text>"
    },
    StorageEntryModifierV14: "StorageEntryModifierV13",
    StorageEntryTypeV14: {
        _enum: {
            Plain: "SiLookupTypeId",
            Map: {
                hashers: "Vec<StorageHasherV14>",
                key: "SiLookupTypeId",
                // NOTE: Renamed from "keys"
                value: "SiLookupTypeId"
            }
        }
    },
    StorageHasherV14: "StorageHasherV13"
};
// ../../node_modules/@polkadot/types/interfaces/metadata/definitions.js
var definitions_default = {
    rpc: {},
    runtime: runtime,
    types: objectSpread({}, v9, v10, v11, v12, v13, v14, {
        // latest mappings
        ErrorMetadataLatest: "ErrorMetadataV14",
        EventMetadataLatest: "EventMetadataV14",
        ExtrinsicMetadataLatest: "ExtrinsicMetadataV14",
        FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
        FunctionMetadataLatest: "FunctionMetadataV14",
        MetadataLatest: "MetadataV14",
        PalletCallMetadataLatest: "PalletCallMetadataV14",
        PalletConstantMetadataLatest: "PalletConstantMetadataV14",
        PalletErrorMetadataLatest: "PalletErrorMetadataV14",
        PalletEventMetadataLatest: "PalletEventMetadataV14",
        PalletMetadataLatest: "PalletMetadataV14",
        PalletStorageMetadataLatest: "PalletStorageMetadataV14",
        PortableType: "PortableTypeV14",
        SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
        StorageEntryMetadataLatest: "StorageEntryMetadataV14",
        StorageEntryModifierLatest: "StorageEntryModifierV14",
        StorageEntryTypeLatest: "StorageEntryTypeV14",
        StorageHasher: "StorageHasherV14",
        // additional types
        OpaqueMetadata: "Opaque<Bytes>",
        // the enum containing all the mappings
        MetadataAll: {
            _enum: {
                V0: "DoNotConstruct<MetadataV0>",
                V1: "DoNotConstruct<MetadataV1>",
                V2: "DoNotConstruct<MetadataV2>",
                V3: "DoNotConstruct<MetadataV3>",
                V4: "DoNotConstruct<MetadataV4>",
                V5: "DoNotConstruct<MetadataV5>",
                V6: "DoNotConstruct<MetadataV6>",
                V7: "DoNotConstruct<MetadataV7>",
                V8: "DoNotConstruct<MetadataV8>",
                // First version on Kusama in V9, dropping will be problematic
                V9: "MetadataV9",
                V10: "MetadataV10",
                V11: "MetadataV11",
                V12: "MetadataV12",
                V13: "MetadataV13",
                V14: "MetadataV14"
            }
        }
    })
};
// ../../node_modules/@polkadot/types/interfaces/runtime/runtime.js
var CORE_V1_TO_V4 = {
    execute_block: {
        description: "Execute the given block.",
        params: [
            {
                name: "block",
                type: "Block"
            }
        ],
        type: "Null"
    }
};
var CORE_V1_TO_V2 = {
    version: {
        description: "Returns the version of the runtime.",
        params: [],
        type: "RuntimeVersionPre3"
    }
};
var CORE_V2_TO_V4 = {
    initialize_block: {
        description: "Initialize a block with the given header.",
        params: [
            {
                name: "header",
                type: "Header"
            }
        ],
        type: "Null"
    }
};
var runtime2 = {
    Core: [
        {
            methods: objectSpread({
                version: {
                    description: "Returns the version of the runtime.",
                    params: [],
                    type: "RuntimeVersion"
                }
            }, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 4
        },
        {
            methods: objectSpread({
                version: {
                    description: "Returns the version of the runtime.",
                    params: [],
                    type: "RuntimeVersionPre4"
                }
            }, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 3
        },
        {
            methods: objectSpread({}, CORE_V1_TO_V2, CORE_V1_TO_V4, CORE_V2_TO_V4),
            version: 2
        },
        {
            methods: objectSpread({
                initialise_block: {
                    description: "Initialize a block with the given header.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "Null"
                }
            }, CORE_V1_TO_V2, CORE_V1_TO_V4),
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/runtime/definitions.js
var numberTypes = {
    Fixed64: "Int<64, Fixed64>",
    FixedI64: "Int<64, FixedI64>",
    FixedU64: "UInt<64, FixedU64>",
    Fixed128: "Int<128, Fixed128>",
    FixedI128: "Int<128, FixedI128>",
    FixedU128: "UInt<128, FixedU128>",
    I32F32: "Int<64, I32F32>",
    U32F32: "UInt<64, U32F32>",
    PerU16: "UInt<16, PerU16>",
    Perbill: "UInt<32, Perbill>",
    Percent: "UInt<8, Percent>",
    Permill: "UInt<32, Permill>",
    Perquintill: "UInt<64, Perquintill>"
};
var knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: "CollectiveOrigin",
    System: "SystemOrigin",
    TechnicalCommittee: "CollectiveOrigin",
    //
    // (2) Defaults from Polkadot
    //
    Xcm: "XcmOrigin",
    XcmPallet: "XcmOrigin",
    //
    // (3) Defaults from Acala
    //
    Authority: "AuthorityOrigin",
    GeneralCouncil: "CollectiveOrigin"
};
var definitions_default2 = {
    rpc: {},
    runtime: runtime2,
    types: objectSpread({}, numberTypes, {
        AccountId: "AccountId32",
        AccountId20: "GenericEthereumAccountId",
        AccountId32: "GenericAccountId32",
        AccountId33: "GenericAccountId33",
        AccountIdOf: "AccountId",
        AccountIndex: "GenericAccountIndex",
        Address: "MultiAddress",
        AssetId: "u32",
        Balance: "UInt<128, Balance>",
        BalanceOf: "Balance",
        Block: "GenericBlock",
        BlockNumber: "u32",
        BlockNumberFor: "BlockNumber",
        BlockNumberOf: "BlockNumber",
        Call: "GenericCall",
        CallHash: "Hash",
        CallHashOf: "CallHash",
        ChangesTrieConfiguration: {
            digestInterval: "u32",
            digestLevels: "u32"
        },
        ChangesTrieSignal: {
            _enum: {
                NewConfiguration: "Option<ChangesTrieConfiguration>"
            }
        },
        ConsensusEngineId: "GenericConsensusEngineId",
        CodecHash: "Hash",
        CrateVersion: {
            major: "u16",
            minor: "u8",
            patch: "u8"
        },
        Digest: {
            logs: "Vec<DigestItem>"
        },
        DigestItem: {
            _enum: {
                Other: "Bytes",
                // 0
                AuthoritiesChange: "Vec<AuthorityId>",
                // 1
                ChangesTrieRoot: "Hash",
                // 2
                SealV0: "SealV0",
                // 3
                Consensus: "Consensus",
                // 4
                Seal: "Seal",
                // 5
                PreRuntime: "PreRuntime",
                // 6
                ChangesTrieSignal: "ChangesTrieSignal",
                // 7
                RuntimeEnvironmentUpdated: "Null"
            }
        },
        ExtrinsicsWeight: {
            normal: "Weight",
            operational: "Weight"
        },
        H32: "[u8; 4; H32]",
        H64: "[u8; 8; H64]",
        H128: "[u8; 16; H128]",
        H160: "[u8; 20; H160]",
        H256: "[u8; 32; H256]",
        H512: "[u8; 64; H512]",
        H1024: "[u8; 128; H1024]",
        H2048: "[u8; 256; H2048]",
        Hash: "H256",
        Header: {
            parentHash: "Hash",
            number: "Compact<BlockNumber>",
            stateRoot: "Hash",
            extrinsicsRoot: "Hash",
            digest: "Digest"
        },
        HeaderPartial: {
            parentHash: "Hash",
            // since we only parse JSON with this, having non-compact works
            number: "BlockNumber"
        },
        IndicesLookupSource: "GenericLookupSource",
        Index: "u32",
        Justification: "(ConsensusEngineId, EncodedJustification)",
        EncodedJustification: "Bytes",
        Justifications: "Vec<Justification>",
        KeyValue: "(StorageKey, StorageData)",
        KeyTypeId: "u32",
        LockIdentifier: "[u8; 8]",
        LookupSource: "MultiAddress",
        LookupTarget: "AccountId",
        ModuleId: "LockIdentifier",
        MultiAddress: "GenericMultiAddress",
        MultiSigner: {
            _enum: {
                Ed25519: "[u8; 32]",
                Sr25519: "[u8; 32]",
                Ecdsa: "[u8; 33]"
            }
        },
        Moment: "UInt<64, Moment>",
        OpaqueCall: "Bytes",
        Origin: "DoNotConstruct<Origin>",
        OriginCaller: {
            _enum: {
                // this should be dynamically built from the actual modules, based on index
                System: "SystemOrigin"
            }
        },
        PalletId: "LockIdentifier",
        PalletsOrigin: "OriginCaller",
        PalletVersion: {
            major: "u16",
            minor: "u8",
            patch: "u8"
        },
        Pays: {
            _enum: [
                "Yes",
                "No"
            ]
        },
        Phantom: "Null",
        PhantomData: "Null",
        Releases: {
            _enum: [
                "V1",
                "V2",
                "V3",
                "V4",
                "V5",
                "V6",
                "V7",
                "V8",
                "V9",
                "V10"
            ]
        },
        RuntimeCall: "Call",
        RuntimeEvent: "Event",
        RuntimeDbWeight: {
            read: "Weight",
            write: "Weight"
        },
        SignedBlock: "SignedBlockWithJustifications",
        SignedBlockWithJustification: {
            block: "Block",
            justification: "Option<EncodedJustification>"
        },
        SignedBlockWithJustifications: {
            block: "Block",
            justifications: "Option<Justifications>"
        },
        Slot: "u64",
        SlotDuration: "u64",
        StorageData: "Bytes",
        StorageInfo: {
            palletName: "Bytes",
            storage_name: "Bytes",
            prefix: "Bytes",
            maxValues: "Option<u32>",
            maxSize: "Option<u32>"
        },
        StorageProof: {
            trieNodes: "Vec<Bytes>"
        },
        TransactionPriority: "u64",
        TransactionLongevity: "u64",
        TransactionTag: "Bytes",
        TransactionInfo: {
            _alias: {
                dataSize: "size"
            },
            chunkRoot: "H256",
            contentHash: "H256",
            dataSize: "u32",
            blockChunks: "u32"
        },
        TransactionStorageProof: {
            chunk: "Vec<u8>",
            proof: "Vec<Vec<u8>>"
        },
        ValidatorId: "AccountId",
        ValidatorIdOf: "ValidatorId",
        WeightV0: "u32",
        WeightV1: "u64",
        WeightV2: {
            refTime: "Compact<u64>",
            proofSize: "Compact<u64>"
        },
        Weight: "WeightV2",
        WeightMultiplier: "Fixed64",
        // digest
        PreRuntime: "(ConsensusEngineId, Bytes)",
        SealV0: "(u64, Signature)",
        Seal: "(ConsensusEngineId, Bytes)",
        Consensus: "(ConsensusEngineId, Bytes)"
    })
};
// ../../node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
var v0 = {
    Si0Field: {
        name: "Option<Text>",
        type: "Si0LookupTypeId",
        typeName: "Option<Text>",
        docs: "Vec<Text>"
    },
    Si0LookupTypeId: "u32",
    Si0Path: "Vec<Text>",
    Si0Type: {
        path: "Si0Path",
        params: "Vec<Si0LookupTypeId>",
        def: "Si0TypeDef"
    },
    Si0TypeDef: {
        _enum: {
            Composite: "Si0TypeDefComposite",
            Variant: "Si0TypeDefVariant",
            Sequence: "Si0TypeDefSequence",
            Array: "Si0TypeDefArray",
            Tuple: "Si0TypeDefTuple",
            Primitive: "Si0TypeDefPrimitive",
            Compact: "Si0TypeDefCompact",
            Phantom: "Si0TypeDefPhantom",
            BitSequence: "Si0TypeDefBitSequence"
        }
    },
    Si0TypeDefArray: {
        len: "u32",
        type: "Si0LookupTypeId"
    },
    Si0TypeDefBitSequence: {
        bitStoreType: "Si0LookupTypeId",
        bitOrderType: "Si0LookupTypeId"
    },
    Si0TypeDefCompact: {
        type: "Si0LookupTypeId"
    },
    Si0TypeDefComposite: {
        fields: "Vec<Si0Field>"
    },
    Si0TypeDefPhantom: "Null",
    Si0TypeDefVariant: {
        variants: "Vec<Si0Variant>"
    },
    Si0TypeDefPrimitive: {
        _enum: [
            "Bool",
            "Char",
            "Str",
            "U8",
            "U16",
            "U32",
            "U64",
            "U128",
            "U256",
            "I8",
            "I16",
            "I32",
            "I64",
            "I128",
            "I256"
        ]
    },
    Si0TypeDefSequence: {
        type: "Si0LookupTypeId"
    },
    Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
    Si0TypeParameter: {
        name: "Text",
        type: "Option<Si0LookupTypeId>"
    },
    Si0Variant: {
        name: "Text",
        fields: "Vec<Si0Field>",
        index: "Option<u8>",
        discriminant: "Option<u64>",
        docs: "Vec<Text>"
    }
};
// ../../node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
var definitions_default3 = {
    rpc: {},
    types: objectSpread({}, v0, v1, {
        // latest mappings
        SiField: "Si1Field",
        SiLookupTypeId: "Si1LookupTypeId",
        SiPath: "Si1Path",
        SiType: "Si1Type",
        SiTypeDef: "Si1TypeDef",
        SiTypeDefArray: "Si1TypeDefArray",
        SiTypeDefBitSequence: "Si1TypeDefBitSequence",
        SiTypeDefCompact: "Si1TypeDefCompact",
        SiTypeDefComposite: "Si1TypeDefComposite",
        SiTypeDefPrimitive: "Si1TypeDefPrimitive",
        SiTypeDefSequence: "Si1TypeDefSequence",
        SiTypeDefTuple: "Si1TypeDefTuple",
        SiTypeParameter: "Si1TypeParameter",
        SiTypeDefVariant: "Si1TypeDefVariant",
        SiVariant: "Si1Variant"
    })
};
// ../../node_modules/@polkadot/types/interfaces/assets/definitions.js
var definitions_default4 = {
    rpc: {},
    types: {
        AssetApprovalKey: {
            owner: "AccountId",
            delegate: "AccountId"
        },
        AssetApproval: {
            amount: "TAssetBalance",
            deposit: "TAssetDepositBalance"
        },
        AssetBalance: {
            balance: "TAssetBalance",
            isFrozen: "bool",
            isSufficient: "bool"
        },
        AssetDestroyWitness: {
            accounts: "Compact<u32>",
            sufficients: "Compact<u32>",
            approvals: "Compact<u32>"
        },
        AssetDetails: {
            owner: "AccountId",
            issuer: "AccountId",
            admin: "AccountId",
            freezer: "AccountId",
            supply: "TAssetBalance",
            deposit: "TAssetDepositBalance",
            minBalance: "TAssetBalance",
            isSufficient: "bool",
            accounts: "u32",
            sufficients: "u32",
            approvals: "u32",
            isFrozen: "bool"
        },
        AssetMetadata: {
            deposit: "TAssetDepositBalance",
            name: "Vec<u8>",
            symbol: "Vec<u8>",
            decimals: "u8",
            isFrozen: "bool"
        },
        TAssetBalance: "u64",
        TAssetDepositBalance: "BalanceOf"
    }
};
// ../../node_modules/@polkadot/types/interfaces/authorship/definitions.js
var definitions_default5 = {
    rpc: {},
    types: {
        UncleEntryItem: {
            _enum: {
                InclusionHeight: "BlockNumber",
                Uncle: "(Hash, Option<AccountId>)"
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/aura/runtime.js
var runtime3 = {
    AuraApi: [
        {
            methods: {
                authorities: {
                    description: "Return the current set of authorities.",
                    params: [],
                    type: "Vec<AuthorityId>"
                },
                slot_duration: {
                    description: "Returns the slot duration for Aura.",
                    params: [],
                    type: "SlotDuration"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/aura/definitions.js
var definitions_default6 = {
    rpc: {},
    runtime: runtime3,
    types: {
        RawAuraPreDigest: {
            slotNumber: "u64"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/babe/rpc.js
var rpc = {
    epochAuthorship: {
        description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
        params: [],
        type: "HashMap<AuthorityId, EpochAuthorship>"
    }
};
// ../../node_modules/@polkadot/types/interfaces/babe/runtime.js
var V1_V2_SHARED = {
    current_epoch: {
        description: "Returns information regarding the current epoch.",
        params: [],
        type: "Epoch"
    },
    current_epoch_start: {
        description: "Returns the slot that started the current epoch.",
        params: [],
        type: "Slot"
    },
    generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the current epoch.",
        params: [
            {
                name: "slot",
                type: "Slot"
            },
            {
                name: "authorityId",
                type: "AuthorityId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    next_epoch: {
        description: "Returns information regarding the next epoch (which was already previously announced).",
        params: [],
        type: "Epoch"
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
            {
                name: "equivocationProof",
                type: "BabeEquivocationProof"
            },
            {
                name: "keyOwnerProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    }
};
var runtime4 = {
    BabeApi: [
        {
            methods: objectSpread({
                configuration: {
                    description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
                    params: [],
                    type: "BabeGenesisConfiguration"
                }
            }, V1_V2_SHARED),
            version: 2
        },
        {
            methods: objectSpread({
                configuration: {
                    description: "Return the configuration for BABE. Version 1.",
                    params: [],
                    type: "BabeGenesisConfigurationV1"
                }
            }, V1_V2_SHARED),
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/babe/definitions.js
var definitions_default7 = {
    rpc: rpc,
    runtime: runtime4,
    types: {
        AllowedSlots: {
            _enum: [
                "PrimarySlots",
                "PrimaryAndSecondaryPlainSlots",
                "PrimaryAndSecondaryVRFSlots"
            ]
        },
        BabeAuthorityWeight: "u64",
        BabeEpochConfiguration: {
            c: "(u64, u64)",
            allowedSlots: "AllowedSlots"
        },
        BabeBlockWeight: "u32",
        BabeEquivocationProof: {
            offender: "AuthorityId",
            slotNumber: "SlotNumber",
            firstHeader: "Header",
            secondHeader: "Header"
        },
        BabeGenesisConfiguration: {
            slotDuration: "u64",
            epochLength: "u64",
            c: "(u64, u64)",
            genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Randomness",
            allowedSlots: "AllowedSlots"
        },
        BabeGenesisConfigurationV1: {
            slotDuration: "u64",
            epochLength: "u64",
            c: "(u64, u64)",
            genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Randomness",
            secondarySlots: "bool"
        },
        BabeWeight: "u64",
        MaybeRandomness: "Option<Randomness>",
        MaybeVrf: "Option<VrfData>",
        Epoch: {
            epochIndex: "u64",
            startSlot: "Slot",
            duration: "u64",
            authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
            randomness: "Hash",
            // [u8; VRF_OUTPUT_LENGTH],
            config: "BabeEpochConfiguration"
        },
        EpochAuthorship: {
            primary: "Vec<u64>",
            secondary: "Vec<u64>",
            secondary_vrf: "Vec<u64>"
        },
        NextConfigDescriptor: {
            _enum: {
                V0: "Null",
                V1: "NextConfigDescriptorV1"
            }
        },
        NextConfigDescriptorV1: {
            c: "(u64, u64)",
            allowedSlots: "AllowedSlots"
        },
        OpaqueKeyOwnershipProof: "Bytes",
        Randomness: "Hash",
        // [u8; RANDOMNESS_LENGTH],
        RawBabePreDigest: {
            _enum: {
                Phantom: "Null",
                // index starts at 1... empty slot at 0
                Primary: "RawBabePreDigestPrimary",
                SecondaryPlain: "RawBabePreDigestSecondaryPlain",
                SecondaryVRF: "RawBabePreDigestSecondaryVRF"
            }
        },
        RawBabePreDigestPrimary: {
            authorityIndex: "u32",
            // AuthorityIndex (also in aura)
            slotNumber: "SlotNumber",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryPlain: {
            authorityIndex: "u32",
            // AuthorityIndex (also in aura)
            slotNumber: "SlotNumber"
        },
        RawBabePreDigestSecondaryVRF: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestTo159: {
            _enum: {
                Primary: "RawBabePreDigestPrimaryTo159",
                Secondary: "RawBabePreDigestSecondaryTo159"
            }
        },
        RawBabePreDigestPrimaryTo159: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            weight: "BabeBlockWeight",
            vrfOutput: "VrfOutput",
            vrfProof: "VrfProof"
        },
        RawBabePreDigestSecondaryTo159: {
            authorityIndex: "u32",
            slotNumber: "SlotNumber",
            weight: "BabeBlockWeight"
        },
        // a cross old/new compatible version of the digest, that is _only_ useful
        // for partial parsing and extraction of the author. This assumes that all
        // entries has the authorityIndex in the first position - and that it is all
        // we are interested in
        RawBabePreDigestCompat: {
            _enum: {
                Zero: "u32",
                One: "u32",
                Two: "u32",
                Three: "u32"
            }
        },
        SlotNumber: "u64",
        VrfData: "[u8; 32]",
        VrfOutput: "[u8; 32]",
        VrfProof: "[u8; 64]"
    }
};
// ../../node_modules/@polkadot/types/interfaces/balances/definitions.js
var definitions_default8 = {
    rpc: {},
    types: {
        AccountData: {
            free: "Balance",
            reserved: "Balance",
            miscFrozen: "Balance",
            feeFrozen: "Balance"
        },
        BalanceLockTo212: {
            id: "LockIdentifier",
            amount: "Balance",
            until: "BlockNumber",
            reasons: "WithdrawReasons"
        },
        BalanceLock: {
            id: "LockIdentifier",
            amount: "Balance",
            reasons: "Reasons"
        },
        BalanceStatus: {
            _enum: [
                "Free",
                "Reserved"
            ]
        },
        Reasons: {
            _enum: [
                "Fee",
                "Misc",
                "All"
            ]
        },
        ReserveData: {
            id: "ReserveIdentifier",
            amount: "Balance"
        },
        ReserveIdentifier: "[u8; 8]",
        VestingSchedule: {
            offset: "Balance",
            perBlock: "Balance",
            startingBlock: "BlockNumber"
        },
        WithdrawReasons: {
            _set: {
                TransactionPayment: 1,
                Transfer: 2,
                Reserve: 4,
                Fee: 8,
                Tip: 16
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/beefy/rpc.js
var rpc2 = {
    getFinalizedHead: {
        description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
        params: [],
        type: "H256"
    },
    subscribeJustifications: {
        description: "Returns the block most recently finalized by BEEFY, alongside side its justification.",
        params: [],
        pubsub: [
            "justifications",
            "subscribeJustifications",
            "unsubscribeJustifications"
        ],
        type: "BeefySignedCommitment"
    }
};
// ../../node_modules/@polkadot/types/interfaces/beefy/runtime.js
var runtime5 = {
    BeefyApi: [
        {
            methods: {
                validator_set: {
                    description: "Return the current active BEEFY validator set",
                    params: [],
                    type: "Option<ValidatorSet>"
                }
            },
            version: 1
        }
    ],
    BeefyMmrApi: [
        {
            methods: {
                authority_set_proof: {
                    description: "Return the currently active BEEFY authority set proof.",
                    params: [],
                    type: "BeefyAuthoritySet"
                },
                next_authority_set_proof: {
                    description: "Return the next/queued BEEFY authority set proof.",
                    params: [],
                    type: "BeefyNextAuthoritySet"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/beefy/definitions.js
var definitions_default9 = {
    rpc: rpc2,
    runtime: runtime5,
    types: {
        BeefyAuthoritySet: {
            id: "u64",
            len: "u32",
            root: "H256"
        },
        BeefyCommitment: {
            payload: "BeefyPayload",
            blockNumber: "BlockNumber",
            validatorSetId: "ValidatorSetId"
        },
        BeefyId: "[u8; 33]",
        BeefySignedCommitment: {
            commitment: "BeefyCommitment",
            signatures: "Vec<Option<EcdsaSignature>>"
        },
        BeefyNextAuthoritySet: {
            id: "u64",
            len: "u32",
            root: "H256"
        },
        BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
        BeefyPayloadId: "[u8;2]",
        MmrRootHash: "H256",
        ValidatorSetId: "u64",
        ValidatorSet: {
            validators: "Vec<AuthorityId>",
            id: "ValidatorSetId"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/benchmark/runtime.js
var runtime6 = {
    Benchmark: [
        {
            methods: {
                benchmark_metadata: {
                    description: "Get the benchmark metadata available for this runtime.",
                    params: [
                        {
                            name: "extra",
                            type: "bool"
                        }
                    ],
                    type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
                },
                dispatch_benchmark: {
                    description: "Dispatch the given benchmark.",
                    params: [
                        {
                            name: "config",
                            type: "BenchmarkConfig"
                        }
                    ],
                    type: "Result<Vec<BenchmarkBatch>, Text>"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/benchmark/definitions.js
var definitions_default10 = {
    rpc: {},
    runtime: runtime6,
    types: {
        BenchmarkBatch: {
            pallet: "Text",
            instance: "Text",
            benchmark: "Text",
            results: "Vec<BenchmarkResult>"
        },
        BenchmarkConfig: {
            pallet: "Bytes",
            benchmark: "Bytes",
            selectedComponents: "Vec<(BenchmarkParameter, u32)>",
            verify: "bool",
            internalRepeats: "u32"
        },
        BenchmarkList: {
            pallet: "Bytes",
            instance: "Bytes",
            benchmarks: "Vec<BenchmarkMetadata>"
        },
        BenchmarkMetadata: {
            name: "Bytes",
            components: "Vec<(BenchmarkParameter, u32, u32)>"
        },
        BenchmarkParameter: {
            _enum: [
                "a",
                "b",
                "c",
                "d",
                "e",
                "f",
                "g",
                "h",
                "i",
                "j",
                "k",
                "l",
                "m",
                "n",
                "o",
                "p",
                "q",
                "r",
                "s",
                "t",
                "u",
                "v",
                "w",
                "x",
                "y",
                "z"
            ]
        },
        BenchmarkResult: {
            components: "Vec<(BenchmarkParameter, u32)>",
            extrinsicTime: "u128",
            storageRootTime: "u128",
            reads: "u32",
            repeatReads: "u32",
            writes: "u32",
            repeatWrites: "u32",
            proofSize: "u32",
            benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
var BB_V2_TO_V4 = {
    // this was removed after V4
    random_seed: {
        description: "Generate a random seed.",
        params: [],
        type: "Hash"
    }
};
var BB_V2_TO_V5 = {
    apply_extrinsic: {
        description: "Apply the given extrinsic.",
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        type: "ApplyExtrinsicResultPre6"
    }
};
var BB_V2_TO_V6 = {
    check_inherents: {
        description: "Check that the inherents are valid.",
        params: [
            {
                name: "block",
                type: "Block"
            },
            {
                name: "data",
                type: "InherentData"
            }
        ],
        type: "CheckInherentsResult"
    },
    inherent_extrinsics: {
        description: "Generate inherent extrinsics.",
        params: [
            {
                name: "inherent",
                type: "InherentData"
            }
        ],
        type: "Vec<Extrinsic>"
    }
};
var BB_V3_TO_V6 = {
    // renamed in v3 from finalize_block
    finalize_block: {
        description: "Finish the current block.",
        params: [],
        type: "Header"
    }
};
var runtime7 = {
    BlockBuilder: [
        {
            methods: objectSpread({
                apply_extrinsic: {
                    description: "Apply the given extrinsic.",
                    params: [
                        {
                            name: "extrinsic",
                            type: "Extrinsic"
                        }
                    ],
                    type: "ApplyExtrinsicResult"
                }
            }, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 6
        },
        {
            methods: objectSpread({
            }, BB_V2_TO_V5, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 5
        },
        {
            methods: objectSpread({
            }, BB_V2_TO_V4, BB_V2_TO_V5, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 4
        },
        {
            methods: objectSpread({
            }, BB_V2_TO_V4, BB_V2_TO_V6, BB_V3_TO_V6),
            version: 3
        },
        {
            methods: objectSpread({
                finalise_block: {
                    description: "Finish the current block.",
                    params: [],
                    type: "Header"
                }
            }, BB_V2_TO_V4, BB_V2_TO_V6),
            version: 2
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
var definitions_default11 = {
    rpc: {},
    runtime: runtime7,
    types: {
        CheckInherentsResult: {
            okay: "bool",
            fatalError: "bool",
            errors: "InherentData"
        },
        InherentData: {
            data: "BTreeMap<InherentIdentifier, Bytes>"
        },
        InherentIdentifier: "[u8; 8]"
    }
};
// ../../node_modules/@polkadot/types/interfaces/collective/definitions.js
var definitions_default12 = {
    rpc: {},
    types: {
        CollectiveOrigin: {
            _enum: {
                Members: "(MemberCount, MemberCount)",
                Member: "AccountId"
            }
        },
        MemberCount: "u32",
        ProposalIndex: "u32",
        VotesTo230: {
            index: "ProposalIndex",
            threshold: "MemberCount",
            ayes: "Vec<AccountId>",
            nays: "Vec<AccountId>"
        },
        Votes: {
            index: "ProposalIndex",
            threshold: "MemberCount",
            ayes: "Vec<AccountId>",
            nays: "Vec<AccountId>",
            end: "BlockNumber"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/consensus/definitions.js
var definitions_default13 = {
    rpc: {},
    types: {
        AuthorityId: "AccountId",
        RawVRFOutput: "[u8; 32]"
    }
};
// ../../node_modules/@polkadot/types/interfaces/contracts/rpc.js
var rpc3 = {
    call: {
        deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
        description: "Executes a call to a contract",
        params: [
            {
                name: "callRequest",
                type: "ContractCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ContractExecResult"
    },
    getStorage: {
        deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
        description: "Returns the value under a specified storage key in a contract",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                name: "key",
                type: "H256"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Option<Bytes>"
    },
    instantiate: {
        deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
        description: "Instantiate a new contract",
        params: [
            {
                name: "request",
                type: "InstantiateRequestV1"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ContractInstantiateResult"
    },
    rentProjection: {
        deprecated: "Not available in newer versions of the contracts interfaces",
        description: "Returns the projected time a given contract will be able to sustain paying its rent",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Option<BlockNumber>"
    },
    uploadCode: {
        deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
        description: "Upload new code without instantiating a contract from it",
        // The RPC here is terribly misnamed - somebody forgot how the RPCs
        // are actually done, ie. <module>_<camelCasedMethod>
        endpoint: "contracts_upload_code",
        params: [
            {
                name: "uploadRequest",
                type: "CodeUploadRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "CodeUploadResult"
    }
};
// ../../node_modules/@polkadot/types/interfaces/contracts/runtime.js
var SHARED_V1_V2 = {
    get_storage: {
        description: "Query a given storage key in a given contract.",
        params: [
            {
                name: "address",
                type: "AccountId"
            },
            {
                name: "key",
                type: "Bytes"
            }
        ],
        type: "Option<Bytes>"
    },
    upload_code: {
        description: "Upload new code without instantiating a contract from it.",
        params: [
            {
                name: "origin",
                type: "AccountId"
            },
            {
                name: "code",
                type: "Bytes"
            },
            {
                name: "storageDepositLimit",
                type: "Option<Balance>"
            }
        ],
        type: "CodeUploadResult"
    }
};
var runtime8 = {
    ContractsApi: [
        {
            methods: objectSpread({
                call: {
                    description: "Perform a call from a specified account to a given contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "dest",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "Option<WeightV2>"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "inputData",
                            type: "Vec<u8>"
                        }
                    ],
                    type: "ContractExecResult"
                },
                instantiate: {
                    description: "Instantiate a new contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "Option<WeightV2>"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "code",
                            type: "CodeSource"
                        },
                        {
                            name: "data",
                            type: "Bytes"
                        },
                        {
                            name: "salt",
                            type: "Bytes"
                        }
                    ],
                    type: "ContractInstantiateResult"
                }
            }, SHARED_V1_V2),
            version: 2
        },
        {
            methods: objectSpread({
                call: {
                    description: "Perform a call from a specified account to a given contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "dest",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "u64"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "inputData",
                            type: "Vec<u8>"
                        }
                    ],
                    type: "ContractExecResultU64"
                },
                instantiate: {
                    description: "Instantiate a new contract.",
                    params: [
                        {
                            name: "origin",
                            type: "AccountId"
                        },
                        {
                            name: "value",
                            type: "Balance"
                        },
                        {
                            name: "gasLimit",
                            type: "u64"
                        },
                        {
                            name: "storageDepositLimit",
                            type: "Option<Balance>"
                        },
                        {
                            name: "code",
                            type: "CodeSource"
                        },
                        {
                            name: "data",
                            type: "Bytes"
                        },
                        {
                            name: "salt",
                            type: "Bytes"
                        }
                    ],
                    type: "ContractInstantiateResultU64"
                }
            }, SHARED_V1_V2),
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/contracts/definitions.js
var definitions_default14 = {
    rpc: rpc3,
    runtime: runtime8,
    types: {
        AliveContractInfo: {
            trieId: "TrieId",
            storageSize: "u32",
            pairCount: "u32",
            codeHash: "CodeHash",
            rentAllowance: "Balance",
            rentPaid: "Balance",
            deductBlock: "BlockNumber",
            lastWrite: "Option<BlockNumber>",
            _reserved: "Option<Null>"
        },
        CodeHash: "Hash",
        CodeSource: {
            _enum: {
                Upload: "Bytes",
                Existing: "Hash"
            }
        },
        CodeUploadRequest: {
            origin: "AccountId",
            code: "Bytes",
            storageDepositLimit: "Option<Balance>"
        },
        CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
        CodeUploadResultValue: {
            codeHash: "CodeHash",
            deposit: "Balance"
        },
        ContractCallRequest: {
            origin: "AccountId",
            dest: "AccountId",
            value: "Balance",
            gasLimit: "u64",
            storageDepositLimit: "Option<Balance>",
            inputData: "Bytes"
        },
        ContractExecResultSuccessTo255: {
            status: "u8",
            data: "Raw"
        },
        ContractExecResultTo255: {
            _enum: {
                Success: "ContractExecResultSuccessTo255",
                Error: "Null"
            }
        },
        ContractExecResultSuccessTo260: {
            flags: "ContractReturnFlags",
            data: "Bytes",
            gasConsumed: "u64"
        },
        ContractExecResultTo260: {
            _enum: {
                Success: "ContractExecResultSuccessTo260",
                Error: "Null"
            }
        },
        ContractExecResultOk: {
            flags: "ContractReturnFlags",
            data: "Bytes"
        },
        ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
        ContractExecResultTo267: {
            gasConsumed: "u64",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractExecResult: {
            gasConsumed: "Weight",
            gasRequired: "Weight",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractExecResultU64: {
            gasConsumed: "u64",
            gasRequired: "u64",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "ContractExecResultResult"
        },
        ContractInfo: {
            _enum: {
                Alive: "AliveContractInfo",
                Tombstone: "TombstoneContractInfo"
            }
        },
        ContractCallFlags: {
            _set: {
                _bitLength: 32,
                ForwardInput: 1,
                CloneInput: 2,
                TailCall: 4,
                AllowReentry: 8
            }
        },
        ContractReturnFlags: {
            _set: {
                _bitLength: 32,
                Revert: 1
            }
        },
        ContractStorageKey: "[u8; 32]",
        DeletedContract: {
            pairCount: "u32",
            trieId: "TrieId"
        },
        ExecReturnValue: {
            flags: "ContractReturnFlags",
            data: "Bytes"
        },
        Gas: "u64",
        HostFnWeightsTo264: {
            caller: "Weight",
            address: "Weight",
            gasLeft: "Weight",
            balance: "Weight",
            valueTransferred: "Weight",
            minimumBalance: "Weight",
            tombstoneDeposit: "Weight",
            rentAllowance: "Weight",
            blockNumber: "Weight",
            now: "Weight",
            weightToFee: "Weight",
            gas: "Weight",
            input: "Weight",
            inputPerByte: "Weight",
            return: "Weight",
            returnPerByte: "Weight",
            terminate: "Weight",
            restoreTo: "Weight",
            restoreToPerDelta: "Weight",
            random: "Weight",
            depositEvent: "Weight",
            depositEventPerTopic: "Weight",
            depositEventPerByte: "Weight",
            setRentAllowance: "Weight",
            setStorage: "Weight",
            setStoragePerByte: "Weight",
            clearStorage: "Weight",
            getStorage: "Weight",
            getStoragePerByte: "Weight",
            transfer: "Weight",
            call: "Weight",
            callTransferSurcharge: "Weight",
            callPerInputByte: "Weight",
            callPerOutputByte: "Weight",
            instantiate: "Weight",
            instantiatePerInputByte: "Weight",
            instantiatePerOutputByte: "Weight",
            hashSha2256: "Weight",
            hashSha2256PerByte: "Weight",
            hashKeccak256: "Weight",
            hashKeccak256PerByte: "Weight",
            hashBlake2256: "Weight",
            hashBlake2256PerByte: "Weight",
            hashBlake2128: "Weight",
            hashBlake2128PerByte: "Weight"
        },
        HostFnWeights: {
            caller: "Weight",
            address: "Weight",
            gasLeft: "Weight",
            balance: "Weight",
            valueTransferred: "Weight",
            minimumBalance: "Weight",
            tombstoneDeposit: "Weight",
            rentAllowance: "Weight",
            blockNumber: "Weight",
            now: "Weight",
            weightToFee: "Weight",
            gas: "Weight",
            input: "Weight",
            inputPerByte: "Weight",
            return: "Weight",
            returnPerByte: "Weight",
            terminate: "Weight",
            terminatePerCodeByte: "Weight",
            restoreTo: "Weight",
            restoreToPerCallerCodeByte: "Weight",
            restoreToPerTombstoneCodeByte: "Weight",
            restoreToPerDelta: "Weight",
            random: "Weight",
            depositEvent: "Weight",
            depositEventPerTopic: "Weight",
            depositEventPerByte: "Weight",
            setRentAllowance: "Weight",
            setStorage: "Weight",
            setStoragePerByte: "Weight",
            clearStorage: "Weight",
            getStorage: "Weight",
            getStoragePerByte: "Weight",
            transfer: "Weight",
            call: "Weight",
            callPerCodeByte: "Weight",
            callTransferSurcharge: "Weight",
            callPerInputByte: "Weight",
            callPerOutputByte: "Weight",
            instantiate: "Weight",
            instantiatePerCodeByte: "Weight",
            instantiatePerInputByte: "Weight",
            instantiatePerOutputByte: "Weight",
            instantiatePerSaltByte: "Weight",
            hashSha2256: "Weight",
            hashSha2256PerByte: "Weight",
            hashKeccak256: "Weight",
            hashKeccak256PerByte: "Weight",
            hashBlake2256: "Weight",
            hashBlake2256PerByte: "Weight",
            hashBlake2128: "Weight",
            hashBlake2128PerByte: "Weight",
            rentParams: "Weight"
        },
        InstantiateRequestV1: {
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            code: "Bytes",
            data: "Bytes",
            salt: "Bytes"
        },
        InstantiateRequestV2: {
            _fallback: "InstantiateRequestV1",
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            storageDepositLimit: "Option<Balance>",
            code: "Bytes",
            data: "Bytes",
            salt: "Bytes"
        },
        InstantiateRequest: {
            _fallback: "InstantiateRequestV2",
            origin: "AccountId",
            value: "Balance",
            gasLimit: "Gas",
            storageDepositLimit: "Option<Balance>",
            code: "CodeSource",
            data: "Bytes",
            salt: "Bytes"
        },
        ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
        ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
        ContractInstantiateResult: {
            gasConsumed: "WeightV2",
            gasRequired: "WeightV2",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "InstantiateReturnValue"
        },
        ContractInstantiateResultU64: {
            // only this one can fail, the current version (above) _should_ be correctly
            // versioned now, aka no more deprecated RPCs involved, only runtime calls
            _fallback: "ContractInstantiateResultTo299",
            gasConsumed: "u64",
            gasRequired: "u64",
            storageDeposit: "StorageDeposit",
            debugMessage: "Text",
            result: "InstantiateReturnValue"
        },
        InstantiateReturnValueTo267: {
            result: "ExecReturnValue",
            accountId: "AccountId",
            rentProjection: "Option<RentProjection>"
        },
        InstantiateReturnValueOk: {
            result: "ExecReturnValue",
            accountId: "AccountId"
        },
        InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
        InstructionWeights: {
            i64const: "u32",
            i64load: "u32",
            i64store: "u32",
            select: "u32",
            rIf: "u32",
            br: "u32",
            brIf: "u32",
            brIable: "u32",
            brIablePerEntry: "u32",
            call: "u32",
            callIndirect: "u32",
            callIndirectPerParam: "u32",
            localGet: "u32",
            localSet: "u32",
            local_tee: "u32",
            globalGet: "u32",
            globalSet: "u32",
            memoryCurrent: "u32",
            memoryGrow: "u32",
            i64clz: "u32",
            i64ctz: "u32",
            i64popcnt: "u32",
            i64eqz: "u32",
            i64extendsi32: "u32",
            i64extendui32: "u32",
            i32wrapi64: "u32",
            i64eq: "u32",
            i64ne: "u32",
            i64lts: "u32",
            i64ltu: "u32",
            i64gts: "u32",
            i64gtu: "u32",
            i64les: "u32",
            i64leu: "u32",
            i64ges: "u32",
            i64geu: "u32",
            i64add: "u32",
            i64sub: "u32",
            i64mul: "u32",
            i64divs: "u32",
            i64divu: "u32",
            i64rems: "u32",
            i64remu: "u32",
            i64and: "u32",
            i64or: "u32",
            i64xor: "u32",
            i64shl: "u32",
            i64shrs: "u32",
            i64shru: "u32",
            i64rotl: "u32",
            i64rotr: "u32"
        },
        LimitsTo264: {
            eventTopics: "u32",
            stackHeight: "u32",
            globals: "u32",
            parameters: "u32",
            memoryPages: "u32",
            tableSize: "u32",
            brTableSize: "u32",
            subjectLen: "u32",
            codeSize: "u32"
        },
        Limits: {
            eventTopics: "u32",
            stackHeight: "u32",
            globals: "u32",
            parameters: "u32",
            memoryPages: "u32",
            tableSize: "u32",
            brTableSize: "u32",
            subjectLen: "u32"
        },
        PrefabWasmModule: {
            scheduleVersion: "Compact<u32>",
            initial: "Compact<u32>",
            maximum: "Compact<u32>",
            refcount: "Compact<u64>",
            _reserved: "Option<Null>",
            code: "Bytes",
            originalCodeLen: "u32"
        },
        RentProjection: {
            _enum: {
                EvictionAt: "BlockNumber",
                NoEviction: "Null"
            }
        },
        ScheduleTo212: {
            version: "u32",
            putCodePerByteCost: "Gas",
            growMemCost: "Gas",
            regularOpCost: "Gas",
            returnDataPerByteCost: "Gas",
            eventDataPerByteCost: "Gas",
            eventPerTopicCost: "Gas",
            eventBaseCost: "Gas",
            sandboxDataReadCost: "Gas",
            sandboxDataWriteCost: "Gas",
            maxEventTopics: "u32",
            maxStackHeight: "u32",
            maxMemoryPages: "u32",
            enablePrintln: "bool",
            maxSubjectLen: "u32"
        },
        ScheduleTo258: {
            version: "u32",
            putCodePerByteCost: "Gas",
            growMemCost: "Gas",
            regularOpCost: "Gas",
            returnDataPerByteCost: "Gas",
            eventDataPerByteCost: "Gas",
            eventPerTopicCost: "Gas",
            eventBaseCost: "Gas",
            sandboxDataReadCost: "Gas",
            sandboxDataWriteCost: "Gas",
            transferCost: "Gas",
            maxEventTopics: "u32",
            maxStackHeight: "u32",
            maxMemoryPages: "u32",
            enablePrintln: "bool",
            maxSubjectLen: "u32"
        },
        ScheduleTo264: {
            version: "u32",
            enablePrintln: "bool",
            limits: "LimitsTo264",
            instructionWeights: "InstructionWeights",
            hostFnWeights: "HostFnWeightsTo264"
        },
        Schedule: {
            version: "u32",
            enablePrintln: "bool",
            limits: "Limits",
            instructionWeights: "InstructionWeights",
            hostFnWeights: "HostFnWeights"
        },
        SeedOf: "Hash",
        StorageDeposit: {
            _enum: {
                Refund: "Balance",
                Charge: "Balance"
            }
        },
        TombstoneContractInfo: "Hash",
        TrieId: "Bytes"
    }
};
// ../../node_modules/@polkadot/types/interfaces/democracy/definitions.js
var AllConvictions = [
    // 0.1x votes, unlocked.
    "None",
    // 1x votes, locked for an enactment period following a successful vote.
    "Locked1x",
    // 2x votes, locked for 2x enactment periods following a successful vote.
    "Locked2x",
    // 3x votes, locked for 4x...
    "Locked3x",
    // 4x votes, locked for 8x...
    "Locked4x",
    // 5x votes, locked for 16x...
    "Locked5x",
    // 6x votes, locked for 32x...
    "Locked6x"
];
var definitions_default15 = {
    rpc: {},
    types: {
        AccountVote: {
            _enum: {
                Standard: "AccountVoteStandard",
                Split: "AccountVoteSplit"
            }
        },
        AccountVoteSplit: {
            aye: "Balance",
            nay: "Balance"
        },
        AccountVoteStandard: {
            vote: "Vote",
            balance: "Balance"
        },
        Conviction: {
            _enum: AllConvictions
        },
        Delegations: {
            votes: "Balance",
            capital: "Balance"
        },
        PreimageStatus: {
            _enum: {
                Missing: "BlockNumber",
                Available: "PreimageStatusAvailable"
            }
        },
        PreimageStatusAvailable: {
            data: "Bytes",
            provider: "AccountId",
            deposit: "Balance",
            since: "BlockNumber",
            expiry: "Option<BlockNumber>"
        },
        PriorLock: "(BlockNumber, Balance)",
        PropIndex: "u32",
        Proposal: "Call",
        ProxyState: {
            _enum: {
                Open: "AccountId",
                Active: "AccountId"
            }
        },
        ReferendumIndex: "u32",
        ReferendumInfoTo239: {
            end: "BlockNumber",
            proposalHash: "Hash",
            threshold: "VoteThreshold",
            delay: "BlockNumber"
        },
        ReferendumInfo: {
            _enum: {
                Ongoing: "ReferendumStatus",
                Finished: "ReferendumInfoFinished"
            }
        },
        ReferendumInfoFinished: {
            approved: "bool",
            end: "BlockNumber"
        },
        ReferendumStatus: {
            end: "BlockNumber",
            proposalHash: "Hash",
            threshold: "VoteThreshold",
            delay: "BlockNumber",
            tally: "Tally"
        },
        Tally: {
            ayes: "Balance",
            nays: "Balance",
            turnout: "Balance"
        },
        Voting: {
            _enum: {
                Direct: "VotingDirect",
                Delegating: "VotingDelegating"
            }
        },
        VotingDirect: {
            votes: "Vec<VotingDirectVote>",
            delegations: "Delegations",
            prior: "PriorLock"
        },
        VotingDirectVote: "(ReferendumIndex, AccountVote)",
        VotingDelegating: {
            balance: "Balance",
            target: "AccountId",
            conviction: "Conviction",
            delegations: "Delegations",
            prior: "PriorLock"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/dev/rpc.js
var rpc4 = {
    getBlockStats: {
        description: "Reexecute the specified `block_hash` and gather statistics while doing so",
        params: [
            {
                isHistoric: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<BlockStats>"
    }
};
// ../../node_modules/@polkadot/types/interfaces/dev/definitions.js
var definitions_default16 = {
    rpc: rpc4,
    types: {
        BlockStats: {
            witnessLen: "u64",
            witnessCompactLen: "u64",
            blockLen: "u64",
            blockNumExtrinsics: "u64"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/discovery/runtime.js
var runtime9 = {
    AuthorityDiscoveryApi: [
        {
            methods: {
                authorities: {
                    description: "Retrieve authority identifiers of the current and next authority set.",
                    params: [],
                    type: "Vec<AuthorityId>"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/discovery/definitions.js
var definitions_default17 = {
    rpc: {},
    runtime: runtime9,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/elections/definitions.js
var definitions_default18 = {
    rpc: {},
    types: {
        ApprovalFlag: "u32",
        DefunctVoter: {
            who: "AccountId",
            voteCount: "Compact<u32>",
            candidateCount: "Compact<u32>"
        },
        Renouncing: {
            _enum: {
                Member: "Null",
                RunnerUp: "Null",
                Candidate: "Compact<u32>"
            }
        },
        SetIndex: "u32",
        Vote: "GenericVote",
        VoteIndex: "u32",
        VoterInfo: {
            lastActive: "VoteIndex",
            lastWin: "VoteIndex",
            pot: "Balance",
            stake: "Balance"
        },
        VoteThreshold: {
            _enum: [
                "Super Majority Approve",
                "Super Majority Against",
                "Simple Majority"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/engine/rpc.js
var rpc5 = {
    createBlock: {
        description: "Instructs the manual-seal authorship task to create a new block",
        params: [
            {
                name: "createEmpty",
                type: "bool"
            },
            {
                name: "finalize",
                type: "bool"
            },
            {
                isOptional: true,
                name: "parentHash",
                type: "BlockHash"
            }
        ],
        type: "CreatedBlock"
    },
    finalizeBlock: {
        description: "Instructs the manual-seal authorship task to finalize a block",
        params: [
            {
                name: "hash",
                type: "BlockHash"
            },
            {
                isOptional: true,
                name: "justification",
                type: "Justification"
            }
        ],
        type: "bool"
    }
};
// ../../node_modules/@polkadot/types/interfaces/engine/definitions.js
var definitions_default19 = {
    rpc: rpc5,
    types: {
        CreatedBlock: {
            _alias: {
                blockHash: "hash"
            },
            blockHash: "BlockHash",
            aux: "ImportedAux"
        },
        ImportedAux: {
            headerOnly: "bool",
            clearJustificationRequests: "bool",
            needsJustification: "bool",
            badJustification: "bool",
            needsFinalityProof: "bool",
            isNewBest: "bool"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/evm/definitions.js
var definitions_default20 = {
    rpc: {},
    types: {
        EvmAccount: {
            nonce: "u256",
            balance: "u256"
        },
        EvmCallInfo: {
            exitReason: "ExitReason",
            value: "Bytes",
            usedGas: "U256",
            logs: "Vec<EvmLog>"
        },
        EvmCreateInfo: {
            exitReason: "ExitReason",
            value: "H160",
            usedGas: "U256",
            logs: "Vec<EvmLog>"
        },
        EvmLog: {
            address: "H160",
            topics: "Vec<H256>",
            data: "Bytes"
        },
        EvmVicinity: {
            gasPrice: "u256",
            origin: "H160"
        },
        ExitError: {
            _enum: {
                StackUnderflow: "Null",
                StackOverflow: "Null",
                InvalidJump: "Null",
                InvalidRange: "Null",
                DesignatedInvalid: "Null",
                CallTooDeep: "Null",
                CreateCollision: "Null",
                CreateContractLimit: "Null",
                OutOfOffset: "Null",
                OutOfGas: "Null",
                OutOfFund: "Null",
                PCUnderflow: "Null",
                CreateEmpty: "Null",
                Other: "Text"
            }
        },
        ExitFatal: {
            _enum: {
                NotSupported: "Null",
                UnhandledInterrupt: "Null",
                CallErrorAsFatal: "ExitError",
                Other: "Text"
            }
        },
        ExitReason: {
            _enum: {
                Succeed: "ExitSucceed",
                Error: "ExitError",
                Revert: "ExitRevert",
                Fatal: "ExitFatal"
            }
        },
        ExitRevert: {
            _enum: [
                "Reverted"
            ]
        },
        ExitSucceed: {
            _enum: [
                "Stopped",
                "Returned",
                "Suicided"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
var definitions_default21 = {
    rpc: {},
    types: {
        Extrinsic: "GenericExtrinsic",
        ExtrinsicEra: "GenericExtrinsicEra",
        ExtrinsicPayload: "GenericExtrinsicPayload",
        ExtrinsicSignature: "MultiSignature",
        ExtrinsicV4: "GenericExtrinsicV4",
        ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
        ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
        ExtrinsicUnknown: "GenericExtrinsicUnknown",
        ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
        // eras
        Era: "ExtrinsicEra",
        ImmortalEra: "GenericImmortalEra",
        MortalEra: "GenericMortalEra",
        // signatures & signer
        AnySignature: "H512",
        MultiSignature: {
            _enum: {
                Ed25519: "Ed25519Signature",
                Sr25519: "Sr25519Signature",
                Ecdsa: "EcdsaSignature"
            }
        },
        Signature: "H512",
        SignerPayload: "GenericSignerPayload",
        EcdsaSignature: "[u8; 65]",
        Ed25519Signature: "H512",
        Sr25519Signature: "H512"
    }
};
// ../../node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
var definitions_default22 = {
    rpc: {},
    types: {
        AssetOptions: {
            initalIssuance: "Compact<Balance>",
            permissions: "PermissionLatest"
        },
        Owner: {
            _enum: {
                None: "Null",
                Address: "AccountId"
            }
        },
        PermissionsV1: {
            update: "Owner",
            mint: "Owner",
            burn: "Owner"
        },
        PermissionVersions: {
            _enum: {
                V1: "PermissionsV1"
            }
        },
        PermissionLatest: "PermissionsV1"
    }
};
// ../../node_modules/@polkadot/types/interfaces/gilt/definitions.js
var definitions_default23 = {
    rpc: {},
    types: {
        ActiveGilt: {
            proportion: "Perquintill",
            amount: "Balance",
            who: "AccountId",
            expiry: "BlockNumber"
        },
        ActiveGiltsTotal: {
            frozen: "Balance",
            proportion: "Perquintill",
            index: "ActiveIndex",
            target: "Perquintill"
        },
        ActiveIndex: "u32",
        GiltBid: {
            amount: "Balance",
            who: "AccountId"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/grandpa/rpc.js
var rpc6 = {
    proveFinality: {
        description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
        params: [
            {
                name: "blockNumber",
                type: "BlockNumber"
            }
        ],
        type: "Option<EncodedFinalityProofs>"
    },
    roundState: {
        description: "Returns the state of the current best round state as well as the ongoing background rounds",
        params: [],
        type: "ReportedRoundStates"
    },
    subscribeJustifications: {
        description: "Subscribes to grandpa justifications",
        params: [],
        pubsub: [
            "justifications",
            "subscribeJustifications",
            "unsubscribeJustifications"
        ],
        type: "JustificationNotification"
    }
};
// ../../node_modules/@polkadot/types/interfaces/grandpa/runtime.js
var GRANDPA_V2_V3 = {
    generate_key_ownership_proof: {
        description: "Generates a proof of key ownership for the given authority in the given set.",
        params: [
            {
                name: "setId",
                type: "SetId"
            },
            {
                name: "authorityId",
                type: "AuthorityId"
            }
        ],
        type: "Option<OpaqueKeyOwnershipProof>"
    },
    grandpa_authorities: {
        description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
        params: [],
        type: "AuthorityList"
    },
    submit_report_equivocation_unsigned_extrinsic: {
        description: "Submits an unsigned extrinsic to report an equivocation.",
        params: [
            {
                name: "equivocationProof",
                type: "GrandpaEquivocationProof"
            },
            {
                name: "keyOwnerProof",
                type: "OpaqueKeyOwnershipProof"
            }
        ],
        type: "Option<Null>"
    }
};
var runtime10 = {
    GrandpaApi: [
        {
            methods: objectSpread({
                current_set_id: {
                    description: "Get current GRANDPA authority set id.",
                    params: [],
                    type: "SetId"
                }
            }, GRANDPA_V2_V3),
            version: 3
        },
        {
            methods: GRANDPA_V2_V3,
            version: 2
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/grandpa/definitions.js
var definitions_default24 = {
    rpc: rpc6,
    runtime: runtime10,
    types: {
        AuthorityIndex: "u64",
        AuthorityList: "Vec<NextAuthority>",
        AuthoritySet: {
            currentAuthorities: "AuthorityList",
            setId: "u64",
            pendingStandardChanges: "ForkTreePendingChange",
            pendingForcedChanges: "Vec<PendingChange>",
            authoritySetChanges: "AuthoritySetChanges"
        },
        ForkTreePendingChange: {
            roots: "Vec<ForkTreePendingChangeNode>",
            bestFinalizedNumber: "Option<BlockNumber>"
        },
        ForkTreePendingChangeNode: {
            hash: "BlockHash",
            number: "BlockNumber",
            data: "PendingChange",
            // actual data, here PendingChange
            children: "Vec<ForkTreePendingChangeNode>"
        },
        AuthoritySetChange: "(U64, BlockNumber)",
        AuthoritySetChanges: "Vec<AuthoritySetChange>",
        AuthorityWeight: "u64",
        DelayKind: {
            _enum: {
                Finalized: "Null",
                Best: "DelayKindBest"
            }
        },
        DelayKindBest: {
            medianLastFinalized: "BlockNumber"
        },
        EncodedFinalityProofs: "Bytes",
        GrandpaEquivocation: {
            _enum: {
                Prevote: "GrandpaEquivocationValue",
                Precommit: "GrandpaEquivocationValue"
            }
        },
        GrandpaEquivocationProof: {
            setId: "SetId",
            equivocation: "GrandpaEquivocation"
        },
        GrandpaEquivocationValue: {
            roundNumber: "u64",
            identity: "AuthorityId",
            first: "(GrandpaPrevote, AuthoritySignature)",
            second: "(GrandpaPrevote, AuthoritySignature)"
        },
        GrandpaPrevote: {
            targetHash: "Hash",
            targetNumber: "BlockNumber"
        },
        GrandpaCommit: {
            targetHash: "BlockHash",
            targetNumber: "BlockNumber",
            precommits: "Vec<GrandpaSignedPrecommit>"
        },
        GrandpaPrecommit: {
            targetHash: "BlockHash",
            targetNumber: "BlockNumber"
        },
        GrandpaSignedPrecommit: {
            precommit: "GrandpaPrecommit",
            signature: "AuthoritySignature",
            id: "AuthorityId"
        },
        GrandpaJustification: {
            round: "u64",
            commit: "GrandpaCommit",
            votesAncestries: "Vec<Header>"
        },
        JustificationNotification: "Bytes",
        KeyOwnerProof: "MembershipProof",
        NextAuthority: "(AuthorityId, AuthorityWeight)",
        PendingChange: {
            nextAuthorities: "AuthorityList",
            delay: "BlockNumber",
            canonHeight: "BlockNumber",
            canonHash: "BlockHash",
            delayKind: "DelayKind"
        },
        PendingPause: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber"
        },
        PendingResume: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber"
        },
        Precommits: {
            currentWeight: "u32",
            missing: "BTreeSet<AuthorityId>"
        },
        Prevotes: {
            currentWeight: "u32",
            missing: "BTreeSet<AuthorityId>"
        },
        ReportedRoundStates: {
            setId: "u32",
            best: "RoundState",
            background: "Vec<RoundState>"
        },
        RoundState: {
            round: "u32",
            totalWeight: "u32",
            thresholdWeight: "u32",
            prevotes: "Prevotes",
            precommits: "Precommits"
        },
        SetId: "u64",
        StoredPendingChange: {
            scheduledAt: "BlockNumber",
            delay: "BlockNumber",
            nextAuthorities: "AuthorityList"
        },
        StoredState: {
            _enum: {
                Live: "Null",
                PendingPause: "PendingPause",
                Paused: "Null",
                PendingResume: "PendingResume"
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/identity/definitions.js
var definitions_default25 = {
    rpc: {},
    types: {
        IdentityFields: {
            _set: {
                _bitLength: 64,
                // Mapped here to 32 bits, in Rust these are 64-bit values
                Display: 1,
                Legal: 2,
                Web: 4,
                Riot: 8,
                Email: 16,
                PgpFingerprint: 32,
                Image: 64,
                Twitter: 128
            }
        },
        IdentityInfoAdditional: "(Data, Data)",
        IdentityInfoTo198: {
            additional: "Vec<IdentityInfoAdditional>",
            display: "Data",
            legal: "Data",
            web: "Data",
            riot: "Data",
            email: "Data",
            pgpFingerprint: "Option<H160>",
            image: "Data"
        },
        IdentityInfo: {
            _fallback: "IdentityInfoTo198",
            additional: "Vec<IdentityInfoAdditional>",
            display: "Data",
            legal: "Data",
            web: "Data",
            riot: "Data",
            email: "Data",
            pgpFingerprint: "Option<H160>",
            image: "Data",
            twitter: "Data"
        },
        IdentityJudgement: {
            _enum: {
                Unknown: "Null",
                FeePaid: "Balance",
                Reasonable: "Null",
                KnownGood: "Null",
                OutOfDate: "Null",
                LowQuality: "Null",
                Erroneous: "Null"
            }
        },
        RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
        RegistrationTo198: {
            judgements: "Vec<RegistrationJudgement>",
            deposit: "Balance",
            info: "IdentityInfoTo198"
        },
        Registration: {
            _fallback: "RegistrationTo198",
            judgements: "Vec<RegistrationJudgement>",
            deposit: "Balance",
            info: "IdentityInfo"
        },
        RegistrarIndex: "u32",
        RegistrarInfo: {
            account: "AccountId",
            fee: "Balance",
            fields: "IdentityFields"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/imOnline/definitions.js
var definitions_default26 = {
    rpc: {},
    types: {
        AuthIndex: "u32",
        AuthoritySignature: "Signature",
        Heartbeat: {
            blockNumber: "BlockNumber",
            networkState: "OpaqueNetworkState",
            sessionIndex: "SessionIndex",
            authorityIndex: "AuthIndex",
            validatorsLen: "u32"
        },
        HeartbeatTo244: {
            blockNumber: "BlockNumber",
            networkState: "OpaqueNetworkState",
            sessionIndex: "SessionIndex",
            authorityIndex: "AuthIndex"
        },
        OpaqueMultiaddr: "Opaque<Bytes>",
        OpaquePeerId: "Opaque<Bytes>",
        OpaqueNetworkState: {
            peerId: "OpaquePeerId",
            externalAddresses: "Vec<OpaqueMultiaddr>"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/lottery/definitions.js
var definitions_default27 = {
    rpc: {},
    types: {
        CallIndex: "(u8, u8)",
        LotteryConfig: {
            price: "Balance",
            start: "BlockNumber",
            length: "BlockNumber",
            delay: "BlockNumber",
            repeat: "bool"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/mmr/rpc.js
var rpc7 = {
    generateBatchProof: {
        description: "Generate MMR proof for the given leaf indices.",
        params: [
            {
                name: "leafIndices",
                type: "Vec<u64>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MmrLeafProof"
    },
    generateProof: {
        description: "Generate MMR proof for given leaf index.",
        params: [
            {
                name: "leafIndex",
                type: "u64"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MmrLeafBatchProof"
    }
};
// ../../node_modules/@polkadot/types/interfaces/mmr/runtime.js
var runtime11 = {
    MmrApi: [
        {
            methods: {
                generate_batch_proof: {
                    description: "Generate MMR proof for a series of leaves under given indices.",
                    params: [
                        {
                            name: "leafIndices",
                            type: "Vec<MmrLeafIndex>"
                        }
                    ],
                    type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
                },
                generate_proof: {
                    description: "Generate MMR proof for a leaf under given index.",
                    params: [
                        {
                            name: "leafIndex",
                            type: "MmrLeafIndex"
                        }
                    ],
                    type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
                },
                mmr_root: {
                    description: "Return the on-chain MMR root hash.",
                    params: [],
                    type: "Result<Hash, MmrError>"
                },
                verify_batch_proof: {
                    description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
                    params: [
                        {
                            name: "leaves",
                            type: "Vec<MmrEncodableOpaqueLeaf>"
                        },
                        {
                            name: "proof",
                            type: "MmrBatchProof"
                        }
                    ],
                    type: "Result<(), MmrError>"
                },
                verify_batch_proof_stateless: {
                    description: "Verify MMR proof against given root hash or a batch of leaves.",
                    params: [
                        {
                            name: "root",
                            type: "Hash"
                        },
                        {
                            name: "leaves",
                            type: "Vec<MmrEncodableOpaqueLeaf>"
                        },
                        {
                            name: "proof",
                            type: "MmrBatchProof"
                        }
                    ],
                    type: "Result<(), MmrError>"
                },
                verify_proof: {
                    description: "Verify MMR proof against on-chain MMR.",
                    params: [
                        {
                            name: "leaf",
                            type: "MmrEncodableOpaqueLeaf"
                        },
                        {
                            name: "proof",
                            type: "MmrProof"
                        }
                    ],
                    type: "Result<(), MmrError>"
                },
                verify_proof_stateless: {
                    description: "Verify MMR proof against given root hash.",
                    params: [
                        {
                            name: "root",
                            type: "Hash"
                        },
                        {
                            name: "leaf",
                            type: "MmrEncodableOpaqueLeaf"
                        },
                        {
                            name: "proof",
                            type: "MmrProof"
                        }
                    ],
                    type: "Result<(), MmrError>"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/mmr/definitions.js
var definitions_default28 = {
    rpc: rpc7,
    runtime: runtime11,
    types: {
        MmrBatchProof: {
            leafIndices: "Vec<MmrLeafIndex>",
            leafCount: "MmrNodeIndex",
            items: "Vec<Hash>"
        },
        MmrEncodableOpaqueLeaf: "Bytes",
        MmrError: {
            _enum: [
                "Push",
                "GetRoot",
                "Commit",
                "GenerateProof",
                "Verify",
                "LeafNotFound",
                " PalletNotIncluded",
                "InvalidLeafIndex"
            ]
        },
        MmrLeafBatchProof: {
            blockHash: "BlockHash",
            leaves: "Bytes",
            proof: "Bytes"
        },
        MmrLeafIndex: "u64",
        MmrLeafProof: {
            blockHash: "BlockHash",
            leaf: "Bytes",
            proof: "Bytes"
        },
        MmrNodeIndex: "u64",
        MmrProof: {
            leafIndex: "MmrLeafIndex",
            leafCount: "MmrNodeIndex",
            items: "Vec<Hash>"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/nompools/runtime.js
var runtime12 = {
    NominationPoolsApi: [
        {
            methods: {
                pending_rewards: {
                    description: "Returns the pending rewards for the given member.",
                    params: [
                        {
                            name: "member",
                            type: "AccountId"
                        }
                    ],
                    type: "Balance"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/nompools/definitions.js
var definitions_default29 = {
    rpc: {},
    runtime: runtime12,
    types: {
        NpApiError: {
            _enum: [
                "MemberNotFound",
                "OverflowInPendingRewards"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/offences/definitions.js
var definitions_default30 = {
    rpc: {},
    types: {
        DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
        Kind: "[u8; 16]",
        OffenceDetails: {
            offender: "Offender",
            reporters: "Vec<Reporter>"
        },
        Offender: "IdentificationTuple",
        OpaqueTimeSlot: "Bytes",
        ReportIdOf: "Hash",
        Reporter: "AccountId"
    }
};
// ../../node_modules/@polkadot/types/interfaces/pow/runtime.js
var runtime13 = {
    DifficultyApi: [
        {
            methods: {
                difficulty: {
                    description: "Return the target difficulty of the next block.",
                    params: [],
                    // This is Difficulty in the original, however this is chain-specific
                    type: "Raw"
                }
            },
            version: 1
        }
    ],
    TimestampApi: [
        {
            methods: {
                timestamp: {
                    description: "API necessary for timestamp-based difficulty adjustment algorithms.",
                    params: [],
                    type: "Moment"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/pow/definitions.js
var definitions_default31 = {
    rpc: {},
    runtime: runtime13,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/proxy/definitions.js
var definitions_default32 = {
    rpc: {},
    types: {
        ProxyDefinition: {
            delegate: "AccountId",
            proxyType: "ProxyType",
            delay: "BlockNumber"
        },
        ProxyType: {
            _enum: [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking"
            ]
        },
        ProxyAnnouncement: {
            real: "AccountId",
            callHash: "Hash",
            height: "BlockNumber"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/recovery/definitions.js
var definitions_default33 = {
    rpc: {},
    types: {
        ActiveRecovery: {
            created: "BlockNumber",
            deposit: "Balance",
            friends: "Vec<AccountId>"
        },
        RecoveryConfig: {
            delayPeriod: "BlockNumber",
            deposit: "Balance",
            friends: "Vec<AccountId>",
            threshold: "u16"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/scheduler/definitions.js
var definitions_default34 = {
    rpc: {},
    types: {
        Period: "(BlockNumber, u32)",
        Priority: "u8",
        SchedulePeriod: "Period",
        SchedulePriority: "Priority",
        Scheduled: {
            maybeId: "Option<Bytes>",
            priority: "SchedulePriority",
            call: "Call",
            maybePeriodic: "Option<SchedulePeriod>",
            origin: "PalletsOrigin"
        },
        ScheduledTo254: {
            maybeId: "Option<Bytes>",
            priority: "SchedulePriority",
            call: "Call",
            maybePeriodic: "Option<SchedulePeriod>"
        },
        TaskAddress: "(BlockNumber, u32)"
    }
};
// ../../node_modules/@polkadot/types/interfaces/session/runtime.js
var runtime14 = {
    SessionKeys: [
        {
            methods: {
                decode_session_keys: {
                    description: "Decode the given public session keys.",
                    params: [
                        {
                            name: "encoded",
                            type: "Bytes"
                        }
                    ],
                    type: "Option<Vec<(Bytes, KeyTypeId)>>"
                },
                generate_session_keys: {
                    description: "Generate a set of session keys with optionally using the given seed.",
                    params: [
                        {
                            name: "seed",
                            type: "Option<Bytes>"
                        }
                    ],
                    type: "Bytes"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/session/definitions.js
var keyTypes = {
    // key for beefy
    BeefyKey: "[u8; 33]",
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: "SessionKeys4",
    SessionKeys1: "(AccountId)",
    SessionKeys2: "(AccountId, AccountId)",
    SessionKeys3: "(AccountId, AccountId, AccountId)",
    SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
    SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
    SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
    SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
};
var definitions_default35 = {
    rpc: {},
    runtime: runtime14,
    types: objectSpread({}, keyTypes, {
        FullIdentification: "Exposure",
        IdentificationTuple: "(ValidatorId, FullIdentification)",
        MembershipProof: {
            session: "SessionIndex",
            trieNodes: "Vec<Bytes>",
            validatorCount: "ValidatorCount"
        },
        SessionIndex: "u32",
        ValidatorCount: "u32"
    })
};
// ../../node_modules/@polkadot/types/interfaces/society/definitions.js
var definitions_default36 = {
    rpc: {},
    types: {
        Bid: {
            who: "AccountId",
            kind: "BidKind",
            value: "Balance"
        },
        BidKind: {
            _enum: {
                Deposit: "Balance",
                Vouch: "(AccountId, Balance)"
            }
        },
        // a society-specific Judgement (not the same as identity Judgement)
        SocietyJudgement: {
            _enum: [
                "Rebid",
                "Reject",
                "Approve"
            ]
        },
        // a society-specific Vote
        SocietyVote: {
            _enum: [
                "Skeptic",
                "Reject",
                "Approve"
            ]
        },
        StrikeCount: "u32",
        VouchingStatus: {
            _enum: [
                "Vouching",
                "Banned"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/staking/definitions.js
var deprecated = {
    Points: "u32",
    EraPoints: {
        total: "Points",
        individual: "Vec<Points>"
    }
};
var phragmen = {
    CompactAssignments: "CompactAssignmentsWith16",
    CompactAssignmentsWith16: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
    },
    CompactAssignmentsWith24: {
        votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
        votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
        votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
        votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
        votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
        votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
        votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
        votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
        votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
        votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
        votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
        votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
        votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
        votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
        votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
        votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
        votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
        votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
        votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
        votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
        votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
        votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
        votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
        votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
    },
    CompactAssignmentsTo265: "CompactAssignmentsWith16",
    CompactAssignmentsTo257: {
        votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
        votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
        votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
        votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
        votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
        votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
        votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
        votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
        votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
        votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
        votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
        votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
        votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
        votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
        votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
        votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
    },
    CompactScore: "(ValidatorIndex, OffchainAccuracy)",
    CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
    ElectionCompute: {
        // in previous versions the last entry was "AuthorityId"
        // (since no data attached, and it is via SCALE can rename)
        _enum: [
            "OnChain",
            "Signed",
            "Unsigned"
        ]
    },
    ElectionPhase: {
        _enum: {
            Off: null,
            Signed: null,
            Unsigned: "(bool, BlockNumber)",
            Emergency: null
        }
    },
    ElectionResult: {
        compute: "ElectionCompute",
        slotStake: "Balance",
        electedStashes: "Vec<AccountId>",
        exposures: "Vec<(AccountId, Exposure)>"
    },
    ElectionScore: "[u128; 3]",
    ElectionSize: {
        validators: "Compact<ValidatorIndex>",
        nominators: "Compact<NominatorIndex>"
    },
    ElectionStatus: {
        _enum: {
            Close: "Null",
            Open: "BlockNumber"
        }
    },
    ExtendedBalance: "u128",
    RawSolution: "RawSolutionWith16",
    RawSolutionWith16: {
        compact: "CompactAssignmentsWith16",
        score: "ElectionScore",
        round: "u32"
    },
    RawSolutionWith24: {
        compact: "CompactAssignmentsWith24",
        score: "ElectionScore",
        round: "u32"
    },
    RawSolutionTo265: "RawSolutionWith16",
    ReadySolution: {
        supports: "SolutionSupports",
        score: "ElectionScore",
        compute: "ElectionCompute"
    },
    RoundSnapshot: {
        voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
        targets: "Vec<AccountId>"
    },
    SeatHolder: {
        who: "AccountId",
        stake: "Balance",
        deposit: "Balance"
    },
    SignedSubmission: {
        _fallback: "SignedSubmissionTo276",
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution",
        reward: "Balance"
    },
    SignedSubmissionTo276: {
        who: "AccountId",
        deposit: "Balance",
        solution: "RawSolution"
    },
    SignedSubmissionOf: "SignedSubmission",
    SolutionOrSnapshotSize: {
        voters: "Compact<u32>",
        targets: "Compact<u32>"
    },
    SolutionSupport: {
        total: "ExtendedBalance",
        voters: "Vec<(AccountId, ExtendedBalance)>"
    },
    SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
    Supports: "SolutionSupports",
    SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
    Voter: {
        votes: "Vec<AccountId>",
        stake: "Balance",
        deposit: "Balance"
    },
    VoteWeight: "u64"
};
var definitions_default37 = {
    rpc: {},
    types: objectSpread({}, deprecated, phragmen, {
        ActiveEraInfo: {
            index: "EraIndex",
            start: "Option<Moment>"
        },
        EraIndex: "u32",
        EraRewardPoints: {
            total: "RewardPoint",
            individual: "BTreeMap<AccountId, RewardPoint>"
        },
        EraRewards: {
            total: "u32",
            rewards: "Vec<u32>"
        },
        Exposure: {
            total: "Compact<Balance>",
            own: "Compact<Balance>",
            others: "Vec<IndividualExposure>"
        },
        Forcing: {
            _enum: [
                "NotForcing",
                "ForceNew",
                "ForceNone",
                "ForceAlways"
            ]
        },
        IndividualExposure: {
            who: "AccountId",
            value: "Compact<Balance>"
        },
        KeyType: "AccountId",
        MomentOf: "Moment",
        Nominations: {
            targets: "Vec<AccountId>",
            submittedIn: "EraIndex",
            suppressed: "bool"
        },
        NominatorIndex: "u32",
        NominatorIndexCompact: "Compact<NominatorIndex>",
        OffchainAccuracy: "PerU16",
        OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
        PhragmenScore: "[u128; 3]",
        Points: "u32",
        RewardDestination: {
            _enum: {
                Staked: "Null",
                Stash: "Null",
                Controller: "Null",
                Account: "AccountId",
                None: "Null"
            }
        },
        RewardPoint: "u32",
        SlashJournalEntry: {
            who: "AccountId",
            amount: "Balance",
            ownSlash: "Balance"
        },
        SlashingSpansTo204: {
            spanIndex: "SpanIndex",
            lastStart: "EraIndex",
            prior: "Vec<EraIndex>"
        },
        SlashingSpans: {
            spanIndex: "SpanIndex",
            lastStart: "EraIndex",
            lastNonzeroSlash: "EraIndex",
            prior: "Vec<EraIndex>"
        },
        SpanIndex: "u32",
        SpanRecord: {
            slashed: "Balance",
            paidOut: "Balance"
        },
        StakingLedgerTo223: {
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>"
        },
        StakingLedgerTo240: {
            _fallback: "StakingLedgerTo223",
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>",
            lastReward: "Option<EraIndex>"
        },
        StakingLedger: {
            stash: "AccountId",
            total: "Compact<Balance>",
            active: "Compact<Balance>",
            unlocking: "Vec<UnlockChunk>",
            claimedRewards: "Vec<EraIndex>"
        },
        UnappliedSlashOther: "(AccountId, Balance)",
        UnappliedSlash: {
            validator: "AccountId",
            own: "Balance",
            others: "Vec<UnappliedSlashOther>",
            reporters: "Vec<AccountId>",
            payout: "Balance"
        },
        UnlockChunk: {
            value: "Compact<Balance>",
            era: "Compact<BlockNumber>"
        },
        ValidatorIndex: "u16",
        ValidatorIndexCompact: "Compact<ValidatorIndex>",
        ValidatorPrefs: "ValidatorPrefsWithBlocked",
        ValidatorPrefsWithCommission: {
            commission: "Compact<Perbill>"
        },
        ValidatorPrefsWithBlocked: {
            commission: "Compact<Perbill>",
            blocked: "bool"
        },
        ValidatorPrefsTo196: {
            validatorPayment: "Compact<Balance>"
        },
        ValidatorPrefsTo145: {
            unstakeThreshold: "Compact<u32>",
            validatorPayment: "Compact<Balance>"
        }
    })
};
// ../../node_modules/@polkadot/types/interfaces/support/definitions.js
var definitions_default38 = {
    rpc: {},
    types: {
        WeightToFeeCoefficient: {
            coeffInteger: "Balance",
            coeffFrac: "Perbill",
            negative: "bool",
            degree: "u8"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/syncstate/rpc.js
var rpc8 = {
    genSyncSpec: {
        description: "Returns the json-serialized chainspec running the node, with a sync state.",
        endpoint: "sync_state_genSyncSpec",
        params: [
            {
                name: "raw",
                type: "bool"
            }
        ],
        type: "Json"
    }
};
// ../../node_modules/@polkadot/types/interfaces/syncstate/definitions.js
var definitions_default39 = {
    rpc: rpc8,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/system/rpc.js
var rpc9 = {
    accountNextIndex: {
        alias: [
            "account_nextIndex"
        ],
        description: "Retrieves the next accountIndex as available on the node",
        params: [
            {
                name: "accountId",
                type: "AccountId"
            }
        ],
        type: "Index"
    },
    addLogFilter: {
        description: "Adds the supplied directives to the current log filter",
        params: [
            {
                name: "directives",
                type: "Text"
            }
        ],
        type: "Null"
    },
    addReservedPeer: {
        description: "Adds a reserved peer",
        params: [
            {
                name: "peer",
                type: "Text"
            }
        ],
        type: "Text"
    },
    chain: {
        description: "Retrieves the chain",
        params: [],
        type: "Text"
    },
    chainType: {
        description: "Retrieves the chain type",
        params: [],
        type: "ChainType"
    },
    dryRun: {
        alias: [
            "system_dryRunAt"
        ],
        description: "Dry run an extrinsic at a given block",
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ApplyExtrinsicResult"
    },
    health: {
        description: "Return health status of the node",
        noErrorLog: true,
        params: [],
        type: "Health"
    },
    localListenAddresses: {
        description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
        params: [],
        type: "Vec<Text>"
    },
    localPeerId: {
        description: "Returns the base58-encoded PeerId of the node",
        params: [],
        type: "Text"
    },
    name: {
        description: "Retrieves the node name",
        params: [],
        type: "Text"
    },
    networkState: {
        alias: [
            "system_unstable_networkState"
        ],
        description: "Returns current state of the network",
        params: [],
        type: "NetworkState"
    },
    nodeRoles: {
        description: "Returns the roles the node is running as",
        params: [],
        type: "Vec<NodeRole>"
    },
    peers: {
        description: "Returns the currently connected peers",
        params: [],
        type: "Vec<PeerInfo>"
    },
    properties: {
        description: "Get a custom set of properties as a JSON object, defined in the chain spec",
        params: [],
        type: "ChainProperties"
    },
    removeReservedPeer: {
        description: "Remove a reserved peer",
        params: [
            {
                name: "peerId",
                type: "Text"
            }
        ],
        type: "Text"
    },
    reservedPeers: {
        description: "Returns the list of reserved peers",
        params: [],
        type: "Vec<Text>"
    },
    resetLogFilter: {
        description: "Resets the log filter to Substrate defaults",
        params: [],
        type: "Null"
    },
    syncState: {
        description: "Returns the state of the syncing of the node",
        params: [],
        type: "SyncState"
    },
    version: {
        description: "Retrieves the version of the node",
        params: [],
        type: "Text"
    }
};
// ../../node_modules/@polkadot/types/interfaces/system/runtime.js
var runtime15 = {
    AccountNonceApi: [
        {
            methods: {
                account_nonce: {
                    description: "The API to query account nonce (aka transaction index)",
                    params: [
                        {
                            name: "accountId",
                            type: "AccountId"
                        }
                    ],
                    type: "Index"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/system/definitions.js
var definitions_default40 = {
    rpc: rpc9,
    runtime: runtime15,
    types: {
        AccountInfo: "AccountInfoWithTripleRefCount",
        AccountInfoWithRefCountU8: {
            nonce: "Index",
            refcount: "u8",
            data: "AccountData"
        },
        AccountInfoWithRefCount: {
            _fallback: "AccountInfoWithRefCountU8",
            nonce: "Index",
            refcount: "RefCount",
            data: "AccountData"
        },
        AccountInfoWithDualRefCount: {
            _fallback: "AccountInfoWithRefCount",
            nonce: "Index",
            consumers: "RefCount",
            providers: "RefCount",
            data: "AccountData"
        },
        // original naming
        AccountInfoWithProviders: "AccountInfoWithDualRefCount",
        AccountInfoWithTripleRefCount: {
            _fallback: "AccountInfoWithDualRefCount",
            nonce: "Index",
            consumers: "RefCount",
            providers: "RefCount",
            sufficients: "RefCount",
            data: "AccountData"
        },
        ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
        ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
        ArithmeticError: {
            _enum: [
                "Underflow",
                "Overflow",
                "DivisionByZero"
            ]
        },
        BlockLength: {
            max: "PerDispatchClassU32"
        },
        BlockWeights: {
            baseBlock: "Weight",
            maxBlock: "Weight",
            perClass: "PerDispatchClassWeightsPerClass"
        },
        ChainProperties: "GenericChainProperties",
        ChainType: {
            _enum: {
                Development: "Null",
                Local: "Null",
                Live: "Null",
                Custom: "Text"
            }
        },
        ConsumedWeight: "PerDispatchClassWeight",
        DigestOf: "Digest",
        DispatchClass: {
            _enum: [
                "Normal",
                "Operational",
                "Mandatory"
            ]
        },
        DispatchError: {
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModule",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                TooManyConsumers: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError",
                Exhausted: "Null",
                Corruption: "Null",
                Unavailable: "Null"
            }
        },
        DispatchErrorPre6: {
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModulePre6",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                TooManyConsumers: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError"
            }
        },
        DispatchErrorPre6First: {
            // The enum was modified mid-flight, affecting asset chains -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            _enum: {
                Other: "Null",
                CannotLookup: "Null",
                BadOrigin: "Null",
                Module: "DispatchErrorModulePre6",
                ConsumerRemaining: "Null",
                NoProviders: "Null",
                Token: "TokenError",
                Arithmetic: "ArithmeticError",
                Transactional: "TransactionalError"
            }
        },
        DispatchErrorModuleU8: {
            index: "u8",
            error: "u8"
        },
        DispatchErrorModuleU8a: {
            index: "u8",
            error: "[u8; 4]"
        },
        DispatchErrorModule: "DispatchErrorModuleU8a",
        DispatchErrorModulePre6: "DispatchErrorModuleU8",
        DispatchErrorTo198: {
            module: "Option<u8>",
            error: "u8"
        },
        DispatchInfo: {
            weight: "Weight",
            class: "DispatchClass",
            paysFee: "Pays"
        },
        DispatchInfoTo190: {
            weight: "Weight",
            class: "DispatchClass"
        },
        DispatchInfoTo244: {
            weight: "Weight",
            class: "DispatchClass",
            paysFee: "bool"
        },
        DispatchOutcome: "Result<(), DispatchError>",
        DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
        DispatchResult: "Result<(), DispatchError>",
        DispatchResultOf: "DispatchResult",
        DispatchResultTo198: "Result<(), Text>",
        Event: "GenericEvent",
        EventId: "[u8; 2]",
        EventIndex: "u32",
        EventRecord: {
            phase: "Phase",
            event: "Event",
            topics: "Vec<Hash>"
        },
        Health: {
            peers: "u64",
            isSyncing: "bool",
            shouldHavePeers: "bool"
        },
        InvalidTransaction: {
            _enum: {
                Call: "Null",
                Payment: "Null",
                Future: "Null",
                Stale: "Null",
                BadProof: "Null",
                AncientBirthBlock: "Null",
                ExhaustsResources: "Null",
                Custom: "u8",
                BadMandatory: "Null",
                MandatoryDispatch: "Null",
                BadSigner: "Null"
            }
        },
        Key: "Bytes",
        LastRuntimeUpgradeInfo: {
            specVersion: "Compact<u32>",
            specName: "Text"
        },
        NetworkState: {
            peerId: "Text",
            listenedAddresses: "Vec<Text>",
            externalAddresses: "Vec<Text>",
            connectedPeers: "HashMap<Text, Peer>",
            notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
            averageDownloadPerSec: "u64",
            averageUploadPerSec: "u64",
            peerset: "NetworkStatePeerset"
        },
        NetworkStatePeerset: {
            messageQueue: "u64",
            nodes: "HashMap<Text, NetworkStatePeersetInfo>"
        },
        NetworkStatePeersetInfo: {
            connected: "bool",
            reputation: "i32"
        },
        NodeRole: {
            _enum: {
                Full: "Null",
                LightClient: "Null",
                Authority: "Null",
                UnknownRole: "u8"
            }
        },
        NotConnectedPeer: {
            knownAddresses: "Vec<Text>",
            latestPingTime: "Option<PeerPing>",
            versionString: "Option<Text>"
        },
        Peer: {
            enabled: "bool",
            endpoint: "PeerEndpoint",
            knownAddresses: "Vec<Text>",
            latestPingTime: "PeerPing",
            open: "bool",
            versionString: "Text"
        },
        PeerEndpoint: {
            listening: "PeerEndpointAddr"
        },
        PeerEndpointAddr: {
            _alias: {
                localAddr: "local_addr",
                sendBackAddr: "send_back_addr"
            },
            localAddr: "Text",
            sendBackAddr: "Text"
        },
        PeerPing: {
            nanos: "u64",
            secs: "u64"
        },
        PeerInfo: {
            peerId: "Text",
            roles: "Text",
            protocolVersion: "u32",
            bestHash: "Hash",
            bestNumber: "BlockNumber"
        },
        PerDispatchClassU32: {
            normal: "u32",
            operational: "u32",
            mandatory: "u32"
        },
        PerDispatchClassWeight: {
            normal: "Weight",
            operational: "Weight",
            mandatory: "Weight"
        },
        PerDispatchClassWeightsPerClass: {
            normal: "WeightPerClass",
            operational: "WeightPerClass",
            mandatory: "WeightPerClass"
        },
        Phase: {
            _enum: {
                ApplyExtrinsic: "u32",
                Finalization: "Null",
                Initialization: "Null"
            }
        },
        RawOrigin: {
            _enum: {
                Root: "Null",
                Signed: "AccountId",
                None: "Null"
            }
        },
        RefCount: "u32",
        RefCountTo259: "u8",
        SyncState: {
            startingBlock: "BlockNumber",
            currentBlock: "BlockNumber",
            highestBlock: "Option<BlockNumber>"
        },
        SystemOrigin: "RawOrigin",
        TokenError: {
            _enum: [
                "NoFunds",
                "WouldDie",
                "BelowMinimum",
                "CannotCreate",
                "UnknownAsset",
                "Frozen",
                "Unsupported",
                // these are dropped, but still in older versions
                // (if this adjusts, will need to take a re-look)
                "Underflow",
                "Overflow"
            ]
        },
        TransactionValidityError: {
            _enum: {
                Invalid: "InvalidTransaction",
                Unknown: "UnknownTransaction"
            }
        },
        TransactionalError: {
            _enum: [
                "LimitReached",
                "NoLayer"
            ]
        },
        UnknownTransaction: {
            _enum: {
                CannotLookup: "Null",
                NoUnsignedValidator: "Null",
                Custom: "u8"
            }
        },
        WeightPerClass: {
            baseExtrinsic: "Weight",
            maxExtrinsic: "Option<Weight>",
            maxTotal: "Option<Weight>",
            reserved: "Option<Weight>"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/treasury/definitions.js
var definitions_default41 = {
    rpc: {},
    types: {
        Bounty: {
            proposer: "AccountId",
            value: "Balance",
            fee: "Balance",
            curatorDeposit: "Balance",
            bond: "Balance",
            status: "BountyStatus"
        },
        BountyIndex: "u32",
        BountyStatus: {
            _enum: {
                Proposed: "Null",
                Approved: "Null",
                Funded: "Null",
                CuratorProposed: "BountyStatusCuratorProposed",
                Active: "BountyStatusActive",
                PendingPayout: "BountyStatusPendingPayout"
            }
        },
        BountyStatusActive: {
            curator: "AccountId",
            updateDue: "BlockNumber"
        },
        BountyStatusCuratorProposed: {
            curator: "AccountId"
        },
        BountyStatusPendingPayout: {
            curator: "AccountId",
            beneficiary: "AccountId",
            unlockAt: "BlockNumber"
        },
        OpenTip: {
            reason: "Hash",
            who: "AccountId",
            finder: "AccountId",
            deposit: "Balance",
            closes: "Option<BlockNumber>",
            tips: "Vec<OpenTipTip>",
            findersFee: "bool"
        },
        OpenTipTo225: {
            reason: "Hash",
            who: "AccountId",
            finder: "Option<OpenTipFinderTo225>",
            closes: "Option<BlockNumber>",
            tips: "Vec<OpenTipTip>"
        },
        OpenTipFinderTo225: "(AccountId, Balance)",
        OpenTipTip: "(AccountId, Balance)",
        TreasuryProposal: {
            proposer: "AccountId",
            value: "Balance",
            beneficiary: "AccountId",
            bond: "Balance"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/txpayment/definitions.js
var definitions_default42 = {
    rpc: {},
    types: {
        Multiplier: "Fixed128"
    }
};
// ../../node_modules/@polkadot/types/interfaces/txqueue/runtime.js
var runtime16 = {
    TaggedTransactionQueue: [
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "source",
                            type: "TransactionSource"
                        },
                        {
                            name: "tx",
                            type: "Extrinsic"
                        },
                        {
                            name: "blockHash",
                            type: "BlockHash"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 3
        },
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "source",
                            type: "TransactionSource"
                        },
                        {
                            name: "tx",
                            type: "Extrinsic"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 2
        },
        {
            methods: {
                validate_transaction: {
                    description: "Validate the transaction.",
                    params: [
                        {
                            name: "tx",
                            type: "Extrinsic"
                        }
                    ],
                    type: "TransactionValidity"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/txqueue/definitions.js
var definitions_default43 = {
    rpc: {},
    runtime: runtime16,
    types: {
        TransactionSource: {
            _enum: [
                "InBlock",
                "Local",
                "External"
            ]
        },
        TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
        ValidTransaction: {
            priority: "TransactionPriority",
            requires: "Vec<TransactionTag>",
            provides: "Vec<TransactionTag>",
            longevity: "TransactionLongevity",
            propagate: "bool"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/uniques/definitions.js
var definitions_default44 = {
    rpc: {},
    types: {
        ClassId: "u32",
        InstanceId: "u32",
        DepositBalance: "Balance",
        DepositBalanceOf: "Balance",
        ClassDetails: {
            owner: "AccountId",
            issuer: "AccountId",
            admin: "AccountId",
            freezer: "AccountId",
            totalDeposit: "DepositBalance",
            freeHolding: "bool",
            instances: "u32",
            instanceMetadatas: "u32",
            attributes: "u32",
            isFrozen: "bool"
        },
        DestroyWitness: {
            instances: "Compact<u32>",
            instanceMetadatas: "Compact<u32>",
            attributes: "Compact<u32>"
        },
        InstanceDetails: {
            owner: "AccountId",
            approved: "Option<AccountId>",
            isFrozen: "bool",
            deposit: "DepositBalance"
        },
        ClassMetadata: {
            deposit: "DepositBalance",
            data: "Vec<u8>",
            isFrozen: "bool"
        },
        InstanceMetadata: {
            deposit: "DepositBalance",
            data: "Vec<u8>",
            isFrozen: "bool"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/utility/definitions.js
var definitions_default45 = {
    rpc: {},
    types: {
        Multisig: {
            when: "Timepoint",
            deposit: "Balance",
            depositor: "AccountId",
            approvals: "Vec<AccountId>"
        },
        Timepoint: {
            height: "BlockNumber",
            index: "u32"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/vesting/definitions.js
var definitions_default46 = {
    rpc: {},
    types: {
        VestingInfo: {
            locked: "Balance",
            perBlock: "Balance",
            startingBlock: "BlockNumber"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/attestations/definitions.js
var definitions_default47 = {
    rpc: {},
    types: {
        BlockAttestations: {
            receipt: "CandidateReceipt",
            valid: "Vec<AccountId>",
            invalid: "Vec<AccountId>"
        },
        IncludedBlocks: {
            actualNumber: "BlockNumber",
            session: "SessionIndex",
            randomSeed: "H256",
            activeParachains: "Vec<ParaId>",
            paraBlocks: "Vec<Hash>"
        },
        MoreAttestations: {}
    }
};
// ../../node_modules/@polkadot/types/interfaces/bridges/definitions.js
var definitions_default48 = {
    rpc: {},
    types: {
        BridgedBlockHash: "H256",
        BridgedBlockNumber: "BlockNumber",
        BridgedHeader: "Header",
        BridgeMessageId: "(LaneId, MessageNonce)",
        CallOrigin: {
            _enum: {
                SourceRoot: "Null",
                TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
                SourceAccount: "AccountId"
            }
        },
        ChainId: "[u8; 4]",
        DeliveredMessages: {
            begin: "MessageNonce",
            end: "MessageNonce",
            // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
            dispatchResults: "BitVec"
        },
        DispatchFeePayment: {
            _enum: [
                "AtSourceChain",
                "AtTargetChain"
            ]
        },
        InboundLaneData: {
            relayers: "Vec<UnrewardedRelayer>",
            lastConfirmedNonce: "MessageNonce"
        },
        InboundRelayer: "AccountId",
        InitializationData: {
            header: "Header",
            authorityList: "AuthorityList",
            setId: "SetId",
            isHalted: "bool"
        },
        LaneId: "[u8; 4]",
        MessageData: {
            payload: "Bytes",
            fee: "Balance"
        },
        MessagesDeliveryProofOf: {
            bridgedHeaderHash: "BlockHash",
            storageProof: "Vec<Bytes>",
            lane: "LaneId"
        },
        MessageKey: {
            laneId: "LaneId",
            nonce: "MessageNonce"
        },
        MessageNonce: "u64",
        MessagesProofOf: {
            bridgedHeaderHash: "BridgedBlockHash",
            storageProof: "Vec<Bytes>",
            lane: "LaneId",
            noncesStart: "MessageNonce",
            noncesEnd: "MessageNonce"
        },
        OperatingMode: {
            _enum: [
                "Normal",
                "RejectingOutboundMessages",
                "Halted"
            ]
        },
        OutboundLaneData: {
            oldestUnprunedNonce: "MessageNonce",
            latestReceivedNonce: "MessageNonce",
            latestGeneratedNonce: "MessageNonce"
        },
        OutboundMessageFee: "Balance",
        OutboundPayload: {
            specVersion: "u32",
            weight: "Weight",
            origin: "CallOrigin",
            dispatchFeePayment: "DispatchFeePayment",
            call: "Bytes"
        },
        Parameter: "Null",
        RelayerId: "AccountId",
        UnrewardedRelayer: {
            relayer: "RelayerId",
            messages: "DeliveredMessages"
        },
        UnrewardedRelayersState: {
            unrewardedRelayer_Entries: "MessageNonce",
            messagesInOldestEntry: "MessageNonce",
            totalMessages: "MessageNonce"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/claims/definitions.js
var definitions_default49 = {
    rpc: {},
    types: {
        StatementKind: {
            _enum: [
                "Regular",
                "Saft"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
var definitions_default50 = {
    rpc: {},
    types: {
        FundIndex: "u32",
        LastContribution: {
            _enum: {
                Never: "Null",
                PreEnding: "u32",
                Ending: "BlockNumber"
            }
        },
        FundInfo: {
            depositor: "AccountId",
            verifier: "Option<MultiSigner>",
            deposit: "Balance",
            raised: "Balance",
            end: "BlockNumber",
            cap: "Balance",
            lastContribution: "LastContribution",
            firstPeriod: "LeasePeriod",
            lastPeriod: "LeasePeriod",
            trieIndex: "TrieIndex"
        },
        TrieIndex: "u32"
    }
};
// ../../node_modules/@polkadot/types/interfaces/cumulus/runtime.js
var runtime17 = {
    CollectCollationInfo: [
        {
            methods: {
                collect_collation_info: {
                    description: "Collect information about a collation.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "CollationInfo"
                }
            },
            version: 2
        },
        {
            methods: {
                collect_collation_info: {
                    description: "Collect information about a collation.",
                    params: [],
                    type: "CollationInfoV1"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/cumulus/definitions.js
var dmpQueue = {
    CollationInfo: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber",
        headData: "HeadData"
    },
    CollationInfoV1: {
        upwardMessages: "Vec<UpwardMessage>",
        horizontalMessages: "Vec<OutboundHrmpMessage>",
        newValidationCode: "Option<ValidationCode>",
        processedDownwardMessages: "u32",
        hrmpWatermark: "RelayBlockNumber"
    },
    ConfigData: {
        maxIndividual: "Weight"
    },
    MessageId: "[u8; 32]",
    OverweightIndex: "u64",
    PageCounter: "u32",
    PageIndexData: {
        beginUsed: "PageCounter",
        endUsed: "PageCounter",
        overweightCount: "OverweightIndex"
    }
};
var definitions_default51 = {
    rpc: {},
    runtime: runtime17,
    types: dmpQueue
};
// ../../node_modules/@polkadot/types/interfaces/finality/runtime.js
var finalityV1 = {
    methods: {
        best_finalized: {
            description: "Returns number and hash of the best finalized header known to the bridge module.",
            params: [],
            type: "(BlockNumber, Hash)"
        }
    },
    version: 1
};
var runtime18 = {
    KusamaFinalityApi: [
        finalityV1
    ],
    PolkadotFinalityApi: [
        finalityV1
    ],
    RococoFinalityApi: [
        finalityV1
    ],
    WestendFinalityApi: [
        finalityV1
    ]
};
// ../../node_modules/@polkadot/types/interfaces/finality/definitions.js
var definitions_default52 = {
    rpc: {},
    runtime: runtime18,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/parachains/hrmp.js
var hrmp_default = {
    HrmpChannel: {
        maxCapacity: "u32",
        maxTotalSize: "u32",
        maxMessageSize: "u32",
        msgCount: "u32",
        totalSize: "u32",
        mqcHead: "Option<Hash>",
        senderDeposit: "Balance",
        recipientDeposit: "Balance"
    },
    HrmpChannelId: {
        sender: "u32",
        receiver: "u32"
    },
    HrmpOpenChannelRequest: {
        confirmed: "bool",
        age: "SessionIndex",
        senderDeposit: "Balance",
        maxMessageSize: "u32",
        maxCapacity: "u32",
        maxTotalSize: "u32"
    }
};
// ../../node_modules/@polkadot/types/interfaces/parachains/runtime.js
var PH_V1_TO_V2 = {
    assumed_validation_data: {
        description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "hash",
                type: "Hash"
            }
        ],
        type: "Option<(PersistedValidationData, ValidationCodeHash)>"
    },
    availability_cores: {
        description: "Yields information on all availability cores as relevant to the child block.",
        params: [],
        type: "Vec<CoreState>"
    },
    candidate_events: {
        description: "Get a vector of events concerning candidates that occurred within a block.",
        params: [],
        type: "Vec<CandidateEvent>"
    },
    candidate_pending_availability: {
        description: "Get the receipt of a candidate pending availability.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Option<CommittedCandidateReceipt>"
    },
    check_validation_outputs: {
        description: "Checks if the given validation outputs pass the acceptance criteria.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "outputs",
                type: "CandidateCommitments"
            }
        ],
        type: "bool"
    },
    dmq_contents: {
        description: "Get all the pending inbound messages in the downward message queue for a para.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Vec<InboundDownwardMessage>"
    },
    inbound_hrmp_channels_contents: {
        description: "Get the contents of all channels addressed to the given recipient.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            }
        ],
        type: "Vec<InboundHrmpMessage>"
    },
    on_chain_votes: {
        description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
        params: [],
        type: "Option<ScrapedOnChainVotes>"
    },
    persisted_validation_data: {
        description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "Option<PersistedValidationData>"
    },
    session_index_for_child: {
        description: "Returns the session index expected at a child of the block.",
        params: [],
        type: "SessionIndex"
    },
    validation_code: {
        description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "ValidationCode"
    },
    validation_code_by_hash: {
        description: "Get the validation code from its hash.",
        params: [
            {
                name: "hash",
                type: "ValidationCodeHash"
            }
        ],
        type: "Option<ValidationCode>"
    },
    validator_groups: {
        description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
        params: [],
        type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
    },
    validators: {
        description: "Get the current validators.",
        params: [],
        type: "Vec<ValidatorId>"
    }
};
var PH_V2_TO_V3 = {
    pvfs_require_precheck: {
        description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
        params: [],
        type: "Vec<ValidationCodeHash>"
    },
    session_info: {
        description: "Get the session info for the given session, if stored.",
        params: [
            {
                name: "index",
                type: "SessionIndex"
            }
        ],
        type: "Option<SessionInfo>"
    },
    submit_pvf_check_statement: {
        description: "Submits a PVF pre-checking statement into the transaction pool.",
        params: [
            {
                name: "stmt",
                type: "PvfCheckStatement"
            },
            {
                name: "signature",
                type: "ValidatorSignature"
            }
        ],
        type: "Null"
    },
    validation_code_hash: {
        description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
        params: [
            {
                name: "paraId",
                type: "ParaId"
            },
            {
                name: "assumption",
                type: "OccupiedCoreAssumption"
            }
        ],
        type: "Option<ValidationCodeHash>"
    }
};
var runtime19 = {
    ParachainHost: [
        {
            methods: objectSpread({
                disputes: {
                    description: "Returns all onchain disputes.",
                    params: [],
                    type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
                }
            }, PH_V1_TO_V2, PH_V2_TO_V3),
            version: 3
        },
        {
            methods: objectSpread({}, PH_V1_TO_V2, PH_V2_TO_V3),
            version: 2
        },
        {
            methods: objectSpread({
                session_info: {
                    description: "Get the session info for the given session, if stored.",
                    params: [
                        {
                            name: "index",
                            type: "SessionIndex"
                        }
                    ],
                    type: "Option<OldV1SessionInfo>"
                }
            }, PH_V1_TO_V2),
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/parachains/slots.js
var SlotRange10 = {
    _enum: [
        "ZeroZero",
        "ZeroOne",
        "ZeroTwo",
        "ZeroThree",
        "OneOne",
        "OneTwo",
        "OneThree",
        "TwoTwo",
        "TwoThree",
        "ThreeThree"
    ]
};
var SlotRange = {
    _enum: [
        "ZeroZero",
        "ZeroOne",
        "ZeroTwo",
        "ZeroThree",
        "ZeroFour",
        "ZeroFive",
        "ZeroSix",
        "ZeroSeven",
        "OneOne",
        "OneTwo",
        "OneThree",
        "OneFour",
        "OneFive",
        "OneSix",
        "OneSeven",
        "TwoTwo",
        "TwoThree",
        "TwoFour",
        "TwoFive",
        "TwoSix",
        "TwoSeven",
        "ThreeThree",
        "ThreeFour",
        "ThreeFive",
        "ThreeSix",
        "ThreeSeven",
        "FourFour",
        "FourFive",
        "FourSix",
        "FourSeven",
        "FiveFive",
        "FiveSix",
        "FiveSeven",
        "SixSix",
        "SixSeven",
        "SevenSeven"
    ]
};
var oldTypes = {
    Bidder: {
        _enum: {
            New: "NewBidder",
            Existing: "ParaId"
        }
    },
    IncomingParachain: {
        _enum: {
            Unset: "NewBidder",
            Fixed: "IncomingParachainFixed",
            Deploy: "IncomingParachainDeploy"
        }
    },
    IncomingParachainDeploy: {
        code: "ValidationCode",
        initialHeadData: "HeadData"
    },
    IncomingParachainFixed: {
        codeHash: "Hash",
        codeSize: "u32",
        initialHeadData: "HeadData"
    },
    NewBidder: {
        who: "AccountId",
        sub: "SubId"
    },
    SubId: "u32"
};
var slots_default = objectSpread({}, oldTypes, {
    AuctionIndex: "u32",
    LeasePeriod: "BlockNumber",
    LeasePeriodOf: "BlockNumber",
    SlotRange10: SlotRange10,
    SlotRange: SlotRange,
    WinningData10: "[WinningDataEntry; ".concat(SlotRange10._enum.length, "]"),
    WinningData: "[WinningDataEntry; ".concat(SlotRange._enum.length, "]"),
    WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
    WinnersData10: "Vec<WinnersDataTuple10>",
    WinnersData: "Vec<WinnersDataTuple>",
    WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
    WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
});
// ../../node_modules/@polkadot/types/interfaces/parachains/definitions.js
var proposeTypes = {
    ParachainProposal: {
        proposer: "AccountId",
        genesisHead: "HeadData",
        validators: "Vec<ValidatorId>",
        name: "Bytes",
        balance: "Balance"
    },
    RegisteredParachainInfo: {
        validators: "Vec<ValidatorId>",
        proposer: "AccountId"
    }
};
var cumulusTypes = {
    ServiceQuality: {
        _enum: [
            "Ordered",
            "Fast"
        ]
    }
};
var disputeTypes = {
    DisputeLocation: {
        _enum: [
            "Local",
            "Remote"
        ]
    },
    DisputeResult: {
        _enum: [
            "Valid",
            "Invalid"
        ]
    },
    DisputeState: {
        validatorsFor: "BitVec",
        validatorsAgainst: "BitVec",
        start: "BlockNumber",
        concludedAt: "Option<BlockNumber>"
    },
    DisputeStatement: {
        _enum: {
            Valid: "ValidDisputeStatementKind",
            Invalid: "InvalidDisputeStatementKind"
        }
    },
    DisputeStatementSet: {
        candidateHash: "CandidateHash",
        session: "SessionIndex",
        statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
    },
    ExplicitDisputeStatement: {
        valid: "bool",
        candidateHash: "CandidateHash",
        session: "SessionIndex"
    },
    InvalidDisputeStatementKind: {
        _enum: [
            "Explicit"
        ]
    },
    MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
    ValidDisputeStatementKind: {
        _enum: {
            Explicit: "Null",
            BackingSeconded: "Hash",
            BackingValid: "Hash",
            ApprovalChecking: "Null"
        }
    }
};
var definitions_default53 = {
    rpc: {},
    runtime: runtime19,
    types: objectSpread({}, cumulusTypes, disputeTypes, hrmp_default, proposeTypes, slots_default, {
        AbridgedCandidateReceipt: {
            parachainIndex: "ParaId",
            relayParent: "Hash",
            headData: "HeadData",
            collator: "CollatorId",
            signature: "CollatorSignature",
            povBlockHash: "Hash",
            commitments: "CandidateCommitments"
        },
        AbridgedHostConfiguration: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            maxUpwardQueueCount: "u32",
            maxUpwardQueueSize: "u32",
            maxUpwardMessageSize: "u32",
            maxUpwardMessageNumPerCandidate: "u32",
            hrmpMaxMessageNumPerCandidate: "u32",
            validationUpgradeFrequency: "BlockNumber",
            validationUpgradeDelay: "BlockNumber"
        },
        AbridgedHrmpChannel: {
            maxCapacity: "u32",
            maxTotalSize: "u32",
            maxMessageSize: "u32",
            msgCount: "u32",
            totalSize: "u32",
            mqcHead: "Option<Hash>"
        },
        AssignmentId: "AccountId",
        AssignmentKind: {
            _enum: {
                Parachain: "Null",
                Parathread: "(CollatorId, u32)"
            }
        },
        AttestedCandidate: {
            candidate: "AbridgedCandidateReceipt",
            validityVotes: "Vec<ValidityAttestation>",
            validatorIndices: "BitVec"
        },
        AuthorityDiscoveryId: "AccountId",
        AvailabilityBitfield: "BitVec",
        AvailabilityBitfieldRecord: {
            bitfield: "AvailabilityBitfield",
            submittedTt: "BlockNumber"
        },
        BackedCandidate: {
            candidate: "CommittedCandidateReceipt",
            validityVotes: "Vec<ValidityAttestation>",
            validatorIndices: "BitVec"
        },
        BufferedSessionChange: {
            applyAt: "BlockNumber",
            validators: "Vec<ValidatorId>",
            queued: "Vec<ValidatorId>",
            sessionIndex: "SessionIndex"
        },
        CandidateCommitments: {
            upwardMessages: "Vec<UpwardMessage>",
            horizontalMessages: "Vec<OutboundHrmpMessage>",
            newValidationCode: "Option<ValidationCode>",
            headData: "HeadData",
            processedDownwardMessages: "u32",
            hrmpWatermark: "BlockNumber"
        },
        CandidateDescriptor: {
            paraId: "ParaId",
            relayParent: "RelayChainHash",
            collatorId: "CollatorId",
            persistedValidationDataHash: "Hash",
            povHash: "Hash",
            erasureRoot: "Hash",
            signature: "CollatorSignature",
            paraHead: "Hash",
            validationCodeHash: "ValidationCodeHash"
        },
        CandidateEvent: {
            _enum: {
                CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
                CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
                CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
            }
        },
        CandidateHash: "Hash",
        CandidateInfo: {
            who: "AccountId",
            deposit: "Balance"
        },
        CandidatePendingAvailability: {
            core: "CoreIndex",
            hash: "CandidateHash",
            descriptor: "CandidateDescriptor",
            availabilityVotes: "BitVec",
            backers: "BitVec",
            relayParentNumber: "BlockNumber",
            backedInNumber: "BlockNumber",
            backingGroup: "GroupIndex"
        },
        CandidateReceipt: {
            descriptor: "CandidateDescriptor",
            commitmentsHash: "Hash"
        },
        GlobalValidationData: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            blockNumber: "BlockNumber"
        },
        CollatorId: "H256",
        CollatorSignature: "Signature",
        CommittedCandidateReceipt: {
            descriptor: "CandidateDescriptor",
            commitments: "CandidateCommitments"
        },
        CoreAssignment: {
            core: "CoreIndex",
            paraId: "ParaId",
            kind: "AssignmentKind",
            groupIdx: "GroupIndex"
        },
        CoreIndex: "u32",
        CoreOccupied: {
            _enum: {
                Parathread: "ParathreadEntry",
                Parachain: "Null"
            }
        },
        CoreState: {
            _enum: {
                Occupied: "OccupiedCore",
                Scheduled: "ScheduledCore",
                Free: "Null"
            }
        },
        DoubleVoteReport: {
            identity: "ValidatorId",
            first: "(Statement, ValidatorSignature)",
            second: "(Statement, ValidatorSignature)",
            proof: "MembershipProof",
            signingContext: "SigningContext"
        },
        DownwardMessage: "Bytes",
        GroupIndex: "u32",
        GroupRotationInfo: {
            sessionStartBlock: "BlockNumber",
            groupRotationFrequency: "BlockNumber",
            now: "BlockNumber"
        },
        GlobalValidationSchedule: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            blockNumber: "BlockNumber"
        },
        HeadData: "Bytes",
        HostConfiguration: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            maxUpwardQueueCount: "u32",
            maxUpwardQueueSize: "u32",
            maxUpwardMessageSize: "u32",
            maxUpwardMessageNumPerCandidate: "u32",
            hrmpMaxMessageNumPerCandidate: "u32",
            validationUpgradeFrequency: "BlockNumber",
            validationUpgradeDelay: "BlockNumber",
            maxPovSize: "u32",
            maxDownwardMessageSize: "u32",
            preferredDispatchableUpwardMessagesStepWeight: "Weight",
            hrmpMaxParachainOutboundChannels: "u32",
            hrmpMaxParathreadOutboundChannels: "u32",
            hrmpOpenRequestTtl: "u32",
            hrmpSenderDeposit: "Balance",
            hrmpRecipientDeposit: "Balance",
            hrmpChannelMaxCapacity: "u32",
            hrmpChannelMaxTotalSize: "u32",
            hrmpMaxParachainInboundChannels: "u32",
            hrmpMaxParathreadInboundChannels: "u32",
            hrmpChannelMaxMessageSize: "u32",
            codeRetentionPeriod: "BlockNumber",
            parathreadCores: "u32",
            parathreadRetries: "u32",
            groupRotationFrequency: "BlockNumber",
            chainAvailabilityPeriod: "BlockNumber",
            threadAvailabilityPeriod: "BlockNumber",
            schedulingLookahead: "u32",
            maxValidatorsPerCore: "Option<u32>",
            maxValidators: "Option<u32>",
            disputePeriod: "SessionIndex",
            disputePostConclusionAcceptancePeriod: "BlockNumber",
            disputeMaxSpamSlots: "u32",
            disputeConclusionByTimeOutPeriod: "BlockNumber",
            noShowSlots: "u32",
            nDelayTranches: "u32",
            zerothDelayTrancheWidth: "u32",
            neededApprovals: "u32",
            relayVrfModuloSamples: "u32"
        },
        InboundDownwardMessage: {
            pubSentAt: "BlockNumber",
            pubMsg: "DownwardMessage"
        },
        InboundHrmpMessage: {
            sentAt: "BlockNumber",
            data: "Bytes"
        },
        InboundHrmpMessages: "Vec<InboundHrmpMessage>",
        LocalValidationData: {
            parentHead: "HeadData",
            balance: "Balance",
            codeUpgradeAllowed: "Option<BlockNumber>"
        },
        MessageIngestionType: {
            downwardMessages: "Vec<InboundDownwardMessage>",
            horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
        },
        MessageQueueChain: "RelayChainHash",
        OccupiedCore: {
            nextUpOnAvailable: "Option<ScheduledCore>",
            occupiedSince: "BlockNumber",
            timeOutAt: "BlockNumber",
            nextUpOnTimeOut: "Option<ScheduledCore>",
            availability: "BitVec",
            groupResponsible: "GroupIndex",
            candidateHash: "CandidateHash",
            candidateDescriptor: "CandidateDescriptor"
        },
        OccupiedCoreAssumption: {
            _enum: [
                "Included,",
                "TimedOut",
                "Free"
            ]
        },
        OutboundHrmpMessage: {
            recipient: "u32",
            data: "Bytes"
        },
        ParachainDispatchOrigin: {
            _enum: [
                "Signed",
                "Parachain",
                "Root"
            ]
        },
        ParachainInherentData: {
            validationData: "PersistedValidationData",
            relayChainState: "StorageProof",
            downwardMessages: "Vec<InboundDownwardMessage>",
            horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
        },
        ParachainsInherentData: {
            bitfields: "SignedAvailabilityBitfields",
            backedCandidates: "Vec<BackedCandidate>",
            disputes: "MultiDisputeStatementSet",
            parentHeader: "Header"
        },
        ParaGenesisArgs: {
            genesisHead: "Bytes",
            validationCode: "Bytes",
            parachain: "bool"
        },
        ParaId: "u32",
        ParaInfo: {
            manager: "AccountId",
            deposit: "Balance",
            locked: "bool"
        },
        ParaLifecycle: {
            _enum: [
                "Onboarding",
                "Parathread",
                "Parachain",
                "UpgradingToParachain",
                "DowngradingToParathread",
                "OutgoingParathread",
                "OutgoingParachain"
            ]
        },
        ParaPastCodeMeta: {
            upgradeTimes: "Vec<ReplacementTimes>",
            lastPruned: "Option<BlockNumber>"
        },
        ParaScheduling: {
            _enum: [
                "Always",
                "Dynamic"
            ]
        },
        ParathreadClaim: "(ParaId, CollatorId)",
        ParathreadClaimQueue: {
            queue: "Vec<QueuedParathread>",
            nextCoreOffset: "u32"
        },
        ParathreadEntry: {
            claim: "ParathreadClaim",
            retries: "u32"
        },
        ParaValidatorIndex: "u32",
        PersistedValidationData: {
            parentHead: "HeadData",
            relayParentNumber: "RelayChainBlockNumber",
            relayParentStorageRoot: "Hash",
            maxPovSize: "u32"
        },
        PvfCheckStatement: {
            accept: "bool",
            subject: "ValidationCodeHash",
            sessionIndex: "SessionIndex",
            validatorIndex: "ParaValidatorIndex"
        },
        QueuedParathread: {
            claim: "ParathreadEntry",
            coreOffset: "u32"
        },
        RelayBlockNumber: "u32",
        RelayChainBlockNumber: "RelayBlockNumber",
        RelayHash: "Hash",
        RelayChainHash: "RelayHash",
        Remark: "[u8; 32]",
        ReplacementTimes: {
            expectedAt: "BlockNumber",
            activatedAt: "BlockNumber"
        },
        Retriable: {
            _enum: {
                Never: "Null",
                WithRetries: "u32"
            }
        },
        ScheduledCore: {
            paraId: "ParaId",
            collator: "Option<CollatorId>"
        },
        Scheduling: {
            _enum: [
                "Always",
                "Dynamic"
            ]
        },
        ScrapedOnChainVotes: {
            session: "SessionIndex",
            backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
            disputes: "MultiDisputeStatementSet"
        },
        SessionInfo: {
            activeValidatorIndices: "Vec<ParaValidatorIndex>",
            randomSeed: "[u8; 32]",
            disputePeriod: "SessionIndex",
            validators: "Vec<ValidatorId>",
            discoveryKeys: "Vec<AuthorityDiscoveryId>",
            assignmentKeys: "Vec<AssignmentId>",
            validatorGroups: "Vec<Vec<ValidatorIndex>>",
            nCores: "u32",
            zerothDelayTrancheWidth: "u32",
            relayVrfModuloSamples: "u32",
            nDelayTranches: "u32",
            noShowSlots: "u32",
            neededApprovals: "u32"
        },
        OldV1SessionInfo: {
            validators: "Vec<ValidatorId>",
            discoveryKeys: "Vec<AuthorityDiscoveryId>",
            assignmentKeys: "Vec<AssignmentId>",
            validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
            nCores: "u32",
            zerothDelayTrancheWidth: "u32",
            relayVrfModuloSamples: "u32",
            nDelayTranches: "u32",
            noShowSlots: "u32",
            neededApprovals: "u32"
        },
        SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
        SignedAvailabilityBitfield: {
            payload: "BitVec",
            validatorIndex: "ParaValidatorIndex",
            signature: "ValidatorSignature"
        },
        SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
        SigningContext: {
            sessionIndex: "SessionIndex",
            parentHash: "Hash"
        },
        Statement: {
            _enum: {
                Never: "Null",
                // starts at 1
                Candidate: "Hash",
                Valid: "Hash",
                Invalid: "Hash"
            }
        },
        TransientValidationData: {
            maxCodeSize: "u32",
            maxHeadDataSize: "u32",
            balance: "Balance",
            codeUpgradeAllowed: "Option<BlockNumber>",
            dmqLength: "u32"
        },
        UpgradeGoAhead: {
            _enum: [
                "Abort",
                "GoAhead"
            ]
        },
        UpgradeRestriction: {
            _enum: [
                "Present"
            ]
        },
        UpwardMessage: "Bytes",
        ValidationFunctionParams: {
            maxCodeSize: "u32",
            relayChainHeight: "RelayChainBlockNumber",
            codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
        },
        ValidationCode: "Bytes",
        ValidationCodeHash: "Hash",
        ValidationData: {
            persisted: "PersistedValidationData",
            transient: "TransientValidationData"
        },
        ValidationDataType: {
            validationData: "ValidationData",
            relayChainState: "Vec<Bytes>"
        },
        ValidatorSignature: "Signature",
        ValidityAttestation: {
            _enum: {
                Never: "Null",
                // starts at 1
                Implicit: "ValidatorSignature",
                Explicit: "ValidatorSignature"
            }
        },
        MessagingStateSnapshot: {
            relayDispatchQueueSize: "(u32, u32)",
            egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
        },
        MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
        SystemInherentData: "ParachainInherentData",
        VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
    })
};
// ../../node_modules/@polkadot/types/interfaces/poll/definitions.js
var definitions_default54 = {
    rpc: {},
    types: {
        Approvals: "[bool; 4]"
    }
};
// ../../node_modules/@polkadot/types/interfaces/purchase/definitions.js
var definitions_default55 = {
    rpc: {},
    types: {
        AccountStatus: {
            validity: "AccountValidity",
            freeBalance: "Balance",
            lockedBalance: "Balance",
            signature: "Vec<u8>",
            vat: "Permill"
        },
        AccountValidity: {
            _enum: [
                "Invalid",
                "Initiated",
                "Pending",
                "ValidLow",
                "ValidHigh",
                "Completed"
            ]
        }
    }
};
// ../../node_modules/@polkadot/types-create/types/types.js
var TypeDefInfo;
(function(TypeDefInfo2) {
    TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
    TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
    TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
    TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
    TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
    TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
    TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
    TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
    TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
    TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
    TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
    TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
    TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
    TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
    TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
    TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
    TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));
// ../../node_modules/@polkadot/types-codec/utils/util.js
function hasEq(o) {
    return isFunction(o.eq);
}
// ../../node_modules/@polkadot/types-codec/utils/compareArray.js
function compareArray(a, b) {
    if (Array.isArray(b)) {
        return a.length === b.length && isUndefined(a.find(function(v, index) {
            return hasEq(v) ? !v.eq(b[index]) : v !== b[index];
        }));
    }
    return false;
}
// ../../node_modules/@polkadot/types-codec/abstract/Array.js
var AbstractArray = /*#__PURE__*/ function(Array1) {
    _inherits(AbstractArray, Array1);
    var _super = _create_super(AbstractArray);
    function AbstractArray(registry, length) {
        _class_call_check(this, AbstractArray);
        var _this;
        _this = _super.call(this, length);
        _this.registry = registry;
        return _this;
    }
    _create_class(AbstractArray, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var total = compactToU8a(this.length).length;
                for(var i = 0; i < this.length; i++){
                    total += this[i].encodedLength;
                }
                return total;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return this.length === 0;
            }
        },
        {
            key: "length",
            get: /**
   * @description The length of the value
   */ function get() {
                return _get(_get_prototype_of(AbstractArray.prototype), "length", this);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return compareArray(this, other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    inner: this.inspectInner(),
                    outer: [
                        compactToU8a(this.length)
                    ]
                };
            }
        },
        {
            key: "inspectInner",
            value: function inspectInner() {
                var inner = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    inner[i] = this[i].inspect();
                }
                return inner;
            }
        },
        {
            /**
   * @description Converts the Object to an standard JavaScript Array
   */ key: "toArray",
            value: function toArray() {
                return Array.from(this);
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                var result = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    result[i] = this[i] && this[i].toHuman(isExtended);
                }
                return result;
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                var result = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    result[i] = this[i] && this[i].toJSON();
                }
                return result;
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                var result = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    result[i] = this[i] && this[i].toPrimitive();
                }
                return result;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                var result = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    result[i] = this[i].toString();
                }
                return "[".concat(result.join(", "), "]");
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = this.toU8aInner();
                return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([
                    compactToU8a(this.length)
                ].concat(_to_consumable_array(encoded)));
            }
        },
        {
            key: "toU8aInner",
            value: function toU8aInner(isBare) {
                var encoded = new Array(this.length);
                for(var i = 0; i < this.length; i++){
                    encoded[i] = this[i].toU8a(isBare);
                }
                return encoded;
            }
        }
    ], [
        {
            key: Symbol.species,
            get: /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */ function get() {
                return Array;
            }
        }
    ]);
    return AbstractArray;
}(_wrap_native_super(Array));
// ../../node_modules/@polkadot/types-codec/abstract/Base.js
var _raw;
var AbstractBase = /*#__PURE__*/ function() {
    function AbstractBase(registry, value1, initialU8aLength) {
        _class_call_check(this, AbstractBase);
        __privateAdd(this, _raw, void 0);
        this.initialU8aLength = initialU8aLength;
        __privateSet(this, _raw, value1);
        this.registry = registry;
    }
    _create_class(AbstractBase, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "inner",
            get: /**
   * @description returns the inner (wrapped value)
   */ function get() {
                return __privateGet(this, _raw);
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return __privateGet(this, _raw).isEmpty;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return __privateGet(this, _raw).eq(other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return __privateGet(this, _raw).inspect();
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */ key: "toHex",
            value: function toHex(isLe) {
                return __privateGet(this, _raw).toHex(isLe);
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return __privateGet(this, _raw).toHuman(isExtended);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return __privateGet(this, _raw).toJSON();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return __privateGet(this, _raw).toPrimitive();
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return __privateGet(this, _raw).toString();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return __privateGet(this, _raw).toU8a(isBare);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ /**
   * @description Returns the inner wrapped value (equivalent to valueOf)
   */ key: "unwrap",
            value: function unwrap() {
                return __privateGet(this, _raw);
            }
        },
        {
            /**
   * @description Returns the inner wrapped value
   */ key: "valueOf",
            value: function valueOf() {
                return __privateGet(this, _raw);
            }
        }
    ]);
    return AbstractBase;
}();
_raw = new WeakMap();
// ../../node_modules/@polkadot/types-codec/abstract/Int.js
var DEFAULT_UINT_BITS = 64;
var MAX_NUMBER_BITS = 52;
var MUL_P = new import_bn.default(1e4);
var FORMATTERS = [
    [
        "Perquintill",
        BN_QUINTILL
    ],
    [
        "Perbill",
        BN_BILLION
    ],
    [
        "Permill",
        BN_MILLION
    ],
    [
        "Percent",
        BN_HUNDRED
    ]
];
function isToBn2(value1) {
    return isFunction(value1.toBn);
}
function toPercentage(value1, divisor) {
    return "".concat((value1.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2), "%");
}
function decodeAbstractInt(value1, isNegative) {
    if (isNumber(value1)) {
        if (!Number.isInteger(value1) || value1 > Number.MAX_SAFE_INTEGER || value1 < Number.MIN_SAFE_INTEGER) {
            throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
        }
        return value1;
    } else if (isString(value1)) {
        if (isHex(value1, -1, true)) {
            return hexToBn(value1, {
                isLe: false,
                isNegative: isNegative
            }).toString();
        }
        if (value1.includes(".") || value1.includes(",") || value1.includes("e")) {
            throw new Error("String should not contain decimal points or scientific notation");
        }
        return value1;
    } else if (isBn(value1) || isBigInt(value1)) {
        return value1.toString();
    } else if (isObject(value1)) {
        if (isToBn2(value1)) {
            return value1.toBn().toString();
        }
        var keys2 = Object.keys(value1);
        if (keys2.length !== 1) {
            throw new Error("Unable to construct number from multi-key object");
        }
        return decodeAbstractInt(value1[keys2[0]], isNegative);
    } else if (!value1) {
        return 0;
    }
    throw new Error("Unable to create BN from unknown type ".concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1)));
}
var _bitLength;
var AbstractInt = /*#__PURE__*/ function(_import_bn_default) {
    _inherits(AbstractInt, _import_bn_default);
    var _super = _create_super(AbstractInt);
    function AbstractInt(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, bitLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_UINT_BITS, isSigned = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
        _class_call_check(this, AbstractInt);
        var _this;
        _this = _super.call(this, // shortcut isU8a as used in SCALE decoding
        isU8a(value1) ? bitLength <= 48 ? u8aToNumber(value1.subarray(0, bitLength / 8), {
            isNegative: isSigned
        }) : u8aToBn(value1.subarray(0, bitLength / 8), {
            isLe: true,
            isNegative: isSigned
        }).toString() : decodeAbstractInt(value1, isSigned));
        __privateAdd(_assert_this_initialized(_this), _bitLength, void 0);
        _this.registry = registry;
        __privateSet(_assert_this_initialized(_this), _bitLength, bitLength);
        _this.encodedLength = __privateGet(_assert_this_initialized(_this), _bitLength) / 8;
        _this.initialU8aLength = __privateGet(_assert_this_initialized(_this), _bitLength) / 8;
        _this.isUnsigned = !isSigned;
        var isNegative = _this.isNeg();
        var maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
        if (isNegative && !isSigned) {
            throw new Error("".concat(_this.toRawType(), ": Negative number passed to unsigned type"));
        } else if (_get((_assert_this_initialized(_this), _get_prototype_of(AbstractInt.prototype)), "bitLength", _this).call(_this) > maxBits) {
            throw new Error("".concat(_this.toRawType(), ": Input too large. Found input with ").concat(_get((_assert_this_initialized(_this), _get_prototype_of(AbstractInt.prototype)), "bitLength", _this).call(_this), " bits, expected ").concat(maxBits));
        }
        return _this;
    }
    _create_class(AbstractInt, [
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is a zero value (align elsewhere)
   */ function get() {
                return this.isZero();
            }
        },
        {
            /**
   * @description Returns the number of bits in the value
   */ key: "bitLength",
            value: function bitLength() {
                return __privateGet(this, _bitLength);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
            key: "eq",
            value: function eq(other) {
                return _get(_get_prototype_of(AbstractInt.prototype), "eq", this).call(this, isHex(other) ? hexToBn(other.toString(), {
                    isLe: false,
                    isNegative: !this.isUnsigned
                }) : bnToBn(other));
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description True if this value is the max of the type
   */ key: "isMax",
            value: function isMax() {
                var u8a = this.toU8a().filter(function(b) {
                    return b === 255;
                });
                return u8a.length === __privateGet(this, _bitLength) / 8;
            }
        },
        {
            /**
   * @description Returns a BigInt representation of the number
   */ key: "toBigInt",
            value: function toBigInt() {
                return BigInt(this.toString());
            }
        },
        {
            /**
   * @description Returns the BN representation of the number. (Compatibility)
   */ key: "toBn",
            value: function toBn() {
                return this;
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                var isLe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                return bnToHex(this, {
                    bitLength: this.bitLength(),
                    isLe: isLe,
                    isNegative: !this.isUnsigned
                });
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toHuman",
            value: function toHuman(isExpanded) {
                var rawType = this.toRawType();
                if (rawType === "Balance") {
                    return this.isMax() ? "everything" : formatBalance2(this, {
                        decimals: this.registry.chainDecimals[0],
                        withSi: true,
                        withUnit: this.registry.chainTokens[0]
                    });
                }
                var _ref = _sliced_to_array(FORMATTERS.find(function(param) {
                    var _param = _sliced_to_array(param, 1), type = _param[0];
                    return type === rawType;
                }) || [], 2), divisor = _ref[1];
                return divisor ? toPercentage(this, divisor) : formatNumber(this);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                var onlyHex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                return onlyHex || _get(_get_prototype_of(AbstractInt.prototype), "bitLength", this).call(this) > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
            }
        },
        {
            /**
   * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return _get(_get_prototype_of(AbstractInt.prototype), "bitLength", this).call(this) > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return _instanceof(this, this.registry.createClassUnsafe("Balance")) ? "Balance" : "".concat(this.isUnsigned ? "u" : "i").concat(this.bitLength());
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */ key: "toString",
            value: function toString(base) {
                return _get(_get_prototype_of(AbstractInt.prototype), "toString", this).call(this, base);
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return bnToU8a(this, {
                    bitLength: this.bitLength(),
                    isLe: true,
                    isNegative: !this.isUnsigned
                });
            }
        }
    ]);
    return AbstractInt;
}(import_bn.default);
_bitLength = new WeakMap();
// ../../node_modules/@polkadot/types-codec/utils/compareMap.js
function hasMismatch(a, b) {
    return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
}
function notEntry(value1) {
    return !Array.isArray(value1) || value1.length !== 2;
}
function compareMapArray(a, b) {
    return a.size === b.length && !b.some(function(e) {
        return notEntry(e) || hasMismatch(a.get(e[0]), e[1]);
    });
}
function compareMap(a, b) {
    if (Array.isArray(b)) {
        return compareMapArray(a, b);
    } else if (_instanceof(b, Map)) {
        return compareMapArray(a, _to_consumable_array(b.entries()));
    } else if (isObject(b)) {
        return compareMapArray(a, Object.entries(b));
    }
    return false;
}
// ../../node_modules/@polkadot/types-codec/utils/compareSet.js
function compareSetArray(a, b) {
    return a.size === b.length && !b.some(function(e) {
        return !a.has(e);
    });
}
function compareSet(a, b) {
    if (Array.isArray(b)) {
        return compareSetArray(a, b);
    } else if (_instanceof(b, Set)) {
        return compareSetArray(a, _to_consumable_array(b.values()));
    } else if (isObject(b)) {
        return compareSetArray(a, Object.values(b));
    }
    return false;
}
// ../../node_modules/@polkadot/types-codec/utils/decodeU8a.js
function formatFailure(registry, fn, result, param, u8a, i, count, Type2, key) {
    var message2 = param.message;
    var type = "";
    try {
        type = ": ".concat(new Type2(registry).toRawType());
    } catch (e) {}
    return "".concat(fn, ": failed at ").concat(u8aToHex(u8a.subarray(0, 16)), "…").concat(key ? " on ".concat(key) : "", " (index ").concat(i + 1, "/").concat(count, ")").concat(type, ":: ").concat(message2);
}
function decodeU8a(registry, result, u8a, param) {
    var _param = _sliced_to_array(param, 2), Types = _param[0], keys2 = _param[1];
    var count = result.length;
    var offset = 0;
    var i = 0;
    try {
        while(i < count){
            var value1 = new Types[i](registry, u8a.subarray(offset));
            offset += value1.initialU8aLength || value1.encodedLength;
            result[i] = value1;
            i++;
        }
    } catch (error2) {
        throw new Error(formatFailure(registry, "decodeU8a", result, error2, u8a.subarray(offset), i, count, Types[i], keys2[i]));
    }
    return [
        result,
        offset
    ];
}
function decodeU8aStruct(registry, result, u8a, param) {
    var _param = _sliced_to_array(param, 2), Types = _param[0], keys2 = _param[1];
    var count = result.length;
    var offset = 0;
    var i = 0;
    try {
        while(i < count){
            var value1 = new Types[i](registry, u8a.subarray(offset));
            offset += value1.initialU8aLength || value1.encodedLength;
            result[i] = [
                keys2[i],
                value1
            ];
            i++;
        }
    } catch (error2) {
        throw new Error(formatFailure(registry, "decodeU8aStruct", result, error2, u8a.subarray(offset), i, count, Types[i], keys2[i]));
    }
    return [
        result,
        offset
    ];
}
function decodeU8aVec(registry, result, u8a, startAt, Type2) {
    var count = result.length;
    var offset = startAt;
    var i = 0;
    try {
        while(i < count){
            var value1 = new Type2(registry, u8a.subarray(offset));
            offset += value1.initialU8aLength || value1.encodedLength;
            result[i] = value1;
            i++;
        }
    } catch (error2) {
        throw new Error(formatFailure(registry, "decodeU8aVec", result, error2, u8a.subarray(offset), i, count, Type2));
    }
    return [
        offset,
        offset - startAt
    ];
}
// ../../node_modules/@polkadot/types-codec/utils/typeToConstructor.js
function typeToConstructor(registry, type) {
    return isString(type) ? registry.createClassUnsafe(type) : type;
}
// ../../node_modules/@polkadot/types-codec/utils/mapToTypeMap.js
function mapToTypeMap(registry, input) {
    var entries = Object.entries(input);
    var count = entries.length;
    var output4 = [
        new Array(count),
        new Array(count)
    ];
    for(var i = 0; i < count; i++){
        output4[1][i] = entries[i][0];
        output4[0][i] = typeToConstructor(registry, entries[i][1]);
    }
    return output4;
}
// ../../node_modules/@polkadot/types-codec/utils/sanitize.js
var BOUNDED = [
    "BTreeMap",
    "BTreeSet",
    "HashMap",
    "Vec"
];
var ALLOWED_BOXES = BOUNDED.concat([
    "Compact",
    "DoNotConstruct",
    "Int",
    "Linkage",
    "Range",
    "RangeInclusive",
    "Result",
    "Opaque",
    "Option",
    "UInt",
    "WrapperKeepOpaque",
    "WrapperOpaque"
]);
var BOX_PRECEDING = [
    "<",
    "(",
    "[",
    '"',
    ",",
    " "
];
var mappings = [
    // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
    alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
    alias("VecDeque<", "Vec<", false),
    // <T::Balance as HasCompact>
    cleanupCompact(),
    // Change BoundedVec<Type, Size> to Vec<Type>
    removeExtensions("Bounded", true),
    // Change WeakVec<Type> to Vec<Type>
    removeExtensions("Weak", false),
    // Remove all the trait prefixes
    removeTraits(),
    // remove PairOf<T> -> (T, T)
    removePairOf(),
    // remove boxing, `Box<Proposal>` -> `Proposal`
    removeWrap("Box<"),
    // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
    removeGenerics(),
    // alias String -> Text (compat with jsonrpc methods)
    alias("String", "Text"),
    // alias Vec<u8> -> Bytes
    alias("Vec<u8>", "Bytes"),
    alias("&\\[u8\\]", "Bytes"),
    alias("&'static\\[u8\\]", "Bytes"),
    // alias RawAddress -> Address
    alias("RawAddress", "Address"),
    // lookups, mapped to Address/AccountId as appropriate in runtime
    alias("Lookup::Source", "LookupSource"),
    alias("Lookup::Target", "LookupTarget"),
    // HACK duplication between contracts & primitives, however contracts prefixed with exec
    alias("exec::StorageKey", "ContractStorageKey"),
    // flattens tuples with one value, `(AccountId)` -> `AccountId`
    flattenSingleTuple(),
    // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
    removeColons(),
    // remove all trailing spaces - this should always be the last
    trim()
];
function trim() {
    return function(value1) {
        return value1.trim();
    };
}
function findClosing(value1, start) {
    var depth = 0;
    for(var index = start; index < value1.length; index++){
        if (value1[index] === ">") {
            if (!depth) {
                return index;
            }
            depth--;
        } else if (value1[index] === "<") {
            depth++;
        }
    }
    throw new Error("Unable to find closing matching <> on '".concat(value1, "' (start ").concat(start, ")"));
}
function alias(src, dest) {
    var withChecks = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var from3 = new RegExp("(^".concat(src, "|").concat(BOX_PRECEDING.map(function(box) {
        return "\\".concat(box).concat(src);
    }).join("|"), ")"), "g");
    var to = function(src2) {
        from3.lastIndex = 0;
        return withChecks && BOX_PRECEDING.includes(src2[0]) ? "".concat(src2[0]).concat(dest) : dest;
    };
    return function(value1) {
        return value1.replace(from3, to);
    };
}
function cleanupCompact() {
    return function(value1) {
        if (value1.includes(" as HasCompact")) {
            for(var index = 0; index < value1.length; index++){
                if (value1[index] === "<") {
                    var end = findClosing(value1, index + 1) - 14;
                    if (value1.substring(end, end + 14) === " as HasCompact") {
                        value1 = "Compact<".concat(value1.substring(index + 1, end), ">");
                    }
                }
            }
        }
        return value1;
    };
}
function flattenSingleTuple() {
    var from1 = /,\)/g;
    var from22 = /\(([^,]+)\)/;
    return function(value1) {
        from1.lastIndex = 0;
        return value1.replace(from1, ")").replace(from22, "$1");
    };
}
function replaceTagWith(value1, matcher, replacer2) {
    var index = -1;
    while(true){
        index = value1.indexOf(matcher, index + 1);
        if (index === -1) {
            return value1;
        }
        var start = index + matcher.length;
        var end = findClosing(value1, start);
        value1 = "".concat(value1.substring(0, index)).concat(replacer2(value1.substring(start, end))).concat(value1.substring(end + 1));
    }
}
function removeExtensions(type, isSized) {
    return function(value1) {
        var _loop = function(i) {
            var tag = BOUNDED[i];
            value1 = replaceTagWith(value1, "".concat(type).concat(tag, "<"), function(v) {
                var parts = v.split(",").map(function(s) {
                    return s.trim();
                }).filter(function(s) {
                    return s;
                });
                if (isSized) {
                    parts.pop();
                }
                return "".concat(tag, "<").concat(parts.join(","), ">");
            });
        };
        for(var i = 0; i < BOUNDED.length; i++)_loop(i);
        return value1;
    };
}
function removeColons() {
    return function(value1) {
        var index = 0;
        while(index !== -1){
            index = value1.indexOf("::");
            if (index === 0) {
                value1 = value1.substring(2);
            } else if (index !== -1) {
                var start = index;
                while(start !== -1 && !BOX_PRECEDING.includes(value1[start])){
                    start--;
                }
                value1 = "".concat(value1.substring(0, start + 1)).concat(value1.substring(index + 2));
            }
        }
        return value1;
    };
}
function removeGenerics() {
    return function(value1) {
        var _loop = function(index) {
            if (value1[index] === "<") {
                var box = ALLOWED_BOXES.find(function(box2) {
                    var start = index - box2.length;
                    return start >= 0 && value1.substring(start, index) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                    (start === 0 || BOX_PRECEDING.includes(value1[start - 1]));
                });
                if (!box) {
                    var end = findClosing(value1, index + 1);
                    value1 = "".concat(value1.substring(0, index)).concat(value1.substring(end + 1));
                }
            }
        };
        for(var index = 0; index < value1.length; index++)_loop(index);
        return value1;
    };
}
function removePairOf() {
    var replacer2 = function(v) {
        return "(".concat(v, ",").concat(v, ")");
    };
    return function(value1) {
        return replaceTagWith(value1, "PairOf<", replacer2);
    };
}
function removeTraits() {
    var from1 = /\s/g;
    var from22 = /(T|Self)::/g;
    var from3 = /<(T|Self)asTrait>::/g;
    var from4 = /<Tas[a-z]+::Trait>::/g;
    var from5 = /<LookupasStaticLookup>/g;
    var from6 = /::Type/g;
    return function(value1) {
        from1.lastIndex = 0;
        from22.lastIndex = 0;
        from3.lastIndex = 0;
        from4.lastIndex = 0;
        from5.lastIndex = 0;
        from6.lastIndex = 0;
        return value1.replace(from1, "").replace(from22, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
    };
}
function removeWrap(check) {
    var replacer2 = function(v) {
        return v;
    };
    return function(value1) {
        return replaceTagWith(value1, check, replacer2);
    };
}
var sanitizeMap = /* @__PURE__ */ new Map();
function sanitize(value1) {
    var startValue = value1.toString();
    var memoized = sanitizeMap.get(startValue);
    if (memoized) {
        return memoized;
    }
    var result = startValue;
    for(var i = 0; i < mappings.length; i++){
        result = mappings[i](result);
    }
    sanitizeMap.set(startValue, result);
    return result;
}
// ../../node_modules/@polkadot/types-codec/utils/sortValues.js
function isArrayLike(arg) {
    return _instanceof(arg, Uint8Array) || Array.isArray(arg);
}
function isCodec2(arg) {
    return isFunction(arg && arg.toU8a);
}
function isEnum(arg) {
    return isCodec2(arg) && isNumber(arg.index) && isCodec2(arg.value);
}
function isNumberLike(arg) {
    return isNumber(arg) || isBn(arg) || isBigInt(arg);
}
function sortArray(a, b) {
    var sortRes = 0;
    var minLen = Math.min(a.length, b.length);
    for(var i = 0; i < minLen; ++i){
        sortRes = sortAsc(a[i], b[i]);
        if (sortRes !== 0) {
            return sortRes;
        }
    }
    return a.length - b.length;
}
function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
        return bnToBn(a).cmp(bnToBn(b));
    } else if (_instanceof(a, Map) && _instanceof(b, Map)) {
        return sortAsc(Array.from(a.values()), Array.from(b.values()));
    } else if (isEnum(a) && isEnum(b)) {
        return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    } else if (isArrayLike(a) && isArrayLike(b)) {
        return sortArray(a, b);
    } else if (isCodec2(a) && isCodec2(b)) {
        return sortAsc(a.toU8a(true), b.toU8a(true));
    }
    throw new Error("Attempting to sort unrecognized values: ".concat(stringify(a), " (typeof ").concat(typeof a === "undefined" ? "undefined" : _type_of(a), ") <-> ").concat(stringify(b), " (typeof ").concat(typeof b === "undefined" ? "undefined" : _type_of(b), ")"));
}
function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map80) {
    return new Map(Array.from(map80.entries()).sort(function(param, param1) {
        var _param = _sliced_to_array(param, 1), keyA = _param[0], _param1 = _sliced_to_array(param1, 1), keyB = _param1[0];
        return sortAsc(keyA, keyB);
    }));
}
// ../../node_modules/@polkadot/types-codec/utils/typesToMap.js
function typesToMap(registry, param) {
    var _param = _sliced_to_array(param, 2), Types = _param[0], keys2 = _param[1];
    var result = {};
    for(var i = 0; i < keys2.length; i++){
        result[keys2[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    }
    return result;
}
// ../../node_modules/@polkadot/types-codec/base/Compact.js
function noopSetDefinition(d) {
    return d;
}
function decodeCompact(registry, Type2, value1) {
    if (isU8a(value1)) {
        var _ref = _sliced_to_array((value1[0] & 3) < 3 ? compactFromU8aLim(value1) : compactFromU8a(value1), 2), decodedLength = _ref[0], bn = _ref[1];
        return [
            new Type2(registry, bn),
            decodedLength
        ];
    } else if (_instanceof(value1, Compact)) {
        var raw = value1.unwrap();
        return _instanceof(raw, Type2) ? [
            raw,
            0
        ] : [
            new Type2(registry, raw),
            0
        ];
    } else if (_instanceof(value1, Type2)) {
        return [
            value1,
            0
        ];
    }
    return [
        new Type2(registry, value1),
        0
    ];
}
var _Type, _raw2;
var _Compact = /*#__PURE__*/ function() {
    function _Compact1(registry, Type2) {
        var value1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition : _ref_setDefinition;
        _class_call_check(this, _Compact1);
        __privateAdd(this, _Type, void 0);
        __privateAdd(this, _raw2, void 0);
        this.registry = registry;
        __privateSet(this, _Type, definition || setDefinition(typeToConstructor(registry, Type2)));
        var _decodeCompact = _sliced_to_array(decodeCompact(registry, __privateGet(this, _Type), value1), 2), raw = _decodeCompact[0], decodedLength = _decodeCompact[1];
        this.initialU8aLength = decodedLength;
        __privateSet(this, _raw2, raw);
    }
    _create_class(_Compact1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return __privateGet(this, _raw2).isEmpty;
            }
        },
        {
            /**
   * @description Returns the number of bits in the value
   */ key: "bitLength",
            value: function bitLength() {
                return __privateGet(this, _raw2).bitLength();
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return __privateGet(this, _raw2).eq(_instanceof(other, _Compact) ? __privateGet(other, _raw2) : other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a BigInt representation of the number
   */ key: "toBigInt",
            value: function toBigInt() {
                return __privateGet(this, _raw2).toBigInt();
            }
        },
        {
            /**
   * @description Returns the BN representation of the number
   */ key: "toBn",
            value: function toBn() {
                return __privateGet(this, _raw2).toBn();
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */ key: "toHex",
            value: function toHex(isLe) {
                return __privateGet(this, _raw2).toHex(isLe);
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return __privateGet(this, _raw2).toHuman(isExtended);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return __privateGet(this, _raw2).toJSON();
            }
        },
        {
            /**
   * @description Returns the number representation for the value
   */ key: "toNumber",
            value: function toNumber() {
                return __privateGet(this, _raw2).toNumber();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return __privateGet(this, _raw2).toPrimitive();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Compact<".concat(this.registry.getClassName(__privateGet(this, _Type)) || __privateGet(this, _raw2).toRawType(), ">");
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return __privateGet(this, _raw2).toString();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return compactToU8a(__privateGet(this, _raw2).toBn());
            }
        },
        {
            /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */ key: "unwrap",
            value: function unwrap() {
                return __privateGet(this, _raw2);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return /*#__PURE__*/ function(_Compact) {
                    _inherits(_class, _Compact);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Compact);
            }
        }
    ]);
    return _Compact1;
}();
var Compact = _Compact;
_Type = new WeakMap();
_raw2 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/DoNotConstruct.js
var _neverError;
var _DoNotConstruct = /*#__PURE__*/ function() {
    function _DoNotConstruct1(registry) {
        var typeName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "DoNotConstruct";
        _class_call_check(this, _DoNotConstruct1);
        __privateAdd(this, _neverError, void 0);
        this.registry = registry;
        __privateSet(this, _neverError, new Error("DoNotConstruct: Cannot construct unknown type ".concat(typeName)));
        throw __privateGet(this, _neverError);
    }
    _create_class(_DoNotConstruct1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value (always true)
   */ function get() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "eq",
            value: function eq() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "inspect",
            value: function inspect() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toHex",
            value: function toHex() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toHuman",
            value: function toHuman() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toPrimitive",
            value: function toPrimitive() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toRawType",
            value: function toRawType() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toString",
            value: function toString() {
                throw __privateGet(this, _neverError);
            }
        },
        {
            key: "toU8a",
            value: function toU8a() {
                throw __privateGet(this, _neverError);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(typeName) {
                return /*#__PURE__*/ function(_DoNotConstruct) {
                    _inherits(_class, _DoNotConstruct);
                    var _super = _create_super(_class);
                    function _class(registry) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, typeName);
                    }
                    return _class;
                }(_DoNotConstruct);
            }
        }
    ]);
    return _DoNotConstruct1;
}();
var DoNotConstruct = _DoNotConstruct;
_neverError = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/Null.js
var Null = /*#__PURE__*/ function() {
    function Null1(registry) {
        _class_call_check(this, Null1);
        __publicField(this, "encodedLength", 0);
        __publicField(this, "isEmpty", true);
        __publicField(this, "initialU8aLength", 0);
        this.registry = registry;
    }
    _create_class(Null1, [
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                throw new Error(".hash is not implemented on Null");
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return _instanceof(other, Null) || isNull(other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {};
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return "0x";
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return null;
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return null;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Null";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return "";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return new Uint8Array();
            }
        }
    ]);
    return Null1;
}();
// ../../node_modules/@polkadot/types-codec/base/Enum.js
function noopSetDefinition2(d) {
    return d;
}
function isRustEnum(def) {
    var defValues = Object.values(def);
    if (defValues.some(function(v) {
        return isNumber(v);
    })) {
        if (!defValues.every(function(v) {
            return isNumber(v) && v >= 0 && v <= 255;
        })) {
            throw new Error("Invalid number-indexed enum definition");
        }
        return false;
    }
    return true;
}
function extractDef(registry, _def2) {
    var def = {};
    var isBasic;
    var isIndexed;
    if (Array.isArray(_def2)) {
        for(var i = 0; i < _def2.length; i++){
            def[_def2[i]] = {
                Type: Null,
                index: i
            };
        }
        isBasic = true;
        isIndexed = false;
    } else if (isRustEnum(_def2)) {
        var _mapToTypeMap = _sliced_to_array(mapToTypeMap(registry, _def2), 2), Types = _mapToTypeMap[0], keys2 = _mapToTypeMap[1];
        for(var i1 = 0; i1 < keys2.length; i1++){
            def[keys2[i1]] = {
                Type: Types[i1],
                index: i1
            };
        }
        isBasic = !Object.values(def).some(function(param) {
            var Type2 = param.Type;
            return Type2 !== Null;
        });
        isIndexed = false;
    } else {
        var entries = Object.entries(_def2);
        for(var i2 = 0; i2 < entries.length; i2++){
            var _entries_i = _sliced_to_array(entries[i2], 2), key = _entries_i[0], index = _entries_i[1];
            def[key] = {
                Type: Null,
                index: index
            };
        }
        isBasic = true;
        isIndexed = true;
    }
    return {
        def: def,
        isBasic: isBasic,
        isIndexed: isIndexed
    };
}
function getEntryType(def, checkIdx) {
    var values = Object.values(def);
    for(var i = 0; i < values.length; i++){
        var _values_i = values[i], Type2 = _values_i.Type, index = _values_i.index;
        if (index === checkIdx) {
            return Type2;
        }
    }
    throw new Error("Unable to create Enum via index ".concat(checkIdx, ", in ").concat(Object.keys(def).join(", ")));
}
function createFromU8a(registry, def, index, value1) {
    var Type2 = getEntryType(def, index);
    return {
        index: index,
        value: new Type2(registry, value1)
    };
}
function createFromValue(registry, def) {
    var index = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, value1 = arguments.length > 3 ? arguments[3] : void 0;
    var Type2 = getEntryType(def, index);
    return {
        index: index,
        value: _instanceof(value1, Type2) ? value1 : new Type2(registry, value1)
    };
}
function decodeFromJSON(registry, def, key, value1) {
    var keys2 = Object.keys(def).map(function(k) {
        return k.toLowerCase();
    });
    var keyLower = key.toLowerCase();
    var index = keys2.indexOf(keyLower);
    if (index === -1) {
        throw new Error("Cannot map Enum JSON, unable to find '".concat(key, "' in ").concat(keys2.join(", ")));
    }
    try {
        return createFromValue(registry, def, Object.values(def)[index].index, value1);
    } catch (error2) {
        throw new Error("Enum(".concat(key, "):: ").concat(error2.message));
    }
}
function decodeEnum(registry, def, value1, index) {
    if (isNumber(index)) {
        return createFromValue(registry, def, index, value1);
    } else if (isU8a(value1) || isHex(value1)) {
        var u8a = u8aToU8a(value1);
        if (u8a.length) {
            return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
        }
    } else if (_instanceof(value1, Enum)) {
        return createFromValue(registry, def, value1.index, value1.value);
    } else if (isNumber(value1)) {
        return createFromValue(registry, def, value1);
    } else if (isString(value1)) {
        return decodeFromJSON(registry, def, value1.toString());
    } else if (isObject(value1)) {
        var key = Object.keys(value1)[0];
        return decodeFromJSON(registry, def, key, value1[key]);
    }
    return createFromValue(registry, def, Object.values(def)[0].index);
}
var _def, _entryIndex, _indexes, _isBasic, _isIndexed, _raw3;
var _Enum = /*#__PURE__*/ function() {
    function _Enum1(registry, Types, value1, index) {
        var _ref = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition2 : _ref_setDefinition;
        _class_call_check(this, _Enum1);
        __privateAdd(this, _def, void 0);
        __privateAdd(this, _entryIndex, void 0);
        __privateAdd(this, _indexes, void 0);
        __privateAdd(this, _isBasic, void 0);
        __privateAdd(this, _isIndexed, void 0);
        __privateAdd(this, _raw3, void 0);
        var _ref1 = definition || setDefinition(extractDef(registry, Types)), def = _ref1.def, isBasic = _ref1.isBasic, isIndexed = _ref1.isIndexed;
        var decoded = isU8a(value1) && value1.length && !isNumber(index) ? createFromU8a(registry, def, value1[0], value1.subarray(1)) : decodeEnum(registry, def, value1, index);
        this.registry = registry;
        __privateSet(this, _def, def);
        __privateSet(this, _isBasic, isBasic);
        __privateSet(this, _isIndexed, isIndexed);
        __privateSet(this, _indexes, Object.values(def).map(function(param) {
            var index2 = param.index;
            return index2;
        }));
        __privateSet(this, _entryIndex, __privateGet(this, _indexes).indexOf(decoded.index));
        __privateSet(this, _raw3, decoded.value);
        if (__privateGet(this, _raw3).initialU8aLength) {
            this.initialU8aLength = 1 + __privateGet(this, _raw3).initialU8aLength;
        }
    }
    _create_class(_Enum1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return 1 + __privateGet(this, _raw3).encodedLength;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "index",
            get: /**
   * @description The index of the enum value
   */ function get() {
                return __privateGet(this, _indexes)[__privateGet(this, _entryIndex)];
            }
        },
        {
            key: "inner",
            get: /**
   * @description The value of the enum
   */ function get() {
                return __privateGet(this, _raw3);
            }
        },
        {
            key: "isBasic",
            get: /**
   * @description true if this is a basic enum (no values)
   */ function get() {
                return __privateGet(this, _isBasic);
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return __privateGet(this, _raw3).isEmpty;
            }
        },
        {
            key: "isNone",
            get: /**
   * @description Checks if the Enum points to a [[Null]] type
   */ function get() {
                return _instanceof(__privateGet(this, _raw3), Null);
            }
        },
        {
            key: "defIndexes",
            get: /**
   * @description The available keys for this enum
   */ function get() {
                return __privateGet(this, _indexes);
            }
        },
        {
            key: "defKeys",
            get: /**
   * @description The available keys for this enum
   */ function get() {
                return Object.keys(__privateGet(this, _def));
            }
        },
        {
            key: "type",
            get: /**
   * @description The name of the type this enum value represents
   */ function get() {
                return this.defKeys[__privateGet(this, _entryIndex)];
            }
        },
        {
            key: "value",
            get: /**
   * @description The value of the enum
   */ function get() {
                return __privateGet(this, _raw3);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                if (isU8a(other)) {
                    return !this.toU8a().some(function(entry, index) {
                        return entry !== other[index];
                    });
                } else if (isNumber(other)) {
                    return this.toNumber() === other;
                } else if (__privateGet(this, _isBasic) && isString(other)) {
                    return this.type === other;
                } else if (isHex(other)) {
                    return this.toHex() === other;
                } else if (_instanceof(other, _Enum)) {
                    return this.index === other.index && this.value.eq(other.value);
                } else if (isObject(other)) {
                    return this.value.eq(other[this.type]);
                }
                return this.value.eq(other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                if (__privateGet(this, _isBasic)) {
                    return {
                        outer: [
                            new Uint8Array([
                                this.index
                            ])
                        ]
                    };
                }
                var __privateGet_inspect = __privateGet(this, _raw3).inspect(), inner = __privateGet_inspect.inner, __privateGet_inspect_outer = __privateGet_inspect.outer, outer = __privateGet_inspect_outer === void 0 ? [] : __privateGet_inspect_outer;
                return {
                    inner: inner,
                    outer: [
                        new Uint8Array([
                            this.index
                        ])
                    ].concat(_to_consumable_array(outer))
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return __privateGet(this, _isBasic) || this.isNone ? this.type : _define_property({}, this.type, __privateGet(this, _raw3).toHuman(isExtended));
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return __privateGet(this, _isBasic) ? this.type : _define_property({}, stringCamelCase(this.type), __privateGet(this, _raw3).toJSON());
            }
        },
        {
            /**
   * @description Returns the number representation for the value
   */ key: "toNumber",
            value: function toNumber() {
                return this.index;
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return __privateGet(this, _isBasic) ? this.type : _define_property({}, stringCamelCase(this.type), __privateGet(this, _raw3).toPrimitive());
            }
        },
        {
            /**
   * @description Returns a raw struct representation of the enum types
   */ key: "_toRawStruct",
            value: function _toRawStruct() {
                var _this = this;
                if (__privateGet(this, _isBasic)) {
                    return __privateGet(this, _isIndexed) ? this.defKeys.reduce(function(out, key, index) {
                        out[key] = __privateGet(_this, _indexes)[index];
                        return out;
                    }, {}) : this.defKeys;
                }
                var entries = Object.entries(__privateGet(this, _def));
                return typesToMap(this.registry, entries.reduce(function(out, param, i) {
                    var _param = _sliced_to_array(param, 2), key = _param[0], _param_ = _param[1], Type2 = _param_.Type;
                    out[0][i] = Type2;
                    out[1][i] = key;
                    return out;
                }, [
                    new Array(entries.length),
                    new Array(entries.length)
                ]));
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return stringify({
                    _enum: this._toRawStruct()
                });
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return this.isNone ? this.type : stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return isBare ? __privateGet(this, _raw3).toU8a(isBare) : u8aConcatStrict([
                    new Uint8Array([
                        this.index
                    ]),
                    __privateGet(this, _raw3).toU8a(isBare)
                ]);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Types) {
                var _class;
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return _class = /*#__PURE__*/ function(_Enum) {
                    _inherits(_class, _Enum);
                    var _super = _create_super(_class);
                    function _class(registry, value1, index) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Types, value1, index, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Enum), function() {
                    var keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
                    var asKeys = new Array(keys2.length);
                    var isKeys = new Array(keys2.length);
                    for(var i = 0; i < keys2.length; i++){
                        var name = stringPascalCase(keys2[i]);
                        asKeys[i] = "as".concat(name);
                        isKeys[i] = "is".concat(name);
                    }
                    objectProperties(_class.prototype, isKeys, function(_23, i, self2) {
                        return self2.type === keys2[i];
                    });
                    objectProperties(_class.prototype, asKeys, function(k, i, self2) {
                        if (self2.type !== keys2[i]) {
                            throw new Error("Cannot convert '".concat(self2.type, "' via ").concat(k));
                        }
                        return self2.value;
                    });
                }(), _class;
            }
        }
    ]);
    return _Enum1;
}();
var Enum = _Enum;
_def = new WeakMap();
_entryIndex = new WeakMap();
_indexes = new WeakMap();
_isBasic = new WeakMap();
_isIndexed = new WeakMap();
_raw3 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/Int.js
var Int = /*#__PURE__*/ function(AbstractInt) {
    _inherits(Int1, AbstractInt);
    var _super = _create_super(Int1);
    function Int1(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, bitLength = arguments.length > 2 ? arguments[2] : void 0;
        _class_call_check(this, Int1);
        return _super.call(this, registry, value1, bitLength, true);
    }
    _create_class(Int1, null, [
        {
            key: "with",
            value: function _with(bitLength, typeName) {
                return /*#__PURE__*/ function(Int) {
                    _inherits(_class, Int);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, value1, bitLength);
                    }
                    _create_class(_class, [
                        {
                            key: "toRawType",
                            value: function toRawType() {
                                return typeName || _get(_get_prototype_of(_class.prototype), "toRawType", this).call(this);
                            }
                        }
                    ]);
                    return _class;
                }(Int);
            }
        }
    ]);
    return Int1;
}(AbstractInt);
// ../../node_modules/@polkadot/types-codec/base/Option.js
function noopSetDefinition3(d) {
    return d;
}
var None = /*#__PURE__*/ function(Null) {
    _inherits(None, Null);
    var _super = _create_super(None);
    function None() {
        _class_call_check(this, None);
        return _super.apply(this, arguments);
    }
    _create_class(None, [
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "None";
            }
        }
    ]);
    return None;
}(Null);
function decodeOption(registry, Type2, value1) {
    if (_instanceof(value1, Type2)) {
        return value1;
    } else if (_instanceof(value1, Option)) {
        if (_instanceof(value1.value, Type2)) {
            return value1.value;
        } else if (value1.isNone) {
            return new None(registry);
        }
        return new Type2(registry, value1.value);
    } else if (isNull(value1) || isUndefined(value1) || value1 === "0x" || _instanceof(value1, None)) {
        return new None(registry);
    } else if (isU8a(value1)) {
        return !value1.length || value1[0] === 0 ? new None(registry) : new Type2(registry, value1.subarray(1));
    }
    return new Type2(registry, value1);
}
var _Type2, _raw4;
var _Option = /*#__PURE__*/ function() {
    function _Option1(registry, typeName, value1) {
        var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition3 : _ref_setDefinition;
        _class_call_check(this, _Option1);
        __privateAdd(this, _Type2, void 0);
        __privateAdd(this, _raw4, void 0);
        var Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
        var decoded = isU8a(value1) && value1.length && !isCodec(value1) ? value1[0] === 0 ? new None(registry) : new Type2(registry, value1.subarray(1)) : decodeOption(registry, Type2, value1);
        this.registry = registry;
        __privateSet(this, _Type2, Type2);
        __privateSet(this, _raw4, decoded);
        if (decoded != null && decoded.initialU8aLength) {
            this.initialU8aLength = 1 + decoded.initialU8aLength;
        }
    }
    _create_class(_Option1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return 1 + __privateGet(this, _raw4).encodedLength;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the Option has no value
   */ function get() {
                return this.isNone;
            }
        },
        {
            key: "isNone",
            get: /**
   * @description Checks if the Option has no value
   */ function get() {
                return _instanceof(__privateGet(this, _raw4), None);
            }
        },
        {
            key: "isSome",
            get: /**
   * @description Checks if the Option has a value
   */ function get() {
                return !this.isNone;
            }
        },
        {
            key: "value",
            get: /**
   * @description The actual value for the Option
   */ function get() {
                return __privateGet(this, _raw4);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                if (_instanceof(other, _Option)) {
                    return this.isSome === other.isSome && this.value.eq(other.value);
                }
                return this.value.eq(other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                if (this.isNone) {
                    return {
                        outer: [
                            new Uint8Array([
                                0
                            ])
                        ]
                    };
                }
                var __privateGet_inspect = __privateGet(this, _raw4).inspect(), inner = __privateGet_inspect.inner, __privateGet_inspect_outer = __privateGet_inspect.outer, outer = __privateGet_inspect_outer === void 0 ? [] : __privateGet_inspect_outer;
                return {
                    inner: inner,
                    outer: [
                        new Uint8Array([
                            1
                        ])
                    ].concat(_to_consumable_array(outer))
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return this.isNone ? "0x" : u8aToHex(this.toU8a().subarray(1));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return __privateGet(this, _raw4).toHuman(isExtended);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.isNone ? null : __privateGet(this, _raw4).toJSON();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.isNone ? null : __privateGet(this, _raw4).toPrimitive();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType(isBare) {
                var wrapped = this.registry.getClassName(__privateGet(this, _Type2)) || new (__privateGet(this, _Type2))(this.registry).toRawType();
                return isBare ? wrapped : "Option<".concat(wrapped, ">");
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return __privateGet(this, _raw4).toString();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                if (isBare) {
                    return __privateGet(this, _raw4).toU8a(true);
                }
                var u8a = new Uint8Array(this.encodedLength);
                if (this.isSome) {
                    u8a.set([
                        1
                    ]);
                    u8a.set(__privateGet(this, _raw4).toU8a(), 1);
                }
                return u8a;
            }
        },
        {
            /**
   * @description Returns the value that the Option represents (if available), throws if null
   */ key: "unwrap",
            value: function unwrap() {
                if (this.isNone) {
                    throw new Error("Option: unwrapping a None value");
                }
                return __privateGet(this, _raw4);
            }
        },
        {
            /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */ key: "unwrapOr",
            value: function unwrapOr(defaultValue) {
                return this.isSome ? this.unwrap() : defaultValue;
            }
        },
        {
            /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */ key: "unwrapOrDefault",
            value: function unwrapOrDefault() {
                return this.isSome ? this.unwrap() : new (__privateGet(this, _Type2))(this.registry);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                var definition;
                var setDefinition = function(d) {
                    definition = d;
                    return d;
                };
                return /*#__PURE__*/ function(_Option) {
                    _inherits(_class, _Option);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Option);
            }
        }
    ]);
    return _Option1;
}();
var Option = _Option;
_Type2 = new WeakMap();
_raw4 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/Result.js
var Result = /*#__PURE__*/ function(Enum) {
    _inherits(Result1, Enum);
    var _super = _create_super(Result1);
    function Result1(registry, Ok, Err, value1) {
        _class_call_check(this, Result1);
        return _super.call(this, registry, {
            Ok: Ok,
            Err: Err
        }, value1);
    }
    _create_class(Result1, [
        {
            key: "asErr",
            get: /**
   * @description Returns the wrapper Err value (if isErr)
   */ function get() {
                if (!this.isErr) {
                    throw new Error("Cannot extract Err value from Ok result, check isErr first");
                }
                return this.value;
            }
        },
        {
            key: "asOk",
            get: /**
   * @description Returns the wrapper Ok value (if isOk)
   */ function get() {
                if (!this.isOk) {
                    throw new Error("Cannot extract Ok value from Err result, check isOk first");
                }
                return this.value;
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the Result has no value
   */ function get() {
                return this.isOk && this.value.isEmpty;
            }
        },
        {
            key: "isErr",
            get: /**
   * @description Checks if the Result wraps an Err value
   */ function get() {
                return !this.isOk;
            }
        },
        {
            key: "isOk",
            get: /**
   * @description Checks if the Result wraps an Ok value
   */ function get() {
                return this.index === 0;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                var Types = this._toRawStruct();
                return "Result<".concat(Types.Ok, ",").concat(Types.Err, ">");
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Types) {
                return /*#__PURE__*/ function(Result) {
                    _inherits(_class, Result);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Types.Ok, Types.Err, value1);
                    }
                    return _class;
                }(Result);
            }
        }
    ]);
    return Result1;
}(Enum);
// ../../node_modules/@polkadot/types-codec/base/Tuple.js
function noopSetDefinition4(d) {
    return d;
}
function decodeTuple(registry, result, value1, Classes) {
    if (Array.isArray(value1)) {
        var Types = Classes[0];
        for(var i = 0; i < Types.length; i++){
            try {
                var entry = value1 == null ? void 0 : value1[i];
                result[i] = _instanceof(entry, Types[i]) ? entry : new Types[i](registry, entry);
            } catch (error2) {
                throw new Error("Tuple: failed on ".concat(i, ":: ").concat(error2.message));
            }
        }
        return [
            result,
            0
        ];
    } else if (isHex(value1)) {
        return decodeU8a(registry, result, u8aToU8a(value1), Classes);
    } else if (!value1 || !result.length) {
        var Types1 = Classes[0];
        for(var i1 = 0; i1 < Types1.length; i1++){
            result[i1] = new Types1[i1](registry);
        }
        return [
            result,
            0
        ];
    }
    throw new Error("Expected array input to Tuple decoding, found ".concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1), ": ").concat(stringify(value1)));
}
var _Types;
var _Tuple = /*#__PURE__*/ function(AbstractArray) {
    _inherits(_Tuple1, AbstractArray);
    var _super = _create_super(_Tuple1);
    function _Tuple1(registry, Types, value1) {
        var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition4 : _ref_setDefinition;
        _class_call_check(this, _Tuple1);
        var _this;
        var Classes = definition || setDefinition(Array.isArray(Types) ? [
            Types.map(function(t2) {
                return typeToConstructor(registry, t2);
            }),
            []
        ] : isFunction(Types) || isString(Types) ? [
            [
                typeToConstructor(registry, Types)
            ],
            []
        ] : mapToTypeMap(registry, Types));
        _this = _super.call(this, registry, Classes[0].length);
        __privateAdd(_assert_this_initialized(_this), _Types, void 0);
        _this.initialU8aLength = (isU8a(value1) ? decodeU8a(registry, _this, value1, Classes) : decodeTuple(registry, _this, value1, Classes))[1];
        __privateSet(_assert_this_initialized(_this), _Types, Classes);
        return _this;
    }
    _create_class(_Tuple1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var total = 0;
                for(var i = 0; i < this.length; i++){
                    total += this[i].encodedLength;
                }
                return total;
            }
        },
        {
            key: "Types",
            get: /**
   * @description The types definition of the tuple
   */ function get() {
                var _this = this;
                return __privateGet(this, _Types)[1].length ? __privateGet(this, _Types)[1] : __privateGet(this, _Types)[0].map(function(T) {
                    return new T(_this.registry).toRawType();
                });
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    inner: this.inspectInner()
                };
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                var _this = this;
                var types2 = __privateGet(this, _Types)[0].map(function(T) {
                    return _this.registry.getClassName(T) || new T(_this.registry).toRawType();
                });
                return "(".concat(types2.join(","), ")");
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return u8aConcatStrict(this.toU8aInner(isBare));
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Types) {
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return /*#__PURE__*/ function(_Tuple) {
                    _inherits(_class, _Tuple);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Types, value1, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Tuple);
            }
        }
    ]);
    return _Tuple1;
}(AbstractArray);
var Tuple = _Tuple;
_Types = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/UInt.js
var UInt = /*#__PURE__*/ function(AbstractInt) {
    _inherits(UInt1, AbstractInt);
    var _super = _create_super(UInt1);
    function UInt1() {
        _class_call_check(this, UInt1);
        return _super.apply(this, arguments);
    }
    _create_class(UInt1, null, [
        {
            key: "with",
            value: function _with(bitLength, typeName) {
                return /*#__PURE__*/ function(UInt) {
                    _inherits(_class, UInt);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, value1, bitLength);
                    }
                    _create_class(_class, [
                        {
                            key: "toRawType",
                            value: function toRawType() {
                                return typeName || _get(_get_prototype_of(_class.prototype), "toRawType", this).call(this);
                            }
                        }
                    ]);
                    return _class;
                }(UInt);
            }
        }
    ]);
    return UInt1;
}(AbstractInt);
// ../../node_modules/@polkadot/types-codec/base/Vec.js
var MAX_LENGTH = 64 * 1024;
var l2 = logger("Vec");
function noopSetDefinition5(d) {
    return d;
}
function decodeVecLength(value1) {
    if (Array.isArray(value1)) {
        return [
            value1,
            value1.length,
            0
        ];
    } else if (isU8a(value1) || isHex(value1)) {
        var u8a = u8aToU8a(value1);
        var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(u8a), 2), startAt = _compactFromU8aLim[0], length = _compactFromU8aLim[1];
        if (length > MAX_LENGTH) {
            throw new Error("Vec length ".concat(length.toString(), " exceeds ").concat(MAX_LENGTH));
        }
        return [
            u8a,
            length,
            startAt
        ];
    } else if (!value1) {
        return [
            null,
            0,
            0
        ];
    }
    throw new Error("Expected array/hex input to Vec<*> decoding, found ".concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1), ": ").concat(stringify(value1)));
}
function decodeVec(registry, result, value1, startAt, Type2) {
    if (Array.isArray(value1)) {
        var count = result.length;
        for(var i = 0; i < count; i++){
            var entry = value1[i];
            try {
                result[i] = _instanceof(entry, Type2) ? entry : new Type2(registry, entry);
            } catch (error2) {
                l2.error("Unable to decode on index ".concat(i), error2.message);
                throw error2;
            }
        }
        return [
            0,
            0
        ];
    } else if (!value1) {
        return [
            0,
            0
        ];
    }
    return decodeU8aVec(registry, result, u8aToU8a(value1), startAt, Type2);
}
var _Type3;
var _Vec = /*#__PURE__*/ function(AbstractArray) {
    _inherits(_Vec1, AbstractArray);
    var _super = _create_super(_Vec1);
    function _Vec1(registry, Type2) {
        var value1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition5 : _ref_setDefinition;
        _class_call_check(this, _Vec1);
        var _this;
        var _decodeVecLength = _sliced_to_array(decodeVecLength(value1), 3), decodeFrom = _decodeVecLength[0], length = _decodeVecLength[1], startAt = _decodeVecLength[2];
        _this = _super.call(this, registry, length);
        __privateAdd(_assert_this_initialized(_this), _Type3, void 0);
        __privateSet(_assert_this_initialized(_this), _Type3, definition || setDefinition(typeToConstructor(registry, Type2)));
        _this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, _this, decodeFrom, startAt, __privateGet(_this, _Type3)) : decodeVec(registry, _this, decodeFrom, startAt, __privateGet(_this, _Type3)))[0];
        return _this;
    }
    _create_class(_Vec1, [
        {
            key: "Type",
            get: /**
   * @description The type for the items
   */ function get() {
                return __privateGet(this, _Type3).name;
            }
        },
        {
            /**
   * @description Finds the index of the value in the array
   */ key: "indexOf",
            value: function indexOf(_other) {
                var other = _instanceof(_other, __privateGet(this, _Type3)) ? _other : new (__privateGet(this, _Type3))(this.registry, _other);
                for(var i = 0; i < this.length; i++){
                    if (other.eq(this[i])) {
                        return i;
                    }
                }
                return -1;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Vec<".concat(this.registry.getClassName(__privateGet(this, _Type3)) || new (__privateGet(this, _Type3))(this.registry).toRawType(), ">");
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return /*#__PURE__*/ function(_Vec) {
                    _inherits(_class, _Vec);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Vec);
            }
        }
    ]);
    return _Vec1;
}(AbstractArray);
var Vec = _Vec;
_Type3 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/base/VecFixed.js
function noopSetDefinition6(d) {
    return d;
}
var _Type4;
var _VecFixed = /*#__PURE__*/ function(AbstractArray) {
    _inherits(_VecFixed1, AbstractArray);
    var _super = _create_super(_VecFixed1);
    function _VecFixed1(registry, Type2, length) {
        var value1 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [], _ref = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition6 : _ref_setDefinition;
        _class_call_check(this, _VecFixed1);
        var _this;
        _this = _super.call(this, registry, length);
        __privateAdd(_assert_this_initialized(_this), _Type4, void 0);
        __privateSet(_assert_this_initialized(_this), _Type4, definition || setDefinition(typeToConstructor(registry, Type2)));
        _this.initialU8aLength = (isU8a(value1) ? decodeU8aVec(registry, _this, value1, 0, __privateGet(_this, _Type4)) : decodeVec(registry, _this, value1, 0, __privateGet(_this, _Type4)))[1];
        return _this;
    }
    _create_class(_VecFixed1, [
        {
            key: "Type",
            get: /**
   * @description The type for the items
   */ function get() {
                return new (__privateGet(this, _Type4))(this.registry).toRawType();
            }
        },
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var total = 0;
                for(var i = 0; i < this.length; i++){
                    total += this[i].encodedLength;
                }
                return total;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    inner: this.inspectInner()
                };
            }
        },
        {
            key: "toU8a",
            value: function toU8a() {
                var encoded = this.toU8aInner();
                return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "[".concat(this.Type, ";").concat(this.length, "]");
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2, length) {
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return /*#__PURE__*/ function(_VecFixed) {
                    _inherits(_class, _VecFixed);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, length, value1, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_VecFixed);
            }
        }
    ]);
    return _VecFixed1;
}(AbstractArray);
var VecFixed = _VecFixed;
_Type4 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/native/Raw.js
var Raw = /*#__PURE__*/ function(Uint8Array1) {
    _inherits(Raw, Uint8Array1);
    var _super = _create_super(Raw);
    function Raw(registry, value1, initialU8aLength) {
        _class_call_check(this, Raw);
        var _this;
        _this = _super.call(this, u8aToU8a(value1));
        _this.registry = registry;
        _this.initialU8aLength = initialU8aLength;
        return _this;
    }
    _create_class(Raw, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.length;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isAscii",
            get: /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */ function get() {
                return isAscii(this);
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */ function get() {
                return !this.length || isUndefined(this.find(function(b) {
                    return !!b;
                }));
            }
        },
        {
            key: "isUtf8",
            get: /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */ function get() {
                return isUtf8(this);
            }
        },
        {
            /**
   * @description Returns the number of bits in the value
   */ key: "bitLength",
            value: function bitLength() {
                return this.length * 8;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                if (_instanceof(other, Uint8Array)) {
                    return this.length === other.length && !this.some(function(b, index) {
                        return b !== other[index];
                    });
                }
                return this.eq(u8aToU8a(other));
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this);
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toPrimitive();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                if (this.isAscii) {
                    var text = this.toUtf8();
                    if (isAscii(text)) {
                        return text;
                    }
                }
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Raw";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return Uint8Array.from(this);
            }
        },
        {
            /**
   * @description Returns the wrapped data as a UTF-8 string
   */ key: "toUtf8",
            value: function toUtf8() {
                if (!this.isUtf8) {
                    throw new Error("The character sequence is not a valid Utf8 string");
                }
                return u8aToString(this);
            }
        }
    ], [
        {
            key: Symbol.species,
            get: /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */ function get() {
                return Uint8Array;
            }
        }
    ]);
    return Raw;
}(_wrap_native_super(Uint8Array));
// ../../node_modules/@polkadot/types-codec/extended/BitVec.js
function decodeBitVecU8a(value1) {
    if (!value1 || !value1.length) {
        return [
            0,
            new Uint8Array()
        ];
    }
    var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(value1), 2), offset = _compactFromU8aLim[0], length = _compactFromU8aLim[1];
    var total = offset + Math.ceil(length / 8);
    if (total > value1.length) {
        throw new Error("BitVec: required length less than remainder, expected at least ".concat(total, ", found ").concat(value1.length));
    }
    return [
        length,
        value1.subarray(offset, total)
    ];
}
function decodeBitVec(value1) {
    if (Array.isArray(value1) || isString(value1)) {
        var u8a = u8aToU8a(value1);
        return [
            u8a.length / 8,
            u8a
        ];
    }
    return decodeBitVecU8a(value1);
}
var _decodedLength, _isMsb;
var BitVec = /*#__PURE__*/ function(Raw) {
    _inherits(BitVec, Raw);
    var _super = _create_super(BitVec);
    function BitVec(registry, value1) {
        var isMsb = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        _class_call_check(this, BitVec);
        var _this;
        var _decodeBitVec = _sliced_to_array(decodeBitVec(value1), 2), decodedLength = _decodeBitVec[0], u8a = _decodeBitVec[1];
        _this = _super.call(this, registry, u8a);
        __privateAdd(_assert_this_initialized(_this), _decodedLength, void 0);
        __privateAdd(_assert_this_initialized(_this), _isMsb, void 0);
        __privateSet(_assert_this_initialized(_this), _decodedLength, decodedLength);
        __privateSet(_assert_this_initialized(_this), _isMsb, isMsb);
        return _this;
    }
    _create_class(BitVec, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.length + compactToU8a(__privateGet(this, _decodedLength)).length;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        compactToU8a(__privateGet(this, _decodedLength)),
                        _get(_get_prototype_of(BitVec.prototype), "toU8a", this).call(this)
                    ]
                };
            }
        },
        {
            key: "toHuman",
            value: function toHuman() {
                var _this = this;
                return "0b".concat(_to_consumable_array(this.toU8a(true)).map(function(d) {
                    return "00000000".concat(d.toString(2)).slice(-8);
                }).map(function(s) {
                    return __privateGet(_this, _isMsb) ? s : s.split("").reverse().join("");
                }).join("_"));
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "BitVec";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var bitVec = _get(_get_prototype_of(BitVec.prototype), "toU8a", this).call(this);
                return isBare ? bitVec : u8aConcatStrict([
                    compactToU8a(__privateGet(this, _decodedLength)),
                    bitVec
                ]);
            }
        }
    ]);
    return BitVec;
}(Raw);
_decodedLength = new WeakMap();
_isMsb = new WeakMap();
// ../../node_modules/@polkadot/types-codec/native/Struct.js
function noopSetDefinition7(d) {
    return d;
}
function decodeStructFromObject(registry, param, value1, jsonMap) {
    var _param = _sliced_to_array(param, 2), Types = _param[0], keys2 = _param[1];
    var jsonObj;
    var typeofArray = Array.isArray(value1);
    var typeofMap = _instanceof(value1, Map);
    if (!typeofArray && !typeofMap && !isObject(value1)) {
        throw new Error("Struct: Cannot decode value ".concat(stringify(value1), " (typeof ").concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1), "), expected an input object, map or array"));
    } else if (typeofArray && value1.length !== keys2.length) {
        throw new Error("Struct: Unable to map ".concat(stringify(value1), " array to object with known keys ").concat(keys2.join(", ")));
    }
    var raw = new Array(keys2.length);
    for(var i = 0; i < keys2.length; i++){
        var key = keys2[i];
        var jsonKey = jsonMap.get(key) || key;
        var Type2 = Types[i];
        var assign = void 0;
        try {
            if (typeofArray) {
                assign = value1[i];
            } else if (typeofMap) {
                assign = jsonKey && value1.get(jsonKey);
            } else {
                assign = jsonKey && value1[jsonKey];
                if (isUndefined(assign)) {
                    if (isUndefined(jsonObj)) {
                        var entries = Object.entries(value1);
                        jsonObj = {};
                        for(var e = 0; e < entries.length; e++){
                            jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
                        }
                    }
                    assign = jsonKey && jsonObj[jsonKey];
                }
            }
            raw[i] = [
                key,
                _instanceof(assign, Type2) ? assign : new Type2(registry, assign)
            ];
        } catch (error2) {
            var type = Type2.name;
            try {
                type = new Type2(registry).toRawType();
            } catch (error3) {}
            throw new Error("Struct: failed on ".concat(jsonKey, ": ").concat(type, ":: ").concat(error2.message));
        }
    }
    return [
        raw,
        0
    ];
}
var _jsonMap, _Types2;
var _Struct = /*#__PURE__*/ function(Map1) {
    _inherits(_Struct1, Map1);
    var _super = _create_super(_Struct1);
    function _Struct1(registry, Types, value1) {
        var jsonMap = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : /* @__PURE__ */ new Map(), _ref = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, definition = _ref.definition, _ref_setDefinition = _ref.setDefinition, setDefinition = _ref_setDefinition === void 0 ? noopSetDefinition7 : _ref_setDefinition;
        _class_call_check(this, _Struct1);
        var _this;
        var typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
        var _ref1 = _sliced_to_array(isU8a(value1) || isHex(value1) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value1), typeMap) : _instanceof(value1, _Struct) ? [
            value1,
            0
        ] : decodeStructFromObject(registry, typeMap, value1 || {}, jsonMap), 2), decoded = _ref1[0], decodedLength = _ref1[1];
        _this = _super.call(this, decoded);
        __privateAdd(_assert_this_initialized(_this), _jsonMap, void 0);
        __privateAdd(_assert_this_initialized(_this), _Types2, void 0);
        _this.initialU8aLength = decodedLength;
        _this.registry = registry;
        __privateSet(_assert_this_initialized(_this), _jsonMap, jsonMap);
        __privateSet(_assert_this_initialized(_this), _Types2, typeMap);
        return _this;
    }
    _create_class(_Struct1, [
        {
            key: "defKeys",
            get: /**
   * @description The available keys for this struct
   */ function get() {
                return __privateGet(this, _Types2)[1];
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        if (!v.isEmpty) {
                            return false;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return true;
            }
        },
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var total = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        total += v.encodedLength;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return total;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "Type",
            get: /**
   * @description Returns the Type description of the structure
   */ function get() {
                var result = {};
                var __privateGet1 = _sliced_to_array(__privateGet(this, _Types2), 2), Types = __privateGet1[0], keys2 = __privateGet1[1];
                for(var i = 0; i < keys2.length; i++){
                    result[keys2[i]] = new Types[i](this.registry).toRawType();
                }
                return result;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return compareMap(this, other);
            }
        },
        {
            /**
   * @description Returns a specific names entry in the structure
   * @param key The name of the entry to retrieve
   */ key: "get",
            value: function get(key) {
                return _get(_get_prototype_of(_Struct1.prototype), "get", this).call(this, key);
            }
        },
        {
            /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */ key: "getAtIndex",
            value: function getAtIndex(index) {
                return this.toArray()[index];
            }
        },
        {
            /**
   * @description Returns the a types value by name
   */ key: "getT",
            value: function getT(key) {
                return _get(_get_prototype_of(_Struct1.prototype), "get", this).call(this, key);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect(isBare) {
                var inner = new Array();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        inner.push(_object_spread_props(_object_spread({}, v.inspect(!isBare || isBoolean(isBare) ? isBare : isBare[k])), {
                            name: stringCamelCase(k)
                        }));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    inner: inner
                };
            }
        },
        {
            /**
   * @description Converts the Object to an standard JavaScript Array
   */ key: "toArray",
            value: function toArray() {
                return _to_consumable_array(this.values());
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[k] = v.toHuman(isExtended);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[__privateGet(this, _jsonMap).get(k) || k] = v.toJSON();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[k] = v.toPrimitive();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return stringify(typesToMap(this.registry, __privateGet(this, _Types2)));
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        encoded.push(v.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return u8aConcatStrict(encoded);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Types, jsonMap) {
                var _class;
                var definition;
                var setDefinition = function(d) {
                    return definition = d;
                };
                return _class = /*#__PURE__*/ function(_Struct) {
                    _inherits(_class, _Struct);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Types, value1, jsonMap, {
                            definition: definition,
                            setDefinition: setDefinition
                        });
                    }
                    return _class;
                }(_Struct), function() {
                    var keys2 = Object.keys(Types);
                    objectProperties(_class.prototype, keys2, function(k, _23, self2) {
                        return self2.get(k);
                    });
                }(), _class;
            }
        }
    ]);
    return _Struct1;
}(_wrap_native_super(Map));
var Struct = _Struct;
_jsonMap = new WeakMap();
_Types2 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/Map.js
var l3 = logger("Map");
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    var output4 = /* @__PURE__ */ new Map();
    var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(u8a), 2), offset = _compactFromU8aLim[0], count = _compactFromU8aLim[1];
    var types2 = [];
    for(var i = 0; i < count; i++){
        types2.push(KeyClass, ValClass);
    }
    var _decodeU8a = _sliced_to_array(decodeU8a(registry, new Array(types2.length), u8a.subarray(offset), [
        types2,
        []
    ]), 2), values = _decodeU8a[0], decodedLength = _decodeU8a[1];
    for(var i1 = 0; i1 < values.length; i1 += 2){
        output4.set(values[i1], values[i1 + 1]);
    }
    return [
        KeyClass,
        ValClass,
        output4,
        offset + decodedLength
    ];
}
function decodeMapFromMap(registry, KeyClass, ValClass, value1) {
    var output4 = /* @__PURE__ */ new Map();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = value1.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], val = _step_value[1];
            var isComplex = _instanceof(KeyClass.prototype, AbstractArray) || _instanceof(KeyClass.prototype, Struct) || _instanceof(KeyClass.prototype, Enum);
            try {
                output4.set(_instanceof(key, KeyClass) ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), _instanceof(val, ValClass) ? val : new ValClass(registry, val));
            } catch (error2) {
                l3.error("Failed to decode key or value:", error2.message);
                throw error2;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return [
        KeyClass,
        ValClass,
        output4,
        0
    ];
}
function decodeMap(registry, keyType, valType, value1) {
    var KeyClass = typeToConstructor(registry, keyType);
    var ValClass = typeToConstructor(registry, valType);
    if (!value1) {
        return [
            KeyClass,
            ValClass,
            /* @__PURE__ */ new Map(),
            0
        ];
    } else if (isU8a(value1) || isHex(value1)) {
        return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value1));
    } else if (_instanceof(value1, Map)) {
        return decodeMapFromMap(registry, KeyClass, ValClass, value1);
    } else if (isObject(value1)) {
        return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value1)));
    }
    throw new Error("Map: cannot decode type");
}
var _KeyClass, _ValClass, _type2;
var CodecMap = /*#__PURE__*/ function(Map1) {
    _inherits(CodecMap, Map1);
    var _super = _create_super(CodecMap);
    function CodecMap(registry, keyType, valType, rawValue) {
        var type = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "HashMap";
        _class_call_check(this, CodecMap);
        var _this;
        var _decodeMap = _sliced_to_array(decodeMap(registry, keyType, valType, rawValue), 4), KeyClass = _decodeMap[0], ValClass = _decodeMap[1], decoded = _decodeMap[2], decodedLength = _decodeMap[3];
        _this = _super.call(this, type === "BTreeMap" ? sortMap(decoded) : decoded);
        __privateAdd(_assert_this_initialized(_this), _KeyClass, void 0);
        __privateAdd(_assert_this_initialized(_this), _ValClass, void 0);
        __privateAdd(_assert_this_initialized(_this), _type2, void 0);
        _this.registry = registry;
        _this.initialU8aLength = decodedLength;
        __privateSet(_assert_this_initialized(_this), _KeyClass, KeyClass);
        __privateSet(_assert_this_initialized(_this), _ValClass, ValClass);
        __privateSet(_assert_this_initialized(_this), _type2, type);
        return _this;
    }
    _create_class(CodecMap, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var len = compactToU8a(this.size).length;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        len += k.encodedLength + v.encodedLength;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return len;
            }
        },
        {
            key: "hash",
            get: /**
   * @description Returns a hash of the value
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return this.size === 0;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return compareMap(this, other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var inner = new Array();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        inner.push(k.inspect());
                        inner.push(v.inspect());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    inner: inner,
                    outer: [
                        compactToU8a(this.size)
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[_instanceof(k, Raw) && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[k.toString()] = v.toJSON();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                var json = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        json[_instanceof(k, Raw) && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "".concat(__privateGet(this, _type2), "<").concat(this.registry.getClassName(__privateGet(this, _KeyClass)) || new (__privateGet(this, _KeyClass))(this.registry).toRawType(), ",").concat(this.registry.getClassName(__privateGet(this, _ValClass)) || new (__privateGet(this, _ValClass))(this.registry).toRawType(), ">");
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = new Array();
                if (!isBare) {
                    encoded.push(compactToU8a(this.size));
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        encoded.push(k.toU8a(isBare), v.toU8a(isBare));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return u8aConcatStrict(encoded);
            }
        }
    ]);
    return CodecMap;
}(_wrap_native_super(Map));
_KeyClass = new WeakMap();
_ValClass = new WeakMap();
_type2 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/BTreeMap.js
var BTreeMap = /*#__PURE__*/ function(CodecMap) {
    _inherits(BTreeMap1, CodecMap);
    var _super = _create_super(BTreeMap1);
    function BTreeMap1() {
        _class_call_check(this, BTreeMap1);
        return _super.apply(this, arguments);
    }
    _create_class(BTreeMap1, null, [
        {
            key: "with",
            value: function _with(keyType, valType) {
                return /*#__PURE__*/ function(BTreeMap) {
                    _inherits(_class, BTreeMap);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, keyType, valType, value1, "BTreeMap");
                    }
                    return _class;
                }(BTreeMap);
            }
        }
    ]);
    return BTreeMap1;
}(CodecMap);
// ../../node_modules/@polkadot/types-codec/extended/BTreeSet.js
var l4 = logger("BTreeSet");
function decodeSetFromU8a(registry, ValClass, u8a) {
    var output4 = /* @__PURE__ */ new Set();
    var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(u8a), 2), offset = _compactFromU8aLim[0], count = _compactFromU8aLim[1];
    var result = new Array(count);
    var _decodeU8aVec = _sliced_to_array(decodeU8aVec(registry, result, u8a, offset, ValClass), 1), decodedLength = _decodeU8aVec[0];
    for(var i = 0; i < count; i++){
        output4.add(result[i]);
    }
    return [
        ValClass,
        output4,
        decodedLength
    ];
}
function decodeSetFromSet(registry, ValClass, value1) {
    var output4 = /* @__PURE__ */ new Set();
    value1.forEach(function(val) {
        try {
            output4.add(_instanceof(val, ValClass) ? val : new ValClass(registry, val));
        } catch (error2) {
            l4.error("Failed to decode key or value:", error2.message);
            throw error2;
        }
    });
    return [
        ValClass,
        output4,
        0
    ];
}
function decodeSet(registry, valType, value1) {
    var ValClass = typeToConstructor(registry, valType);
    if (!value1) {
        return [
            ValClass,
            /* @__PURE__ */ new Set(),
            0
        ];
    } else if (isU8a(value1) || isHex(value1)) {
        return decodeSetFromU8a(registry, ValClass, u8aToU8a(value1));
    } else if (Array.isArray(value1) || _instanceof(value1, Set)) {
        return decodeSetFromSet(registry, ValClass, value1);
    }
    throw new Error("BTreeSet: cannot decode type");
}
var _ValClass2;
var _BTreeSet = /*#__PURE__*/ function(Set1) {
    _inherits(_BTreeSet1, Set1);
    var _super = _create_super(_BTreeSet1);
    function _BTreeSet1(registry, valType, rawValue) {
        _class_call_check(this, _BTreeSet1);
        var _this;
        var _decodeSet = _sliced_to_array(decodeSet(registry, valType, rawValue), 3), ValClass = _decodeSet[0], values = _decodeSet[1], decodedLength = _decodeSet[2];
        _this = _super.call(this, sortSet(values));
        __privateAdd(_assert_this_initialized(_this), _ValClass2, void 0);
        _this.registry = registry;
        _this.initialU8aLength = decodedLength;
        __privateSet(_assert_this_initialized(_this), _ValClass2, ValClass);
        return _this;
    }
    _create_class(_BTreeSet1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var len = compactToU8a(this.size).length;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        len += v.encodedLength;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return len;
            }
        },
        {
            key: "hash",
            get: /**
   * @description Returns a hash of the value
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return this.size === 0;
            }
        },
        {
            key: "strings",
            get: /**
   * @description The actual set values as a string[]
   */ function get() {
                return _to_consumable_array(_get(_get_prototype_of(_BTreeSet1.prototype), "values", this).call(this)).map(function(v) {
                    return v.toString();
                });
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return compareSet(this, other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var inner = new Array();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        inner.push(v.inspect());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    inner: inner,
                    outer: [
                        compactToU8a(this.size)
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                var json = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        json.push(v.toHuman(isExtended));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                var json = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        json.push(v.toJSON());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "BTreeSet<".concat(this.registry.getClassName(__privateGet(this, _ValClass2)) || new (__privateGet(this, _ValClass2))(this.registry).toRawType(), ">");
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                var json = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        json.push(v.toPrimitive());
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return json;
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = new Array();
                if (!isBare) {
                    encoded.push(compactToU8a(this.size));
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var v = _step.value;
                        encoded.push(v.toU8a(isBare));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return u8aConcatStrict(encoded);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(valType) {
                return /*#__PURE__*/ function(_BTreeSet) {
                    _inherits(_class, _BTreeSet);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, valType, value1);
                    }
                    return _class;
                }(_BTreeSet);
            }
        }
    ]);
    return _BTreeSet1;
}(_wrap_native_super(Set));
var BTreeSet = _BTreeSet;
_ValClass2 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/Bytes.js
var MAX_LENGTH2 = 10 * 1024 * 1024;
function decodeBytesU8a(value1) {
    if (!value1.length) {
        return [
            new Uint8Array(),
            0
        ];
    }
    var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(value1), 2), offset = _compactFromU8aLim[0], length = _compactFromU8aLim[1];
    var total = offset + length;
    if (length > MAX_LENGTH2) {
        throw new Error("Bytes length ".concat(length.toString(), " exceeds ").concat(MAX_LENGTH2));
    } else if (total > value1.length) {
        throw new Error("Bytes: required length less than remainder, expected at least ".concat(total, ", found ").concat(value1.length));
    }
    return [
        value1.subarray(offset, total),
        total
    ];
}
var Bytes = /*#__PURE__*/ function(Raw1) {
    _inherits(Bytes, Raw1);
    var _super = _create_super(Bytes);
    function Bytes(registry, value1) {
        _class_call_check(this, Bytes);
        var _ref = _sliced_to_array(isU8a(value1) && !_instanceof(value1, Raw) ? decodeBytesU8a(value1) : Array.isArray(value1) || isString(value1) ? [
            u8aToU8a(value1),
            0
        ] : [
            value1,
            0
        ], 2), u8a = _ref[0], decodedLength = _ref[1];
        return _super.call(this, registry, u8a, decodedLength);
    }
    _create_class(Bytes, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.length + compactToU8a(this.length).length;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect(isBare) {
                var clength = compactToU8a(this.length);
                return {
                    outer: isBare ? [
                        _get(_get_prototype_of(Bytes.prototype), "toU8a", this).call(this)
                    ] : this.length ? [
                        clength,
                        _get(_get_prototype_of(Bytes.prototype), "toU8a", this).call(this)
                    ] : [
                        clength
                    ]
                };
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Bytes";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return isBare ? _get(_get_prototype_of(Bytes.prototype), "toU8a", this).call(this, isBare) : compactAddLength(this);
            }
        }
    ]);
    return Bytes;
}(Raw);
// ../../node_modules/@polkadot/types-codec/extended/HashMap.js
var HashMap = /*#__PURE__*/ function(CodecMap) {
    _inherits(HashMap1, CodecMap);
    var _super = _create_super(HashMap1);
    function HashMap1() {
        _class_call_check(this, HashMap1);
        return _super.apply(this, arguments);
    }
    _create_class(HashMap1, null, [
        {
            key: "with",
            value: function _with(keyType, valType) {
                return /*#__PURE__*/ function(HashMap) {
                    _inherits(_class, HashMap);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, keyType, valType, value1);
                    }
                    return _class;
                }(HashMap);
            }
        }
    ]);
    return HashMap1;
}(CodecMap);
// ../../node_modules/@polkadot/types-codec/native/Bool.js
var bool2 = /*#__PURE__*/ function(Boolean1) {
    _inherits(bool2, Boolean1);
    var _super = _create_super(bool2);
    function bool2(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        _class_call_check(this, bool2);
        var _this;
        _this = _super.call(this, isU8a(value1) ? value1[0] === 1 : _instanceof(value1, Boolean) ? value1.valueOf() : !!value1);
        __publicField(_assert_this_initialized(_this), "initialU8aLength", 1);
        _this.registry = registry;
        return _this;
    }
    _create_class(bool2, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return 1;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */ function get() {
                return this.isFalse;
            }
        },
        {
            key: "isFalse",
            get: /**
   * @description Checks if the value is an empty value (always false)
   */ function get() {
                return !this.isTrue;
            }
        },
        {
            key: "isTrue",
            get: /**
   * @description Checks if the value is an empty value (always false)
   */ function get() {
                return this.valueOf();
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return this.valueOf() === (_instanceof(other, Boolean) ? other.valueOf() : other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.valueOf();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "bool";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return this.toJSON().toString();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return new Uint8Array([
                    this.valueOf() ? 1 : 0
                ]);
            }
        }
    ]);
    return bool2;
}(_wrap_native_super(Boolean));
// ../../node_modules/@polkadot/types-codec/extended/OptionBool.js
function decodeU8a2(registry, value1) {
    return value1[0] === 0 ? null : new bool2(registry, value1[0] === 1);
}
var OptionBool = /*#__PURE__*/ function(Option) {
    _inherits(OptionBool, Option);
    var _super = _create_super(OptionBool);
    function OptionBool(registry, value1) {
        _class_call_check(this, OptionBool);
        var _this;
        _this = _super.call(this, registry, bool2, isU8a(value1) || isHex(value1) ? decodeU8a2(registry, u8aToU8a(value1)) : value1);
        _this.initialU8aLength = 1;
        return _this;
    }
    _create_class(OptionBool, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return 1;
            }
        },
        {
            key: "isFalse",
            get: /**
   * @description Checks if the value is an empty value (always false)
   */ function get() {
                return this.isSome ? !this.value.valueOf() : false;
            }
        },
        {
            key: "isTrue",
            get: /**
   * @description Checks if the value is an empty value (always false)
   */ function get() {
                return this.isSome ? this.value.valueOf() : false;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType(isBare) {
                return isBare ? "bool" : "Option<bool>";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                if (isBare) {
                    return _get(_get_prototype_of(OptionBool.prototype), "toU8a", this).call(this, true);
                }
                return this.isSome ? new Uint8Array([
                    this.isTrue ? 1 : 2
                ]) : new Uint8Array([
                    0
                ]);
            }
        }
    ]);
    return OptionBool;
}(_wrap_native_super(Option));
// ../../node_modules/@polkadot/types-codec/extended/Range.js
var _rangeName;
var _Range = /*#__PURE__*/ function(Tuple) {
    _inherits(_Range1, Tuple);
    var _super = _create_super(_Range1);
    function _Range1(registry, Type2, value1) {
        var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, _ref_rangeName = _ref.rangeName, rangeName = _ref_rangeName === void 0 ? "Range" : _ref_rangeName;
        _class_call_check(this, _Range1);
        var _this;
        _this = _super.call(this, registry, [
            Type2,
            Type2
        ], value1);
        __privateAdd(_assert_this_initialized(_this), _rangeName, void 0);
        __privateSet(_assert_this_initialized(_this), _rangeName, rangeName);
        return _this;
    }
    _create_class(_Range1, [
        {
            key: "start",
            get: /**
   * @description Returns the starting range value
   */ function get() {
                return this[0];
            }
        },
        {
            key: "end",
            get: /**
   * @description Returns the ending range value
   */ function get() {
                return this[1];
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "".concat(__privateGet(this, _rangeName), "<").concat(this.start.toRawType(), ">");
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                return /*#__PURE__*/ function(_Range) {
                    _inherits(_class, _Range);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1);
                    }
                    return _class;
                }(_Range);
            }
        }
    ]);
    return _Range1;
}(Tuple);
var Range = _Range;
_rangeName = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/RangeInclusive.js
var RangeInclusive = /*#__PURE__*/ function(Range) {
    _inherits(RangeInclusive1, Range);
    var _super = _create_super(RangeInclusive1);
    function RangeInclusive1(registry, Type2, value1) {
        _class_call_check(this, RangeInclusive1);
        return _super.call(this, registry, Type2, value1, {
            rangeName: "RangeInclusive"
        });
    }
    _create_class(RangeInclusive1, null, [
        {
            key: "with",
            value: function _with(Type2) {
                return /*#__PURE__*/ function(RangeInclusive) {
                    _inherits(_class, RangeInclusive);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1);
                    }
                    return _class;
                }(RangeInclusive);
            }
        }
    ]);
    return RangeInclusive1;
}(_wrap_native_super(Range));
// ../../node_modules/@polkadot/types-codec/native/Text.js
var MAX_LENGTH3 = 128 * 1024;
function decodeText(value1) {
    if (isU8a(value1)) {
        if (!value1.length) {
            return [
                "",
                0
            ];
        }
        if (_instanceof(value1, Raw)) {
            return [
                u8aToString(value1),
                0
            ];
        }
        var _compactFromU8aLim = _sliced_to_array(compactFromU8aLim(value1), 2), offset = _compactFromU8aLim[0], length = _compactFromU8aLim[1];
        var total = offset + length;
        if (length > MAX_LENGTH3) {
            throw new Error("Text: length ".concat(length.toString(), " exceeds ").concat(MAX_LENGTH3));
        } else if (total > value1.length) {
            throw new Error("Text: required length less than remainder, expected at least ".concat(total, ", found ").concat(value1.length));
        }
        return [
            u8aToString(value1.subarray(offset, total)),
            total
        ];
    } else if (isHex(value1)) {
        return [
            u8aToString(hexToU8a(value1)),
            0
        ];
    }
    return [
        value1 ? value1.toString() : "",
        0
    ];
}
var _override;
var Text = /*#__PURE__*/ function(String1) {
    _inherits(Text, String1);
    var _super = _create_super(Text);
    function Text(registry, value1) {
        _class_call_check(this, Text);
        var _this;
        var _decodeText = _sliced_to_array(decodeText(value1), 2), str = _decodeText[0], decodedLength = _decodeText[1];
        _this = _super.call(this, str);
        __privateAdd(_assert_this_initialized(_this), _override, null);
        _this.registry = registry;
        _this.initialU8aLength = decodedLength;
        return _this;
    }
    _create_class(Text, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return this.length === 0;
            }
        },
        {
            key: "length",
            get: /**
   * @description The length of the value
   */ function get() {
                return _get(_get_prototype_of(Text.prototype), "length", this);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return isString(other) ? this.toString() === other.toString() : false;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var value1 = stringToU8a(_get(_get_prototype_of(Text.prototype), "toString", this).call(this));
                return {
                    outer: value1.length ? [
                        compactToU8a(value1.length),
                        value1
                    ] : [
                        compactToU8a(value1.length)
                    ]
                };
            }
        },
        {
            /**
   * @description Set an override value for this
   */ key: "setOverride",
            value: function setOverride(override) {
                __privateSet(this, _override, override);
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a(true));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Text";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return __privateGet(this, _override) || _get(_get_prototype_of(Text.prototype), "toString", this).call(this);
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = stringToU8a(_get(_get_prototype_of(Text.prototype), "toString", this).call(this));
                return isBare ? encoded : compactAddLength(encoded);
            }
        }
    ]);
    return Text;
}(_wrap_native_super(String));
_override = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/Type.js
var Type = /*#__PURE__*/ function(Text) {
    _inherits(Type, Text);
    var _super = _create_super(Type);
    function Type(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        _class_call_check(this, Type);
        var _this;
        _this = _super.call(this, registry, value1);
        _this.setOverride(sanitize(_this.toString()));
        return _this;
    }
    _create_class(Type, [
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Type";
            }
        }
    ]);
    return Type;
}(_wrap_native_super(Text));
// ../../node_modules/@polkadot/types-codec/extended/U8aFixed.js
function decodeU8aFixed(value1, bitLength) {
    var u8a = u8aToU8a(value1);
    var byteLength = bitLength / 8;
    if (!u8a.length) {
        return [
            new Uint8Array(byteLength),
            0
        ];
    }
    if (isU8a(value1) ? u8a.length < byteLength : u8a.length !== byteLength) {
        throw new Error("Expected input with ".concat(byteLength, " bytes (").concat(bitLength, " bits), found ").concat(u8a.length, " bytes"));
    }
    return [
        u8a.subarray(0, byteLength),
        byteLength
    ];
}
var U8aFixed = /*#__PURE__*/ function(Raw) {
    _inherits(U8aFixed1, Raw);
    var _super = _create_super(U8aFixed1);
    function U8aFixed1(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array(), bitLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 256;
        _class_call_check(this, U8aFixed1);
        var _decodeU8aFixed = _sliced_to_array(decodeU8aFixed(value1, bitLength), 2), u8a = _decodeU8aFixed[0], decodedLength = _decodeU8aFixed[1];
        return _super.call(this, registry, u8a, decodedLength);
    }
    _create_class(U8aFixed1, [
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "[u8;".concat(this.length, "]");
            }
        }
    ], [
        {
            key: "with",
            value: function _with(bitLength, typeName) {
                return /*#__PURE__*/ function(U8aFixed) {
                    _inherits(_class, U8aFixed);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, value1, bitLength);
                    }
                    _create_class(_class, [
                        {
                            key: "toRawType",
                            value: function toRawType() {
                                return typeName || _get(_get_prototype_of(_class.prototype), "toRawType", this).call(this);
                            }
                        }
                    ]);
                    return _class;
                }(U8aFixed);
            }
        }
    ]);
    return U8aFixed1;
}(Raw);
// ../../node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
function decodeRaw(registry, typeName, value1) {
    var Type2 = typeToConstructor(registry, typeName);
    if (isU8a(value1) || isHex(value1)) {
        try {
            var _ref = _sliced_to_array(isHex(value1) ? [
                0,
                u8aToU8a(value1)
            ] : _instanceof(value1, Raw) ? [
                0,
                value1.subarray()
            ] : compactStripLength(value1), 2), u8a = _ref[1];
            return [
                Type2,
                new Type2(registry, u8a),
                value1
            ];
        } catch (e) {
            return [
                Type2,
                null,
                value1
            ];
        }
    }
    var instance2 = new Type2(registry, value1);
    return [
        Type2,
        instance2,
        compactAddLength(instance2.toU8a())
    ];
}
var _Type5, _decoded, _opaqueName;
var _WrapperKeepOpaque = /*#__PURE__*/ function(Bytes) {
    _inherits(_WrapperKeepOpaque1, Bytes);
    var _super = _create_super(_WrapperKeepOpaque1);
    function _WrapperKeepOpaque1(registry, typeName, value1) {
        var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, _ref_opaqueName = _ref.opaqueName, opaqueName = _ref_opaqueName === void 0 ? "WrapperKeepOpaque" : _ref_opaqueName;
        _class_call_check(this, _WrapperKeepOpaque1);
        var _this;
        var _decodeRaw = _sliced_to_array(decodeRaw(registry, typeName, value1), 3), Type2 = _decodeRaw[0], decoded = _decodeRaw[1], u8a = _decodeRaw[2];
        _this = _super.call(this, registry, u8a);
        __privateAdd(_assert_this_initialized(_this), _Type5, void 0);
        __privateAdd(_assert_this_initialized(_this), _decoded, void 0);
        __privateAdd(_assert_this_initialized(_this), _opaqueName, void 0);
        __privateSet(_assert_this_initialized(_this), _Type5, Type2);
        __privateSet(_assert_this_initialized(_this), _decoded, decoded);
        __privateSet(_assert_this_initialized(_this), _opaqueName, opaqueName);
        return _this;
    }
    _create_class(_WrapperKeepOpaque1, [
        {
            key: "isDecoded",
            get: /**
   * @description Checks if the wrapper is decodable
   */ function get() {
                return !!__privateGet(this, _decoded);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return __privateGet(this, _decoded) ? {
                    inner: [
                        __privateGet(this, _decoded).inspect()
                    ],
                    outer: [
                        compactToU8a(this.length)
                    ]
                } : {
                    outer: [
                        compactToU8a(this.length),
                        this.toU8a(true)
                    ]
                };
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return __privateGet(this, _decoded) ? __privateGet(this, _decoded).toHuman(isExtended) : _get(_get_prototype_of(_WrapperKeepOpaque1.prototype), "toHuman", this).call(this);
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return __privateGet(this, _decoded) ? __privateGet(this, _decoded).toPrimitive() : _get(_get_prototype_of(_WrapperKeepOpaque1.prototype), "toPrimitive", this).call(this);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "".concat(__privateGet(this, _opaqueName), "<").concat(this.registry.getClassName(__privateGet(this, _Type5)) || (__privateGet(this, _decoded) ? __privateGet(this, _decoded).toRawType() : new (__privateGet(this, _Type5))(this.registry).toRawType()), ">");
            }
        },
        {
            /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */ key: "toString",
            value: function toString() {
                return __privateGet(this, _decoded) ? __privateGet(this, _decoded).toString() : _get(_get_prototype_of(_WrapperKeepOpaque1.prototype), "toString", this).call(this);
            }
        },
        {
            /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */ key: "unwrap",
            value: function unwrap() {
                if (!__privateGet(this, _decoded)) {
                    throw new Error("".concat(__privateGet(this, _opaqueName), ": unwrapping an undecodable value"));
                }
                return __privateGet(this, _decoded);
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                return /*#__PURE__*/ function(_WrapperKeepOpaque) {
                    _inherits(_class, _WrapperKeepOpaque);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1);
                    }
                    return _class;
                }(_WrapperKeepOpaque);
            }
        }
    ]);
    return _WrapperKeepOpaque1;
}(Bytes);
var WrapperKeepOpaque = _WrapperKeepOpaque;
_Type5 = new WeakMap();
_decoded = new WeakMap();
_opaqueName = new WeakMap();
// ../../node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
var WrapperOpaque = /*#__PURE__*/ function(WrapperKeepOpaque) {
    _inherits(WrapperOpaque1, WrapperKeepOpaque);
    var _super = _create_super(WrapperOpaque1);
    function WrapperOpaque1(registry, typeName, value1) {
        _class_call_check(this, WrapperOpaque1);
        return _super.call(this, registry, typeName, value1, {
            opaqueName: "WrapperOpaque"
        });
    }
    _create_class(WrapperOpaque1, [
        {
            key: "inner",
            get: /**
   * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
   */ function get() {
                return this.unwrap();
            }
        }
    ], [
        {
            key: "with",
            value: function _with(Type2) {
                return /*#__PURE__*/ function(WrapperOpaque) {
                    _inherits(_class, WrapperOpaque);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, Type2, value1);
                    }
                    return _class;
                }(WrapperOpaque);
            }
        }
    ]);
    return WrapperOpaque1;
}(WrapperKeepOpaque);
// ../../node_modules/@polkadot/types-codec/native/Float.js
var _bitLength2;
var _Float = /*#__PURE__*/ function(Number1) {
    _inherits(_Float1, Number1);
    var _super = _create_super(_Float1);
    function _Float1(registry, value1) {
        var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref_bitLength = _ref.bitLength, bitLength = _ref_bitLength === void 0 ? 32 : _ref_bitLength;
        _class_call_check(this, _Float1);
        var _this;
        _this = _super.call(this, isU8a(value1) || isHex(value1) ? value1.length === 0 ? 0 : u8aToFloat(u8aToU8a(value1), {
            bitLength: bitLength
        }) : value1 || 0);
        __privateAdd(_assert_this_initialized(_this), _bitLength2, void 0);
        __privateSet(_assert_this_initialized(_this), _bitLength2, bitLength);
        _this.encodedLength = bitLength / 8;
        _this.initialU8aLength = _this.encodedLength;
        _this.registry = registry;
        return _this;
    }
    _create_class(_Float1, [
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */ function get() {
                return this.valueOf() === 0;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return this.valueOf() === Number(other);
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toString();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Returns the number representation (Same as valueOf)
   */ key: "toNumber",
            value: function toNumber() {
                return this.valueOf();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toNumber();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "f".concat(__privateGet(this, _bitLength2));
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */ key: "toU8a",
            value: function toU8a() {
                return floatToU8a(this, {
                    bitLength: __privateGet(this, _bitLength2)
                });
            }
        }
    ], [
        {
            key: "with",
            value: function _with(bitLength) {
                return /*#__PURE__*/ function(_Float) {
                    _inherits(_class, _Float);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, value1, {
                            bitLength: bitLength
                        });
                    }
                    return _class;
                }(_Float);
            }
        }
    ]);
    return _Float1;
}(_wrap_native_super(Number));
var Float = _Float;
_bitLength2 = new WeakMap();
// ../../node_modules/@polkadot/types-codec/native/Json.js
function decodeJson(value1) {
    return Object.entries(value1 || {});
}
var Json = /*#__PURE__*/ function(Map1) {
    _inherits(Json, Map1);
    var _super = _create_super(Json);
    function Json(registry, value1) {
        _class_call_check(this, Json);
        var _this;
        var decoded = decodeJson(value1);
        _this = _super.call(this, decoded);
        _this.registry = registry;
        objectProperties(_assert_this_initialized(_this), decoded.map(function(param) {
            var _param = _sliced_to_array(param, 1), k = _param[0];
            return k;
        }), function(k) {
            return _this.get(k);
        });
        return _this;
    }
    _create_class(Json, [
        {
            key: "encodedLength",
            get: /**
   * @description Always 0, never encodes as a Uint8Array
   */ function get() {
                return 0;
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description Checks if the value is an empty value
   */ function get() {
                return _to_consumable_array(this.keys()).length === 0;
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return compareMap(this, other);
            }
        },
        {
            /**
   * @description Returns a typed value from the internal map
   */ key: "getT",
            value: function getT(key) {
                return this.get(key);
            }
        },
        {
            /**
   * @description Unimplemented, will throw
   */ key: "inspect",
            value: function inspect() {
                throw new Error("Unimplemented");
            }
        },
        {
            /**
   * @description Unimplemented, will throw
   */ key: "toHex",
            value: function toHex() {
                throw new Error("Unimplemented");
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return _to_consumable_array(this.entries()).reduce(function(json, param) {
                    var _param = _sliced_to_array(param, 2), key = _param[0], value1 = _param[1];
                    json[key] = isFunction(value1.toHuman) ? value1.toHuman() : value1;
                    return json;
                }, {});
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return _to_consumable_array(this.entries()).reduce(function(json, param) {
                    var _param = _sliced_to_array(param, 2), key = _param[0], value1 = _param[1];
                    json[key] = value1;
                    return json;
                }, {});
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return _to_consumable_array(this.entries()).reduce(function(json, param) {
                    var _param = _sliced_to_array(param, 2), key = _param[0], value1 = _param[1];
                    json[key] = isFunction(value1.toPrimitive) ? value1.toPrimitive() : value1;
                    return json;
                }, {});
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Json";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return stringify(this.toJSON());
            }
        },
        {
            /**
   * @description Unimplemented, will throw
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                throw new Error("Unimplemented");
            }
        }
    ]);
    return Json;
}(_wrap_native_super(Map));
// ../../node_modules/@polkadot/types-codec/native/Set.js
function encodeSet(setValues, values) {
    var encoded = new import_bn.default(0);
    for(var i = 0; i < values.length; i++){
        encoded.ior(bnToBn(setValues[values[i]] || 0));
    }
    return encoded;
}
function decodeSetArray(setValues, values) {
    var result = new Array(values.length);
    for(var i = 0; i < values.length; i++){
        var key = values[i];
        if (isUndefined(setValues[key])) {
            throw new Error("Set: Invalid key '".concat(key, "' passed to Set, allowed ").concat(Object.keys(setValues).join(", ")));
        }
        result[i] = key;
    }
    return result;
}
function decodeSetNumber(setValues, _value) {
    var bn = bnToBn(_value);
    var keys2 = Object.keys(setValues);
    var result = [];
    for(var i = 0; i < keys2.length; i++){
        var key = keys2[i];
        if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
            result.push(key);
        }
    }
    var computed = encodeSet(setValues, result);
    if (!bn.eq(computed)) {
        throw new Error("Set: Mismatch decoding '".concat(bn.toString(), "', computed as '").concat(computed.toString(), "' with ").concat(result.join(", ")));
    }
    return result;
}
function decodeSet2(setValues) {
    var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, bitLength = arguments.length > 2 ? arguments[2] : void 0;
    if (bitLength % 8 !== 0) {
        throw new Error("Expected valid bitLength, power of 8, found ".concat(bitLength));
    }
    var byteLength = bitLength / 8;
    if (isU8a(value1)) {
        return value1.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value1.subarray(0, byteLength), {
            isLe: true
        }));
    } else if (isString(value1)) {
        return decodeSet2(setValues, u8aToU8a(value1), byteLength);
    } else if (_instanceof(value1, Set) || Array.isArray(value1)) {
        var input = Array.isArray(value1) ? value1 : _to_consumable_array(value1.values());
        return decodeSetArray(setValues, input);
    }
    return decodeSetNumber(setValues, value1);
}
var _allowed, _byteLength;
var _CodecSet = /*#__PURE__*/ function(Set1) {
    _inherits(_CodecSet1, Set1);
    var _super = _create_super(_CodecSet1);
    function _CodecSet1(registry, setValues, value1) {
        var bitLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8;
        _class_call_check(this, _CodecSet1);
        var _this;
        _this = _super.call(this, decodeSet2(setValues, value1, bitLength));
        __privateAdd(_assert_this_initialized(_this), _allowed, void 0);
        __privateAdd(_assert_this_initialized(_this), _byteLength, void 0);
        /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */ __publicField(_assert_this_initialized(_this), "add", function(key) {
            if (__privateGet(_assert_this_initialized(_this), _allowed) && isUndefined(__privateGet(_this, _allowed)[key])) {
                throw new Error("Set: Invalid key '".concat(key, "' on add"));
            }
            _get((_assert_this_initialized(_this), _get_prototype_of(_CodecSet1.prototype)), "add", _this).call(_this, key);
            return _assert_this_initialized(_this);
        });
        _this.registry = registry;
        __privateSet(_assert_this_initialized(_this), _allowed, setValues);
        __privateSet(_assert_this_initialized(_this), _byteLength, bitLength / 8);
        return _this;
    }
    _create_class(_CodecSet1, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return __privateGet(this, _byteLength);
            }
        },
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "isEmpty",
            get: /**
   * @description true is the Set contains no values
   */ function get() {
                return this.size === 0;
            }
        },
        {
            key: "strings",
            get: /**
   * @description The actual set values as a string[]
   */ function get() {
                return _to_consumable_array(_get(_get_prototype_of(_CodecSet1.prototype), "values", this).call(this));
            }
        },
        {
            key: "valueEncoded",
            get: /**
   * @description The encoded value for the set members
   */ function get() {
                return encodeSet(__privateGet(this, _allowed), this.strings);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                if (Array.isArray(other)) {
                    return compareArray(this.strings.sort(), other.sort());
                } else if (_instanceof(other, Set)) {
                    return this.eq(_to_consumable_array(other.values()));
                } else if (isNumber(other) || isBn(other)) {
                    return this.valueEncoded.eq(bnToBn(other));
                }
                return false;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return {
                    outer: [
                        this.toU8a()
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.strings;
            }
        },
        {
            /**
   * @description The encoded value for the set members
   */ key: "toNumber",
            value: function toNumber() {
                return this.valueEncoded.toNumber();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return stringify({
                    _set: __privateGet(this, _allowed)
                });
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return "[".concat(this.strings.join(", "), "]");
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                return bnToU8a(this.valueEncoded, {
                    bitLength: __privateGet(this, _byteLength) * 8,
                    isLe: true
                });
            }
        }
    ], [
        {
            key: "with",
            value: function _with(values, bitLength) {
                var _class;
                return _class = /*#__PURE__*/ function(_CodecSet) {
                    _inherits(_class, _CodecSet);
                    var _super = _create_super(_class);
                    function _class(registry, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry, values, value1, bitLength);
                    }
                    return _class;
                }(_CodecSet), function() {
                    var keys2 = Object.keys(values);
                    var isKeys = new Array(keys2.length);
                    for(var i = 0; i < keys2.length; i++){
                        isKeys[i] = "is".concat(stringPascalCase(keys2[i]));
                    }
                    objectProperties(_class.prototype, isKeys, function(_23, i, self2) {
                        return self2.strings.includes(keys2[i]);
                    });
                }(), _class;
            }
        }
    ]);
    return _CodecSet1;
}(_wrap_native_super(Set));
var CodecSet = _CodecSet;
_allowed = new WeakMap();
_byteLength = new WeakMap();
// ../../node_modules/@polkadot/types-codec/primitive/F32.js
var f32 = /*#__PURE__*/ function(_Float_with) {
    _inherits(f32, _Float_with);
    var _super = _create_super(f32);
    function f32() {
        _class_call_check(this, f32);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__FloatType", "f32");
        return _this;
    }
    return f32;
}(Float.with(32));
// ../../node_modules/@polkadot/types-codec/primitive/F64.js
var f64 = /*#__PURE__*/ function(_Float_with) {
    _inherits(f64, _Float_with);
    var _super = _create_super(f64);
    function f64() {
        _class_call_check(this, f64);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__FloatType", "f64");
        return _this;
    }
    return f64;
}(Float.with(64));
// ../../node_modules/@polkadot/types-codec/primitive/I8.js
var i81 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i8, _Int_with);
    var _super = _create_super(i8);
    function i8() {
        _class_call_check(this, i8);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i8");
        return _this;
    }
    return i8;
}(Int.with(8));
// ../../node_modules/@polkadot/types-codec/primitive/I16.js
var i16 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i16, _Int_with);
    var _super = _create_super(i16);
    function i16() {
        _class_call_check(this, i16);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i16");
        return _this;
    }
    return i16;
}(Int.with(16));
// ../../node_modules/@polkadot/types-codec/primitive/I32.js
var i32 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i32, _Int_with);
    var _super = _create_super(i32);
    function i32() {
        _class_call_check(this, i32);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i32");
        return _this;
    }
    return i32;
}(Int.with(32));
// ../../node_modules/@polkadot/types-codec/primitive/I64.js
var i64 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i64, _Int_with);
    var _super = _create_super(i64);
    function i64() {
        _class_call_check(this, i64);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i64");
        return _this;
    }
    return i64;
}(Int.with(64));
// ../../node_modules/@polkadot/types-codec/primitive/I128.js
var i128 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i128, _Int_with);
    var _super = _create_super(i128);
    function i128() {
        _class_call_check(this, i128);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i128");
        return _this;
    }
    return i128;
}(Int.with(128));
// ../../node_modules/@polkadot/types-codec/primitive/I256.js
var i256 = /*#__PURE__*/ function(_Int_with) {
    _inherits(i256, _Int_with);
    var _super = _create_super(i256);
    function i256() {
        _class_call_check(this, i256);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__IntType", "i256");
        return _this;
    }
    return i256;
}(Int.with(256));
// ../../node_modules/@polkadot/types-codec/primitive/U8.js
var u82 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u82, _UInt_with);
    var _super = _create_super(u82);
    function u82() {
        _class_call_check(this, u82);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u8");
        return _this;
    }
    return u82;
}(UInt.with(8));
// ../../node_modules/@polkadot/types-codec/primitive/U16.js
var u162 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u162, _UInt_with);
    var _super = _create_super(u162);
    function u162() {
        _class_call_check(this, u162);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u16");
        return _this;
    }
    return u162;
}(UInt.with(16));
// ../../node_modules/@polkadot/types-codec/primitive/U32.js
var u323 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u323, _UInt_with);
    var _super = _create_super(u323);
    function u323() {
        _class_call_check(this, u323);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u32");
        return _this;
    }
    return u323;
}(UInt.with(32));
// ../../node_modules/@polkadot/types-codec/primitive/U64.js
var u642 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u642, _UInt_with);
    var _super = _create_super(u642);
    function u642() {
        _class_call_check(this, u642);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u64");
        return _this;
    }
    return u642;
}(UInt.with(64));
// ../../node_modules/@polkadot/types-codec/primitive/U128.js
var u128 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u128, _UInt_with);
    var _super = _create_super(u128);
    function u128() {
        _class_call_check(this, u128);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u128");
        return _this;
    }
    return u128;
}(UInt.with(128));
// ../../node_modules/@polkadot/types-codec/primitive/U256.js
var u256 = /*#__PURE__*/ function(_UInt_with) {
    _inherits(u256, _UInt_with);
    var _super = _create_super(u256);
    function u256() {
        _class_call_check(this, u256);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        // NOTE without this, we cannot properly determine extensions
        __publicField(_assert_this_initialized(_this), "__UIntType", "u256");
        return _this;
    }
    return u256;
}(UInt.with(256));
// ../../node_modules/@polkadot/types-codec/primitive/USize.js
var usize = /*#__PURE__*/ function(u323) {
    _inherits(usize, u323);
    var _super = _create_super(usize);
    function usize(registry, value1) {
        _class_call_check(this, usize);
        var _this = _super.call(this, registry, value1);
        throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
        return _this;
    }
    return usize;
}(u323);
// ../../node_modules/@polkadot/types-create/util/typeSplit.js
function typeSplit(type) {
    var result = [];
    var c = 0;
    var f = 0;
    var s = 0;
    var t2 = 0;
    var start = 0;
    for(var i = 0; i < type.length; i++){
        switch(type[i]){
            case ",":
                {
                    if (!(c || f || s || t2)) {
                        result.push(type.substring(start, i).trim());
                        start = i + 1;
                    }
                    break;
                }
            case "<":
                c++;
                break;
            case ">":
                c--;
                break;
            case "[":
                f++;
                break;
            case "]":
                f--;
                break;
            case "{":
                s++;
                break;
            case "}":
                s--;
                break;
            case "(":
                t2++;
                break;
            case ")":
                t2--;
                break;
        }
    }
    if (c || f || s || t2) {
        throw new Error("Invalid definition (missing terminators) found in ".concat(type));
    }
    result.push(type.substring(start, type.length).trim());
    return result;
}
// ../../node_modules/@polkadot/types-create/util/getTypeDef.js
var KNOWN_INTERNALS = [
    "_alias",
    "_fallback"
];
function getTypeString(typeOrObj) {
    return isString(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
}
function isRustEnum2(details) {
    var values = Object.values(details);
    if (values.some(function(v) {
        return isNumber(v);
    })) {
        if (!values.every(function(v) {
            return isNumber(v) && v >= 0 && v <= 255;
        })) {
            throw new Error("Invalid number-indexed enum definition");
        }
        return false;
    }
    return true;
}
function _decodeEnum(value1, details, count, fallbackType) {
    value1.info = TypeDefInfo.Enum;
    value1.fallbackType = fallbackType;
    if (Array.isArray(details)) {
        value1.sub = details.map(function(name, index) {
            return {
                index: index,
                info: TypeDefInfo.Plain,
                name: name,
                type: "Null"
            };
        });
    } else if (isRustEnum2(details)) {
        value1.sub = Object.entries(details).map(function(param, index) {
            var _param = _sliced_to_array(param, 2), name = _param[0], typeOrObj = _param[1];
            return objectSpread({}, getTypeDef(getTypeString(typeOrObj || "Null"), {
                name: name
            }, count), {
                index: index
            });
        });
    } else {
        value1.sub = Object.entries(details).map(function(param) {
            var _param = _sliced_to_array(param, 2), name = _param[0], index = _param[1];
            return {
                index: index,
                info: TypeDefInfo.Plain,
                name: name,
                type: "Null"
            };
        });
    }
    return value1;
}
function _decodeSet(value1, details, fallbackType) {
    value1.info = TypeDefInfo.Set;
    value1.fallbackType = fallbackType;
    value1.length = details._bitLength;
    value1.sub = Object.entries(details).filter(function(param) {
        var _param = _sliced_to_array(param, 1), name = _param[0];
        return !name.startsWith("_");
    }).map(function(param) {
        var _param = _sliced_to_array(param, 2), name = _param[0], index = _param[1];
        return {
            index: index,
            info: TypeDefInfo.Plain,
            name: name,
            type: "Null"
        };
    });
    return value1;
}
function _decodeStruct(value1, type, _23, count) {
    var parsed = JSON.parse(type);
    var keys2 = Object.keys(parsed);
    if (keys2.includes("_enum")) {
        return _decodeEnum(value1, parsed._enum, count, parsed._fallback);
    } else if (keys2.includes("_set")) {
        return _decodeSet(value1, parsed._set, parsed._fallback);
    }
    value1.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
    value1.fallbackType = parsed._fallback;
    value1.sub = keys2.filter(function(name) {
        return !KNOWN_INTERNALS.includes(name);
    }).map(function(name) {
        return getTypeDef(getTypeString(parsed[name]), {
            name: name
        }, count);
    });
    return value1;
}
function _decodeFixedVec(value1, type, _23, count) {
    var max3 = type.length - 1;
    var index = -1;
    var inner = 0;
    for(var i = 1; i < max3 && index === -1; i++){
        switch(type[i]){
            case ";":
                {
                    if (inner === 0) {
                        index = i;
                    }
                    break;
                }
            case "[":
            case "(":
            case "<":
                inner++;
                break;
            case "]":
            case ")":
            case ">":
                inner--;
                break;
        }
    }
    if (index === -1) {
        throw new Error("".concat(type, ": Unable to extract location of ';'"));
    }
    var vecType = type.substring(1, index);
    var _type_substring_split = _sliced_to_array(type.substring(index + 1, max3).split(";"), 2), strLength = _type_substring_split[0], displayName = _type_substring_split[1];
    var length = parseInt(strLength.trim(), 10);
    if (length > 2048) {
        throw new Error("".concat(type, ": Only support for [Type; <length>], where length <= 2048"));
    }
    value1.displayName = displayName;
    value1.length = length;
    value1.sub = getTypeDef(vecType, {}, count);
    return value1;
}
function _decodeTuple(value1, _23, subType, count) {
    value1.sub = subType.length === 0 ? [] : typeSplit(subType).map(function(inner) {
        return getTypeDef(inner, {}, count);
    });
    return value1;
}
function _decodeAnyInt(value1, type, _23, clazz) {
    var _type_substring_split = _sliced_to_array(type.substring(clazz.length + 1, type.length - 1).split(","), 2), strLength = _type_substring_split[0], displayName = _type_substring_split[1];
    var length = parseInt(strLength.trim(), 10);
    if (length > 8192 || length % 8) {
        throw new Error("".concat(type, ": Only support for ").concat(clazz, "<bitLength>, where length <= 8192 and a power of 8, found ").concat(length));
    }
    value1.displayName = displayName;
    value1.length = length;
    return value1;
}
function _decodeInt(value1, type, subType) {
    return _decodeAnyInt(value1, type, subType, "Int");
}
function _decodeUInt(value1, type, subType) {
    return _decodeAnyInt(value1, type, subType, "UInt");
}
function _decodeDoNotConstruct(value1, type, _23) {
    var NAME_LENGTH = "DoNotConstruct".length;
    value1.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value1;
}
function hasWrapper(type, param) {
    var _param = _sliced_to_array(param, 2), start = _param[0], end = _param[1];
    return type.substring(0, start.length) === start && type.slice(-1 * end.length) === end;
}
var nestedExtraction = [
    [
        "[",
        "]",
        TypeDefInfo.VecFixed,
        _decodeFixedVec
    ],
    [
        "{",
        "}",
        TypeDefInfo.Struct,
        _decodeStruct
    ],
    [
        "(",
        ")",
        TypeDefInfo.Tuple,
        _decodeTuple
    ],
    // the inner for these are the same as tuple, multiple values
    [
        "BTreeMap<",
        ">",
        TypeDefInfo.BTreeMap,
        _decodeTuple
    ],
    [
        "HashMap<",
        ">",
        TypeDefInfo.HashMap,
        _decodeTuple
    ],
    [
        "Int<",
        ">",
        TypeDefInfo.Int,
        _decodeInt
    ],
    [
        "Result<",
        ">",
        TypeDefInfo.Result,
        _decodeTuple
    ],
    [
        "UInt<",
        ">",
        TypeDefInfo.UInt,
        _decodeUInt
    ],
    [
        "DoNotConstruct<",
        ">",
        TypeDefInfo.DoNotConstruct,
        _decodeDoNotConstruct
    ]
];
var wrappedExtraction = [
    [
        "BTreeSet<",
        ">",
        TypeDefInfo.BTreeSet
    ],
    [
        "Compact<",
        ">",
        TypeDefInfo.Compact
    ],
    [
        "Linkage<",
        ">",
        TypeDefInfo.Linkage
    ],
    [
        "Opaque<",
        ">",
        TypeDefInfo.WrapperOpaque
    ],
    [
        "Option<",
        ">",
        TypeDefInfo.Option
    ],
    [
        "Range<",
        ">",
        TypeDefInfo.Range
    ],
    [
        "RangeInclusive<",
        ">",
        TypeDefInfo.RangeInclusive
    ],
    [
        "Vec<",
        ">",
        TypeDefInfo.Vec
    ],
    [
        "WrapperKeepOpaque<",
        ">",
        TypeDefInfo.WrapperKeepOpaque
    ],
    [
        "WrapperOpaque<",
        ">",
        TypeDefInfo.WrapperOpaque
    ]
];
function extractSubType(type, param) {
    var _param = _sliced_to_array(param, 2), start = _param[0], end = _param[1];
    return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type3) {
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, displayName = _ref.displayName, name = _ref.name, count = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var type = sanitize(_type3);
    var value1 = {
        displayName: displayName,
        info: TypeDefInfo.Plain,
        name: name,
        type: type
    };
    if (++count > 64) {
        throw new Error("getTypeDef: Maximum nested limit reached");
    }
    var nested = nestedExtraction.find(function(nested2) {
        return hasWrapper(type, nested2);
    });
    if (nested) {
        value1.info = nested[2];
        return nested[3](value1, type, extractSubType(type, nested), count);
    }
    var wrapped = wrappedExtraction.find(function(wrapped2) {
        return hasWrapper(type, wrapped2);
    });
    if (wrapped) {
        value1.info = wrapped[2];
        value1.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }
    return value1;
}
// ../../node_modules/@polkadot/types-create/create/class.js
function getTypeDefType(param) {
    var lookupName = param.lookupName, type = param.type;
    return lookupName || type;
}
function getSubDefArray(value1) {
    if (!Array.isArray(value1.sub)) {
        throw new Error("Expected subtype as TypeDef[] in ".concat(stringify(value1)));
    }
    return value1.sub;
}
function getSubDef(value1) {
    if (!value1.sub || Array.isArray(value1.sub)) {
        throw new Error("Expected subtype as TypeDef in ".concat(stringify(value1)));
    }
    return value1.sub;
}
function getSubType(value1) {
    return getTypeDefType(getSubDef(value1));
}
function getTypeClassMap(value1) {
    var subs = getSubDefArray(value1);
    var map80 = {};
    for(var i = 0; i < subs.length; i++){
        map80[subs[i].name] = getTypeDefType(subs[i]);
    }
    return map80;
}
function getTypeClassArray(value1) {
    return getSubDefArray(value1).map(getTypeDefType);
}
function createInt(Clazz, param) {
    var displayName = param.displayName, length = param.length;
    if (!isNumber(length)) {
        throw new Error("Expected bitLength information for ".concat(displayName || Clazz.constructor.name, "<bitLength>"));
    }
    return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value1) {
    var _getTypeClassArray = _sliced_to_array(getTypeClassArray(value1), 2), keyType = _getTypeClassArray[0], valueType = _getTypeClassArray[1];
    return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value1) {
    return Clazz.with(getSubType(value1));
}
var _obj;
var infoMapping = (_obj = {}, _define_property(_obj, TypeDefInfo.BTreeMap, function(registry, value1) {
    return createHashMap(BTreeMap, value1);
}), _define_property(_obj, TypeDefInfo.BTreeSet, function(registry, value1) {
    return createWithSub(BTreeSet, value1);
}), _define_property(_obj, TypeDefInfo.Compact, function(registry, value1) {
    return createWithSub(Compact, value1);
}), _define_property(_obj, TypeDefInfo.DoNotConstruct, function(registry, value1) {
    return DoNotConstruct.with(value1.displayName || value1.type);
}), _define_property(_obj, TypeDefInfo.Enum, function(registry, value1) {
    var subs = getSubDefArray(value1);
    return Enum.with(subs.every(function(param) {
        var type = param.type;
        return type === "Null";
    }) ? subs.reduce(function(out, param, count) {
        var index = param.index, name = param.name;
        out[name] = index || count;
        return out;
    }, {}) : getTypeClassMap(value1));
}), _define_property(_obj, TypeDefInfo.HashMap, function(registry, value1) {
    return createHashMap(HashMap, value1);
}), _define_property(_obj, TypeDefInfo.Int, function(registry, value1) {
    return createInt(Int, value1);
}), // We have circular deps between Linkage & Struct
_define_property(_obj, TypeDefInfo.Linkage, function(registry, value1) {
    var type = "Option<".concat(getSubType(value1), ">");
    var Clazz = Struct.with({
        previous: type,
        next: type
    });
    Clazz.prototype.toRawType = function() {
        return "Linkage<".concat(this.next.toRawType(true), ">");
    };
    return Clazz;
}), // eslint-disable-next-line @typescript-eslint/no-unused-vars
_define_property(_obj, TypeDefInfo.Null, function(registry, _23) {
    return Null;
}), _define_property(_obj, TypeDefInfo.Option, function(registry, value1) {
    if (!value1.sub || Array.isArray(value1.sub)) {
        throw new Error("Expected type information for Option");
    }
    return createWithSub(Option, value1);
}), _define_property(_obj, TypeDefInfo.Plain, function(registry, value1) {
    return registry.getOrUnknown(value1.type);
}), _define_property(_obj, TypeDefInfo.Range, function(registry, value1) {
    return createWithSub(Range, value1);
}), _define_property(_obj, TypeDefInfo.RangeInclusive, function(registry, value1) {
    return createWithSub(RangeInclusive, value1);
}), _define_property(_obj, TypeDefInfo.Result, function(registry, value1) {
    var _getTypeClassArray = _sliced_to_array(getTypeClassArray(value1), 2), Ok = _getTypeClassArray[0], Err = _getTypeClassArray[1];
    return Result.with({
        Err: Err,
        Ok: Ok
    });
}), _define_property(_obj, TypeDefInfo.Set, function(registry, value1) {
    return CodecSet.with(getSubDefArray(value1).reduce(function(result, param) {
        var index = param.index, name = param.name;
        result[name] = index;
        return result;
    }, {}), value1.length);
}), _define_property(_obj, TypeDefInfo.Si, function(registry, value1) {
    return getTypeClass(registry, registry.lookup.getTypeDef(value1.type));
}), _define_property(_obj, TypeDefInfo.Struct, function(registry, value1) {
    return Struct.with(getTypeClassMap(value1), value1.alias);
}), _define_property(_obj, TypeDefInfo.Tuple, function(registry, value1) {
    return Tuple.with(getTypeClassArray(value1));
}), _define_property(_obj, TypeDefInfo.UInt, function(registry, value1) {
    return createInt(UInt, value1);
}), _define_property(_obj, TypeDefInfo.Vec, function(registry, param) {
    var sub = param.sub;
    if (!sub || Array.isArray(sub)) {
        throw new Error("Expected type information for vector");
    }
    return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
}), _define_property(_obj, TypeDefInfo.VecFixed, function(registry, param) {
    var displayName = param.displayName, length = param.length, sub = param.sub;
    if (!isNumber(length) || !sub || Array.isArray(sub)) {
        throw new Error("Expected length & type information for fixed vector");
    }
    return sub.type === "u8" ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
}), _define_property(_obj, TypeDefInfo.WrapperKeepOpaque, function(registry, value1) {
    return createWithSub(WrapperKeepOpaque, value1);
}), _define_property(_obj, TypeDefInfo.WrapperOpaque, function(registry, value1) {
    return createWithSub(WrapperOpaque, value1);
}), _obj);
function constructTypeClass(registry, typeDef) {
    try {
        var Type2 = infoMapping[typeDef.info](registry, typeDef);
        if (!Type2) {
            throw new Error("No class created");
        }
        if (!Type2.__fallbackType && typeDef.fallbackType) {
            Type2.__fallbackType = typeDef.fallbackType;
        }
        return Type2;
    } catch (error2) {
        throw new Error("Unable to construct class from ".concat(stringify(typeDef), ": ").concat(error2.message));
    }
}
function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
    return(// just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type)));
}
// ../../node_modules/@polkadot/types-create/create/type.js
function checkInstance(created, matcher) {
    var u8a = created.toU8a();
    var rawType = created.toRawType();
    var isOk = // full match, all ok
    u8aEq(u8a, matcher) || // on a length-prefixed type, just check the actual length
    [
        "Bytes",
        "Text",
        "Type"
    ].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every(function(v) {
        return !v;
    });
    if (!isOk) {
        throw new Error("".concat(rawType, ":: Decoded input doesn't match input, received ").concat(u8aToHex(matcher, 512), " (").concat(matcher.length, " bytes), created ").concat(u8aToHex(u8a, 512), " (").concat(u8a.length, " bytes)"));
    }
}
function checkPedantic(created, param) {
    var _param = _sliced_to_array(param, 1), value1 = _param[0];
    if (isU8a(value1)) {
        checkInstance(created, value1);
    } else if (isHex(value1)) {
        checkInstance(created, u8aToU8a(value1));
    }
}
function initType(registry, Type2) {
    var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, blockHash = _ref.blockHash, isFallback = _ref.isFallback, isOptional = _ref.isOptional, isPedantic = _ref.isPedantic;
    var created = _construct(isOptional ? Option.with(Type2) : Type2, [
        registry
    ].concat(_to_consumable_array(params)));
    isPedantic && checkPedantic(created, params);
    if (blockHash) {
        created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [
            blockHash
        ]);
    }
    if (isFallback) {
        created.isStorageFallback = true;
    }
    return created;
}
function createTypeUnsafe(registry, type) {
    var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var Clazz = null;
    var firstError = null;
    try {
        Clazz = createClassUnsafe(registry, type);
        return initType(registry, Clazz, params, options);
    } catch (error2) {
        firstError = new Error("createType(".concat(type, "):: ").concat(error2.message));
    }
    if (Clazz && Clazz.__fallbackType) {
        try {
            Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
            return initType(registry, Clazz, params, options);
        } catch (e) {}
    }
    throw firstError;
}
// ../../node_modules/@polkadot/types-create/util/encodeTypes.js
var stringIdentity = function(value1) {
    return value1.toString();
};
var INFO_WRAP = [
    "BTreeMap",
    "BTreeSet",
    "Compact",
    "HashMap",
    "Option",
    "Result",
    "Vec"
];
function paramsNotation(outer, inner) {
    var transform = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringIdentity;
    return "".concat(outer).concat(inner ? "<".concat((Array.isArray(inner) ? inner : [
        inner
    ]).map(transform).join(", "), ">") : "");
}
function encodeWithParams(registry, typeDef, outer) {
    var info6 = typeDef.info, sub = typeDef.sub;
    switch(info6){
        case TypeDefInfo.BTreeMap:
        case TypeDefInfo.BTreeSet:
        case TypeDefInfo.Compact:
        case TypeDefInfo.HashMap:
        case TypeDefInfo.Linkage:
        case TypeDefInfo.Option:
        case TypeDefInfo.Range:
        case TypeDefInfo.RangeInclusive:
        case TypeDefInfo.Result:
        case TypeDefInfo.Vec:
        case TypeDefInfo.WrapperKeepOpaque:
        case TypeDefInfo.WrapperOpaque:
            return paramsNotation(outer, sub, function(p) {
                return encodeTypeDef(registry, p);
            });
    }
    throw new Error("Unable to encode ".concat(stringify(typeDef), " with params"));
}
function encodeSubTypes(registry, sub, asEnum, extra) {
    var names2 = sub.map(function(param) {
        var name = param.name;
        return name;
    });
    if (!names2.every(function(n) {
        return !!n;
    })) {
        throw new Error("Subtypes does not have consistent names, ".concat(names2.join(", ")));
    }
    var inner = objectSpread({}, extra);
    for(var i = 0; i < sub.length; i++){
        var def = sub[i];
        inner[def.name] = encodeTypeDef(registry, def);
    }
    return stringify(asEnum ? {
        _enum: inner
    } : inner);
}
var _obj1;
var encoders = (_obj1 = {}, _define_property(_obj1, TypeDefInfo.BTreeMap, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "BTreeMap");
}), _define_property(_obj1, TypeDefInfo.BTreeSet, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "BTreeSet");
}), _define_property(_obj1, TypeDefInfo.Compact, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Compact");
}), _define_property(_obj1, TypeDefInfo.DoNotConstruct, function(registry, param) {
    var displayName = param.displayName, lookupIndex = param.lookupIndex, lookupName = param.lookupName;
    return "DoNotConstruct<".concat(lookupName || displayName || (isUndefined(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex)), ">");
}), _define_property(_obj1, TypeDefInfo.Enum, function(registry, param) {
    var sub = param.sub;
    if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Enum type");
    }
    return sub.every(function(param) {
        var type = param.type;
        return type === "Null";
    }) ? stringify({
        _enum: sub.map(function(param, index) {
            var name = param.name;
            return "".concat(name || "Empty".concat(index));
        })
    }) : encodeSubTypes(registry, sub, true);
}), _define_property(_obj1, TypeDefInfo.HashMap, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "HashMap");
}), _define_property(_obj1, TypeDefInfo.Int, function(registry, param) {
    var _param_length = param.length, length = _param_length === void 0 ? 32 : _param_length;
    return "Int<".concat(length, ">");
}), _define_property(_obj1, TypeDefInfo.Linkage, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Linkage");
}), // eslint-disable-next-line @typescript-eslint/no-unused-vars
_define_property(_obj1, TypeDefInfo.Null, function(registry, typeDef) {
    return "Null";
}), _define_property(_obj1, TypeDefInfo.Option, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Option");
}), // eslint-disable-next-line @typescript-eslint/no-unused-vars
_define_property(_obj1, TypeDefInfo.Plain, function(registry, param) {
    var displayName = param.displayName, type = param.type;
    return displayName || type;
}), _define_property(_obj1, TypeDefInfo.Range, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Range");
}), _define_property(_obj1, TypeDefInfo.RangeInclusive, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "RangeInclusive");
}), _define_property(_obj1, TypeDefInfo.Result, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Result");
}), // eslint-disable-next-line @typescript-eslint/no-unused-vars
_define_property(_obj1, TypeDefInfo.Set, function(registry, param) {
    var _param_length = param.length, length = _param_length === void 0 ? 8 : _param_length, sub = param.sub;
    if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Set type");
    }
    return stringify({
        _set: sub.reduce(function(all3, param, count) {
            var index = param.index, name = param.name;
            return objectSpread(all3, _define_property({}, "".concat(name || "Unknown".concat(index || count)), index || count));
        }, {
            _bitLength: length || 8
        })
    });
}), // eslint-disable-next-line @typescript-eslint/no-unused-vars
_define_property(_obj1, TypeDefInfo.Si, function(registry, param) {
    var lookupName = param.lookupName, type = param.type;
    return lookupName || type;
}), _define_property(_obj1, TypeDefInfo.Struct, function(registry, param) {
    var alias2 = param.alias, sub = param.sub;
    if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Struct type");
    }
    return encodeSubTypes(registry, sub, false, alias2 ? {
        _alias: _to_consumable_array(alias2.entries()).reduce(function(all3, param) {
            var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
            return objectSpread(all3, _define_property({}, k, v));
        }, {})
    } : {});
}), _define_property(_obj1, TypeDefInfo.Tuple, function(registry, param) {
    var sub = param.sub;
    if (!Array.isArray(sub)) {
        throw new Error("Unable to encode Tuple type");
    }
    return "(".concat(sub.map(function(type) {
        return encodeTypeDef(registry, type);
    }).join(","), ")");
}), _define_property(_obj1, TypeDefInfo.UInt, function(registry, param) {
    var _param_length = param.length, length = _param_length === void 0 ? 32 : _param_length;
    return "UInt<".concat(length, ">");
}), _define_property(_obj1, TypeDefInfo.Vec, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "Vec");
}), _define_property(_obj1, TypeDefInfo.VecFixed, function(registry, param) {
    var length = param.length, sub = param.sub;
    if (!isNumber(length) || !sub || Array.isArray(sub)) {
        throw new Error("Unable to encode VecFixed type");
    }
    return "[".concat(sub.type, ";").concat(length, "]");
}), _define_property(_obj1, TypeDefInfo.WrapperKeepOpaque, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "WrapperKeepOpaque");
}), _define_property(_obj1, TypeDefInfo.WrapperOpaque, function(registry, typeDef) {
    return encodeWithParams(registry, typeDef, "WrapperOpaque");
}), _obj1);
function encodeType(registry, typeDef) {
    var withLookup = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
    return typeDef.displayName && !INFO_WRAP.some(function(i) {
        return typeDef.displayName === i;
    }) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
    return objectSpread({}, typeDef, {
        type: encodeType(registry, typeDef, false)
    });
}
// ../../node_modules/@polkadot/types-create/util/xcm.js
var XCM_MAPPINGS = [
    "AssetInstance",
    "Fungibility",
    "Junction",
    "Junctions",
    "MultiAsset",
    "MultiAssetFilter",
    "MultiLocation",
    "Response",
    "WildFungibility",
    "WildMultiAsset",
    "Xcm",
    "XcmError",
    "XcmOrder"
];
function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce(function(all3, key) {
        return objectSpread(all3, _define_property({}, key, "".concat(key).concat(version)));
    }, {});
}
// ../../node_modules/@polkadot/types/interfaces/xcm/v0.js
var v02 = {
    FungibilityV0: "FungibilityV1",
    WildFungibilityV0: "WildFungibilityV1",
    AssetInstanceV0: {
        _enum: {
            Undefined: "Null",
            Index8: "u8",
            Index16: "Compact<u16>",
            Index32: "Compact<u32>",
            Index64: "Compact<u64>",
            Index128: "Compact<u128>",
            Array4: "[u8; 4]",
            Array8: "[u8; 8]",
            Array16: "[u8; 16]",
            Array32: "[u8; 32]",
            Blob: "Vec<u8>"
        }
    },
    JunctionV0: {
        _enum: {
            Parent: "Null",
            Parachain: "Compact<u32>",
            AccountId32: {
                network: "NetworkId",
                id: "AccountId"
            },
            AccountIndex64: {
                network: "NetworkId",
                index: "Compact<u64>"
            },
            AccountKey20: {
                network: "NetworkId",
                key: "[u8; 20]"
            },
            PalletInstance: "u8",
            GeneralIndex: "Compact<u128>",
            GeneralKey: "Vec<u8>",
            OnlyChild: "Null",
            Plurality: {
                id: "BodyId",
                part: "BodyPart"
            }
        }
    },
    MultiAssetV0: {
        _enum: {
            None: "Null",
            All: "Null",
            AllFungible: "Null",
            AllNonFungible: "Null",
            AllAbstractFungible: "Vec<u8>",
            AllAbstractNonFungible: "Vec<u8>",
            AllConcreteFungible: "MultiLocationV0",
            AllConcreteNonFungible: "MultiLocationV0",
            AbstractFungible: {
                id: "Vec<u8>",
                instance: "Compact<u128>"
            },
            AbstractNonFungible: {
                class: "Vec<u8>",
                instance: "AssetInstanceV0"
            },
            ConcreteFungible: {
                id: "MultiLocationV0",
                amount: "Compact<u128>"
            },
            ConcreteNonFungible: {
                class: "MultiLocationV0",
                instance: "AssetInstanceV0"
            }
        }
    },
    MultiLocationV0: {
        _enum: {
            Here: "Null",
            X1: "JunctionV0",
            X2: "(JunctionV0, JunctionV0)",
            X3: "(JunctionV0, JunctionV0, JunctionV0)",
            X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
            X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
        }
    },
    OriginKindV0: {
        _enum: [
            "Native",
            "SovereignAccount",
            "Superuser",
            "Xcm"
        ]
    },
    ResponseV0: {
        _enum: {
            Assets: "Vec<MultiAssetV0>"
        }
    },
    XcmV0: {
        _enum: {
            WithdrawAsset: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            ReserveAssetDeposit: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            ReceiveTeleportedAsset: {
                assets: "Vec<MultiAssetV0>",
                effects: "Vec<XcmOrderV0>"
            },
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV0"
            },
            TransferAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0"
            },
            TransferReserveAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            Transact: {
                originType: "XcmOriginKind",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            RelayedFrom: {
                who: "MultiLocationV0",
                message: "XcmV0"
            }
        }
    },
    XcmErrorV0: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            SendFailed: "Null",
            CannotReachDestination: "(MultiLocation, Xcm)",
            MultiLocationFull: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            RecursionLimitReached: "Null"
        }
    },
    XcmOrderV0: {
        _enum: {
            Null: "Null",
            DepositAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0"
            },
            DepositReserveAsset: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            ExchangeAsset: {
                give: "Vec<MultiAssetV0>",
                receive: "Vec<MultiAssetV0>"
            },
            InitiateReserveWithdraw: {
                assets: "Vec<MultiAssetV0>",
                reserve: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            InitiateTeleport: {
                assets: "Vec<MultiAssetV0>",
                dest: "MultiLocationV0",
                effects: "Vec<XcmOrderV0>"
            },
            QueryHolding: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV0",
                assets: "Vec<MultiAssetV0>"
            },
            BuyExecution: {
                fees: "MultiAssetV0",
                weight: "u64",
                debt: "u64",
                haltOnError: "bool",
                xcm: "Vec<XcmV0>"
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/xcm/v1.js
var v15 = {
    AssetInstanceV1: {
        _enum: {
            Undefined: "Null",
            Index: "Compact<u128>",
            Array4: "[u8; 4]",
            Array8: "[u8; 8]",
            Array16: "[u8; 16]",
            Array32: "[u8; 32]",
            Blob: "Bytes"
        }
    },
    FungibilityV1: {
        _enum: {
            Fungible: "Compact<u128>",
            NonFungible: "AssetInstanceV1"
        }
    },
    JunctionV1: {
        _enum: {
            Parachain: "Compact<u32>",
            AccountId32: {
                network: "NetworkId",
                id: "AccountId"
            },
            AccountIndex64: {
                network: "NetworkId",
                index: "Compact<u64>"
            },
            AccountKey20: {
                network: "NetworkId",
                key: "[u8; 20]"
            },
            PalletInstance: "u8",
            GeneralIndex: "Compact<u128>",
            GeneralKey: "Vec<u8>",
            OnlyChild: "Null",
            Plurality: {
                id: "BodyId",
                part: "BodyPart"
            }
        }
    },
    JunctionsV1: {
        _enum: {
            Here: "Null",
            X1: "JunctionV1",
            X2: "(JunctionV1, JunctionV1)",
            X3: "(JunctionV1, JunctionV1, JunctionV1)",
            X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
            X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
        }
    },
    MultiAssetsV1: "Vec<MultiAssetV1>",
    MultiAssetV1: {
        id: "XcmAssetId",
        fungibility: "FungibilityV1"
    },
    MultiAssetFilterV1: {
        _enum: {
            Definite: "MultiAssetsV1",
            Wild: "WildMultiAssetV1"
        }
    },
    MultiLocationV1: {
        parents: "u8",
        interior: "JunctionsV1"
    },
    OriginKindV1: "OriginKindV0",
    ResponseV1: {
        _enum: {
            Assets: "MultiAssetsV1"
        }
    },
    WildFungibilityV1: {
        _enum: [
            "Fungible",
            "NonFungible"
        ]
    },
    WildMultiAssetV1: {
        _enum: {
            All: "Null",
            AllOf: {
                id: "XcmAssetId",
                fungibility: "WildFungibilityV1"
            }
        }
    },
    XcmV1: {
        _enum: {
            WithdrawAsset: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            ReserveAssetDeposit: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            ReceiveTeleportedAsset: {
                assets: "MultiAssetsV1",
                effects: "Vec<XcmOrderV1>"
            },
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV1"
            },
            TransferAsset: {
                assets: "MultiAssetsV1",
                dest: "MultiLocationV1"
            },
            TransferReserveAsset: {
                assets: "MultiAssetsV1",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            Transact: {
                originType: "XcmOriginKind",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            RelayedFrom: {
                who: "MultiLocationV1",
                message: "XcmV1"
            }
        }
    },
    XcmErrorV1: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            SendFailed: "Null",
            CannotReachDestination: "(MultiLocationV1, XcmV1)",
            MultiLocationFull: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            DestinationUnsupported: "Null",
            RecursionLimitReached: "Null"
        }
    },
    XcmOrderV1: {
        _enum: {
            Noop: "Null",
            DepositAsset: {
                assets: "MultiAssetFilterV1",
                maxAssets: "u32",
                beneficiary: "MultiLocationV1"
            },
            DepositReserveAsset: {
                assets: "MultiAssetFilterV1",
                maxAssets: "u32",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            ExchangeAsset: {
                give: "MultiAssetFilterV1",
                receive: "MultiAssetsV1"
            },
            InitiateReserveWithdraw: {
                assets: "MultiAssetFilterV1",
                reserve: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            InitiateTeleport: {
                assets: "MultiAssetFilterV1",
                dest: "MultiLocationV1",
                effects: "Vec<XcmOrderV1>"
            },
            QueryHolding: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV1",
                assets: "MultiAssetFilterV1"
            },
            BuyExecution: {
                fees: "MultiAssetV1",
                weight: "u64",
                debt: "u64",
                haltOnError: "bool",
                instructions: "Vec<XcmV1>"
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/xcm/v2.js
var v2 = {
    AssetInstanceV2: "AssetInstanceV1",
    FungibilityV2: "FungibilityV1",
    JunctionV2: "JunctionV1",
    JunctionsV2: "JunctionsV1",
    MultiAssetsV2: "MultiAssetsV1",
    MultiAssetV2: "MultiAssetV1",
    MultiAssetFilterV2: "MultiAssetFilterV1",
    MultiLocationV2: "MultiLocationV1",
    OriginKindV2: "OriginKindV1",
    WildFungibilityV2: "WildFungibilityV1",
    ResponseV2: {
        _enum: {
            Null: "Null",
            Assets: "MultiAssetsV2",
            ExecutionResult: "ResponseV2Result"
        }
    },
    ResponseV2Error: "(u32, XcmErrorV2)",
    ResponseV2Result: "Result<Null, ResponseV2Error>",
    WeightLimitV2: {
        _enum: {
            Unlimited: "Null",
            Limited: "Compact<u64>"
        }
    },
    InstructionV2: {
        _enum: {
            WithdrawAsset: "MultiAssetsV2",
            ReserveAssetDeposited: "MultiAssetsV2",
            ReceiveTeleportedAsset: "MultiAssetsV2",
            QueryResponse: {
                queryId: "Compact<u64>",
                response: "ResponseV2",
                maxWeight: "Compact<u64>"
            },
            TransferAsset: {
                assets: "MultiAssetsV2",
                beneficiary: "MultiLocationV2"
            },
            TransferReserveAsset: {
                assets: "MultiAssetsV2",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            Transact: {
                originType: "OriginKindV2",
                requireWeightAtMost: "u64",
                call: "DoubleEncodedCall"
            },
            HrmpNewChannelOpenRequest: {
                sender: "Compact<u32>",
                maxMessageSize: "Compact<u32>",
                maxCapacity: "Compact<u32>"
            },
            HrmpChannelAccepted: {
                recipient: "Compact<u32>"
            },
            HrmpChannelClosing: {
                initiator: "Compact<u32>",
                sender: "Compact<u32>",
                recipient: "Compact<u32>"
            },
            ClearOrigin: "Null",
            DescendOrigin: "InteriorMultiLocation",
            ReportError: {
                queryId: "Compact<u64>",
                dest: "MultiLocationV2",
                maxResponseWeight: "Compact<u64>"
            },
            DepositAsset: {
                assets: "MultiAssetFilterV2",
                maxAssets: "u32",
                beneficiary: "MultiLocationV2"
            },
            DepositReserveAsset: {
                assets: "MultiAssetFilterV2",
                maxAssets: "u32",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            ExchangeAsset: {
                give: "MultiAssetFilterV2",
                receive: "MultiAssetsV2"
            },
            InitiateReserveWithdraw: {
                assets: "MultiAssetFilterV2",
                reserve: "MultiLocationV2",
                xcm: "XcmV2"
            },
            InitiateTeleport: {
                assets: "MultiAssetFilterV2",
                dest: "MultiLocationV2",
                xcm: "XcmV2"
            },
            QueryHolding: {
                query_id: "Compact<u64>",
                dest: "MultiLocationV2",
                assets: "MultiAssetFilterV2",
                maxResponse_Weight: "Compact<u64>"
            },
            BuyExecution: {
                fees: "MultiAssetV2",
                weightLimit: "WeightLimitV2"
            },
            RefundSurplus: "Null",
            SetErrorHandler: "XcmV2",
            SetAppendix: "XcmV2",
            ClearError: "Null",
            ClaimAsset: {
                assets: "MultiAssetsV2",
                ticket: "MultiLocationV2"
            },
            Trap: "u64"
        }
    },
    WildMultiAssetV2: "WildMultiAssetV1",
    XcmV2: "Vec<InstructionV2>",
    XcmErrorV2: {
        _enum: {
            Undefined: "Null",
            Overflow: "Null",
            Unimplemented: "Null",
            UnhandledXcmVersion: "Null",
            UnhandledXcmMessage: "Null",
            UnhandledEffect: "Null",
            EscalationOfPrivilege: "Null",
            UntrustedReserveLocation: "Null",
            UntrustedTeleportLocation: "Null",
            DestinationBufferOverflow: "Null",
            MultiLocationFull: "Null",
            MultiLocationNotInvertible: "Null",
            FailedToDecode: "Null",
            BadOrigin: "Null",
            ExceedsMaxMessageSize: "Null",
            FailedToTransactAsset: "Null",
            WeightLimitReached: "Weight",
            Wildcard: "Null",
            TooMuchWeightRequired: "Null",
            NotHoldingFees: "Null",
            WeightNotComputable: "Null",
            Barrier: "Null",
            NotWithdrawable: "Null",
            LocationCannotHold: "Null",
            TooExpensive: "Null",
            AssetNotFound: "Null",
            DestinationUnsupported: "Null",
            RecursionLimitReached: "Null",
            Transport: "Null",
            Unroutable: "Null",
            UnknownWeightRequired: "Null",
            Trap: "u64",
            UnknownClaim: "Null",
            InvalidLocation: "Null"
        }
    },
    XcmOrderV2: "XcmOrderV1"
};
// ../../node_modules/@polkadot/types/interfaces/xcm/definitions.js
var XCM_LATEST = "V2";
var xcm = {
    XcmOrigin: {
        _enum: {
            Xcm: "MultiLocation"
        }
    },
    XcmpMessageFormat: {
        _enum: [
            "ConcatenatedVersionedXcm",
            "ConcatenatedEncodedBlob",
            "Signals"
        ]
    },
    XcmAssetId: {
        _enum: {
            Concrete: "MultiLocation",
            Abstract: "Bytes"
        }
    },
    InboundStatus: {
        _enum: [
            "Ok",
            "Suspended"
        ]
    },
    OutboundStatus: {
        _enum: [
            "Ok",
            "Suspended"
        ]
    },
    MultiAssets: "Vec<MultiAsset>"
};
var location = {
    BodyId: {
        _enum: {
            Unit: "Null",
            Named: "Vec<u8>",
            Index: "Compact<u32>",
            Executive: "Null",
            Technical: "Null",
            Legislative: "Null",
            Judicial: "Null"
        }
    },
    BodyPart: {
        _enum: {
            Voice: "Null",
            Members: "Compact<u32>",
            Fraction: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            },
            AtLeastProportion: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            },
            MoreThanProportion: {
                nom: "Compact<u32>",
                denom: "Compact<u32>"
            }
        }
    },
    InteriorMultiLocation: "Junctions",
    NetworkId: {
        _enum: {
            Any: "Null",
            Named: "Vec<u8>",
            Polkadot: "Null",
            Kusama: "Null"
        }
    }
};
var definitions_default56 = {
    rpc: {},
    types: objectSpread({}, location, xcm, v02, v15, v2, mapXcmTypes(XCM_LATEST), {
        DoubleEncodedCall: {
            encoded: "Vec<u8>"
        },
        XcmOriginKind: {
            _enum: [
                "Native",
                "SovereignAccount",
                "Superuser",
                "Xcm"
            ]
        },
        Outcome: {
            _enum: {
                Complete: "Weight",
                Incomplete: "(Weight, XcmErrorV0)",
                Error: "XcmErrorV0"
            }
        },
        QueryId: "u64",
        QueryStatus: {
            _enum: {
                Pending: {
                    responder: "VersionedMultiLocation",
                    maybeNotify: "Option<(u8, u8)>",
                    timeout: "BlockNumber"
                },
                Ready: {
                    response: "VersionedResponse",
                    at: "BlockNumber"
                }
            }
        },
        QueueConfigData: {
            suspendThreshold: "u32",
            dropThreshold: "u32",
            resumeThreshold: "u32",
            thresholdWeight: "Weight",
            weightRestrictDecay: "Weight"
        },
        VersionMigrationStage: {
            _enum: {
                MigrateSupportedVersion: "Null",
                MigrateVersionNotifiers: "Null",
                NotifyCurrentTargets: "Option<Bytes>",
                MigrateAndNotifyOldTargets: "Null"
            }
        },
        VersionedMultiAsset: {
            _enum: {
                V0: "MultiAssetV0",
                V1: "MultiAssetV1",
                V2: "MultiAssetV2"
            }
        },
        VersionedMultiAssets: {
            _enum: {
                V0: "Vec<MultiAssetV0>",
                V1: "MultiAssetsV1",
                V2: "MultiAssetsV2"
            }
        },
        VersionedMultiLocation: {
            _enum: {
                V0: "MultiLocationV0",
                V1: "MultiLocationV1",
                V2: "MultiLocationV2"
            }
        },
        VersionedResponse: {
            V0: "ResponseV0",
            V1: "ResponseV1",
            V2: "ResponseV2"
        },
        VersionedXcm: {
            _enum: {
                V0: "XcmV0",
                V1: "XcmV1",
                V2: "XcmV2"
            }
        },
        XcmVersion: "u32"
    })
};
// ../../node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
var layout = {
    ContractCryptoHasher: {
        _enum: [
            "Blake2x256",
            "Sha2x256",
            "Keccak256"
        ]
    },
    ContractDiscriminant: "u32",
    ContractLayoutArray: {
        offset: "ContractLayoutKey",
        len: "u32",
        cellsPerElem: "u64",
        layout: "ContractStorageLayout"
    },
    ContractLayoutCell: {
        key: "ContractLayoutKey",
        ty: "SiLookupTypeId"
    },
    ContractLayoutEnum: {
        dispatchKey: "ContractLayoutKey",
        variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
    },
    ContractLayoutHash: {
        offset: "ContractLayoutKey",
        strategy: "ContractLayoutHashingStrategy",
        layout: "ContractStorageLayout"
    },
    ContractLayoutHashingStrategy: {
        hasher: "ContractCryptoHasher",
        postfix: "Vec<u8>",
        prefix: "Vec<u8>"
    },
    ContractLayoutKey: "[u8; 32]",
    ContractLayoutStruct: {
        fields: "Vec<ContractLayoutStructField>"
    },
    ContractLayoutStructField: {
        layout: "ContractStorageLayout",
        name: "Text"
    },
    ContractStorageLayout: {
        _enum: {
            Cell: "ContractLayoutCell",
            Hash: "ContractLayoutHash",
            Array: "ContractLayoutArray",
            Struct: "ContractLayoutStruct",
            Enum: "ContractLayoutEnum"
        }
    }
};
var spec = {
    ContractConstructorSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractConstructorSpecV3: {
        label: "Text",
        selector: "ContractSelector",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV0: {
        constructors: "Vec<ContractConstructorSpecV0>",
        messages: "Vec<ContractMessageSpecV0>",
        events: "Vec<ContractEventSpecV0>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV1: {
        constructors: "Vec<ContractConstructorSpecV1>",
        messages: "Vec<ContractMessageSpecV1>",
        events: "Vec<ContractEventSpecV1>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV2: {
        constructors: "Vec<ContractConstructorSpecV2>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV3: {
        constructors: "Vec<ContractConstructorSpecV3>",
        messages: "Vec<ContractMessageSpecV2>",
        events: "Vec<ContractEventSpecV2>",
        docs: "Vec<Text>"
    },
    ContractContractSpecV4: "ContractContractSpecV3",
    ContractDisplayName: "SiPath",
    ContractEventParamSpecV0: {
        name: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
    },
    ContractEventParamSpecV2: {
        label: "Text",
        indexed: "bool",
        type: "ContractTypeSpec",
        docs: "Vec<Text>"
    },
    ContractEventSpecV0: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractEventSpecV1: {
        name: "Text",
        args: "Vec<ContractEventParamSpecV0>",
        docs: "Vec<Text>"
    },
    ContractEventSpecV2: {
        label: "Text",
        args: "Vec<ContractEventParamSpecV2>",
        docs: "Vec<Text>"
    },
    ContractMessageParamSpecV0: {
        name: "Text",
        type: "ContractTypeSpec"
    },
    ContractMessageParamSpecV2: {
        label: "Text",
        type: "ContractTypeSpec"
    },
    ContractMessageSpecV0: {
        name: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractMessageSpecV1: {
        name: "Vec<Text>",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV0>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractMessageSpecV2: {
        label: "Text",
        selector: "ContractSelector",
        mutates: "bool",
        payable: "bool",
        args: "Vec<ContractMessageParamSpecV2>",
        returnType: "Option<ContractTypeSpec>",
        docs: "Vec<Text>"
    },
    ContractSelector: "[u8; 4]",
    ContractTypeSpec: {
        type: "SiLookupTypeId",
        displayName: "ContractDisplayName"
    }
};
var ContractMetadataV0 = {
    metadataVersion: "Text",
    types: "Vec<Si0Type>",
    spec: "ContractContractSpecV0"
};
var ContractMetadataV1 = {
    types: "Vec<PortableType>",
    spec: "ContractContractSpecV1"
};
var ContractMetadataV2 = {
    types: "Vec<PortableType>",
    spec: "ContractContractSpecV2"
};
var ContractMetadataV3 = {
    types: "Vec<PortableType>",
    spec: "ContractContractSpecV3"
};
var ContractMetadataV4 = ContractMetadataV3;
var ContractProjectInfo = {
    source: "ContractProjectSource",
    contract: "ContractProjectContract"
};
var latest = {
    ContractConstructorSpecLatest: "ContractConstructorSpecV3",
    ContractEventSpecLatest: "ContractEventSpecV2",
    ContractEventParamSpecLatest: "ContractEventParamSpecV2",
    ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
    ContractMessageSpecLatest: "ContractMessageSpecV2",
    ContractMetadataLatest: "ContractMetadataV4"
};
var definitions_default57 = {
    rpc: {},
    types: objectSpread({}, layout, spec, latest, {
        ContractProjectInfo: ContractProjectInfo,
        ContractMetadataV0: ContractMetadataV0,
        ContractMetadataV1: ContractMetadataV1,
        ContractMetadataV2: ContractMetadataV2,
        ContractMetadataV3: ContractMetadataV3,
        ContractMetadataV4: ContractMetadataV4,
        ContractMetadata: {
            _enum: {
                V0: "ContractMetadataV0",
                V1: "ContractMetadataV1",
                V2: "ContractMetadataV2",
                V3: "ContractMetadataV3",
                V4: "ContractMetadataV4"
            }
        },
        ContractProjectV0: objectSpread({
            metadataVersion: "Text"
        }, ContractProjectInfo, ContractMetadataV0),
        ContractProject: "(ContractProjectInfo, ContractMetadata)",
        ContractProjectContract: {
            _alias: {
                docs: "documentation"
            },
            name: "Text",
            version: "Text",
            authors: "Vec<Text>",
            description: "Option<Text>",
            docs: "Option<Text>",
            repository: "Option<Text>",
            homepage: "Option<Text>",
            license: "Option<Text>"
        },
        ContractProjectSource: {
            _alias: {
                wasmHash: "hash"
            },
            wasmHash: "[u8; 32]",
            language: "Text",
            compiler: "Text",
            wasm: "Raw"
        }
    })
};
// ../../node_modules/@polkadot/types/interfaces/eth/rpc.js
var netRpc = {
    listening: {
        aliasSection: "net",
        description: "Returns true if client is actively listening for network connections. Otherwise false.",
        params: [],
        type: "bool"
    },
    peerCount: {
        aliasSection: "net",
        description: "Returns number of peers connected to node.",
        params: [],
        type: "Text"
    },
    version: {
        aliasSection: "net",
        description: "Returns protocol version.",
        params: [],
        type: "Text"
    }
};
var web3Rpc = {
    clientVersion: {
        aliasSection: "web3",
        description: "Returns current client version.",
        params: [],
        type: "Text"
    },
    sha3: {
        aliasSection: "web3",
        description: "Returns sha3 of the given data",
        params: [
            {
                name: "data",
                type: "Bytes"
            }
        ],
        type: "H256"
    }
};
var rpc10 = objectSpread({}, netRpc, web3Rpc, {
    accounts: {
        description: "Returns accounts list.",
        params: [],
        type: "Vec<H160>"
    },
    blockNumber: {
        description: "Returns the blockNumber",
        params: [],
        type: "U256"
    },
    call: {
        description: "Call contract, returning the output data.",
        params: [
            {
                name: "request",
                type: "EthCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "Bytes"
    },
    chainId: {
        description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
        params: [],
        type: "U64"
    },
    coinbase: {
        description: "Returns block author.",
        params: [],
        type: "H160"
    },
    estimateGas: {
        description: "Estimate gas needed for execution of given contract.",
        params: [
            {
                name: "request",
                type: "EthCallRequest"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    feeHistory: {
        description: "Returns fee history for given block count & reward percentiles",
        params: [
            {
                name: "blockCount",
                type: "U256"
            },
            {
                name: "newestBlock",
                type: "BlockNumber"
            },
            {
                name: "rewardPercentiles",
                type: "Option<Vec<f64>>"
            }
        ],
        type: "EthFeeHistory"
    },
    gasPrice: {
        description: "Returns current gas price.",
        params: [],
        type: "U256"
    },
    getBalance: {
        description: "Returns balance of the given account.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getBlockByHash: {
        description: "Returns block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "full",
                type: "bool"
            }
        ],
        type: "Option<EthRichBlock>"
    },
    getBlockByNumber: {
        description: "Returns block with given number.",
        params: [
            {
                name: "block",
                type: "BlockNumber"
            },
            {
                name: "full",
                type: "bool"
            }
        ],
        type: "Option<EthRichBlock>"
    },
    getBlockTransactionCountByHash: {
        description: "Returns the number of transactions in a block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "U256"
    },
    getBlockTransactionCountByNumber: {
        description: "Returns the number of transactions in a block with given block number.",
        params: [
            {
                name: "block",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getCode: {
        description: "Returns the code at given address at given time (block number).",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "Bytes"
    },
    getFilterChanges: {
        description: "Returns filter changes since last poll.",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthFilterChanges"
    },
    getFilterLogs: {
        description: "Returns all logs matching given filter (in a range 'from' - 'to').",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "Vec<EthLog>"
    },
    getLogs: {
        description: "Returns logs matching given filter object.",
        params: [
            {
                name: "filter",
                type: "EthFilter"
            }
        ],
        type: "Vec<EthLog>"
    },
    getProof: {
        description: "Returns proof for account and storage.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                name: "storageKeys",
                type: "Vec<H256>"
            },
            {
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "EthAccount"
    },
    getStorageAt: {
        description: "Returns content of the storage at given address.",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                name: "index",
                type: "U256"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "H256"
    },
    getTransactionByBlockHashAndIndex: {
        description: "Returns transaction at given block hash and index.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionByBlockNumberAndIndex: {
        description: "Returns transaction by given block number and index.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionByHash: {
        description: "Get transaction by its hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "EthTransaction"
    },
    getTransactionCount: {
        description: "Returns the number of transactions sent from given address at given time (block number).",
        params: [
            {
                name: "address",
                type: "H160"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getTransactionReceipt: {
        description: "Returns transaction receipt by transaction hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "EthReceipt"
    },
    getUncleByBlockHashAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
            {
                name: "hash",
                type: "H256"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthRichBlock"
    },
    getUncleByBlockNumberAndIndex: {
        description: "Returns an uncles at given block and index.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            },
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "EthRichBlock"
    },
    getUncleCountByBlockHash: {
        description: "Returns the number of uncles in a block with given hash.",
        params: [
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "U256"
    },
    getUncleCountByBlockNumber: {
        description: "Returns the number of uncles in a block with given block number.",
        params: [
            {
                name: "number",
                type: "BlockNumber"
            }
        ],
        type: "U256"
    },
    getWork: {
        description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
        params: [],
        type: "EthWork"
    },
    hashrate: {
        description: "Returns the number of hashes per second that the node is mining with.",
        params: [],
        type: "U256"
    },
    maxPriorityFeePerGas: {
        description: "Returns max priority fee per gas",
        params: [],
        type: "U256"
    },
    mining: {
        description: "Returns true if client is actively mining new blocks.",
        params: [],
        type: "bool"
    },
    newBlockFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
    },
    newFilter: {
        description: "Returns id of new filter.",
        params: [
            {
                name: "filter",
                type: "EthFilter"
            }
        ],
        type: "U256"
    },
    newPendingTransactionFilter: {
        description: "Returns id of new block filter.",
        params: [],
        type: "U256"
    },
    protocolVersion: {
        description: "Returns protocol version encoded as a string (quotes are necessary).",
        params: [],
        type: "u64"
    },
    sendRawTransaction: {
        description: "Sends signed transaction, returning its hash.",
        params: [
            {
                name: "bytes",
                type: "Bytes"
            }
        ],
        type: "H256"
    },
    sendTransaction: {
        description: "Sends transaction; will block waiting for signer to return the transaction hash",
        params: [
            {
                name: "tx",
                type: "EthTransactionRequest"
            }
        ],
        type: "H256"
    },
    submitHashrate: {
        description: "Used for submitting mining hashrate.",
        params: [
            {
                name: "index",
                type: "U256"
            },
            {
                name: "hash",
                type: "H256"
            }
        ],
        type: "bool"
    },
    submitWork: {
        description: "Used for submitting a proof-of-work solution.",
        params: [
            {
                name: "nonce",
                type: "H64"
            },
            {
                name: "headerHash",
                type: "H256"
            },
            {
                name: "mixDigest",
                type: "H256"
            }
        ],
        type: "bool"
    },
    subscribe: {
        description: "Subscribe to Eth subscription.",
        params: [
            {
                name: "kind",
                type: "EthSubKind"
            },
            {
                isOptional: true,
                name: "params",
                type: "EthSubParams"
            }
        ],
        pubsub: [
            "subscription",
            "subscribe",
            "unsubscribe"
        ],
        type: "Null"
    },
    syncing: {
        description: "Returns an object with data about the sync status or false.",
        params: [],
        type: "EthSyncStatus"
    },
    uninstallFilter: {
        description: "Uninstalls filter.",
        params: [
            {
                name: "index",
                type: "U256"
            }
        ],
        type: "bool"
    }
});
// ../../node_modules/@polkadot/types/interfaces/eth/runtime.js
var runtime20 = {
    ConvertTransactionRuntimeApi: [
        {
            methods: {
                convert_transaction: {
                    description: "Converts an Ethereum-style transaction to Extrinsic",
                    params: [
                        {
                            name: "transaction",
                            type: "TransactionV2"
                        }
                    ],
                    type: "Extrinsic"
                }
            },
            version: 2
        }
    ],
    DebugRuntimeApi: [
        {
            methods: {
                trace_block: {
                    description: "Trace all block extrinsics",
                    params: [
                        {
                            name: "extrinsics",
                            type: "Vec<Extrinsic>"
                        },
                        {
                            name: "knownTransactions",
                            type: "Vec<H256>"
                        }
                    ],
                    type: "Result<(), DispatchError>"
                },
                trace_transaction: {
                    description: "Trace transaction extrinsics",
                    params: [
                        {
                            name: "extrinsics",
                            type: "Vec<Extrinsic>"
                        },
                        {
                            name: "transaction",
                            type: "EthTransaction"
                        }
                    ],
                    type: "Result<(), DispatchError>"
                }
            },
            version: 4
        }
    ],
    EthereumRuntimeRPCApi: [
        {
            methods: {
                account_basic: {
                    description: "Returns pallet_evm::Accounts by address.",
                    params: [
                        {
                            name: "address",
                            type: "H160"
                        }
                    ],
                    type: "EvmAccount"
                },
                account_code_at: {
                    description: "For a given account address, returns pallet_evm::AccountCodes.",
                    params: [
                        {
                            name: "address",
                            type: "H160"
                        }
                    ],
                    type: "Bytes"
                },
                author: {
                    description: "Returns the converted FindAuthor::find_author authority id.",
                    params: [],
                    type: "H160"
                },
                call: {
                    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
                    params: [
                        {
                            name: "from",
                            type: "H160"
                        },
                        {
                            name: "to",
                            type: "H160"
                        },
                        {
                            name: "data",
                            type: "Vec<u8>"
                        },
                        {
                            name: "value",
                            type: "U256"
                        },
                        {
                            name: "gasLimit",
                            type: "U256"
                        },
                        {
                            name: "maxFeePerGas",
                            type: "Option<U256>"
                        },
                        {
                            name: "maxPriorityFeePerGas",
                            type: "Option<U256>"
                        },
                        {
                            name: "nonce",
                            type: "Option<U256>"
                        },
                        {
                            name: "estimate",
                            type: "bool"
                        },
                        {
                            name: "accessList",
                            type: "Option<Vec<(H160, Vec<H256>)>>"
                        }
                    ],
                    type: "Result<EvmCallInfo, DispatchError>"
                },
                chain_id: {
                    description: "Returns runtime defined pallet_evm::ChainId.",
                    params: [],
                    type: "u64"
                },
                create: {
                    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
                    params: [
                        {
                            name: "from",
                            type: "H160"
                        },
                        {
                            name: "data",
                            type: "Vec<u8>"
                        },
                        {
                            name: "value",
                            type: "U256"
                        },
                        {
                            name: "gasLimit",
                            type: "U256"
                        },
                        {
                            name: "maxFeePerGas",
                            type: "Option<U256>"
                        },
                        {
                            name: "maxPriorityFeePerGas",
                            type: "Option<U256>"
                        },
                        {
                            name: "nonce",
                            type: "Option<U256>"
                        },
                        {
                            name: "estimate",
                            type: "bool"
                        },
                        {
                            name: "accessList",
                            type: "Option<Vec<(H160, Vec<H256>)>>"
                        }
                    ],
                    type: "Result<EvmCreateInfo, DispatchError>"
                },
                current_all: {
                    description: "Return all the current data for a block in a single runtime call.",
                    params: [],
                    type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
                },
                current_block: {
                    description: "Return the current block.",
                    params: [],
                    type: "BlockV2"
                },
                current_receipts: {
                    description: "Return the current receipt.",
                    params: [],
                    type: "Option<Vec<EthReceiptV3>>"
                },
                current_transaction_statuses: {
                    description: "Return the current transaction status.",
                    params: [],
                    type: "Option<Vec<EthTransactionStatus>>"
                },
                elasticity: {
                    description: "Return the elasticity multiplier.",
                    params: [],
                    type: "Option<Permill>"
                },
                extrinsic_filter: {
                    description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
                    params: [
                        {
                            name: "xts",
                            type: "Vec<Extrinsic>"
                        }
                    ],
                    type: "Vec<TransactionV2>"
                },
                gas_price: {
                    description: "Returns FixedGasPrice::min_gas_price",
                    params: [],
                    type: "u256"
                },
                storage_at: {
                    description: "For a given account address and index, returns pallet_evm::AccountStorages.",
                    params: [
                        {
                            name: "address",
                            type: "H160"
                        },
                        {
                            name: "index",
                            type: "u256"
                        }
                    ],
                    type: "H256"
                }
            },
            version: 4
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/eth/definitions.js
var V0 = {
    BlockV0: {
        header: "EthHeader",
        transactions: "Vec<TransactionV0>",
        ommers: "Vec<EthHeader>"
    },
    LegacyTransaction: {
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        signature: "EthTransactionSignature"
    },
    TransactionV0: "LegacyTransaction"
};
var V1 = {
    BlockV1: {
        header: "EthHeader",
        transactions: "Vec<TransactionV1>",
        ommers: "Vec<EthHeader>"
    },
    EIP2930Transaction: {
        chainId: "u64",
        nonce: "U256",
        gasPrice: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
    },
    TransactionV1: {
        _enum: {
            Legacy: "LegacyTransaction",
            EIP2930: "EIP2930Transaction"
        }
    }
};
var V2 = {
    BlockV2: {
        header: "EthHeader",
        transactions: "Vec<TransactionV2>",
        ommers: "Vec<EthHeader>"
    },
    EIP1559Transaction: {
        chainId: "u64",
        nonce: "U256",
        maxPriorityFeePerGas: "U256",
        maxFeePerGas: "U256",
        gasLimit: "U256",
        action: "EthTransactionAction",
        value: "U256",
        input: "Bytes",
        accessList: "EthAccessList",
        oddYParity: "bool",
        r: "H256",
        s: "H256"
    },
    TransactionV2: {
        _enum: {
            Legacy: "LegacyTransaction",
            EIP2930: "EIP2930Transaction",
            EIP1559: "EIP1559Transaction"
        }
    }
};
var types = objectSpread({}, V0, V1, V2, {
    EthereumAccountId: "GenericEthereumAccountId",
    EthereumAddress: "GenericEthereumAccountId",
    EthereumLookupSource: "GenericEthereumLookupSource",
    EthereumSignature: "[u8; 65]",
    EthAccessListItem: {
        address: "EthAddress",
        slots: "Vec<H256>"
    },
    EthAccessList: "Vec<EthAccessListItem>",
    EthAccount: {
        address: "EthAddress",
        balance: "U256",
        nonce: "U256",
        codeHash: "H256",
        storageHash: "H256",
        accountProof: "Vec<Bytes>",
        storageProof: "Vec<EthStorageProof>"
    },
    EthAddress: "H160",
    EthBlock: {
        header: "EthHeader",
        transactions: "Vec<EthTransaction>",
        ommers: "Vec<EthHeader>"
    },
    EthHeader: {
        parentHash: "H256",
        ommersHash: "H256",
        beneficiary: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        logsBloom: "EthBloom",
        difficulty: "U256",
        number: "U256",
        gasLimit: "U256",
        gasUsed: "U256",
        timestamp: "u64",
        extraData: "Bytes",
        mixMash: "H256",
        nonce: "H64"
    },
    EthRichBlock: {
        _alias: {
            blockHash: "hash",
            blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        totalDifficulty: "Option<U256>",
        sealFields: "Vec<Bytes>",
        uncles: "Vec<H256>",
        transactions: "Vec<EthTransaction>",
        blockSize: "Option<U256>"
    },
    EthBloom: "H2048",
    EthCallRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
    },
    EthFeeHistory: {
        oldestBlock: "U256",
        baseFeePerGas: "Vec<U256>",
        gasUsedRatio: "Vec<f64>",
        reward: "Option<Vec<Vec<U256>>>"
    },
    EthFilter: {
        fromBlock: "Option<BlockNumber>",
        toBlock: "Option<BlockNumber>",
        blockHash: "Option<H256>",
        address: "Option<EthFilterAddress>",
        topics: "Option<EthFilterTopic>"
    },
    EthFilterAddress: {
        _enum: {
            Single: "EthAddress",
            Multiple: "Vec<EthAddress>",
            Null: "Null"
        }
    },
    EthFilterChanges: {
        _enum: {
            Logs: "Vec<EthLog>",
            Hashes: "Vec<H256>",
            Empty: "Null"
        }
    },
    EthFilterTopic: {
        _enum: {
            Single: "EthFilterTopicInner",
            Multiple: "Vec<EthFilterTopicInner>",
            Null: "Null"
        }
    },
    EthFilterTopicEntry: "Option<H256>",
    EthFilterTopicInner: {
        _enum: {
            Single: "EthFilterTopicEntry",
            Multiple: "Vec<EthFilterTopicEntry>",
            Null: "Null"
        }
    },
    EthRichHeader: {
        _alias: {
            blockHash: "hash",
            blockSize: "size"
        },
        blockHash: "Option<H256>",
        parentHash: "H256",
        sha3Uncles: "H256",
        author: "EthAddress",
        miner: "EthAddress",
        stateRoot: "H256",
        transactionsRoot: "H256",
        receiptsRoot: "H256",
        number: "Option<U256>",
        gasUsed: "U256",
        gasLimit: "U256",
        extraData: "Bytes",
        logsBloom: "EthBloom",
        timestamp: "U256",
        difficulty: "U256",
        sealFields: "Vec<Bytes>",
        blockSize: "Option<U256>"
    },
    EthLog: {
        address: "EthAddress",
        topics: "Vec<H256>",
        data: "Bytes",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        logIndex: "Option<U256>",
        transactionLogIndex: "Option<U256>",
        removed: "bool"
    },
    EthReceipt: {
        transactionHash: "Option<H256>",
        transactionIndex: "Option<U256>",
        blockHash: "Option<H256>",
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        blockNumber: "Option<U256>",
        cumulativeGasUsed: "U256",
        gasUsed: "Option<U256>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        root: "Option<H256>",
        logsBloom: "EthBloom",
        statusCode: "Option<U64>"
    },
    // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
    EthReceiptV0: "EthReceipt",
    EthReceiptV3: "EthReceipt",
    EthStorageProof: {
        key: "U256",
        value: "U256",
        proof: "Vec<Bytes>"
    },
    EthSubKind: {
        _enum: [
            "newHeads",
            "logs",
            "newPendingTransactions",
            "syncing"
        ]
    },
    EthSubParams: {
        _enum: {
            None: "Null",
            Logs: "EthFilter"
        }
    },
    EthSubResult: {
        _enum: {
            Header: "EthRichHeader",
            Log: "EthLog",
            TransactionHash: "H256",
            SyncState: "EthSyncStatus"
        }
    },
    EthSyncInfo: {
        startingBlock: "U256",
        currentBlock: "U256",
        highestBlock: "U256",
        warpChunksAmount: "Option<U256>",
        warpChunksProcessed: "Option<U256>"
    },
    EthSyncStatus: {
        _enum: {
            Info: "EthSyncInfo",
            None: "Null"
        }
    },
    EthTransaction: {
        hash: "H256",
        nonce: "U256",
        blockHash: "Option<H256>",
        blockNumber: "Option<U256>",
        transactionIndex: "Option<U256>",
        from: "H160",
        to: "Option<H160>",
        value: "U256",
        gasPrice: "Option<U256>",
        maxFeePerGas: "Option<U256>",
        maxPriorityFeePerGas: "Option<U256>",
        gas: "U256",
        input: "Bytes",
        creates: "Option<H160>",
        raw: "Bytes",
        publicKey: "Option<H512>",
        chainId: "Option<U64>",
        standardV: "U256",
        v: "U256",
        r: "U256",
        s: "U256",
        accessList: "Option<Vec<EthAccessListItem>>",
        transactionType: "Option<U256>"
    },
    EthTransactionSignature: {
        v: "u64",
        r: "H256",
        s: "H256"
    },
    EthTransactionAction: {
        _enum: {
            Call: "H160",
            Create: "Null"
        }
    },
    EthTransactionCondition: {
        _enum: {
            block: "u64",
            time: "u64"
        }
    },
    EthTransactionRequest: {
        from: "Option<EthAddress>",
        to: "Option<EthAddress>",
        gasPrice: "Option<U256>",
        gas: "Option<U256>",
        value: "Option<U256>",
        data: "Option<Bytes>",
        nonce: "Option<U256>"
    },
    EthTransactionStatus: {
        transactionHash: "H256",
        transactionIndex: "u32",
        from: "EthAddress",
        to: "Option<EthAddress>",
        contractAddress: "Option<EthAddress>",
        logs: "Vec<EthLog>",
        logsBloom: "EthBloom"
    },
    EthWork: {
        powHash: "H256",
        seedHash: "H256",
        target: "H256",
        number: "Option<u64>"
    }
});
var definitions_default58 = {
    rpc: rpc10,
    runtime: runtime20,
    types: types
};
// ../../node_modules/@polkadot/types/interfaces/nimbus/runtime.js
var runtime21 = {
    // deprecated, the NimbusApi is current - this is for backwards compat
    AuthorFilterAPI: [
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether an author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        },
                        {
                            name: "parentHeader",
                            type: "Header"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 2
        },
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether an author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 1
        }
    ],
    NimbusApi: [
        {
            methods: {
                can_author: {
                    description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
                    params: [
                        {
                            name: "author",
                            type: "AccountId"
                        },
                        {
                            name: "relayParent",
                            type: "u32"
                        },
                        {
                            name: "parentHeader",
                            type: "Header"
                        }
                    ],
                    type: "bool"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/nimbus/definitions.js
var definitions_default59 = {
    rpc: {},
    runtime: runtime21,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
var runtime22 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
    OracleApi: [
        {
            methods: {
                get_all_values: {
                    description: "Retrieves all values",
                    params: [
                        {
                            name: "providerId",
                            // This is a Codec type
                            type: "Raw"
                        }
                    ],
                    // This won't actually work as expected - since we have
                    // no information about the actual Raw sizes, we cannot
                    // handle it in this format (it would need an override
                    // for the specific Codec). So return the Raw value.
                    // type: 'Vec<(Raw, Option<Raw>)>'
                    type: "Raw"
                },
                get_value: {
                    description: "Retrieves a single value",
                    params: [
                        {
                            name: "providerId",
                            // This is a Codec type
                            type: "Raw"
                        },
                        {
                            name: "key",
                            // This is a Codec type
                            type: "Raw"
                        }
                    ],
                    // This is an Option<Codec> type
                    type: "Option<Raw>"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
var definitions_default60 = {
    rpc: {},
    runtime: runtime22,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
var runtime23 = {
    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
    TokensApi: [
        {
            methods: {
                query_existential_deposit: {
                    description: "Query the existential amount for a specific currency",
                    params: [
                        {
                            name: "currencyId",
                            // This is CurrencyId, as per the return value, we are unsure
                            // if this is specialized and/or global to the chain or not
                            type: "Raw"
                        }
                    ],
                    // This is Balance - since we don't understand enough about the way
                    // in which this is used, we default to u128 here (it certainly could
                    // be a specialized type that doesn't map to the on-chain Balance)
                    type: "u128"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
var definitions_default61 = {
    rpc: {},
    runtime: runtime23,
    types: {}
};
// ../../node_modules/@polkadot/types/interfaces/rpc/rpc.js
var rpc11 = {
    methods: {
        description: "Retrieves the list of RPC methods that are exposed by the node",
        params: [],
        type: "RpcMethods"
    }
};
// ../../node_modules/@polkadot/types/interfaces/rpc/definitions.js
var definitions_default62 = {
    rpc: rpc11,
    types: {
        RpcMethods: {
            version: "u32",
            methods: "Vec<Text>"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/author/rpc.js
var rpc12 = {
    hasKey: {
        description: "Returns true if the keystore has private keys for the given public key and key type.",
        params: [
            {
                name: "publicKey",
                type: "Bytes"
            },
            {
                name: "keyType",
                type: "Text"
            }
        ],
        type: "bool"
    },
    hasSessionKeys: {
        description: "Returns true if the keystore has private keys for the given session public keys.",
        params: [
            {
                name: "sessionKeys",
                type: "Bytes"
            }
        ],
        type: "bool"
    },
    insertKey: {
        description: "Insert a key into the keystore.",
        params: [
            {
                name: "keyType",
                type: "Text"
            },
            {
                name: "suri",
                type: "Text"
            },
            {
                name: "publicKey",
                type: "Bytes"
            }
        ],
        type: "Bytes"
    },
    pendingExtrinsics: {
        description: "Returns all pending extrinsics, potentially grouped by sender",
        params: [],
        type: "Vec<Extrinsic>"
    },
    removeExtrinsic: {
        description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
        params: [
            {
                name: "bytesOrHash",
                type: "Vec<ExtrinsicOrHash>"
            }
        ],
        type: "Vec<Hash>"
    },
    rotateKeys: {
        description: "Generate new session keys and returns the corresponding public keys",
        params: [],
        type: "Bytes"
    },
    submitAndWatchExtrinsic: {
        description: "Submit and subscribe to watch an extrinsic until unsubscribed",
        isSigned: true,
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        pubsub: [
            "extrinsicUpdate",
            "submitAndWatchExtrinsic",
            "unwatchExtrinsic"
        ],
        type: "ExtrinsicStatus"
    },
    submitExtrinsic: {
        description: "Submit a fully formatted extrinsic for block inclusion",
        isSigned: true,
        params: [
            {
                name: "extrinsic",
                type: "Extrinsic"
            }
        ],
        type: "Hash"
    }
};
// ../../node_modules/@polkadot/types/interfaces/author/definitions.js
var definitions_default63 = {
    rpc: rpc12,
    types: {
        ExtrinsicOrHash: {
            _enum: {
                Hash: "Hash",
                Extrinsic: "Bytes"
            }
        },
        ExtrinsicStatus: {
            _enum: {
                Future: "Null",
                Ready: "Null",
                Broadcast: "Vec<Text>",
                InBlock: "Hash",
                Retracted: "Hash",
                FinalityTimeout: "Hash",
                Finalized: "Hash",
                Usurped: "Hash",
                Dropped: "Null",
                Invalid: "Null"
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/chain/rpc.js
var rpc13 = {
    getBlock: {
        description: "Get header and body of a relay chain block",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "hash",
                type: "BlockHash"
            }
        ],
        type: "SignedBlock"
    },
    getBlockHash: {
        description: "Get the block hash for a specific block",
        params: [
            {
                isOptional: true,
                name: "blockNumber",
                type: "BlockNumber"
            }
        ],
        type: "BlockHash"
    },
    getFinalizedHead: {
        alias: [
            "chain_getFinalisedHead"
        ],
        description: "Get hash of the last finalized block in the canon chain",
        params: [],
        type: "BlockHash"
    },
    getHeader: {
        alias: [
            "chain_getHead"
        ],
        description: "Retrieves the header for a specific block",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "hash",
                type: "BlockHash"
            }
        ],
        type: "Header"
    },
    subscribeAllHeads: {
        description: "Retrieves the newest header via subscription",
        params: [],
        pubsub: [
            "allHead",
            "subscribeAllHeads",
            "unsubscribeAllHeads"
        ],
        type: "Header"
    },
    subscribeFinalizedHeads: {
        alias: [
            "chain_subscribeFinalisedHeads",
            "chain_unsubscribeFinalisedHeads"
        ],
        description: "Retrieves the best finalized header via subscription",
        params: [],
        pubsub: [
            "finalizedHead",
            "subscribeFinalizedHeads",
            "unsubscribeFinalizedHeads"
        ],
        type: "Header"
    },
    subscribeNewHeads: {
        alias: [
            "chain_unsubscribeNewHeads",
            "subscribe_newHead",
            "unsubscribe_newHead"
        ],
        description: "Retrieves the best header via subscription",
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: [
            "newHead",
            "subscribeNewHead",
            "unsubscribeNewHead"
        ],
        type: "Header"
    }
};
// ../../node_modules/@polkadot/types/interfaces/chain/definitions.js
var definitions_default64 = {
    rpc: rpc13,
    types: {
        BlockHash: "Hash"
    }
};
// ../../node_modules/@polkadot/types/interfaces/childstate/rpc.js
var rpc14 = {
    getKeys: {
        description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getKeysPaged: {
        alias: [
            "childstate_getKeysPagedAt"
        ],
        description: "Returns the keys with prefix from a child storage with pagination support",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                name: "count",
                type: "u32"
            },
            {
                isOptional: true,
                name: "startKey",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getStorage: {
        description: "Returns a child storage entry at a specific block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<StorageData>"
    },
    getStorageEntries: {
        description: "Returns child storage entries for multiple keys at a specific block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Vec<Option<StorageData>>"
    },
    getStorageHash: {
        description: "Returns the hash of a child storage entry at a block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<Hash>"
    },
    getStorageSize: {
        description: "Returns the size of a child storage entry at a block state",
        params: [
            {
                name: "childKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "Hash"
            }
        ],
        type: "Option<u64>"
    }
};
// ../../node_modules/@polkadot/types/interfaces/childstate/definitions.js
var definitions_default65 = {
    rpc: rpc14,
    types: {
        // StorageKey extends Bytes
        PrefixedStorageKey: "StorageKey"
    }
};
// ../../node_modules/@polkadot/types/interfaces/offchain/rpc.js
var rpc15 = {
    localStorageGet: {
        description: "Get offchain local storage under given key and prefix",
        params: [
            {
                name: "kind",
                type: "StorageKind"
            },
            {
                name: "key",
                type: "Bytes"
            }
        ],
        type: "Option<Bytes>"
    },
    localStorageSet: {
        description: "Set offchain local storage under given key and prefix",
        params: [
            {
                name: "kind",
                type: "StorageKind"
            },
            {
                name: "key",
                type: "Bytes"
            },
            {
                name: "value",
                type: "Bytes"
            }
        ],
        type: "Null"
    }
};
// ../../node_modules/@polkadot/types/interfaces/offchain/runtime.js
var runtime24 = {
    OffchainWorkerApi: [
        {
            methods: {
                offchain_worker: {
                    description: "Starts the off-chain task for given block header.",
                    params: [
                        {
                            name: "header",
                            type: "Header"
                        }
                    ],
                    type: "Null"
                }
            },
            version: 2
        },
        {
            methods: {
                offchain_worker: {
                    description: "Starts the off-chain task for given block header.",
                    params: [
                        {
                            name: "number",
                            type: "BlockNumber"
                        }
                    ],
                    type: "Null"
                }
            },
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/offchain/definitions.js
var definitions_default66 = {
    rpc: rpc15,
    runtime: runtime24,
    types: {
        StorageKind: {
            _enum: {
                PERSISTENT: 1,
                LOCAL: 2
            }
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/payment/rpc.js
var rpc16 = {
    queryFeeDetails: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
        description: "Query the detailed fee of a given encoded extrinsic",
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "FeeDetails"
    },
    queryInfo: {
        // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
        deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
        description: "Retrieves the fee information for an encoded extrinsic",
        params: [
            {
                name: "extrinsic",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        // NOTE: Stuck on V1 forever (at least for the time being)
        type: "RuntimeDispatchInfoV1"
    }
};
// ../../node_modules/@polkadot/types/interfaces/payment/runtime.js
var V1_V2_V3_SHARED_PAY = {
    query_fee_details: {
        description: "The transaction fee details",
        params: [
            {
                name: "uxt",
                type: "Extrinsic"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "FeeDetails"
    }
};
var V1_V2_V3_SHARED_CALL = {
    query_call_fee_details: {
        description: "The call fee details",
        params: [
            {
                name: "call",
                type: "Call"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "FeeDetails"
    }
};
var V2_V3_SHARED_PAY = {
    query_info: {
        description: "The transaction info",
        params: [
            {
                name: "uxt",
                type: "Extrinsic"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "RuntimeDispatchInfo"
    }
};
var V2_V3_SHARED_CALL = {
    query_call_info: {
        description: "The call info",
        params: [
            {
                name: "call",
                type: "Call"
            },
            {
                name: "len",
                type: "u32"
            }
        ],
        type: "RuntimeDispatchInfo"
    }
};
var V3_SHARED_PAY_CALL = {
    query_length_to_fee: {
        description: "Query the output of the current LengthToFee given some input",
        params: [
            {
                name: "length",
                type: "u32"
            }
        ],
        type: "Balance"
    },
    query_weight_to_fee: {
        description: "Query the output of the current WeightToFee given some input",
        params: [
            {
                name: "weight",
                type: "Weight"
            }
        ],
        type: "Balance"
    }
};
var runtime25 = {
    TransactionPaymentApi: [
        {
            methods: objectSpread({}, V3_SHARED_PAY_CALL, V2_V3_SHARED_PAY, V1_V2_V3_SHARED_PAY),
            version: 3
        },
        {
            methods: objectSpread({}, V2_V3_SHARED_PAY, V1_V2_V3_SHARED_PAY),
            version: 2
        },
        {
            methods: objectSpread({
                query_info: {
                    description: "The transaction info",
                    params: [
                        {
                            name: "uxt",
                            type: "Extrinsic"
                        },
                        {
                            name: "len",
                            type: "u32"
                        }
                    ],
                    // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
                    // changed mid-flight between versions. So we have some of each depending on
                    // runtime. (We do detect the weight type, so correct)
                    type: "RuntimeDispatchInfo"
                }
            }, V1_V2_V3_SHARED_PAY),
            version: 1
        }
    ],
    TransactionPaymentCallApi: [
        {
            methods: objectSpread({}, V3_SHARED_PAY_CALL, V2_V3_SHARED_CALL, V1_V2_V3_SHARED_CALL),
            version: 3
        },
        {
            methods: objectSpread({}, V2_V3_SHARED_CALL, V1_V2_V3_SHARED_CALL),
            version: 2
        },
        {
            methods: objectSpread({
                CALL: {
                    description: "The call info",
                    params: [
                        {
                            name: "call",
                            type: "Call"
                        },
                        {
                            name: "len",
                            type: "u32"
                        }
                    ],
                    // NOTE: As per the above comment, the below is correct according to Substrate, but
                    // _may_ yield fallback decoding on some versions of the runtime
                    type: "RuntimeDispatchInfo"
                }
            }, V1_V2_V3_SHARED_CALL),
            version: 1
        }
    ]
};
// ../../node_modules/@polkadot/types/interfaces/payment/definitions.js
var definitions_default67 = {
    rpc: rpc16,
    runtime: runtime25,
    types: {
        FeeDetails: {
            inclusionFee: "Option<InclusionFee>"
        },
        InclusionFee: {
            baseFee: "Balance",
            lenFee: "Balance",
            adjustedWeightFee: "Balance"
        },
        RuntimeDispatchInfo: {
            weight: "Weight",
            class: "DispatchClass",
            partialFee: "Balance"
        },
        RuntimeDispatchInfoV1: {
            weight: "WeightV1",
            class: "DispatchClass",
            partialFee: "Balance"
        },
        RuntimeDispatchInfoV2: {
            weight: "WeightV2",
            class: "DispatchClass",
            partialFee: "Balance"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/state/rpc.js
var rpc17 = {
    call: {
        alias: [
            "state_callAt"
        ],
        description: "Perform a call to a builtin on the chain",
        params: [
            {
                name: "method",
                type: "Text"
            },
            {
                name: "data",
                type: "Bytes"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Bytes"
    },
    getChildKeys: {
        description: "Retrieves the keys with prefix of a specific child storage",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getChildReadProof: {
        description: "Returns proof of storage for child key entries at a specific block state.",
        params: [
            {
                name: "childStorageKey",
                type: "PrefixedStorageKey"
            },
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ReadProof"
    },
    getChildStorage: {
        description: "Retrieves the child storage for a key",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "StorageData"
    },
    getChildStorageHash: {
        description: "Retrieves the child storage hash",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Hash"
    },
    getChildStorageSize: {
        description: "Retrieves the child storage size",
        params: [
            {
                name: "childStorageKey",
                type: "StorageKey"
            },
            {
                name: "childDefinition",
                type: "StorageKey"
            },
            {
                name: "childType",
                type: "u32"
            },
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "u64"
    },
    getKeys: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Retrieves the keys with a certain prefix",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getKeysPaged: {
        alias: [
            "state_getKeysPagedAt"
        ],
        description: "Returns the keys with prefix with pagination support.",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                name: "count",
                type: "u32"
            },
            {
                isOptional: true,
                name: "startKey",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageKey>"
    },
    getMetadata: {
        description: "Returns the runtime metadata",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Metadata"
    },
    getPairs: {
        deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
        description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
        params: [
            {
                name: "prefix",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<KeyValue>"
    },
    getReadProof: {
        description: "Returns proof of storage entries at a specific block state",
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "ReadProof"
    },
    getRuntimeVersion: {
        alias: [
            "chain_getRuntimeVersion"
        ],
        description: "Get the runtime version",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "RuntimeVersion"
    },
    getStorage: {
        alias: [
            "state_getStorageAt"
        ],
        description: "Retrieves the storage for a key",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "StorageData"
    },
    getStorageHash: {
        alias: [
            "state_getStorageHashAt"
        ],
        description: "Retrieves the storage hash",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Hash"
    },
    getStorageSize: {
        alias: [
            "state_getStorageSizeAt"
        ],
        description: "Retrieves the storage size",
        params: [
            {
                name: "key",
                type: "StorageKey"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "u64"
    },
    queryStorage: {
        description: "Query historical storage entries (by key) starting from a start block",
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                name: "fromBlock",
                type: "Hash"
            },
            {
                isOptional: true,
                name: "toBlock",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageChangeSet>"
    },
    queryStorageAt: {
        description: "Query storage entries (by key) starting at block hash given as the second parameter",
        params: [
            {
                name: "keys",
                type: "Vec<StorageKey>"
            },
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "Vec<StorageChangeSet>"
    },
    subscribeRuntimeVersion: {
        alias: [
            "chain_subscribeRuntimeVersion",
            "chain_unsubscribeRuntimeVersion"
        ],
        description: "Retrieves the runtime version via subscription",
        params: [],
        pubsub: [
            "runtimeVersion",
            "subscribeRuntimeVersion",
            "unsubscribeRuntimeVersion"
        ],
        type: "RuntimeVersion"
    },
    subscribeStorage: {
        description: "Subscribes to storage changes for the provided keys",
        params: [
            {
                isOptional: true,
                name: "keys",
                type: "Vec<StorageKey>"
            }
        ],
        pubsub: [
            "storage",
            "subscribeStorage",
            "unsubscribeStorage"
        ],
        type: "StorageChangeSet"
    },
    traceBlock: {
        description: "Provides a way to trace the re-execution of a single block",
        params: [
            {
                name: "block",
                type: "Hash"
            },
            {
                name: "targets",
                type: "Option<Text>"
            },
            {
                name: "storageKeys",
                type: "Option<Text>"
            },
            {
                name: "methods",
                type: "Option<Text>"
            }
        ],
        type: "TraceBlockResponse"
    },
    trieMigrationStatus: {
        description: "Check current migration state",
        params: [
            {
                isHistoric: true,
                isOptional: true,
                name: "at",
                type: "BlockHash"
            }
        ],
        type: "MigrationStatusResult"
    }
};
// ../../node_modules/@polkadot/types/interfaces/state/definitions.js
var definitions_default68 = {
    rpc: rpc17,
    types: {
        ApiId: "[u8; 8]",
        BlockTrace: {
            blockHash: "Text",
            parentHash: "Text",
            tracingTargets: "Text",
            storageKeys: "Text",
            spans: "Vec<BlockTraceSpan>",
            events: "Vec<BlockTraceEvent>"
        },
        BlockTraceEvent: {
            target: "Text",
            data: "BlockTraceEventData",
            parentId: "Option<u64>"
        },
        BlockTraceEventData: {
            stringValues: "HashMap<Text, Text>"
        },
        BlockTraceSpan: {
            id: "u64",
            parentId: "Option<u64>",
            name: "Text",
            target: "Text",
            wasm: "bool"
        },
        KeyValueOption: "(StorageKey, Option<StorageData>)",
        MigrationStatusResult: {
            topRemainingToMigrate: "u64",
            childRemainingToMigrate: "u64"
        },
        ReadProof: {
            at: "Hash",
            proof: "Vec<Bytes>"
        },
        RuntimeVersionApi: "(ApiId, u32)",
        RuntimeVersion: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>",
            transactionVersion: "u32",
            stateVersion: "u8"
        },
        RuntimeVersionPre4: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>",
            transactionVersion: "u32"
        },
        RuntimeVersionPre3: {
            specName: "Text",
            implName: "Text",
            authoringVersion: "u32",
            specVersion: "u32",
            implVersion: "u32",
            apis: "Vec<RuntimeVersionApi>"
        },
        RuntimeVersionPartial: {
            specName: "Text",
            specVersion: "u32",
            apis: "Vec<RuntimeVersionApi>"
        },
        SpecVersion: "u32",
        StorageChangeSet: {
            block: "Hash",
            changes: "Vec<KeyValueOption>"
        },
        TraceBlockResponse: {
            _enum: {
                TraceError: "TraceError",
                BlockTrace: "BlockTrace"
            }
        },
        TraceError: {
            error: "Text"
        }
    }
};
// ../../node_modules/@polkadot/types/interfaces/jsonrpc.js
var jsonrpc = {};
Object.keys(definitions_exports).forEach(function(s) {
    return Object.entries(definitions_exports[s].rpc || {}).forEach(function(param) {
        var _param = _sliced_to_array(param, 2), method = _param[0], def = _param[1];
        var section2 = def.aliasSection || s;
        if (!jsonrpc[section2]) {
            jsonrpc[section2] = {};
        }
        jsonrpc[section2][method] = objectSpread({}, def, {
            isSubscription: !!def.pubsub,
            jsonrpc: "".concat(section2, "_").concat(method),
            method: method,
            section: section2
        });
    });
});
var jsonrpc_default = jsonrpc;
// ../../node_modules/@polkadot/types/create/lazy.js
function lazyVariants(lookup, param, getName, creator) {
    var type = param.type;
    var result = {};
    var variants = lookup.getSiType(type).def.asVariant.variants;
    for(var i = 0; i < variants.length; i++){
        lazyMethod(result, variants[i], creator, getName, i);
    }
    return result;
}
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
var emptyCheck = {
    extrinsic: {},
    payload: {}
};
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
var polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
};
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
var shell = {
    DisallowSigned: emptyCheck
};
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
var statemint = {
    ChargeAssetTxPayment: {
        extrinsic: {
            tip: "Compact<Balance>",
            // eslint-disable-next-line sort-keys
            assetId: "Option<AssetId>"
        },
        payload: {}
    }
};
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
var CheckMortality = {
    extrinsic: {
        era: "ExtrinsicEra"
    },
    payload: {
        blockHash: "Hash"
    }
};
var substrate = {
    ChargeTransactionPayment: {
        extrinsic: {
            tip: "Compact<Balance>"
        },
        payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
        extrinsic: {},
        payload: {
            genesisHash: "Hash"
        }
    },
    CheckMortality: CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
        extrinsic: {
            nonce: "Compact<Index>"
        },
        payload: {}
    },
    CheckSpecVersion: {
        extrinsic: {},
        payload: {
            specVersion: "u32"
        }
    },
    CheckTxVersion: {
        extrinsic: {},
        payload: {
            transactionVersion: "u32"
        }
    },
    CheckVersion: {
        extrinsic: {},
        payload: {
            specVersion: "u32"
        }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
};
// ../../node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
var allExtensions = objectSpread({}, substrate, polkadot, shell, statemint);
var fallbackExtensions = [
    "CheckVersion",
    "CheckGenesis",
    "CheckEra",
    "CheckNonce",
    "CheckWeight",
    "ChargeTransactionPayment",
    "CheckBlockGasLimit"
];
function findUnknownExtensions(extensions) {
    var userExtensions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var names2 = _to_consumable_array(Object.keys(allExtensions)).concat(_to_consumable_array(Object.keys(userExtensions)));
    return extensions.filter(function(k) {
        return !names2.includes(k);
    });
}
function expandExtensionTypes(extensions, type) {
    var userExtensions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return extensions.map(function(k) {
        return userExtensions[k] || allExtensions[k];
    }).filter(function(info6) {
        return !!info6;
    }).reduce(function(result, info6) {
        return objectSpread(result, info6[type]);
    }, {});
}
// ../../node_modules/@polkadot/types/generic/Event.js
function decodeEvent(registry, value1) {
    if (!value1 || !value1.length) {
        return {
            DataType: Null
        };
    }
    var index = value1.subarray(0, 2);
    return {
        DataType: registry.findMetaEvent(index),
        value: {
            data: value1.subarray(2),
            index: index
        }
    };
}
var _meta, _method, _names, _section, _typeDef;
var GenericEventData = /*#__PURE__*/ function(Tuple) {
    _inherits(GenericEventData, Tuple);
    var _super = _create_super(GenericEventData);
    function GenericEventData(registry, value1, meta) {
        var section2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "<unknown>", method = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "<unknown>";
        _class_call_check(this, GenericEventData);
        var _this;
        var fields = (meta == null ? void 0 : meta.fields) || [];
        _this = _super.call(this, registry, fields.map(function(param) {
            var type = param.type;
            return registry.createLookupType(type);
        }), value1);
        __privateAdd(_assert_this_initialized(_this), _meta, void 0);
        __privateAdd(_assert_this_initialized(_this), _method, void 0);
        __privateAdd(_assert_this_initialized(_this), _names, null);
        __privateAdd(_assert_this_initialized(_this), _section, void 0);
        __privateAdd(_assert_this_initialized(_this), _typeDef, void 0);
        __privateSet(_assert_this_initialized(_this), _meta, meta);
        __privateSet(_assert_this_initialized(_this), _method, method);
        __privateSet(_assert_this_initialized(_this), _section, section2);
        __privateSet(_assert_this_initialized(_this), _typeDef, fields.map(function(param) {
            var type = param.type;
            return registry.lookup.getTypeDef(type);
        }));
        var names2 = fields.map(function(param) {
            var name = param.name;
            return registry.lookup.sanitizeField(name)[0];
        }).filter(function(n) {
            return !!n;
        });
        if (names2.length === fields.length) {
            __privateSet(_assert_this_initialized(_this), _names, names2);
            objectProperties(_assert_this_initialized(_this), names2, function(_23, i) {
                return _this[i];
            });
        }
        return _this;
    }
    _create_class(GenericEventData, [
        {
            key: "meta",
            get: /**
   * @description The wrapped [[EventMetadata]]
   */ function get() {
                return __privateGet(this, _meta);
            }
        },
        {
            key: "method",
            get: /**
   * @description The method as a string
   */ function get() {
                return __privateGet(this, _method);
            }
        },
        {
            key: "names",
            get: /**
   * @description The field names (as available)
   */ function get() {
                return __privateGet(this, _names);
            }
        },
        {
            key: "section",
            get: /**
   * @description The section as a string
   */ function get() {
                return __privateGet(this, _section);
            }
        },
        {
            key: "typeDef",
            get: /**
   * @description The [[TypeDef]] for this event
   */ function get() {
                return __privateGet(this, _typeDef);
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                if (__privateGet(this, _names) !== null) {
                    var json = {};
                    for(var i = 0; i < __privateGet(this, _names).length; i++){
                        json[__privateGet(this, _names)[i]] = this[i].toHuman(isExtended);
                    }
                    return json;
                }
                return _get(_get_prototype_of(GenericEventData.prototype), "toHuman", this).call(this, isExtended);
            }
        }
    ]);
    return GenericEventData;
}(Tuple);
_meta = new WeakMap();
_method = new WeakMap();
_names = new WeakMap();
_section = new WeakMap();
_typeDef = new WeakMap();
var GenericEvent = /*#__PURE__*/ function(Struct) {
    _inherits(GenericEvent, Struct);
    var _super = _create_super(GenericEvent);
    function GenericEvent(registry, _value) {
        _class_call_check(this, GenericEvent);
        var _decodeEvent = decodeEvent(registry, _value), DataType = _decodeEvent.DataType, value1 = _decodeEvent.value;
        return _super.call(this, registry, {
            index: "EventId",
            // eslint-disable-next-line sort-keys
            data: DataType
        }, value1);
    }
    _create_class(GenericEvent, [
        {
            key: "data",
            get: /**
   * @description The wrapped [[EventData]]
   */ function get() {
                return this.getT("data");
            }
        },
        {
            key: "index",
            get: /**
   * @description The [[EventId]], identifying the raw event
   */ function get() {
                return this.getT("index");
            }
        },
        {
            key: "meta",
            get: /**
   * @description The [[EventMetadata]] with the documentation
   */ function get() {
                return this.data.meta;
            }
        },
        {
            key: "method",
            get: /**
   * @description The method string identifying the event
   */ function get() {
                return this.data.method;
            }
        },
        {
            key: "section",
            get: /**
   * @description The section string identifying the event
   */ function get() {
                return this.data.section;
            }
        },
        {
            key: "typeDef",
            get: /**
   * @description The [[TypeDef]] for the event
   */ function get() {
                return this.data.typeDef;
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExpanded) {
                return objectSpread({
                    method: this.method,
                    section: this.section
                }, isExpanded ? {
                    docs: this.meta.docs.map(function(d) {
                        return d.toString();
                    })
                } : null, _get(_get_prototype_of(GenericEvent.prototype), "toHuman", this).call(this, isExpanded));
            }
        }
    ]);
    return GenericEvent;
}(Struct);
// ../../node_modules/@polkadot/types/index.types.js
var index_types_exports = {};
__export(index_types_exports, {
    BitVec: function() {
        return BitVec;
    },
    Bool: function() {
        return bool2;
    },
    Bytes: function() {
        return Bytes;
    },
    Data: function() {
        return Data;
    },
    F32: function() {
        return f32;
    },
    F64: function() {
        return f64;
    },
    GenericAccountId: function() {
        return GenericAccountId;
    },
    GenericAccountId32: function() {
        return GenericAccountId;
    },
    GenericAccountId33: function() {
        return GenericAccountId33;
    },
    GenericAccountIndex: function() {
        return GenericAccountIndex;
    },
    GenericAddress: function() {
        return GenericMultiAddress;
    },
    GenericBlock: function() {
        return GenericBlock;
    },
    GenericCall: function() {
        return GenericCall;
    },
    GenericChainProperties: function() {
        return GenericChainProperties;
    },
    GenericConsensusEngineId: function() {
        return GenericConsensusEngineId;
    },
    GenericEthereumAccountId: function() {
        return GenericEthereumAccountId;
    },
    GenericEthereumLookupSource: function() {
        return GenericEthereumLookupSource;
    },
    GenericEvent: function() {
        return GenericEvent;
    },
    GenericEventData: function() {
        return GenericEventData;
    },
    GenericExtrinsic: function() {
        return GenericExtrinsic;
    },
    GenericExtrinsicEra: function() {
        return GenericExtrinsicEra;
    },
    GenericExtrinsicPayload: function() {
        return GenericExtrinsicPayload;
    },
    GenericExtrinsicPayloadUnknown: function() {
        return GenericExtrinsicPayloadUnknown;
    },
    GenericExtrinsicPayloadV4: function() {
        return GenericExtrinsicPayloadV4;
    },
    GenericExtrinsicSignatureV4: function() {
        return GenericExtrinsicSignatureV4;
    },
    GenericExtrinsicUnknown: function() {
        return GenericExtrinsicUnknown;
    },
    GenericExtrinsicV4: function() {
        return GenericExtrinsicV4;
    },
    GenericImmortalEra: function() {
        return ImmortalEra;
    },
    GenericLookupSource: function() {
        return GenericLookupSource;
    },
    GenericMortalEra: function() {
        return MortalEra;
    },
    GenericMultiAddress: function() {
        return GenericMultiAddress;
    },
    GenericSignerPayload: function() {
        return GenericSignerPayload;
    },
    GenericVote: function() {
        return GenericVote;
    },
    I128: function() {
        return i128;
    },
    I16: function() {
        return i16;
    },
    I256: function() {
        return i256;
    },
    I32: function() {
        return i32;
    },
    I64: function() {
        return i64;
    },
    I8: function() {
        return i81;
    },
    Null: function() {
        return Null;
    },
    OptionBool: function() {
        return OptionBool;
    },
    StorageKey: function() {
        return StorageKey;
    },
    Text: function() {
        return Text;
    },
    Type: function() {
        return Type;
    },
    U128: function() {
        return u128;
    },
    U16: function() {
        return u162;
    },
    U256: function() {
        return u256;
    },
    U32: function() {
        return u323;
    },
    U64: function() {
        return u642;
    },
    U8: function() {
        return u82;
    },
    USize: function() {
        return usize;
    },
    bool: function() {
        return bool2;
    },
    f32: function() {
        return f32;
    },
    f64: function() {
        return f64;
    },
    i128: function() {
        return i128;
    },
    i16: function() {
        return i16;
    },
    i256: function() {
        return i256;
    },
    i32: function() {
        return i32;
    },
    i64: function() {
        return i64;
    },
    i8: function() {
        return i81;
    },
    u128: function() {
        return u128;
    },
    u16: function() {
        return u162;
    },
    u256: function() {
        return u256;
    },
    u32: function() {
        return u323;
    },
    u64: function() {
        return u642;
    },
    u8: function() {
        return u82;
    },
    usize: function() {
        return usize;
    }
});
// ../../node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
var EXTRINSIC_VERSION = 4;
var GenericExtrinsicV4 = /*#__PURE__*/ function(Struct) {
    _inherits(GenericExtrinsicV41, Struct);
    var _super = _create_super(GenericExtrinsicV41);
    function GenericExtrinsicV41(registry, value1) {
        var isSigned = (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}).isSigned;
        _class_call_check(this, GenericExtrinsicV41);
        return _super.call(this, registry, {
            signature: "ExtrinsicSignatureV4",
            // eslint-disable-next-line sort-keys
            method: "Call"
        }, GenericExtrinsicV4.decodeExtrinsic(registry, value1, isSigned));
    }
    _create_class(GenericExtrinsicV41, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            key: "method",
            get: /**
   * @description The [[Call]] this extrinsic wraps
   */ function get() {
                return this.getT("method");
            }
        },
        {
            key: "signature",
            get: /**
   * @description The [[ExtrinsicSignatureV4]]
   */ function get() {
                return this.getT("signature");
            }
        },
        {
            key: "version",
            get: /**
   * @description The version for the signature
   */ function get() {
                return EXTRINSIC_VERSION;
            }
        },
        {
            /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */ key: "addSignature",
            value: function addSignature(signer, signature, payload) {
                this.signature.addSignature(signer, signature, payload);
                return this;
            }
        },
        {
            /**
   * @description Sign the extrinsic with a specific keypair
   */ key: "sign",
            value: function sign(account3, options) {
                this.signature.sign(this.method, account3, options);
                return this;
            }
        },
        {
            /**
   * @describe Adds a fake signature to the extrinsic
   */ key: "signFake",
            value: function signFake(signer, options) {
                this.signature.signFake(this.method, signer, options);
                return this;
            }
        }
    ], [
        {
            key: "decodeExtrinsic",
            value: /** @internal */ function decodeExtrinsic(registry, value1) {
                var isSigned = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                if (_instanceof(value1, GenericExtrinsicV4)) {
                    return value1;
                } else if (_instanceof(value1, registry.createClassUnsafe("Call"))) {
                    return {
                        method: value1
                    };
                } else if (isU8a(value1)) {
                    var signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [
                        value1,
                        {
                            isSigned: isSigned
                        }
                    ]);
                    var method = registry.createTypeUnsafe("Call", [
                        value1.subarray(signature.encodedLength)
                    ]);
                    return {
                        method: method,
                        signature: signature
                    };
                }
                return value1 || {};
            }
        }
    ]);
    return GenericExtrinsicV41;
}(Struct);
// ../../node_modules/@polkadot/types/extrinsic/constants.js
var BIT_SIGNED = 128;
var BIT_UNSIGNED = 0;
var EMPTY_U8A = new Uint8Array();
var DEFAULT_VERSION = 4;
var IMMORTAL_ERA = new Uint8Array([
    0
]);
var UNMASK_VERSION = 127;
// ../../node_modules/@polkadot/types/extrinsic/Extrinsic.js
var VERSIONS = [
    "ExtrinsicUnknown",
    // v0 is unknown
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicUnknown",
    "ExtrinsicV4"
];
function newFromValue(registry, value1, version) {
    if (_instanceof(value1, GenericExtrinsic)) {
        return value1.unwrap();
    }
    var isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
    var type = VERSIONS[version & UNMASK_VERSION] || VERSIONS[0];
    return registry.createTypeUnsafe(type, [
        value1,
        {
            isSigned: isSigned,
            version: version
        }
    ]);
}
function decodeExtrinsic(registry, value1) {
    var version = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_VERSION;
    if (isU8a(value1) || Array.isArray(value1) || isHex(value1)) {
        return decodeU8a3(registry, u8aToU8a(value1), version);
    } else if (_instanceof(value1, registry.createClassUnsafe("Call"))) {
        return newFromValue(registry, {
            method: value1
        }, version);
    }
    return newFromValue(registry, value1, version);
}
function decodeU8a3(registry, value1, version) {
    if (!value1.length) {
        return newFromValue(registry, new Uint8Array(), version);
    }
    var _compactFromU8a = _sliced_to_array(compactFromU8a(value1), 2), offset = _compactFromU8a[0], length = _compactFromU8a[1];
    var total = offset + length.toNumber();
    if (total > value1.length) {
        throw new Error("Extrinsic: length less than remainder, expected at least ".concat(total, ", found ").concat(value1.length));
    }
    var data = value1.subarray(offset, total);
    return newFromValue(registry, data.subarray(1), data[0]);
}
var ExtrinsicBase = /*#__PURE__*/ function(AbstractBase) {
    _inherits(ExtrinsicBase, AbstractBase);
    var _super = _create_super(ExtrinsicBase);
    function ExtrinsicBase(registry, value1, initialU8aLength) {
        _class_call_check(this, ExtrinsicBase);
        var _this;
        _this = _super.call(this, registry, value1, initialU8aLength);
        var signKeys = Object.keys(registry.getSignedExtensionTypes());
        var getter = function(key) {
            return _this.inner.signature[key];
        };
        for(var i = 0; i < signKeys.length; i++){
            objectProperty(_assert_this_initialized(_this), signKeys[i], getter);
        }
        return _this;
    }
    _create_class(ExtrinsicBase, [
        {
            key: "args",
            get: /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */ function get() {
                return this.method.args;
            }
        },
        {
            key: "argsDef",
            get: /**
   * @description The argument definitions, compatible with [[Call]]
   */ function get() {
                return this.method.argsDef;
            }
        },
        {
            key: "callIndex",
            get: /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */ function get() {
                return this.method.callIndex;
            }
        },
        {
            key: "data",
            get: /**
   * @description The actual data for the Call
   */ function get() {
                return this.method.data;
            }
        },
        {
            key: "era",
            get: /**
   * @description The era for this extrinsic
   */ function get() {
                return this.inner.signature.era;
            }
        },
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            key: "isSigned",
            get: /**
   * @description `true` id the extrinsic is signed
   */ function get() {
                return this.inner.signature.isSigned;
            }
        },
        {
            key: "length",
            get: /**
   * @description The length of the actual data, excluding prefix
   */ function get() {
                return this.toU8a(true).length;
            }
        },
        {
            key: "meta",
            get: /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */ function get() {
                return this.method.meta;
            }
        },
        {
            key: "method",
            get: /**
   * @description The [[Call]] this extrinsic wraps
   */ function get() {
                return this.inner.method;
            }
        },
        {
            key: "nonce",
            get: /**
   * @description The nonce for this extrinsic
   */ function get() {
                return this.inner.signature.nonce;
            }
        },
        {
            key: "signature",
            get: /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */ function get() {
                return this.inner.signature.signature;
            }
        },
        {
            key: "signer",
            get: /**
   * @description The [[Address]] that signed
   */ function get() {
                return this.inner.signature.signer;
            }
        },
        {
            key: "tip",
            get: /**
   * @description Forwards compat
   */ function get() {
                return this.inner.signature.tip;
            }
        },
        {
            key: "type",
            get: /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */ function get() {
                return this.inner.version;
            }
        },
        {
            key: "inner",
            get: function get() {
                return this.unwrap();
            }
        },
        {
            key: "version",
            get: /**
   * @description Returns the encoded version flag
  */ function get() {
                return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
            }
        },
        {
            /**
   * @description Checks if the source matches this in type
   */ key: "is",
            value: function is(other) {
                return this.method.is(other);
            }
        },
        {
            key: "unwrap",
            value: function unwrap() {
                return _get(_get_prototype_of(ExtrinsicBase.prototype), "unwrap", this).call(this);
            }
        }
    ]);
    return ExtrinsicBase;
}(AbstractBase);
var _hashCache;
var GenericExtrinsic = /*#__PURE__*/ function(ExtrinsicBase) {
    _inherits(GenericExtrinsic, ExtrinsicBase);
    var _super = _create_super(GenericExtrinsic);
    function GenericExtrinsic(registry, value1) {
        var version = (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}).version;
        _class_call_check(this, GenericExtrinsic);
        var _this;
        _this = _super.call(this, registry, decodeExtrinsic(registry, value1, version));
        __privateAdd(_assert_this_initialized(_this), _hashCache, void 0);
        return _this;
    }
    _create_class(GenericExtrinsic, [
        {
            key: "hash",
            get: /**
   * @description returns a hash of the contents
   */ function get() {
                if (!__privateGet(this, _hashCache)) {
                    __privateSet(this, _hashCache, _get(_get_prototype_of(GenericExtrinsic.prototype), "hash", this));
                }
                return __privateGet(this, _hashCache);
            }
        },
        {
            /**
   * @description Injects an already-generated signature into the extrinsic
   */ key: "addSignature",
            value: function addSignature(signer, signature, payload) {
                this.inner.addSignature(signer, signature, payload);
                __privateSet(this, _hashCache, void 0);
                return this;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var encoded = u8aConcat.apply(void 0, _to_consumable_array(this.toU8aInner()));
                return {
                    inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
                    outer: [
                        compactToU8a(encoded.length),
                        new Uint8Array([
                            this.version
                        ])
                    ]
                };
            }
        },
        {
            /**
   * @description Sign the extrinsic with a specific keypair
   */ key: "sign",
            value: function sign(account3, options) {
                this.inner.sign(account3, options);
                __privateSet(this, _hashCache, void 0);
                return this;
            }
        },
        {
            /**
   * @describe Adds a fake signature to the extrinsic
   */ key: "signFake",
            value: function signFake(signer, options) {
                this.inner.signFake(signer, options);
                __privateSet(this, _hashCache, void 0);
                return this;
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex(isBare) {
                return u8aToHex(this.toU8a(isBare));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExpanded) {
                return objectSpread({}, {
                    isSigned: this.isSigned,
                    method: this.method.toHuman(isExpanded)
                }, this.isSigned ? {
                    era: this.era.toHuman(isExpanded),
                    nonce: this.nonce.toHuman(isExpanded),
                    signature: this.signature.toHex(),
                    signer: this.signer.toHuman(isExpanded),
                    tip: this.tip.toHuman(isExpanded)
                } : null);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Extrinsic";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = u8aConcat.apply(void 0, _to_consumable_array(this.toU8aInner()));
                return isBare ? encoded : compactAddLength(encoded);
            }
        },
        {
            key: "toU8aInner",
            value: function toU8aInner() {
                return [
                    new Uint8Array([
                        this.version
                    ]),
                    this.inner.toU8a()
                ];
            }
        }
    ]);
    return GenericExtrinsic;
}(ExtrinsicBase);
_hashCache = new WeakMap();
__publicField(GenericExtrinsic, "LATEST_EXTRINSIC_VERSION", EXTRINSIC_VERSION);
// ../../node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
function getTrailingZeros(period) {
    var binary = period.toString(2);
    var index = 0;
    while(binary[binary.length - 1 - index] === "0"){
        index++;
    }
    return index;
}
function decodeMortalEra(registry, value1) {
    if (isU8a(value1) || isHex(value1) || Array.isArray(value1)) {
        return decodeMortalU8a(registry, u8aToU8a(value1));
    } else if (!value1) {
        return [
            new u642(registry),
            new u642(registry)
        ];
    } else if (isObject(value1)) {
        return decodeMortalObject(registry, value1);
    }
    throw new Error("Invalid data passed to Mortal era");
}
function decodeMortalObject(registry, value1) {
    var current = value1.current, period = value1.period;
    var calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    var phase = current % calPeriod;
    var quantizeFactor = Math.max(calPeriod >> 12, 1);
    var quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [
        new u642(registry, calPeriod),
        new u642(registry, quantizedPhase)
    ];
}
function decodeMortalU8a(registry, value1) {
    if (value1.length === 0) {
        return [
            new u642(registry),
            new u642(registry)
        ];
    }
    var first2 = u8aToBn(value1.subarray(0, 1)).toNumber();
    var second = u8aToBn(value1.subarray(1, 2)).toNumber();
    var encoded = first2 + (second << 8);
    var period = 2 << encoded % (1 << 4);
    var quantizeFactor = Math.max(period >> 12, 1);
    var phase = (encoded >> 4) * quantizeFactor;
    if (period < 4 || phase >= period) {
        throw new Error("Invalid data passed to Mortal era");
    }
    return [
        new u642(registry, period),
        new u642(registry, phase)
    ];
}
function decodeExtrinsicEra() {
    var value1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Uint8Array();
    if (isU8a(value1)) {
        return !value1.length || value1[0] === 0 ? new Uint8Array([
            0
        ]) : new Uint8Array([
            1,
            value1[0],
            value1[1]
        ]);
    } else if (!value1) {
        return new Uint8Array([
            0
        ]);
    } else if (_instanceof(value1, GenericExtrinsicEra)) {
        return decodeExtrinsicEra(value1.toU8a());
    } else if (isHex(value1)) {
        return decodeExtrinsicEra(hexToU8a(value1));
    } else if (isObject(value1)) {
        var entries = Object.entries(value1).map(function(param) {
            var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
            return [
                k.toLowerCase(),
                v
            ];
        });
        var mortal = entries.find(function(param) {
            var _param = _sliced_to_array(param, 1), k = _param[0];
            return k.toLowerCase() === "mortalera";
        });
        var immortal = entries.find(function(param) {
            var _param = _sliced_to_array(param, 1), k = _param[0];
            return k.toLowerCase() === "immortalera";
        });
        return mortal ? {
            MortalEra: mortal[1]
        } : immortal ? {
            ImmortalEra: immortal[1]
        } : {
            MortalEra: value1
        };
    }
    throw new Error("Invalid data passed to Era");
}
var ImmortalEra = /*#__PURE__*/ function(Raw) {
    _inherits(ImmortalEra, Raw);
    var _super = _create_super(ImmortalEra);
    function ImmortalEra(registry, value1) {
        _class_call_check(this, ImmortalEra);
        return _super.call(this, registry, IMMORTAL_ERA);
    }
    return ImmortalEra;
}(Raw);
var MortalEra = /*#__PURE__*/ function(Tuple) {
    _inherits(MortalEra, Tuple);
    var _super = _create_super(MortalEra);
    function MortalEra(registry, value1) {
        _class_call_check(this, MortalEra);
        return _super.call(this, registry, {
            period: u642,
            phase: u642
        }, decodeMortalEra(registry, value1));
    }
    _create_class(MortalEra, [
        {
            key: "encodedLength",
            get: /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */ function get() {
                return 2;
            }
        },
        {
            key: "period",
            get: /**
   * @description The period of this Mortal wraps as a [[U64]]
   */ function get() {
                return this[0];
            }
        },
        {
            key: "phase",
            get: /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */ function get() {
                return this[1];
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return {
                    period: formatNumber(this.period),
                    phase: formatNumber(this.phase)
                };
            }
        },
        {
            /**
   * @description Returns a JSON representation of the actual value
   */ key: "toJSON",
            value: function toJSON() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */ // eslint-disable-next-line @typescript-eslint/no-unused-vars
            key: "toU8a",
            value: function toU8a(isBare) {
                var period = this.period.toNumber();
                var encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
                return new Uint8Array([
                    encoded & 255,
                    encoded >> 8
                ]);
            }
        },
        {
            /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */ key: "birth",
            value: function birth(current) {
                var phase = this.phase.toNumber();
                var period = this.period.toNumber();
                return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
            }
        },
        {
            /**
   * @description Get the block number of the first block at which the era has ended.
   */ key: "death",
            value: function death(current) {
                return this.birth(current) + this.period.toNumber();
            }
        }
    ]);
    return MortalEra;
}(Tuple);
var GenericExtrinsicEra = /*#__PURE__*/ function(Enum) {
    _inherits(GenericExtrinsicEra, Enum);
    var _super = _create_super(GenericExtrinsicEra);
    function GenericExtrinsicEra(registry, value1) {
        _class_call_check(this, GenericExtrinsicEra);
        return _super.call(this, registry, {
            ImmortalEra: ImmortalEra,
            MortalEra: MortalEra
        }, decodeExtrinsicEra(value1));
    }
    _create_class(GenericExtrinsicEra, [
        {
            key: "encodedLength",
            get: /**
   * @description Override the encoded length method
   */ function get() {
                return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
            }
        },
        {
            key: "asImmortalEra",
            get: /**
   * @description Returns the item as a [[ImmortalEra]]
   */ function get() {
                if (!this.isImmortalEra) {
                    throw new Error("Cannot convert '".concat(this.type, "' via asImmortalEra"));
                }
                return this.inner;
            }
        },
        {
            key: "asMortalEra",
            get: /**
   * @description Returns the item as a [[MortalEra]]
   */ function get() {
                if (!this.isMortalEra) {
                    throw new Error("Cannot convert '".concat(this.type, "' via asMortalEra"));
                }
                return this.inner;
            }
        },
        {
            key: "isImmortalEra",
            get: /**
   * @description `true` if Immortal
   */ function get() {
                return this.index === 0;
            }
        },
        {
            key: "isMortalEra",
            get: /**
   * @description `true` if Mortal
   */ function get() {
                return this.index > 0;
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
            }
        }
    ]);
    return GenericExtrinsicEra;
}(Enum);
// ../../node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
var VERSIONS2 = [
    "ExtrinsicPayloadUnknown",
    // v0 is unknown
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadUnknown",
    "ExtrinsicPayloadV4"
];
function decodeExtrinsicPayload(registry, value1) {
    var version = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_VERSION;
    if (_instanceof(value1, GenericExtrinsicPayload)) {
        return value1.unwrap();
    }
    return registry.createTypeUnsafe(VERSIONS2[version] || VERSIONS2[0], [
        value1,
        {
            version: version
        }
    ]);
}
var GenericExtrinsicPayload = /*#__PURE__*/ function(AbstractBase) {
    _inherits(GenericExtrinsicPayload, AbstractBase);
    var _super = _create_super(GenericExtrinsicPayload);
    function GenericExtrinsicPayload(registry, value1) {
        var version = (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}).version;
        _class_call_check(this, GenericExtrinsicPayload);
        return _super.call(this, registry, decodeExtrinsicPayload(registry, value1, version));
    }
    _create_class(GenericExtrinsicPayload, [
        {
            key: "blockHash",
            get: /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */ function get() {
                return this.inner.blockHash;
            }
        },
        {
            key: "era",
            get: /**
   * @description The [[ExtrinsicEra]]
   */ function get() {
                return this.inner.era;
            }
        },
        {
            key: "genesisHash",
            get: /**
   * @description The genesis block [[BlockHash]] the signature applies to
   */ function get() {
                return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
            }
        },
        {
            key: "method",
            get: /**
   * @description The [[Bytes]] contained in the payload
   */ function get() {
                return this.inner.method;
            }
        },
        {
            key: "nonce",
            get: /**
   * @description The [[Index]]
   */ function get() {
                return this.inner.nonce;
            }
        },
        {
            key: "specVersion",
            get: /**
   * @description The specVersion as a [[u32]] for this payload
   */ function get() {
                return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
            }
        },
        {
            key: "tip",
            get: /**
   * @description The [[Balance]]
   */ function get() {
                return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
            }
        },
        {
            key: "transactionVersion",
            get: /**
   * @description The transaction version as a [[u32]] for this payload
   */ function get() {
                return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
            }
        },
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return this.inner.eq(other);
            }
        },
        {
            /**
   * @description Sign the payload with the keypair
   */ key: "sign",
            value: function sign(signerPair) {
                var signature = this.inner.sign(signerPair);
                return {
                    signature: u8aToHex(signature)
                };
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                return this.inner.toHuman(isExtended);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "ExtrinsicPayload";
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return this.toHex();
            }
        },
        {
            /**
   * @description Returns a serialized u8a form
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return _get(_get_prototype_of(GenericExtrinsicPayload.prototype), "toU8a", this).call(this, isBare ? {
                    method: true
                } : false);
            }
        }
    ]);
    return GenericExtrinsicPayload;
}(AbstractBase);
// ../../node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
var GenericExtrinsicPayloadUnknown = /*#__PURE__*/ function(Struct) {
    _inherits(GenericExtrinsicPayloadUnknown, Struct);
    var _super = _create_super(GenericExtrinsicPayloadUnknown);
    function GenericExtrinsicPayloadUnknown(registry, value1) {
        var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref_version = _ref.version, version = _ref_version === void 0 ? 0 : _ref_version;
        _class_call_check(this, GenericExtrinsicPayloadUnknown);
        var _this = _super.call(this, registry, {});
        throw new Error("Unsupported extrinsic payload version ".concat(version));
        return _this;
    }
    return GenericExtrinsicPayloadUnknown;
}(Struct);
// ../../node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
var GenericExtrinsicUnknown = /*#__PURE__*/ function(Struct) {
    _inherits(GenericExtrinsicUnknown, Struct);
    var _super = _create_super(GenericExtrinsicUnknown);
    function GenericExtrinsicUnknown(registry, value1) {
        var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref_isSigned = _ref.isSigned, isSigned = _ref_isSigned === void 0 ? false : _ref_isSigned, _ref_version = _ref.version, version = _ref_version === void 0 ? 0 : _ref_version;
        _class_call_check(this, GenericExtrinsicUnknown);
        var _this = _super.call(this, registry, {});
        throw new Error("Unsupported ".concat(isSigned ? "" : "un", "signed extrinsic version ").concat(version & UNMASK_VERSION));
        return _this;
    }
    return GenericExtrinsicUnknown;
}(Struct);
// ../../node_modules/@polkadot/types/extrinsic/SignerPayload.js
var knownTypes = {
    address: "Address",
    blockHash: "Hash",
    blockNumber: "BlockNumber",
    era: "ExtrinsicEra",
    genesisHash: "Hash",
    method: "Call",
    nonce: "Compact<Index>",
    runtimeVersion: "RuntimeVersion",
    signedExtensions: "Vec<Text>",
    tip: "Compact<Balance>",
    version: "u8"
};
var _extraTypes;
var GenericSignerPayload = /*#__PURE__*/ function(Struct) {
    _inherits(GenericSignerPayload, Struct);
    var _super = _create_super(GenericSignerPayload);
    function GenericSignerPayload(registry, value1) {
        _class_call_check(this, GenericSignerPayload);
        var _this;
        var extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
        _this = _super.call(this, registry, objectSpread({}, extensionTypes, knownTypes), value1);
        __privateAdd(_assert_this_initialized(_this), _extraTypes, void 0);
        __privateSet(_assert_this_initialized(_this), _extraTypes, {});
        var getter = function(key) {
            return _this.get(key);
        };
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.entries(extensionTypes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], type = _step_value[1];
                if (!knownTypes[key]) {
                    __privateGet(_this, _extraTypes)[key] = type;
                }
                objectProperty(_assert_this_initialized(_this), key, getter);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return _this;
    }
    _create_class(GenericSignerPayload, [
        {
            key: "address",
            get: function get() {
                return this.getT("address");
            }
        },
        {
            key: "blockHash",
            get: function get() {
                return this.getT("blockHash");
            }
        },
        {
            key: "blockNumber",
            get: function get() {
                return this.getT("blockNumber");
            }
        },
        {
            key: "era",
            get: function get() {
                return this.getT("era");
            }
        },
        {
            key: "genesisHash",
            get: function get() {
                return this.getT("genesisHash");
            }
        },
        {
            key: "method",
            get: function get() {
                return this.getT("method");
            }
        },
        {
            key: "nonce",
            get: function get() {
                return this.getT("nonce");
            }
        },
        {
            key: "runtimeVersion",
            get: function get() {
                return this.getT("runtimeVersion");
            }
        },
        {
            key: "signedExtensions",
            get: function get() {
                return this.getT("signedExtensions");
            }
        },
        {
            key: "tip",
            get: function get() {
                return this.getT("tip");
            }
        },
        {
            key: "version",
            get: function get() {
                return this.getT("version");
            }
        },
        {
            /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */ key: "toPayload",
            value: function toPayload() {
                var result = {};
                var keys2 = Object.keys(__privateGet(this, _extraTypes));
                for(var i = 0; i < keys2.length; i++){
                    var key = keys2[i];
                    var value1 = this.get(key);
                    var isOption = _instanceof(value1, Option);
                    if (!isOption || value1.isSome) {
                        result[key] = value1.toHex();
                    }
                }
                return objectSpread(result, {
                    // the known defaults as managed explicitly and has different
                    // formatting in cases, e.g. we mostly expose a hex format here
                    address: this.address.toString(),
                    blockHash: this.blockHash.toHex(),
                    blockNumber: this.blockNumber.toHex(),
                    era: this.era.toHex(),
                    genesisHash: this.genesisHash.toHex(),
                    method: this.method.toHex(),
                    nonce: this.nonce.toHex(),
                    signedExtensions: this.signedExtensions.map(function(e) {
                        return e.toString();
                    }),
                    specVersion: this.runtimeVersion.specVersion.toHex(),
                    tip: this.tip.toHex(),
                    transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
                    version: this.version.toNumber()
                });
            }
        },
        {
            /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */ key: "toRaw",
            value: function toRaw() {
                var payload = this.toPayload();
                var data = u8aToHex(this.registry.createTypeUnsafe("ExtrinsicPayload", [
                    payload,
                    {
                        version: payload.version
                    }
                ]).toU8a({
                    method: true
                }));
                return {
                    address: payload.address,
                    data: data,
                    type: "payload"
                };
            }
        }
    ]);
    return GenericSignerPayload;
}(Struct);
_extraTypes = new WeakMap();
// ../../node_modules/@polkadot/types/extrinsic/util.js
function sign(registry, signerPair, u8a, options) {
    var encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
    return signerPair.sign(encoded, options);
}
// ../../node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
var _signOptions;
var GenericExtrinsicPayloadV4 = /*#__PURE__*/ function(Struct) {
    _inherits(GenericExtrinsicPayloadV4, Struct);
    var _super = _create_super(GenericExtrinsicPayloadV4);
    function GenericExtrinsicPayloadV4(registry, value1) {
        _class_call_check(this, GenericExtrinsicPayloadV4);
        var _this;
        _this = _super.call(this, registry, objectSpread({
            method: "Bytes"
        }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value1);
        __privateAdd(_assert_this_initialized(_this), _signOptions, void 0);
        __privateSet(_assert_this_initialized(_this), _signOptions, {
            withType: _instanceof(registry.createTypeUnsafe("ExtrinsicSignature", []), Enum)
        });
        return _this;
    }
    _create_class(GenericExtrinsicPayloadV4, [
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                return _get(_get_prototype_of(GenericExtrinsicPayloadV4.prototype), "inspect", this).call(this, {
                    method: true
                });
            }
        },
        {
            key: "blockHash",
            get: /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */ function get() {
                return this.getT("blockHash");
            }
        },
        {
            key: "era",
            get: /**
   * @description The [[ExtrinsicEra]]
   */ function get() {
                return this.getT("era");
            }
        },
        {
            key: "genesisHash",
            get: /**
   * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
   */ function get() {
                return this.getT("genesisHash");
            }
        },
        {
            key: "method",
            get: /**
   * @description The [[Bytes]] contained in the payload
   */ function get() {
                return this.getT("method");
            }
        },
        {
            key: "nonce",
            get: /**
   * @description The [[Index]]
   */ function get() {
                return this.getT("nonce");
            }
        },
        {
            key: "specVersion",
            get: /**
   * @description The specVersion for this signature
   */ function get() {
                return this.getT("specVersion");
            }
        },
        {
            key: "tip",
            get: /**
   * @description The tip [[Balance]]
   */ function get() {
                return this.getT("tip");
            }
        },
        {
            key: "transactionVersion",
            get: /**
   * @description The transactionVersion for this signature
   */ function get() {
                return this.getT("transactionVersion");
            }
        },
        {
            key: "assetId",
            get: /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */ function get() {
                return this.getT("assetId");
            }
        },
        {
            /**
   * @description Sign the payload with the keypair
   */ key: "sign",
            value: function sign1(signerPair) {
                return sign(this.registry, signerPair, this.toU8a({
                    method: true
                }), __privateGet(this, _signOptions));
            }
        }
    ]);
    return GenericExtrinsicPayloadV4;
}(Struct);
_signOptions = new WeakMap();
// ../../node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
var FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
    return registry.createTypeUnsafe("Address", [
        isU8a(address) ? u8aToHex(address) : address
    ]);
}
var _signKeys;
var _GenericExtrinsicSignatureV4 = /*#__PURE__*/ function(Struct) {
    _inherits(_GenericExtrinsicSignatureV41, Struct);
    var _super = _create_super(_GenericExtrinsicSignatureV41);
    function _GenericExtrinsicSignatureV41(registry, value1) {
        var isSigned = (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}).isSigned;
        _class_call_check(this, _GenericExtrinsicSignatureV41);
        var _this;
        var signTypes = registry.getSignedExtensionTypes();
        _this = _super.call(this, registry, objectSpread(// eslint-disable-next-line sort-keys
        {
            signer: "Address",
            signature: "ExtrinsicSignature"
        }, signTypes), _GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value1, isSigned));
        __privateAdd(_assert_this_initialized(_this), _signKeys, void 0);
        __privateSet(_assert_this_initialized(_this), _signKeys, Object.keys(signTypes));
        objectProperties(_assert_this_initialized(_this), __privateGet(_assert_this_initialized(_this), _signKeys), function(k) {
            return _this.get(k);
        });
        return _this;
    }
    _create_class(_GenericExtrinsicSignatureV41, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                return this.isSigned ? _get(_get_prototype_of(_GenericExtrinsicSignatureV41.prototype), "encodedLength", this) : 0;
            }
        },
        {
            key: "isSigned",
            get: /**
   * @description `true` if the signature is valid
   */ function get() {
                return !this.signature.isEmpty;
            }
        },
        {
            key: "era",
            get: /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */ function get() {
                return this.getT("era");
            }
        },
        {
            key: "nonce",
            get: /**
   * @description The [[Index]] for the signature
   */ function get() {
                return this.getT("nonce");
            }
        },
        {
            key: "signature",
            get: /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */ function get() {
                return this.multiSignature.value || this.multiSignature;
            }
        },
        {
            key: "multiSignature",
            get: /**
   * @description The raw [[ExtrinsicSignature]]
   */ function get() {
                return this.getT("signature");
            }
        },
        {
            key: "signer",
            get: /**
   * @description The [[Address]] that signed
   */ function get() {
                return this.getT("signer");
            }
        },
        {
            key: "tip",
            get: /**
   * @description The [[Balance]] tip
   */ function get() {
                return this.getT("tip");
            }
        },
        {
            key: "_injectSignature",
            value: function _injectSignature(signer, signature, payload) {
                for(var i = 0; i < __privateGet(this, _signKeys).length; i++){
                    var k = __privateGet(this, _signKeys)[i];
                    var v = payload.get(k);
                    if (!isUndefined(v)) {
                        this.set(k, v);
                    }
                }
                this.set("signer", signer);
                this.set("signature", signature);
                return this;
            }
        },
        {
            /**
   * @description Adds a raw signature
   */ key: "addSignature",
            value: function addSignature(signer, signature, payload) {
                return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [
                    signature
                ]), new GenericExtrinsicPayloadV4(this.registry, payload));
            }
        },
        {
            /**
   * @description Creates a payload from the supplied options
   */ key: "createPayload",
            value: function createPayload(method, options) {
                var era = options.era, _options_runtimeVersion = options.runtimeVersion, specVersion = _options_runtimeVersion.specVersion, transactionVersion = _options_runtimeVersion.transactionVersion;
                return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
                    era: era || IMMORTAL_ERA,
                    method: method.toHex(),
                    specVersion: specVersion,
                    transactionVersion: transactionVersion
                }));
            }
        },
        {
            /**
   * @description Generate a payload and applies the signature from a keypair
   */ key: "sign",
            value: function sign(method, account3, options) {
                if (!account3 || !account3.addressRaw) {
                    throw new Error("Expected a valid keypair for signing, found ".concat(stringify(account3)));
                }
                var payload = this.createPayload(method, options);
                return this._injectSignature(toAddress(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [
                    payload.sign(account3)
                ]), payload);
            }
        },
        {
            /**
   * @description Generate a payload and applies a fake signature
   */ key: "signFake",
            value: function signFake(method, address, options) {
                if (!address) {
                    throw new Error("Expected a valid address for signing, found ".concat(stringify(address)));
                }
                var payload = this.createPayload(method, options);
                return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [
                    FAKE_SIGNATURE
                ]), payload);
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                return this.isSigned ? _get(_get_prototype_of(_GenericExtrinsicSignatureV41.prototype), "toU8a", this).call(this, isBare) : EMPTY_U8A;
            }
        }
    ], [
        {
            key: "decodeExtrinsicSignature",
            value: /** @internal */ function decodeExtrinsicSignature(value1) {
                var isSigned = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                if (!value1) {
                    return EMPTY_U8A;
                } else if (_instanceof(value1, _GenericExtrinsicSignatureV4)) {
                    return value1;
                }
                return isSigned ? value1 : EMPTY_U8A;
            }
        }
    ]);
    return _GenericExtrinsicSignatureV41;
}(Struct);
var GenericExtrinsicSignatureV4 = _GenericExtrinsicSignatureV4;
_signKeys = new WeakMap();
// ../../node_modules/@polkadot/types/ethereum/AccountId.js
function decodeAccountId(value1) {
    if (isU8a(value1) || Array.isArray(value1)) {
        return u8aToU8a(value1);
    } else if (isHex(value1) || isEthereumAddress(value1.toString())) {
        return hexToU8a(value1.toString());
    } else if (isString(value1)) {
        return u8aToU8a(value1);
    }
    return value1;
}
var GenericEthereumAccountId = /*#__PURE__*/ function(U8aFixed) {
    _inherits(GenericEthereumAccountId, U8aFixed);
    var _super = _create_super(GenericEthereumAccountId);
    function GenericEthereumAccountId(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array();
        _class_call_check(this, GenericEthereumAccountId);
        return _super.call(this, registry, decodeAccountId(value1), 160);
    }
    _create_class(GenericEthereumAccountId, [
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return _get(_get_prototype_of(GenericEthereumAccountId.prototype), "eq", this).call(this, decodeAccountId(other));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return ethereumEncode(this);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "AccountId";
            }
        }
    ]);
    return GenericEthereumAccountId;
}(U8aFixed);
// ../../node_modules/@polkadot/types/generic/AccountIndex.js
var PREFIX_1BYTE = 239;
var PREFIX_2BYTE = 252;
var PREFIX_4BYTE = 253;
var PREFIX_8BYTE = 254;
var MAX_1BYTE = new import_bn.default(PREFIX_1BYTE);
var MAX_2BYTE = new import_bn.default(1).shln(16);
var MAX_4BYTE = new import_bn.default(1).shln(32);
function decodeAccountIndex(value1) {
    if (_instanceof(value1, GenericAccountIndex)) {
        return value1.toBn();
    } else if (isBn(value1) || isNumber(value1) || isHex(value1) || isU8a(value1) || isBigInt(value1)) {
        return value1;
    }
    return decodeAccountIndex(decodeAddress(value1));
}
var GenericAccountIndex = /*#__PURE__*/ function(u323) {
    _inherits(GenericAccountIndex1, u323);
    var _super = _create_super(GenericAccountIndex1);
    function GenericAccountIndex1(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new import_bn.default(0);
        _class_call_check(this, GenericAccountIndex1);
        return _super.call(this, registry, decodeAccountIndex(value1));
    }
    _create_class(GenericAccountIndex1, [
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                if (isBn(other) || isNumber(other)) {
                    return _get(_get_prototype_of(GenericAccountIndex1.prototype), "eq", this).call(this, other);
                }
                return _get(_get_prototype_of(GenericAccountIndex1.prototype), "eq", this).call(this, this.registry.createTypeUnsafe("AccountIndex", [
                    other
                ]));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                var length = GenericAccountIndex.calcLength(this);
                return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "AccountIndex";
            }
        }
    ], [
        {
            key: "calcLength",
            value: function calcLength(_value) {
                var value1 = bnToBn(_value);
                if (value1.lte(MAX_1BYTE)) {
                    return 1;
                } else if (value1.lt(MAX_2BYTE)) {
                    return 2;
                } else if (value1.lt(MAX_4BYTE)) {
                    return 4;
                }
                return 8;
            }
        },
        {
            key: "readLength",
            value: function readLength(input) {
                var first2 = input[0];
                if (first2 === PREFIX_2BYTE) {
                    return [
                        1,
                        2
                    ];
                } else if (first2 === PREFIX_4BYTE) {
                    return [
                        1,
                        4
                    ];
                } else if (first2 === PREFIX_8BYTE) {
                    return [
                        1,
                        8
                    ];
                }
                return [
                    0,
                    1
                ];
            }
        },
        {
            key: "writeLength",
            value: function writeLength(input) {
                switch(input.length){
                    case 2:
                        return new Uint8Array([
                            PREFIX_2BYTE
                        ]);
                    case 4:
                        return new Uint8Array([
                            PREFIX_4BYTE
                        ]);
                    case 8:
                        return new Uint8Array([
                            PREFIX_8BYTE
                        ]);
                    default:
                        return new Uint8Array([]);
                }
            }
        }
    ]);
    return GenericAccountIndex1;
}(u323);
// ../../node_modules/@polkadot/types/ethereum/LookupSource.js
var ACCOUNT_ID_PREFIX = new Uint8Array([
    255
]);
function decodeString(registry, value1) {
    var decoded = decodeAddress(value1);
    return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [
        decoded
    ]) : registry.createTypeUnsafe("AccountIndex", [
        u8aToBn(decoded)
    ]);
}
function decodeU8a4(registry, value1) {
    if (value1.length === 20) {
        return registry.createTypeUnsafe("EthereumAccountId", [
            value1
        ]);
    } else if (value1[0] === 255) {
        return registry.createTypeUnsafe("EthereumAccountId", [
            value1.subarray(1)
        ]);
    }
    var _GenericAccountIndex_readLength = _sliced_to_array(GenericAccountIndex.readLength(value1), 2), offset = _GenericAccountIndex_readLength[0], length = _GenericAccountIndex_readLength[1];
    return registry.createTypeUnsafe("AccountIndex", [
        u8aToBn(value1.subarray(offset, offset + length))
    ]);
}
function decodeAddressOrIndex(registry, value1) {
    return _instanceof(value1, GenericEthereumLookupSource) ? value1.inner : _instanceof(value1, GenericEthereumAccountId) || _instanceof(value1, GenericAccountIndex) ? value1 : isU8a(value1) || Array.isArray(value1) || isHex(value1) ? decodeU8a4(registry, u8aToU8a(value1)) : isBn(value1) || isNumber(value1) || isBigInt(value1) ? registry.createTypeUnsafe("AccountIndex", [
        value1
    ]) : decodeString(registry, value1);
}
var GenericEthereumLookupSource = /*#__PURE__*/ function(AbstractBase) {
    _inherits(GenericEthereumLookupSource, AbstractBase);
    var _super = _create_super(GenericEthereumLookupSource);
    function GenericEthereumLookupSource(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array();
        _class_call_check(this, GenericEthereumLookupSource);
        return _super.call(this, registry, decodeAddressOrIndex(registry, value1));
    }
    _create_class(GenericEthereumLookupSource, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var rawLength = this._rawLength;
                return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
                (rawLength > 1 ? 1 : 0);
            }
        },
        {
            key: "_rawLength",
            get: /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */ function get() {
                return _instanceof(this.inner, GenericAccountIndex) ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Address";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = this.inner.toU8a().subarray(0, this._rawLength);
                return isBare ? encoded : u8aConcat(_instanceof(this.inner, GenericAccountIndex) ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
            }
        }
    ]);
    return GenericEthereumLookupSource;
}(AbstractBase);
// ../../node_modules/@polkadot/types/generic/AccountId.js
function decodeAccountId2(value1) {
    if (isU8a(value1) || Array.isArray(value1)) {
        return u8aToU8a(value1);
    } else if (!value1) {
        return new Uint8Array();
    } else if (isHex(value1)) {
        return hexToU8a(value1);
    } else if (isString(value1)) {
        return decodeAddress(value1.toString());
    }
    throw new Error("Unknown type passed to AccountId constructor, found typeof ".concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1)));
}
var BaseAccountId = /*#__PURE__*/ function(U8aFixed) {
    _inherits(BaseAccountId, U8aFixed);
    var _super = _create_super(BaseAccountId);
    function BaseAccountId(registry) {
        var allowedBits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 256 | 264, value1 = arguments.length > 2 ? arguments[2] : void 0;
        _class_call_check(this, BaseAccountId);
        var decoded = decodeAccountId2(value1);
        var decodedBits = decoded.length * 8;
        if (decodedBits < allowedBits && decoded.some(function(b) {
            return b;
        })) {
            throw new Error("Invalid AccountId provided, expected ".concat(allowedBits >> 3, " bytes, found ").concat(decoded.length));
        }
        return _super.call(this, registry, decoded, allowedBits);
    }
    _create_class(BaseAccountId, [
        {
            /**
   * @description Compares the value of the input to see if there is a match
   */ key: "eq",
            value: function eq(other) {
                return _get(_get_prototype_of(BaseAccountId.prototype), "eq", this).call(this, decodeAccountId2(other));
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                return this.toString();
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toJSON();
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return encodeAddress(this, this.registry.chainSS58);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "AccountId";
            }
        }
    ]);
    return BaseAccountId;
}(U8aFixed);
var GenericAccountId = /*#__PURE__*/ function(BaseAccountId) {
    _inherits(GenericAccountId, BaseAccountId);
    var _super = _create_super(GenericAccountId);
    function GenericAccountId(registry, value1) {
        _class_call_check(this, GenericAccountId);
        return _super.call(this, registry, 256, value1);
    }
    return GenericAccountId;
}(BaseAccountId);
var GenericAccountId33 = /*#__PURE__*/ function(BaseAccountId) {
    _inherits(GenericAccountId33, BaseAccountId);
    var _super = _create_super(GenericAccountId33);
    function GenericAccountId33(registry, value1) {
        _class_call_check(this, GenericAccountId33);
        return _super.call(this, registry, 264, value1);
    }
    return GenericAccountId33;
}(BaseAccountId);
// ../../node_modules/@polkadot/types/generic/Block.js
var GenericBlock = /*#__PURE__*/ function(Struct) {
    _inherits(GenericBlock, Struct);
    var _super = _create_super(GenericBlock);
    function GenericBlock(registry, value1) {
        _class_call_check(this, GenericBlock);
        return _super.call(this, registry, {
            header: "Header",
            // eslint-disable-next-line sort-keys
            extrinsics: "Vec<Extrinsic>"
        }, value1);
    }
    _create_class(GenericBlock, [
        {
            key: "contentHash",
            get: /**
   * @description Encodes a content [[Hash]] for the block
   */ function get() {
                return this.registry.hash(this.toU8a());
            }
        },
        {
            key: "extrinsics",
            get: /**
   * @description The [[Extrinsic]] contained in the block
   */ function get() {
                return this.getT("extrinsics");
            }
        },
        {
            key: "hash",
            get: /**
   * @description Block/header [[Hash]]
   */ function get() {
                return this.header.hash;
            }
        },
        {
            key: "header",
            get: /**
   * @description The [[Header]] of the block
   */ function get() {
                return this.getT("header");
            }
        }
    ]);
    return GenericBlock;
}(Struct);
// ../../node_modules/@polkadot/types/generic/Call.js
function getArgsDef(registry, meta) {
    return meta.fields.reduce(function(result, param, index) {
        var name = param.name, type = param.type;
        result[name.unwrapOr("param".concat(index)).toString()] = registry.createLookupType(type);
        return result;
    }, {});
}
function decodeCallViaObject(registry, value1, _meta3) {
    var args = value1.args, callIndex = value1.callIndex;
    var lookupIndex = _instanceof(callIndex, GenericCallIndex) ? callIndex.toU8a() : callIndex;
    var meta = _meta3 || registry.findMetaCall(lookupIndex).meta;
    return {
        args: args,
        argsDef: getArgsDef(registry, meta),
        callIndex: callIndex,
        meta: meta
    };
}
function decodeCallViaU8a(registry, value1, _meta3) {
    var callIndex = registry.firstCallIndex.slice();
    callIndex.set(value1.subarray(0, 2), 0);
    var meta = _meta3 || registry.findMetaCall(callIndex).meta;
    return {
        args: value1.subarray(2),
        argsDef: getArgsDef(registry, meta),
        callIndex: callIndex,
        meta: meta
    };
}
function decodeCall(registry) {
    var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array(), _meta3 = arguments.length > 2 ? arguments[2] : void 0;
    if (isU8a(value1) || isHex(value1)) {
        return decodeCallViaU8a(registry, u8aToU8a(value1), _meta3);
    } else if (isObject(value1) && value1.callIndex && value1.args) {
        return decodeCallViaObject(registry, value1, _meta3);
    }
    throw new Error("Call: Cannot decode value '".concat(value1, "' of type ").concat(typeof value1 === "undefined" ? "undefined" : _type_of(value1)));
}
var GenericCallIndex = /*#__PURE__*/ function(U8aFixed) {
    _inherits(GenericCallIndex, U8aFixed);
    var _super = _create_super(GenericCallIndex);
    function GenericCallIndex(registry, value1) {
        _class_call_check(this, GenericCallIndex);
        return _super.call(this, registry, value1, 16);
    }
    _create_class(GenericCallIndex, [
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return this.toHex();
            }
        }
    ]);
    return GenericCallIndex;
}(U8aFixed);
var GenericCall = /*#__PURE__*/ function(Struct1) {
    _inherits(GenericCall, Struct1);
    var _super = _create_super(GenericCall);
    function GenericCall(registry, value1, meta) {
        _class_call_check(this, GenericCall);
        var _this;
        var decoded = decodeCall(registry, value1, meta);
        try {
            _this = _super.call(this, registry, {
                callIndex: GenericCallIndex,
                // eslint-disable-next-line sort-keys
                args: Struct.with(decoded.argsDef)
            }, decoded);
        } catch (error2) {
            var method = "unknown.unknown";
            try {
                var c = registry.findMetaCall(decoded.callIndex);
                method = "".concat(c.section, ".").concat(c.method);
            } catch (error3) {}
            throw new Error("Call: failed decoding ".concat(method, ":: ").concat(error2.message));
        }
        _this._meta = decoded.meta;
        return _possible_constructor_return(_this);
    }
    _create_class(GenericCall, [
        {
            key: "args",
            get: /**
   * @description The arguments for the function call
   */ function get() {
                return _to_consumable_array(this.getT("args").values());
            }
        },
        {
            key: "argsDef",
            get: /**
   * @description The argument definitions
   */ function get() {
                return getArgsDef(this.registry, this.meta);
            }
        },
        {
            key: "argsEntries",
            get: /**
   * @description The argument entries
   */ function get() {
                return _to_consumable_array(this.getT("args").entries());
            }
        },
        {
            key: "callIndex",
            get: /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */ function get() {
                return this.getT("callIndex").toU8a();
            }
        },
        {
            key: "data",
            get: /**
   * @description The encoded data
   */ function get() {
                return this.getT("args").toU8a();
            }
        },
        {
            key: "meta",
            get: /**
   * @description The [[FunctionMetadata]]
   */ function get() {
                return this._meta;
            }
        },
        {
            key: "method",
            get: /**
   * @description Returns the name of the method
   */ function get() {
                return this.registry.findMetaCall(this.callIndex).method;
            }
        },
        {
            key: "section",
            get: /**
   * @description Returns the module containing the method
   */ function get() {
                return this.registry.findMetaCall(this.callIndex).section;
            }
        },
        {
            /**
   * @description Checks if the source matches this in type
   */ key: "is",
            value: function is(other) {
                return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExpanded) {
                var _call, _call2;
                var call2;
                try {
                    call2 = this.registry.findMetaCall(this.callIndex);
                } catch (error2) {}
                return objectSpread({
                    args: this.argsEntries.reduce(function(args, param) {
                        var _param = _sliced_to_array(param, 2), n = _param[0], a = _param[1];
                        return objectSpread(args, _define_property({}, n, a.toHuman(isExpanded)));
                    }, {}),
                    method: (_call = call2) == null ? void 0 : _call.method,
                    section: (_call2 = call2) == null ? void 0 : _call2.section
                }, isExpanded && call2 ? {
                    docs: call2.meta.docs.map(function(d) {
                        return d.toString();
                    })
                } : null);
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Call";
            }
        }
    ]);
    return GenericCall;
}(Struct);
// ../../node_modules/@polkadot/types/generic/ChainProperties.js
function createValue(registry, type, value1) {
    var asArray = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
    if (value1 && isFunction(value1.unwrapOrDefault)) {
        return value1;
    }
    return registry.createTypeUnsafe(type, [
        asArray ? isNull(value1) || isUndefined(value1) ? null : Array.isArray(value1) ? value1 : [
            value1
        ] : value1
    ]);
}
function decodeValue(registry, key, value1) {
    return key === "ss58Format" ? createValue(registry, "Option<u32>", value1, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value1) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value1) : value1;
}
function decode(registry, value1) {
    return(// allow decoding from a map as well (ourselves)
    (value1 && isFunction(value1.entries) ? _to_consumable_array(value1.entries()) : Object.entries(value1 || {})).reduce(function(all3, param) {
        var _param = _sliced_to_array(param, 2), key = _param[0], value2 = _param[1];
        all3[key] = decodeValue(registry, key, value2);
        return all3;
    }, {
        ss58Format: registry.createTypeUnsafe("Option<u32>", []),
        tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
        tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    }));
}
var GenericChainProperties = /*#__PURE__*/ function(Json) {
    _inherits(GenericChainProperties, Json);
    var _super = _create_super(GenericChainProperties);
    function GenericChainProperties(registry, value1) {
        _class_call_check(this, GenericChainProperties);
        return _super.call(this, registry, decode(registry, value1));
    }
    _create_class(GenericChainProperties, [
        {
            key: "ss58Format",
            get: /**
   * @description The chain ss58Format
   */ function get() {
                return this.getT("ss58Format");
            }
        },
        {
            key: "tokenDecimals",
            get: /**
   * @description The decimals for each of the tokens
   */ function get() {
                return this.getT("tokenDecimals");
            }
        },
        {
            key: "tokenSymbol",
            get: /**
   * @description The symbols for the tokens
   */ function get() {
                return this.getT("tokenSymbol");
            }
        }
    ]);
    return GenericChainProperties;
}(Json);
// ../../node_modules/@polkadot/types/generic/ConsensusEngineId.js
var CID_AURA = stringToU8a("aura");
var CID_BABE = stringToU8a("BABE");
var CID_GRPA = stringToU8a("FRNK");
var CID_POW = stringToU8a("pow_");
function getAuraAuthor(registry, bytes5, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [
        bytes5.toU8a(true)
    ]).slotNumber.mod(new import_bn.default(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes5, sessionValidators) {
    var digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [
        bytes5.toU8a(true)
    ]);
    return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes5) {
    return registry.createTypeUnsafe("AccountId", [
        bytes5
    ]);
}
var GenericConsensusEngineId = /*#__PURE__*/ function(U8aFixed) {
    _inherits(GenericConsensusEngineId, U8aFixed);
    var _super = _create_super(GenericConsensusEngineId);
    function GenericConsensusEngineId(registry, value1) {
        _class_call_check(this, GenericConsensusEngineId);
        return _super.call(this, registry, isNumber(value1) ? bnToU8a(value1, {
            isLe: false
        }) : value1, 32);
    }
    _create_class(GenericConsensusEngineId, [
        {
            key: "isAura",
            get: /**
   * @description `true` if the engine matches aura
   */ function get() {
                return this.eq(CID_AURA);
            }
        },
        {
            key: "isBabe",
            get: /**
   * @description `true` is the engine matches babe
   */ function get() {
                return this.eq(CID_BABE);
            }
        },
        {
            key: "isGrandpa",
            get: /**
   * @description `true` is the engine matches grandpa
   */ function get() {
                return this.eq(CID_GRPA);
            }
        },
        {
            key: "isPow",
            get: /**
   * @description `true` is the engine matches pow
   */ function get() {
                return this.eq(CID_POW);
            }
        },
        {
            /**
   * @description From the input bytes, decode into an author
   */ key: "extractAuthor",
            value: function extractAuthor(bytes5, sessionValidators) {
                if (sessionValidators != null && sessionValidators.length) {
                    if (this.isAura) {
                        return getAuraAuthor(this.registry, bytes5, sessionValidators);
                    } else if (this.isBabe) {
                        return getBabeAuthor(this.registry, bytes5, sessionValidators);
                    }
                }
                if (this.isPow || bytes5.length === 20) {
                    return getBytesAsAuthor(this.registry, bytes5);
                }
                return void 0;
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman() {
                return this.toString();
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "ConsensusEngineId";
            }
        },
        {
            /**
   * @description Override the default toString to return a 4-byte string
   */ key: "toString",
            value: function toString() {
                return this.isAscii ? u8aToString(this) : u8aToHex(this);
            }
        }
    ]);
    return GenericConsensusEngineId;
}(U8aFixed);
// ../../node_modules/@polkadot/types/generic/LookupSource.js
var ACCOUNT_ID_PREFIX2 = new Uint8Array([
    255
]);
function decodeString2(registry, value1) {
    var decoded = decodeAddress(value1);
    return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [
        decoded
    ]) : registry.createTypeUnsafe("AccountIndex", [
        u8aToBn(decoded)
    ]);
}
function decodeU8a5(registry, value1) {
    if (value1.length === 32) {
        return registry.createTypeUnsafe("AccountId", [
            value1
        ]);
    } else if (value1[0] === 255) {
        return registry.createTypeUnsafe("AccountId", [
            value1.subarray(1)
        ]);
    }
    var _GenericAccountIndex_readLength = _sliced_to_array(GenericAccountIndex.readLength(value1), 2), offset = _GenericAccountIndex_readLength[0], length = _GenericAccountIndex_readLength[1];
    return registry.createTypeUnsafe("AccountIndex", [
        u8aToBn(value1.subarray(offset, offset + length))
    ]);
}
function decodeAddressOrIndex2(registry, value1) {
    return _instanceof(value1, GenericLookupSource) ? value1.inner : _instanceof(value1, GenericAccountId) || _instanceof(value1, GenericAccountIndex) ? value1 : isBn(value1) || isNumber(value1) || isBigInt(value1) ? registry.createTypeUnsafe("AccountIndex", [
        value1
    ]) : Array.isArray(value1) || isHex(value1) || isU8a(value1) ? decodeU8a5(registry, u8aToU8a(value1)) : decodeString2(registry, value1);
}
var GenericLookupSource = /*#__PURE__*/ function(AbstractBase) {
    _inherits(GenericLookupSource, AbstractBase);
    var _super = _create_super(GenericLookupSource);
    function GenericLookupSource(registry) {
        var value1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Uint8Array();
        _class_call_check(this, GenericLookupSource);
        return _super.call(this, registry, decodeAddressOrIndex2(registry, value1));
    }
    _create_class(GenericLookupSource, [
        {
            key: "encodedLength",
            get: /**
   * @description The length of the value when encoded as a Uint8Array
   */ function get() {
                var rawLength = this._rawLength;
                return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
                (rawLength > 1 ? 1 : 0);
            }
        },
        {
            key: "_rawLength",
            get: /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */ function get() {
                return _instanceof(this.inner, GenericAccountIndex) ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
            }
        },
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var value1 = this.inner.toU8a().subarray(0, this._rawLength);
                return {
                    outer: [
                        new Uint8Array(_instanceof(this.inner, GenericAccountIndex) ? GenericAccountIndex.writeLength(value1) : ACCOUNT_ID_PREFIX2),
                        value1
                    ]
                };
            }
        },
        {
            /**
   * @description Returns a hex string representation of the value
   */ key: "toHex",
            value: function toHex() {
                return u8aToHex(this.toU8a());
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Address";
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */ key: "toU8a",
            value: function toU8a(isBare) {
                var encoded = this.inner.toU8a().subarray(0, this._rawLength);
                return isBare ? encoded : u8aConcat(_instanceof(this.inner, GenericAccountIndex) ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX2, encoded);
            }
        }
    ]);
    return GenericLookupSource;
}(AbstractBase);
// ../../node_modules/@polkadot/types/generic/MultiAddress.js
function decodeU8a6(registry, u8a) {
    if ([
        0,
        32
    ].includes(u8a.length)) {
        return {
            Id: u8a
        };
    } else if (u8a.length === 20) {
        return {
            Address20: u8a
        };
    } else if (u8a.length <= 8) {
        return {
            Index: registry.createTypeUnsafe("AccountIndex", [
                u8a
            ]).toNumber()
        };
    }
    return u8a;
}
function decodeMultiAny(registry, value1) {
    if (_instanceof(value1, GenericAccountId)) {
        return {
            Id: value1
        };
    } else if (isU8a(value1)) {
        return decodeU8a6(registry, value1);
    } else if (_instanceof(value1, GenericMultiAddress)) {
        return value1;
    } else if (_instanceof(value1, GenericAccountIndex) || isBn(value1) || isNumber(value1)) {
        return {
            Index: isNumber(value1) ? value1 : value1.toNumber()
        };
    } else if (isString(value1)) {
        return decodeU8a6(registry, decodeAddress(value1.toString()));
    }
    return value1;
}
var GenericMultiAddress = /*#__PURE__*/ function(Enum) {
    _inherits(GenericMultiAddress, Enum);
    var _super = _create_super(GenericMultiAddress);
    function GenericMultiAddress(registry, value1) {
        _class_call_check(this, GenericMultiAddress);
        return _super.call(this, registry, {
            Id: "AccountId",
            Index: "Compact<AccountIndex>",
            Raw: "Bytes",
            // eslint-disable-next-line sort-keys
            Address32: "H256",
            // eslint-disable-next-line sort-keys
            Address20: "H160"
        }, decodeMultiAny(registry, value1));
    }
    _create_class(GenericMultiAddress, [
        {
            /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */ key: "inspect",
            value: function inspect() {
                var _this_inner_inspect = this.inner.inspect(), inner = _this_inner_inspect.inner, _this_inner_inspect_outer = _this_inner_inspect.outer, outer = _this_inner_inspect_outer === void 0 ? [] : _this_inner_inspect_outer;
                return {
                    inner: inner,
                    outer: [
                        new Uint8Array([
                            this.index
                        ])
                    ].concat(_to_consumable_array(outer))
                };
            }
        },
        {
            /**
   * @description Returns the string representation of the value
   */ key: "toString",
            value: function toString() {
                return this.value.toString();
            }
        }
    ]);
    return GenericMultiAddress;
}(Enum);
// ../../node_modules/@polkadot/types/generic/Vote.js
var AYE_BITS = 128;
var NAY_BITS = 0;
var CON_MASK = 127;
var DEF_CONV = 0;
function decodeVoteBool(value1) {
    return value1 ? new Uint8Array([
        AYE_BITS | DEF_CONV
    ]) : new Uint8Array([
        NAY_BITS
    ]);
}
function decodeVoteU8a(value1) {
    return value1.length ? value1.subarray(0, 1) : new Uint8Array([
        NAY_BITS
    ]);
}
function decodeVoteType(registry, value1) {
    return new Uint8Array([
        (new bool2(registry, value1.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [
            value1.conviction || DEF_CONV
        ]).index
    ]);
}
function decodeVote(registry, value1) {
    if (isU8a(value1)) {
        return decodeVoteU8a(value1);
    } else if (isUndefined(value1) || _instanceof(value1, Boolean) || isBoolean(value1)) {
        return decodeVoteBool(new bool2(registry, value1).isTrue);
    } else if (isNumber(value1)) {
        return decodeVoteBool(value1 < 0);
    }
    return decodeVoteType(registry, value1);
}
var _aye, _conviction;
var GenericVote = /*#__PURE__*/ function(U8aFixed) {
    _inherits(GenericVote, U8aFixed);
    var _super = _create_super(GenericVote);
    function GenericVote(registry, value1) {
        _class_call_check(this, GenericVote);
        var _this;
        var decoded = decodeVote(registry, value1);
        _this = _super.call(this, registry, decoded, 8);
        __privateAdd(_assert_this_initialized(_this), _aye, void 0);
        __privateAdd(_assert_this_initialized(_this), _conviction, void 0);
        __privateSet(_assert_this_initialized(_this), _aye, (decoded[0] & AYE_BITS) === AYE_BITS);
        __privateSet(_assert_this_initialized(_this), _conviction, _this.registry.createTypeUnsafe("Conviction", [
            decoded[0] & CON_MASK
        ]));
        return _this;
    }
    _create_class(GenericVote, [
        {
            key: "conviction",
            get: /**
   * @description returns a V2 conviction
   */ function get() {
                return __privateGet(this, _conviction);
            }
        },
        {
            key: "isAye",
            get: /**
   * @description true if the wrapped value is a positive vote
   */ function get() {
                return __privateGet(this, _aye);
            }
        },
        {
            key: "isNay",
            get: /**
   * @description true if the wrapped value is a negative vote
   */ function get() {
                return !this.isAye;
            }
        },
        {
            /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */ key: "toHuman",
            value: function toHuman(isExpanded) {
                return {
                    conviction: this.conviction.toHuman(isExpanded),
                    vote: this.isAye ? "Aye" : "Nay"
                };
            }
        },
        {
            /**
   * @description Converts the value in a best-fit primitive form
   */ key: "toPrimitive",
            value: function toPrimitive() {
                return {
                    aye: this.isAye,
                    conviction: this.conviction.toPrimitive()
                };
            }
        },
        {
            /**
   * @description Returns the base runtime type name for this instance
   */ key: "toRawType",
            value: function toRawType() {
                return "Vote";
            }
        }
    ]);
    return GenericVote;
}(U8aFixed);
_aye = new WeakMap();
_conviction = new WeakMap();
// ../../node_modules/@polkadot/types/primitive/Data.js
function decodeDataU8a(registry, value1) {
    var indicator = value1[0];
    if (!indicator) {
        return [
            void 0,
            void 0
        ];
    } else if (indicator >= 1 && indicator <= 33) {
        var length = indicator - 1;
        var data = value1.subarray(1, length + 1);
        return [
            registry.createTypeUnsafe("Raw", [
                data
            ]),
            1
        ];
    } else if (indicator >= 34 && indicator <= 37) {
        return [
            value1.subarray(1, 32 + 1),
            indicator - 32
        ];
    }
    throw new Error("Unable to decode Data, invalid indicator byte ".concat(indicator));
}
function decodeData(registry, value1) {
    if (isU8a(value1) || isString(value1)) {
        return decodeDataU8a(registry, u8aToU8a(value1));
    } else if (!value1) {
        return [
            void 0,
            void 0
        ];
    }
    return [
        value1,
        void 0
    ];
}
var Data = /*#__PURE__*/ function(Enum) {
    _inherits(Data, Enum);
    var _super = _create_super(Data);
    function Data(registry, value1) {
        _class_call_check(this, Data);
        var _this;
        _this = _super.call.apply(_super, [
            this,
            registry,
            {
                None: "Null",
                // 0
                Raw: "Bytes",
                // 1
                // eslint-disable-next-line sort-keys
                BlakeTwo256: "H256",
                // 2
                Sha256: "H256",
                // 3
                // eslint-disable-next-line sort-keys
                Keccak256: "H256",
                // 4
                ShaThree256: "H256"
            }
        ].concat(_to_consumable_array(decodeData(registry, value1))));
        if (_this.isRaw && _this.asRaw.length > 32) {
            throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
        }
        return _this;
    }
    _create_class(Data, [
        {
            key: "asBlakeTwo256",
            get: function get() {
                return this.value;
            }
        },
        {
            key: "asKeccak256",
            get: function get() {
                return this.value;
            }
        },
        {
            key: "asRaw",
            get: function get() {
                return this.value;
            }
        },
        {
            key: "asSha256",
            get: function get() {
                return this.value;
            }
        },
        {
            key: "asShaThree256",
            get: function get() {
                return this.value;
            }
        },
        {
            key: "isBlakeTwo256",
            get: function get() {
                return this.index === 2;
            }
        },
        {
            key: "isKeccak256",
            get: function get() {
                return this.index === 4;
            }
        },
        {
            key: "isNone",
            get: function get() {
                return this.index === 0;
            }
        },
        {
            key: "isRaw",
            get: function get() {
                return this.index === 1;
            }
        },
        {
            key: "isSha256",
            get: function get() {
                return this.index === 3;
            }
        },
        {
            key: "isShaThree256",
            get: function get() {
                return this.index === 5;
            }
        },
        {
            key: "encodedLength",
            get: /**
   * @description The encoded length
   */ function get() {
                return this.toU8a().length;
            }
        },
        {
            /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */ key: "toU8a",
            value: function toU8a() {
                if (this.index === 0) {
                    return new Uint8Array(1);
                } else if (this.index === 1) {
                    var data = this.value.toU8a(true);
                    var length = Math.min(data.length, 32);
                    var u8a2 = new Uint8Array(length + 1);
                    u8a2.set([
                        length + 1
                    ], 0);
                    u8a2.set(data.subarray(0, length), 1);
                    return u8a2;
                }
                var u8a = new Uint8Array(33);
                u8a.set([
                    this.index + 32
                ], 0);
                u8a.set(this.value.toU8a(), 1);
                return u8a;
            }
        }
    ]);
    return Data;
}(Enum);
// ../../node_modules/@polkadot/types/metadata/util/flattenUniq.js
function flattenUniq(list) {
    var result = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    for(var i = 0; i < list.length; i++){
        var entry = list[i];
        if (Array.isArray(entry)) {
            flattenUniq(entry, result);
        } else {
            result.push(entry);
        }
    }
    return _to_consumable_array(new Set(result));
}
// ../../node_modules/@polkadot/types/metadata/util/getSiName.js
function getSiName(lookup, type) {
    var typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
}
// ../../node_modules/@polkadot/types/metadata/util/extractTypes.js
function extractSubSingle(_23, param) {
    var sub = param.sub;
    var lookupName = sub.lookupName, type = sub.type;
    return extractTypes([
        lookupName || type
    ]);
}
function extractSubArray(_23, param) {
    var sub = param.sub;
    return extractTypes(sub.map(function(param) {
        var lookupName = param.lookupName, type = param.type;
        return lookupName || type;
    }));
}
function unhandled(type, param) {
    var info6 = param.info;
    throw new Error("Unhandled: Unable to create and validate type from ".concat(type, " (info=").concat(TypeDefInfo[info6], ")"));
}
var _obj2;
var mapping = (_obj2 = {}, _define_property(_obj2, TypeDefInfo.BTreeMap, extractSubArray), _define_property(_obj2, TypeDefInfo.BTreeSet, extractSubSingle), _define_property(_obj2, TypeDefInfo.Compact, extractSubSingle), _define_property(_obj2, TypeDefInfo.DoNotConstruct, unhandled), _define_property(_obj2, TypeDefInfo.Enum, extractSubArray), _define_property(_obj2, TypeDefInfo.HashMap, extractSubArray), _define_property(_obj2, TypeDefInfo.Int, unhandled), _define_property(_obj2, TypeDefInfo.Linkage, extractSubSingle), _define_property(_obj2, TypeDefInfo.Null, unhandled), _define_property(_obj2, TypeDefInfo.Option, extractSubSingle), _define_property(_obj2, TypeDefInfo.Plain, function(_23, typeDef) {
    return typeDef.lookupName || typeDef.type;
}), _define_property(_obj2, TypeDefInfo.Range, extractSubSingle), _define_property(_obj2, TypeDefInfo.RangeInclusive, extractSubSingle), _define_property(_obj2, TypeDefInfo.Result, extractSubArray), _define_property(_obj2, TypeDefInfo.Set, extractSubArray), _define_property(_obj2, TypeDefInfo.Si, unhandled), _define_property(_obj2, TypeDefInfo.Struct, extractSubArray), _define_property(_obj2, TypeDefInfo.Tuple, extractSubArray), _define_property(_obj2, TypeDefInfo.UInt, unhandled), _define_property(_obj2, TypeDefInfo.Vec, extractSubSingle), _define_property(_obj2, TypeDefInfo.VecFixed, extractSubSingle), _define_property(_obj2, TypeDefInfo.WrapperKeepOpaque, extractSubSingle), _define_property(_obj2, TypeDefInfo.WrapperOpaque, extractSubSingle), _obj2);
function extractTypes(types2) {
    var count = types2.length;
    var result = new Array(count);
    for(var i = 0; i < count; i++){
        var type = types2[i];
        var typeDef = getTypeDef(type);
        result[i] = mapping[typeDef.info](type, typeDef);
    }
    return result;
}
// ../../node_modules/@polkadot/types/metadata/util/validateTypes.js
var l5 = logger("metadata");
function validateTypes(registry, throwError, types2) {
    var missing = flattenUniq(extractTypes(types2)).filter(function(type) {
        return !registry.hasType(type) && !registry.isLookupType(type);
    }).sort();
    if (missing.length !== 0) {
        var message2 = "Unknown types found, no types for ".concat(missing.join(", "));
        if (throwError) {
            throw new Error(message2);
        } else {
            l5.warn(message2);
        }
    }
    return types2;
}
// ../../node_modules/@polkadot/types/metadata/util/getUniqTypes.js
function extractTypes2(lookup, types2) {
    return types2.map(function(param) {
        var type = param.type;
        return lookup.getTypeDef(type).type;
    });
}
function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(function(param) {
        var fields = param.fields;
        return extractTypes2(lookup, fields);
    });
}
function getPalletNames(param) {
    var lookup = param.lookup, pallets = param.pallets;
    return pallets.reduce(function(all3, param) {
        var calls = param.calls, constants = param.constants, events2 = param.events, storage = param.storage;
        all3.push([
            extractTypes2(lookup, constants)
        ]);
        if (calls.isSome) {
            all3.push(extractFieldTypes(lookup, calls.unwrap().type));
        }
        if (events2.isSome) {
            all3.push(extractFieldTypes(lookup, events2.unwrap().type));
        }
        if (storage.isSome) {
            all3.push(storage.unwrap().items.map(function(param) {
                var type = param.type;
                if (type.isPlain) {
                    return [
                        lookup.getTypeDef(type.asPlain).type
                    ];
                }
                var _type_asMap = type.asMap, hashers = _type_asMap.hashers, key = _type_asMap.key, value1 = _type_asMap.value;
                return hashers.length === 1 ? [
                    lookup.getTypeDef(value1).type,
                    lookup.getTypeDef(key).type
                ] : [
                    lookup.getTypeDef(value1).type
                ].concat(_to_consumable_array(lookup.getSiType(key).def.asTuple.map(function(t2) {
                    return lookup.getTypeDef(t2).type;
                })));
            }));
        }
        return all3;
    }, []);
}
function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}
// ../../node_modules/@polkadot/types/metadata/util/toCallsOnly.js
function trimDocs(docs) {
    var strings = docs.map(function(d) {
        return d.toString().trim();
    });
    var firstEmpty = strings.findIndex(function(d) {
        return !d.length;
    });
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, param) {
    var extrinsic = param.extrinsic, lookup = param.lookup, pallets = param.pallets;
    return registry.createTypeUnsafe("MetadataLatest", [
        {
            extrinsic: extrinsic,
            lookup: {
                types: lookup.types.map(function(param) {
                    var id2 = param.id, type = param.type;
                    return registry.createTypeUnsafe("PortableType", [
                        {
                            id: id2,
                            type: objectSpread({}, type, {
                                docs: trimDocs(type.docs)
                            })
                        }
                    ]);
                })
            },
            pallets: pallets.map(function(param) {
                var calls = param.calls, index = param.index, name = param.name;
                return {
                    calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [
                        calls.unwrapOr(null)
                    ]),
                    index: index,
                    name: name
                };
            })
        }
    ]).toJSON();
}
// ../../node_modules/@polkadot/types/primitive/StorageKey.js
var HASHER_MAP = {
    // opaque
    Blake2_128: [
        16,
        false
    ],
    // eslint-disable-line camelcase
    Blake2_128Concat: [
        16,
        true
    ],
    // eslint-disable-line camelcase
    Blake2_256: [
        32,
        false
    ],
    // eslint-disable-line camelcase
    Identity: [
        0,
        true
    ],
    Twox128: [
        16,
        false
    ],
    Twox256: [
        32,
        false
    ],
    Twox64Concat: [
        8,
        true
    ]
};
function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
    var outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional ? "Option<".concat(outputType, ">") : outputType;
}
function decodeStorageKey(value1) {
    if (isU8a(value1) || !value1 || isString(value1)) {
        return {
            key: value1
        };
    } else if (_instanceof(value1, StorageKey)) {
        return {
            key: value1,
            method: value1.method,
            section: value1.section
        };
    } else if (isFunction(value1)) {
        return {
            key: value1(),
            method: value1.method,
            section: value1.section
        };
    } else if (Array.isArray(value1)) {
        var _value = _sliced_to_array(value1, 2), fn = _value[0], tmp = _value[1], args = tmp === void 0 ? [] : tmp;
        if (!isFunction(fn)) {
            throw new Error("Expected function input for key construction");
        }
        if (fn.meta && fn.meta.type.isMap) {
            var map80 = fn.meta.type.asMap;
            if (!Array.isArray(args) || args.length !== map80.hashers.length) {
                throw new Error("Expected an array of ".concat(map80.hashers.length, " values as params to a Map query"));
            }
        }
        return {
            // This is unknown[] above (also where assigned), the linter thinks it is any[] here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            key: fn.apply(void 0, _to_consumable_array(args)),
            method: fn.method,
            section: fn.section
        };
    }
    throw new Error("Unable to convert input ".concat(value1, " to StorageKey"));
}
function decodeHashers(registry, value1, hashers) {
    var offset = 32;
    var result = new Array(hashers.length);
    for(var i = 0; i < hashers.length; i++){
        var _hashers_i = _sliced_to_array(hashers[i], 2), hasher = _hashers_i[0], type = _hashers_i[1];
        var _HASHER_MAP_hasher_type = _sliced_to_array(HASHER_MAP[hasher.type], 2), hashLen = _HASHER_MAP_hasher_type[0], canDecode = _HASHER_MAP_hasher_type[1];
        var decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [
            value1.subarray(offset + hashLen)
        ]) : registry.createTypeUnsafe("Raw", [
            value1.subarray(offset, offset + hashLen)
        ]);
        offset += hashLen + (canDecode ? decoded.encodedLength : 0);
        result[i] = decoded;
    }
    return result;
}
function decodeArgsFromMeta(registry, value1, meta) {
    if (!meta || !meta.type.isMap) {
        return [];
    }
    var _meta_type_asMap = meta.type.asMap, hashers = _meta_type_asMap.hashers, key = _meta_type_asMap.key;
    var keys2 = hashers.length === 1 ? [
        key
    ] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value1, hashers.map(function(h, i) {
        return [
            h,
            keys2[i]
        ];
    }));
}
function getMeta(value1) {
    if (_instanceof(value1, StorageKey)) {
        return value1.meta;
    } else if (isFunction(value1)) {
        return value1.meta;
    } else if (Array.isArray(value1)) {
        var _value = _sliced_to_array(value1, 1), fn = _value[0];
        return fn.meta;
    }
    return void 0;
}
function getType(registry, value1) {
    if (_instanceof(value1, StorageKey)) {
        return value1.outputType;
    } else if (isFunction(value1)) {
        return unwrapStorageType(registry, value1.meta.type);
    } else if (Array.isArray(value1)) {
        var _value = _sliced_to_array(value1, 1), fn = _value[0];
        if (fn.meta) {
            return unwrapStorageType(registry, fn.meta.type);
        }
    }
    return "Raw";
}
var _args, _meta2, _outputType, _method2, _section2;
var StorageKey = /*#__PURE__*/ function(Bytes) {
    _inherits(StorageKey, Bytes);
    var _super = _create_super(StorageKey);
    function StorageKey(registry, value1) {
        var override = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        _class_call_check(this, StorageKey);
        var _this;
        var _decodeStorageKey = decodeStorageKey(value1), key = _decodeStorageKey.key, method = _decodeStorageKey.method, section2 = _decodeStorageKey.section;
        _this = _super.call(this, registry, key);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore This is assigned via this.decodeArgsFromMeta()
        __privateAdd(_assert_this_initialized(_this), _args, void 0);
        __privateAdd(_assert_this_initialized(_this), _meta2, void 0);
        __privateAdd(_assert_this_initialized(_this), _outputType, void 0);
        __privateAdd(_assert_this_initialized(_this), _method2, void 0);
        __privateAdd(_assert_this_initialized(_this), _section2, void 0);
        __privateSet(_assert_this_initialized(_this), _outputType, getType(registry, value1));
        _this.setMeta(getMeta(value1), override.section || section2, override.method || method);
        return _this;
    }
    _create_class(StorageKey, [
        {
            key: "args",
            get: /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */ function get() {
                return __privateGet(this, _args);
            }
        },
        {
            key: "meta",
            get: /**
   * @description The metadata or `undefined` when not available
   */ function get() {
                return __privateGet(this, _meta2);
            }
        },
        {
            key: "method",
            get: /**
   * @description The key method or `undefined` when not specified
   */ function get() {
                return __privateGet(this, _method2);
            }
        },
        {
            key: "outputType",
            get: /**
   * @description The output type
   */ function get() {
                return __privateGet(this, _outputType);
            }
        },
        {
            key: "section",
            get: /**
   * @description The key section or `undefined` when not specified
   */ function get() {
                return __privateGet(this, _section2);
            }
        },
        {
            key: "is",
            value: function is(key) {
                return key.section === this.section && key.method === this.method;
            }
        },
        {
            /**
   * @description Sets the meta for this key
   */ key: "setMeta",
            value: function setMeta(meta, section2, method) {
                __privateSet(this, _meta2, meta);
                __privateSet(this, _method2, method || __privateGet(this, _method2));
                __privateSet(this, _section2, section2 || __privateGet(this, _section2));
                if (meta) {
                    __privateSet(this, _outputType, unwrapStorageType(this.registry, meta.type));
                }
                try {
                    __privateSet(this, _args, decodeArgsFromMeta(this.registry, this.toU8a(true), meta));
                } catch (error2) {}
                return this;
            }
        },
        {
            /**
   * @description Returns the Human representation for this type
   */ key: "toHuman",
            value: function toHuman() {
                return __privateGet(this, _args).length ? __privateGet(this, _args).map(function(a) {
                    return a.toHuman();
                }) : _get(_get_prototype_of(StorageKey.prototype), "toHuman", this).call(this);
            }
        },
        {
            /**
   * @description Returns the raw type for this
   */ key: "toRawType",
            value: function toRawType() {
                return "StorageKey";
            }
        }
    ]);
    return StorageKey;
}(Bytes);
_args = new WeakMap();
_meta2 = new WeakMap();
_outputType = new WeakMap();
_method2 = new WeakMap();
_section2 = new WeakMap();
// ../../node_modules/@polkadot/types/metadata/v9/toV10.js
function createStorageHasher(registry, hasher) {
    if (hasher.toNumber() >= 2) {
        return registry.createTypeUnsafe("StorageHasherV10", [
            hasher.toNumber() + 1
        ]);
    }
    return registry.createTypeUnsafe("StorageHasherV10", [
        hasher
    ]);
}
function createStorageType(registry, entryType) {
    if (entryType.isMap) {
        return [
            objectSpread({}, entryType.asMap, {
                hasher: createStorageHasher(registry, entryType.asMap.hasher)
            }),
            1
        ];
    }
    if (entryType.isDoubleMap) {
        return [
            objectSpread({}, entryType.asDoubleMap, {
                hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
                key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
            }),
            2
        ];
    }
    return [
        entryType.asPlain,
        0
    ];
}
function convertModule(registry, mod2) {
    var storage = mod2.storage.unwrapOr(null);
    return registry.createTypeUnsafe("ModuleMetadataV10", [
        objectSpread({}, mod2, {
            storage: storage ? objectSpread({}, storage, {
                items: storage.items.map(function(item) {
                    return objectSpread({}, item, {
                        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
                    });
                })
            }) : null
        })
    ]);
}
function toV10(registry, param) {
    var modules = param.modules;
    return registry.createTypeUnsafe("MetadataV10", [
        {
            modules: modules.map(function(mod2) {
                return convertModule(registry, mod2);
            })
        }
    ]);
}
// ../../node_modules/@polkadot/types/metadata/v10/toV11.js
function toV11(registry, param) {
    var modules = param.modules;
    return registry.createTypeUnsafe("MetadataV11", [
        {
            // This is new in V11, pass V0 here - something non-existing, telling the API to use
            // the fallback for this information (on-chain detection)
            extrinsic: {
                signedExtensions: [],
                version: 0
            },
            modules: modules
        }
    ]);
}
// ../../node_modules/@polkadot/types/metadata/v11/toV12.js
function toV12(registry, param) {
    var extrinsic = param.extrinsic, modules = param.modules;
    return registry.createTypeUnsafe("MetadataV12", [
        {
            extrinsic: extrinsic,
            modules: modules.map(function(mod2) {
                return registry.createTypeUnsafe("ModuleMetadataV12", [
                    objectSpread({}, mod2, {
                        index: 255
                    })
                ]);
            })
        }
    ]);
}
// ../../node_modules/@polkadot/types/metadata/v12/toV13.js
function toV13(registry, metadata) {
    return registry.createTypeUnsafe("MetadataV13", [
        metadata
    ]);
}
// ../../node_modules/@polkadot/types/interfaces/alias.js
var typesAlias = {
    assets: {
        Approval: "AssetApproval",
        ApprovalKey: "AssetApprovalKey",
        Balance: "TAssetBalance",
        DestroyWitness: "AssetDestroyWitness"
    },
    babe: {
        EquivocationProof: "BabeEquivocationProof"
    },
    balances: {
        Status: "BalanceStatus"
    },
    beefy: {
        AuthorityId: "BeefyId"
    },
    contracts: {
        StorageKey: "ContractStorageKey"
    },
    electionProviderMultiPhase: {
        Phase: "ElectionPhase"
    },
    ethereum: {
        Block: "EthBlock",
        Header: "EthHeader",
        Receipt: "EthReceipt",
        Transaction: "EthTransaction",
        TransactionStatus: "EthTransactionStatus"
    },
    evm: {
        Account: "EvmAccount",
        Log: "EvmLog",
        Vicinity: "EvmVicinity"
    },
    grandpa: {
        Equivocation: "GrandpaEquivocation",
        EquivocationProof: "GrandpaEquivocationProof"
    },
    identity: {
        Judgement: "IdentityJudgement"
    },
    inclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    paraShared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parachains: {
        Id: "ParaId"
    },
    parasDisputes: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasInclusion: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasScheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    parasShared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    proposeParachain: {
        Proposal: "ParachainProposal"
    },
    proxy: {
        Announcement: "ProxyAnnouncement"
    },
    scheduler: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    shared: {
        ValidatorIndex: "ParaValidatorIndex"
    },
    society: {
        Judgement: "SocietyJudgement",
        Vote: "SocietyVote"
    },
    staking: {
        Compact: "CompactAssignments"
    },
    treasury: {
        Proposal: "TreasuryProposal"
    },
    xcm: {
        AssetId: "XcmAssetId"
    },
    xcmPallet: {
        AssetId: "XcmAssetId"
    }
};
function getAliasTypes(param, section2) {
    var knownTypes2 = param.knownTypes;
    var _knownTypes$typesAlia;
    return objectSpread({}, typesAlias[section2], (_knownTypes$typesAlia = knownTypes2.typesAlias) == null ? void 0 : _knownTypes$typesAlia[section2]);
}
// ../../node_modules/@polkadot/types/metadata/v13/toV14.js
var BOXES = [
    [
        "<",
        ">"
    ],
    [
        "<",
        ","
    ],
    [
        ",",
        ">"
    ],
    [
        "(",
        ")"
    ],
    [
        "(",
        ","
    ],
    [
        ",",
        ","
    ],
    [
        ",",
        ")"
    ]
];
function compatType(specs, _type3) {
    var type = _type3.toString();
    var index = specs.findIndex(function(param) {
        var def = param.def;
        return def.HistoricMetaCompat === type;
    });
    if (index !== -1) {
        return index;
    }
    return specs.push({
        def: {
            HistoricMetaCompat: type
        }
    }) - 1;
}
function compatTypes(specs) {
    for(var _len = arguments.length, types2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        types2[_key - 1] = arguments[_key];
    }
    for(var i = 0; i < types2.length; i++){
        compatType(specs, types2[i]);
    }
}
function makeTupleType(specs, entries) {
    return specs.push({
        def: {
            Tuple: entries
        }
    }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
        def: {
            Variant: {
                variants: variants
            }
        },
        path: [
            "pallet_".concat(modName.toString()),
            "pallet",
            variantType
        ]
    }) - 1;
}
function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
        OriginCaller: {
            _enum: modules.map(function(mod2, index) {
                return [
                    mod2.name.toString(),
                    metaVersion >= 12 ? mod2.index.toNumber() : index
                ];
            }).sort(function(a, b) {
                return a[1] - b[1];
            }).reduce(function(result, param) {
                var _param = _sliced_to_array(param, 2), name = _param[0], index = _param[1];
                for(var i = Object.keys(result).length; i < index; i++){
                    result["Empty".concat(i)] = "Null";
                }
                result[name] = knownOrigins[name] || "Null";
                return result;
            }, {})
        }
    });
}
function setTypeOverride(sectionTypes, types2) {
    types2.forEach(function(type) {
        var override = Object.keys(sectionTypes).find(function(aliased) {
            return type.eq(aliased);
        });
        if (override) {
            type.setOverride(sectionTypes[override]);
        } else {
            var orig = type.toString();
            var alias2 = Object.entries(sectionTypes).reduce(function(result, param) {
                var _param = _sliced_to_array(param, 2), src = _param[0], dst = _param[1];
                return BOXES.reduce(function(result2, param) {
                    var _param = _sliced_to_array(param, 2), a = _param[0], z = _param[1];
                    return result2.replace("".concat(a).concat(src).concat(z), "".concat(a).concat(dst).concat(z));
                }, result);
            }, orig);
            if (orig !== alias2) {
                type.setOverride(alias2);
            }
        }
    });
}
function convertCalls(specs, registry, modName, calls, sectionTypes) {
    var variants = calls.map(function(param, index) {
        var args = param.args, docs = param.docs, name = param.name;
        setTypeOverride(sectionTypes, args.map(function(param) {
            var type = param.type;
            return type;
        }));
        return registry.createTypeUnsafe("SiVariant", [
            {
                docs: docs,
                fields: args.map(function(param) {
                    var name2 = param.name, type = param.type;
                    return registry.createTypeUnsafe("SiField", [
                        {
                            name: name2,
                            type: compatType(specs, type)
                        }
                    ]);
                }),
                index: index,
                name: name
            }
        ]);
    });
    return registry.createTypeUnsafe("PalletCallMetadataV14", [
        {
            type: makeVariantType(modName, "Call", specs, variants)
        }
    ]);
}
function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(function(param) {
        var docs = param.docs, name = param.name, type = param.type, value1 = param.value;
        setTypeOverride(sectionTypes, [
            type
        ]);
        return registry.createTypeUnsafe("PalletConstantMetadataV14", [
            {
                docs: docs,
                name: name,
                type: compatType(specs, type),
                value: value1
            }
        ]);
    });
}
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    var variants = errors.map(function(param, index) {
        var docs = param.docs, name = param.name;
        return registry.createTypeUnsafe("SiVariant", [
            {
                docs: docs,
                fields: [],
                index: index,
                name: name
            }
        ]);
    });
    return registry.createTypeUnsafe("PalletErrorMetadataV14", [
        {
            type: makeVariantType(modName, "Error", specs, variants)
        }
    ]);
}
function convertEvents(specs, registry, modName, events2, sectionTypes) {
    var variants = events2.map(function(param, index) {
        var args = param.args, docs = param.docs, name = param.name;
        setTypeOverride(sectionTypes, args);
        return registry.createTypeUnsafe("SiVariant", [
            {
                docs: docs,
                fields: args.map(function(t2) {
                    return registry.createTypeUnsafe("SiField", [
                        {
                            type: compatType(specs, t2)
                        }
                    ]);
                }),
                index: index,
                name: name
            }
        ]);
    });
    return registry.createTypeUnsafe("PalletEventMetadataV14", [
        {
            type: makeVariantType(modName, "Event", specs, variants)
        }
    ]);
}
function createMapEntry(specs, registry, sectionTypes, param) {
    var hashers = param.hashers, isLinked = param.isLinked, isOptional = param.isOptional, keys2 = param.keys, value1 = param.value;
    setTypeOverride(sectionTypes, [
        value1
    ].concat(_to_consumable_array(Array.isArray(keys2) ? keys2 : [
        keys2
    ])));
    return registry.createTypeUnsafe("StorageEntryTypeV14", [
        {
            Map: {
                hashers: hashers,
                key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map(function(t2) {
                    return compatType(specs, t2);
                })),
                value: isLinked ? compatType(specs, "(".concat(isOptional ? "Option<".concat(value1.toString(), ">") : value1.toString(), ", Linkage<").concat(keys2[0].toString(), ">)")) : compatType(specs, value1)
            }
        }
    ]);
}
function convertStorage(specs, registry, param, sectionTypes) {
    var items = param.items, prefix2 = param.prefix;
    return registry.createTypeUnsafe("PalletStorageMetadataV14", [
        {
            items: items.map(function(param) {
                var docs = param.docs, fallback = param.fallback, modifier = param.modifier, name = param.name, type = param.type;
                var entryType;
                if (type.isPlain) {
                    var plain = type.asPlain;
                    setTypeOverride(sectionTypes, [
                        plain
                    ]);
                    entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [
                        {
                            Plain: compatType(specs, plain)
                        }
                    ]);
                } else if (type.isMap) {
                    var map80 = type.asMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [
                            map80.hasher
                        ],
                        isLinked: map80.linked.isTrue,
                        isOptional: modifier.isOptional,
                        keys: [
                            map80.key
                        ],
                        value: map80.value
                    });
                } else if (type.isDoubleMap) {
                    var dm = type.asDoubleMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: [
                            dm.hasher,
                            dm.key2Hasher
                        ],
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: [
                            dm.key1,
                            dm.key2
                        ],
                        value: dm.value
                    });
                } else {
                    var nm = type.asNMap;
                    entryType = createMapEntry(specs, registry, sectionTypes, {
                        hashers: nm.hashers,
                        isLinked: false,
                        isOptional: modifier.isOptional,
                        keys: nm.keyVec,
                        value: nm.value
                    });
                }
                return registry.createTypeUnsafe("StorageEntryMetadataV14", [
                    {
                        docs: docs,
                        fallback: fallback,
                        modifier: modifier,
                        name: name,
                        type: entryType
                    }
                ]);
            }),
            prefix: prefix2
        }
    ]);
}
function convertExtrinsic(registry, param) {
    var signedExtensions = param.signedExtensions, version = param.version;
    return registry.createTypeUnsafe("ExtrinsicMetadataV14", [
        {
            signedExtensions: signedExtensions.map(function(identifier) {
                return {
                    identifier: identifier,
                    type: 0
                };
            }),
            type: 0,
            // Map to extrinsic like in v14?
            version: version
        }
    ]);
}
function createPallet(specs, registry, mod2, param) {
    var calls = param.calls, constants = param.constants, errors = param.errors, events2 = param.events, storage = param.storage;
    var sectionTypes = getAliasTypes(registry, stringCamelCase(mod2.name));
    return registry.createTypeUnsafe("PalletMetadataV14", [
        {
            calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
            constants: convertConstants(specs, registry, constants, sectionTypes),
            errors: errors && convertErrors(specs, registry, mod2.name, errors, sectionTypes),
            events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
            index: mod2.index,
            name: mod2.name,
            storage: storage && convertStorage(specs, registry, storage, sectionTypes)
        }
    ]);
}
function toV14(registry, v132, metaVersion) {
    var specs = [];
    compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
    registerOriginCaller(registry, v132.modules, metaVersion);
    var extrinsic = convertExtrinsic(registry, v132.extrinsic);
    var pallets = v132.modules.map(function(mod2) {
        return createPallet(specs, registry, mod2, {
            calls: mod2.calls.unwrapOr(null),
            constants: mod2.constants,
            errors: mod2.errors.length ? mod2.errors : null,
            events: mod2.events.unwrapOr(null),
            storage: mod2.storage.unwrapOr(null)
        });
    });
    return registry.createTypeUnsafe("MetadataV14", [
        {
            extrinsic: extrinsic,
            lookup: {
                types: specs.map(function(type, id2) {
                    return registry.createTypeUnsafe("PortableType", [
                        {
                            id: id2,
                            type: type
                        }
                    ]);
                })
            },
            pallets: pallets
        }
    ]);
}
// ../../node_modules/@polkadot/types/metadata/v14/toLatest.js
function toLatest(registry, v142, _metaVersion) {
    return v142;
}
// ../../node_modules/@polkadot/types/metadata/MagicNumber.js
var MAGIC_NUMBER = 1635018093;
var MagicNumber = /*#__PURE__*/ function(u323) {
    _inherits(MagicNumber, u323);
    var _super = _create_super(MagicNumber);
    function MagicNumber(registry, value1) {
        _class_call_check(this, MagicNumber);
        var _this;
        _this = _super.call(this, registry, value1);
        if (!_this.isEmpty && !_this.eq(MAGIC_NUMBER)) {
            throw new Error("MagicNumber mismatch: expected ".concat(registry.createTypeUnsafe("u32", [
                MAGIC_NUMBER
            ]).toHex(), ", found ").concat(_this.toHex()));
        }
        return _this;
    }
    return MagicNumber;
}(u323);
// ../../node_modules/@polkadot/types/metadata/MetadataVersioned.js
var KNOWN_VERSIONS = [
    14,
    13,
    12,
    11,
    10,
    9
];
var LATEST_VERSION = KNOWN_VERSIONS[0];
var _converted, _assertVersion, _getVersion, _metadata;
var _MetadataVersioned = /*#__PURE__*/ function(Struct) {
    _inherits(_MetadataVersioned1, Struct);
    var _super = _create_super(_MetadataVersioned1);
    function _MetadataVersioned1(registry, value1) {
        _class_call_check(this, _MetadataVersioned1);
        var _this;
        _this = _super.call(this, registry, {
            magicNumber: MagicNumber,
            metadata: "MetadataAll"
        }, value1);
        __privateAdd(_assert_this_initialized(_this), _converted, /* @__PURE__ */ new Map());
        __privateAdd(_assert_this_initialized(_this), _assertVersion, function(version) {
            if (_this.version > version) {
                throw new Error("Cannot convert metadata from version ".concat(_this.version, " to ").concat(version));
            }
            return _this.version === version;
        });
        __privateAdd(_assert_this_initialized(_this), _getVersion, function(version, fromPrev) {
            var asCurr = "asV".concat(version);
            var asPrev = version === "latest" ? "asV".concat(LATEST_VERSION) : "asV".concat(version - 1);
            if (version !== "latest" && __privateGet(_this, _assertVersion).call(_assert_this_initialized(_this), version)) {
                return __privateGet(_this, _metadata).call(_this)[asCurr];
            }
            if (!__privateGet(_this, _converted).has(version)) {
                __privateGet(_this, _converted).set(version, fromPrev(_this.registry, _this[asPrev], _this.version));
            }
            return __privateGet(_this, _converted).get(version);
        });
        /**
     * @description the metadata wrapped
     */ __privateAdd(_assert_this_initialized(_this), _metadata, function() {
            return _this.getT("metadata");
        });
        return _this;
    }
    _create_class(_MetadataVersioned1, [
        {
            key: "asCallsOnly",
            get: /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */ function get() {
                return new _MetadataVersioned(this.registry, {
                    magicNumber: this.magicNumber,
                    metadata: this.registry.createTypeUnsafe("MetadataAll", [
                        toCallsOnly(this.registry, this.asLatest),
                        LATEST_VERSION
                    ])
                });
            }
        },
        {
            key: "asV9",
            get: /**
   * @description Returns the wrapped metadata as a V9 object
   */ function get() {
                __privateGet(this, _assertVersion).call(this, 9);
                return __privateGet(this, _metadata).call(this).asV9;
            }
        },
        {
            key: "asV10",
            get: /**
   * @description Returns the wrapped values as a V10 object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, 10, toV10);
            }
        },
        {
            key: "asV11",
            get: /**
   * @description Returns the wrapped values as a V11 object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, 11, toV11);
            }
        },
        {
            key: "asV12",
            get: /**
   * @description Returns the wrapped values as a V12 object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, 12, toV12);
            }
        },
        {
            key: "asV13",
            get: /**
   * @description Returns the wrapped values as a V13 object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, 13, toV13);
            }
        },
        {
            key: "asV14",
            get: /**
   * @description Returns the wrapped values as a V14 object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, 14, toV14);
            }
        },
        {
            key: "asLatest",
            get: /**
   * @description Returns the wrapped values as a latest version object
   */ function get() {
                return __privateGet(this, _getVersion).call(this, "latest", toLatest);
            }
        },
        {
            key: "magicNumber",
            get: /**
   * @description The magicNumber for the Metadata (known constant)
   */ function get() {
                return this.getT("magicNumber");
            }
        },
        {
            key: "version",
            get: /**
   * @description the metadata version this structure represents
   */ function get() {
                return __privateGet(this, _metadata).call(this).index;
            }
        },
        {
            key: "getUniqTypes",
            value: function getUniqTypes1(throwError) {
                return getUniqTypes(this.registry, this.asLatest, throwError);
            }
        },
        {
            /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */ key: "toJSON",
            value: function toJSON() {
                this.asLatest;
                return _get(_get_prototype_of(_MetadataVersioned1.prototype), "toJSON", this).call(this);
            }
        }
    ]);
    return _MetadataVersioned1;
}(Struct);
var MetadataVersioned = _MetadataVersioned;
_converted = new WeakMap();
_assertVersion = new WeakMap();
_getVersion = new WeakMap();
_metadata = new WeakMap();
// ../../node_modules/@polkadot/types/metadata/Metadata.js
var EMPTY_METADATA = new Uint8Array([
    109,
    101,
    116,
    97,
    9
]);
var VERSION_IDX = EMPTY_METADATA.length - 1;
function decodeU8a7(registry, u8a) {
    if (u8a.length === 0) {
        return EMPTY_METADATA;
    } else if (u8a[VERSION_IDX] === 9) {
        try {
            return new MetadataVersioned(registry, u8a);
        } catch (error2) {
            u8a[VERSION_IDX] = 10;
            return u8a;
        }
    }
    return u8a;
}
var Metadata = /*#__PURE__*/ function(MetadataVersioned) {
    _inherits(Metadata, MetadataVersioned);
    var _super = _create_super(Metadata);
    function Metadata(registry, value1) {
        _class_call_check(this, Metadata);
        return _super.call(this, registry, isU8a(value1) || isString(value1) ? decodeU8a7(registry, u8aToU8a(value1)) : value1);
    }
    return Metadata;
}(MetadataVersioned);
// ../../node_modules/@polkadot/types/metadata/decorate/util.js
function convert(fn) {
    return function(param) {
        var name = param.name;
        return fn(name);
    };
}
var objectNameToCamel = convert(stringCamelCase);
var objectNameToString = convert(function(n) {
    return n.toString();
});
// ../../node_modules/@polkadot/types/metadata/decorate/constants/index.js
function decorateConstants(registry, param, _version) {
    var _loop = function(i) {
        var _pallets_i = pallets[i], constants = _pallets_i.constants, name = _pallets_i.name;
        if (!constants.isEmpty) {
            lazyMethod(result, stringCamelCase(name), function() {
                return lazyMethods({}, constants, function(constant) {
                    var codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [
                        hexToU8a(constant.value.toHex())
                    ]);
                    codec.meta = constant;
                    return codec;
                }, objectNameToCamel);
            });
        }
    };
    var pallets = param.pallets;
    var result = {};
    for(var i = 0; i < pallets.length; i++)_loop(i);
    return result;
}
// ../../node_modules/@polkadot/types/metadata/decorate/errors/index.js
function variantToMeta(lookup, variant) {
    return objectSpread({
        args: variant.fields.map(function(param) {
            var type = param.type;
            return lookup.getTypeDef(type).type;
        })
    }, variant);
}
function decorateErrors(registry, param, version) {
    var _loop = function(i) {
        var _pallets_i = pallets[i], errors = _pallets_i.errors, index = _pallets_i.index, name = _pallets_i.name;
        if (errors.isSome) {
            var sectionIndex = version >= 12 ? index.toNumber() : i;
            lazyMethod(result, stringCamelCase(name), function() {
                return lazyVariants(lookup, errors.unwrap(), objectNameToString, function(variant) {
                    return {
                        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                        is: function(errorMod) {
                            return isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index));
                        },
                        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [
                            variantToMeta(lookup, variant)
                        ])
                    };
                });
            });
        }
    };
    var lookup = param.lookup, pallets = param.pallets;
    var result = {};
    for(var i = 0; i < pallets.length; i++)_loop(i);
    return result;
}
// ../../node_modules/@polkadot/types/metadata/decorate/events/index.js
function filterEventsSome(param) {
    var events2 = param.events;
    return events2.isSome;
}
function decorateEvents(registry, param, version) {
    var _loop = function(i) {
        var _filtered_i = filtered[i], events2 = _filtered_i.events, index = _filtered_i.index, name = _filtered_i.name;
        var sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, stringCamelCase(name), function() {
            return lazyVariants(lookup, events2.unwrap(), objectNameToString, function(variant) {
                return {
                    // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                    is: function(eventRecord) {
                        return isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]);
                    },
                    meta: registry.createTypeUnsafe("EventMetadataLatest", [
                        variantToMeta(lookup, variant)
                    ])
                };
            });
        });
    };
    var lookup = param.lookup, pallets = param.pallets;
    var result = {};
    var filtered = pallets.filter(filterEventsSome);
    for(var i = 0; i < filtered.length; i++)_loop(i);
    return result;
}
// ../../node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section2, callIndex, callMetadata) {
    var expectedArgs = callMetadata.fields;
    var funcName = stringCamelCase(callMetadata.name);
    var extrinsicFn = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (expectedArgs.length !== args.length) {
            throw new Error("Extrinsic ".concat(section2, ".").concat(funcName, " expects ").concat(expectedArgs.length, " arguments, got ").concat(args.length, "."));
        }
        return registry.createTypeUnsafe("Call", [
            {
                args: args,
                callIndex: callIndex
            },
            callMetadata
        ]);
    };
    extrinsicFn.is = function(tx) {
        return isTx(tx, callIndex);
    };
    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section2;
    extrinsicFn.toJSON = function() {
        return callMetadata.toJSON();
    };
    return extrinsicFn;
}
// ../../node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
function filterCallsSome(param) {
    var calls = param.calls;
    return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    var fields = variant.fields, index = variant.index;
    var args = new Array(fields.length);
    for(var a = 0; a < fields.length; a++){
        var _fields_a = fields[a], name = _fields_a.name, type = _fields_a.type, typeName = _fields_a.typeName;
        args[a] = objectSpread({
            name: stringCamelCase(name.unwrapOr("param".concat(a))),
            type: getSiName(lookup, type)
        }, typeName.isSome ? {
            typeName: typeName.unwrap()
        } : null);
    }
    return createUnchecked(registry, sectionName, new Uint8Array([
        sectionIndex,
        index.toNumber()
    ]), registry.createTypeUnsafe("FunctionMetadataLatest", [
        objectSpread({
            args: args
        }, variant)
    ]));
}
function decorateExtrinsics(registry, param, version) {
    var _loop = function(i) {
        var _filtered_i = filtered[i], calls = _filtered_i.calls, index = _filtered_i.index, name = _filtered_i.name;
        var sectionName = stringCamelCase(name);
        var sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, sectionName, function() {
            return lazyVariants(lookup, calls.unwrap(), objectNameToCamel, function(variant) {
                return createCallFunction(registry, lookup, variant, sectionName, sectionIndex);
            });
        });
    };
    var lookup = param.lookup, pallets = param.pallets;
    var result = {};
    var filtered = pallets.filter(filterCallsSome);
    for(var i = 0; i < filtered.length; i++)_loop(i);
    return result;
}
// ../../node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
var DEFAULT_FN = function(data) {
    return xxhashAsU8a(data, 128);
};
var HASHERS = {
    Blake2_128: function(data) {
        return(// eslint-disable-line camelcase
        blake2AsU8a(data, 128));
    },
    Blake2_128Concat: function(data) {
        return(// eslint-disable-line camelcase
        u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)));
    },
    Blake2_256: function(data) {
        return(// eslint-disable-line camelcase
        blake2AsU8a(data, 256));
    },
    Identity: function(data) {
        return u8aToU8a(data);
    },
    Twox128: function(data) {
        return xxhashAsU8a(data, 128);
    },
    Twox256: function(data) {
        return xxhashAsU8a(data, 256);
    },
    Twox64Concat: function(data) {
        return u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data));
    }
};
function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
}
// ../../node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
var NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
};
function filterDefined(a) {
    return !isUndefined(a);
}
function assertArgs(param, param1) {
    var method = param.method, section2 = param.section, args = param1.args, keys2 = param1.keys;
    if (!Array.isArray(args)) {
        throw new Error("Call to ".concat(stringCamelCase(section2 || "unknown"), ".").concat(stringCamelCase(method || "unknown"), " needs ").concat(keys2.length, " arguments"));
    } else if (args.filter(filterDefined).length !== keys2.length) {
        throw new Error("Call to ".concat(stringCamelCase(section2 || "unknown"), ".").concat(stringCamelCase(method || "unknown"), " needs ").concat(keys2.length, " arguments, found [").concat(args.join(", "), "]"));
    }
}
function createKeyRawParts(registry, itemFn, param) {
    var args = param.args, hashers = param.hashers, keys2 = param.keys;
    var extra = new Array(keys2.length);
    for(var i = 0; i < keys2.length; i++){
        extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys2[i]), [
            args[i]
        ]).toU8a());
    }
    return [
        [
            xxhashAsU8a(itemFn.prefix, 128),
            xxhashAsU8a(itemFn.method, 128)
        ],
        extra
    ];
}
function createKeyInspect(registry, itemFn, args) {
    var _instance, _prefix2;
    assertArgs(itemFn, args);
    var meta = itemFn.meta;
    var _createKeyRawParts = _sliced_to_array(createKeyRawParts(registry, itemFn, args), 2), prefix2 = _createKeyRawParts[0], extra = _createKeyRawParts[1];
    var types2 = [];
    if (meta.type.isMap) {
        var _meta_type_asMap = meta.type.asMap, hashers = _meta_type_asMap.hashers, key = _meta_type_asMap.key;
        types2 = hashers.length === 1 ? [
            "".concat(hashers[0].type, "(").concat(getSiName(registry.lookup, key), ")")
        ] : registry.lookup.getSiType(key).def.asTuple.map(function(k, i) {
            return "".concat(hashers[i].type, "(").concat(getSiName(registry.lookup, k), ")");
        });
    }
    var names2 = (_instance = [
        "module",
        "method"
    ]).concat.apply(_instance, _to_consumable_array(args.args.map(function(_23, i) {
        return types2[i];
    })));
    return {
        inner: (_prefix2 = prefix2).concat.apply(_prefix2, _to_consumable_array(extra)).map(function(v, i) {
            return {
                name: names2[i],
                outer: [
                    v
                ]
            };
        })
    };
}
function createKeyRaw(registry, itemFn, args) {
    var _createKeyRawParts = _sliced_to_array(createKeyRawParts(registry, itemFn, args), 2), prefix2 = _createKeyRawParts[0], extra = _createKeyRawParts[1];
    return u8aConcat.apply(void 0, _to_consumable_array(prefix2).concat(_to_consumable_array(extra)));
}
function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args);
    return compactAddLength(createKeyRaw(registry, itemFn, args));
}
function createStorageInspect(registry, itemFn, options) {
    var type = itemFn.meta.type;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (type.isPlain) {
            return options.skipHashing ? {
                inner: [],
                name: "wellKnown",
                outer: [
                    u8aToU8a(options.key)
                ]
            } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
        }
        var _type_asMap = type.asMap, hashers = _type_asMap.hashers, key = _type_asMap.key;
        return hashers.length === 1 ? createKeyInspect(registry, itemFn, {
            args: args,
            hashers: hashers,
            keys: [
                key
            ]
        }) : createKeyInspect(registry, itemFn, {
            args: args,
            hashers: hashers,
            keys: registry.lookup.getSiType(key).def.asTuple
        });
    };
}
function createStorageFn(registry, itemFn, options) {
    var type = itemFn.meta.type;
    var cacheKey = null;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (type.isPlain) {
            if (!cacheKey) {
                cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
            }
            return cacheKey;
        }
        var _type_asMap = type.asMap, hashers = _type_asMap.hashers, key = _type_asMap.key;
        return hashers.length === 1 ? createKey(registry, itemFn, {
            args: args,
            hashers: hashers,
            keys: [
                key
            ]
        }) : createKey(registry, itemFn, {
            args: args,
            hashers: hashers,
            keys: registry.lookup.getSiType(key).def.asTuple
        });
    };
}
function createWithMeta(registry, itemFn, options) {
    var meta = itemFn.meta, method = itemFn.method, prefix2 = itemFn.prefix, section2 = itemFn.section;
    var storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = stringCamelCase(method);
    storageFn.prefix = prefix2;
    storageFn.section = section2;
    storageFn.toJSON = function() {
        return objectSpread({
            storage: {
                method: method,
                prefix: prefix2,
                section: section2
            }
        }, meta.toJSON());
    };
    return storageFn;
}
function extendHeadMeta(registry, param, param1, iterFn) {
    var _param_meta = param.meta, docs = _param_meta.docs, name = _param_meta.name, type = _param_meta.type, section2 = param.section, method = param1.method;
    var meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [
        {
            docs: docs,
            fallback: registry.createTypeUnsafe("Bytes", []),
            modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [
                1
            ]),
            // required
            name: name,
            type: registry.createTypeUnsafe("StorageEntryTypeLatest", [
                type.asMap.key,
                0
            ])
        }
    ]);
    iterFn.meta = meta;
    var fn = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return registry.createTypeUnsafe("StorageKey", [
            iterFn.apply(void 0, _to_consumable_array(args)),
            {
                method: method,
                section: section2
            }
        ]);
    };
    fn.meta = meta;
    return fn;
}
function extendPrefixedMap(registry, itemFn, storageFn) {
    var type = itemFn.meta.type, method = itemFn.method, section2 = itemFn.section;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
            throw new Error("Iteration of ".concat(stringCamelCase(section2 || "unknown"), ".").concat(stringCamelCase(method || "unknown"), " needs arguments to be at least one less than the full arguments, found [").concat(args.join(", "), "]"));
        }
        if (args.length) {
            if (type.isMap) {
                var _type_asMap = type.asMap, hashers = _type_asMap.hashers, key = _type_asMap.key;
                var keysVec = hashers.length === 1 ? [
                    key
                ] : registry.lookup.getSiType(key).def.asTuple;
                return new Raw(registry, createKeyRaw(registry, itemFn, {
                    args: args,
                    hashers: hashers.slice(0, args.length),
                    keys: keysVec.slice(0, args.length)
                }));
            }
        }
        return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
}
function createFunction(registry, itemFn, options) {
    var _storageFn;
    var type = itemFn.meta.type;
    var storageFn = createWithMeta(registry, itemFn, options);
    if (type.isMap) {
        extendPrefixedMap(registry, itemFn, storageFn);
    }
    storageFn.keyPrefix = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return storageFn.iterKey && (_storageFn = storageFn).iterKey.apply(_storageFn, _to_consumable_array(args)) || compactStripLength(storageFn())[1];
    };
    return storageFn;
}
// ../../node_modules/@polkadot/types/metadata/decorate/storage/util.js
function findSiPrimitive(registry, _prim) {
    var prim = _prim.toLowerCase();
    return registry.lookup.types.find(function(t2) {
        return t2.type.def.isPrimitive && t2.type.def.asPrimitive.toString().toLowerCase() === prim || t2.type.def.isHistoricMetaCompat && t2.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim;
    });
}
function findSiType(registry, orig) {
    var portable = findSiPrimitive(registry, orig);
    if (!portable && orig === "Bytes") {
        var u84 = findSiPrimitive(registry, "u8");
        if (u84) {
            portable = registry.lookup.types.find(function(t2) {
                return t2.type.def.isSequence && t2.type.def.asSequence.type.eq(u84.id) || t2.type.def.isHistoricMetaCompat && t2.type.def.asHistoricMetaCompat.eq(orig);
            });
        }
    }
    if (!portable) {
        console.warn("Unable to map ".concat(orig, " to a lookup index"));
    }
    return portable;
}
function createRuntimeFunction(param, key, param1) {
    var method = param.method, prefix2 = param.prefix, section2 = param.section, docs = param1.docs, type = param1.type;
    return function(registry) {
        var _findSiType;
        return createFunction(registry, {
            meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [
                {
                    docs: registry.createTypeUnsafe("Vec<Text>", [
                        [
                            docs
                        ]
                    ]),
                    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [
                        "Required"
                    ]),
                    name: registry.createTypeUnsafe("Text", [
                        method
                    ]),
                    toJSON: function() {
                        return key;
                    },
                    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [
                        {
                            Plain: ((_findSiType = findSiType(registry, type)) == null ? void 0 : _findSiType.id) || 0
                        }
                    ])
                }
            ]),
            method: method,
            prefix: prefix2,
            section: section2
        }, {
            key: key,
            skipHashing: true
        });
    };
}
// ../../node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
var prefix = "Substrate";
var section = "substrate";
function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({
        method: method,
        prefix: prefix,
        section: section
    }, key, meta);
}
var substrate2 = {
    changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
        docs: "Changes trie configuration is stored under this key.",
        type: "u32"
    }),
    childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
        docs: "Prefix of child storage keys.",
        type: "u32"
    }),
    code: createSubstrateFn("code", ":code", {
        docs: "Wasm code of the runtime.",
        type: "Bytes"
    }),
    extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
        docs: "Current extrinsic index (u32) is stored under this key.",
        type: "u32"
    }),
    heapPages: createSubstrateFn("heapPages", ":heappages", {
        docs: "Number of wasm linear memory pages required for execution of the runtime.",
        type: "u64"
    })
};
// ../../node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
function getStorage(registry) {
    var storage = {};
    var entries = Object.entries(substrate2);
    for(var e = 0; e < entries.length; e++){
        storage[entries[e][0]] = entries[e][1](registry);
    }
    return {
        substrate: storage
    };
}
// ../../node_modules/@polkadot/types/metadata/decorate/storage/index.js
var VERSION_NAME = "palletVersion";
var VERSION_KEY = ":__STORAGE_VERSION__:";
var VERSION_DOCS = {
    docs: "Returns the current pallet version from storage",
    type: "u16"
};
function decorateStorage(registry, param, _metaVersion) {
    var _loop = function(i) {
        var _pallets_i = pallets[i], name = _pallets_i.name, storage = _pallets_i.storage;
        if (storage.isSome) {
            var section2 = stringCamelCase(name);
            var _storage_unwrap = storage.unwrap(), items = _storage_unwrap.items, _prefix = _storage_unwrap.prefix;
            var prefix2 = _prefix.toString();
            lazyMethod(result, section2, function() {
                return lazyMethods({
                    palletVersion: createRuntimeFunction({
                        method: VERSION_NAME,
                        prefix: prefix2,
                        section: section2
                    }, createKeyRaw(registry, {
                        method: VERSION_KEY,
                        prefix: name.toString()
                    }, NO_RAW_ARGS), VERSION_DOCS)(registry)
                }, items, function(meta) {
                    return createFunction(registry, {
                        meta: meta,
                        method: meta.name.toString(),
                        prefix: prefix2,
                        section: section2
                    }, {});
                }, objectNameToCamel);
            });
        }
    };
    var pallets = param.pallets;
    var result = getStorage(registry);
    for(var i = 0; i < pallets.length; i++)_loop(i);
    return result;
}
// ../../node_modules/@polkadot/types/metadata/decorate/index.js
function expandMetadata(registry, metadata) {
    if (!_instanceof(metadata, Metadata)) {
        throw new Error("You need to pass a valid Metadata instance to Decorated");
    }
    var latest2 = metadata.asLatest;
    var version = metadata.version;
    return {
        consts: decorateConstants(registry, latest2, version),
        errors: decorateErrors(registry, latest2, version),
        events: decorateEvents(registry, latest2, version),
        query: decorateStorage(registry, latest2, version),
        registry: registry,
        tx: decorateExtrinsics(registry, latest2, version)
    };
}
// ../../node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
var l6 = logger("PortableRegistry");
var TYPE_UNWRAP = {
    toNumber: function() {
        return -1;
    }
};
var PRIMITIVE_ALIAS = {
    Char: "u32",
    // Rust char is 4-bytes
    Str: "Text"
};
var PATHS_ALIAS = splitNamespace([
    // full matching on exact names...
    // these are well-known types with additional encoding
    "sp_core::crypto::AccountId32",
    "sp_runtime::generic::era::Era",
    "sp_runtime::multiaddress::MultiAddress",
    // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
    "account::AccountId20",
    "polkadot_runtime_common::claims::EthereumAddress",
    // weights 2 is a structure, however for 1.5. with a single field it
    // should be flatenned (can appear in Compact<Weight> extrinsics)
    "frame_support::weights::weight_v2::Weight",
    "sp_weights::weight_v2::Weight",
    // wildcard matching in place...
    // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
    "*_democracy::vote::Vote",
    "*_conviction_voting::vote::Vote",
    "*_identity::types::Data",
    // these are opaque Vec<u8> wrappers
    "sp_core::OpaqueMetadata",
    "sp_core::OpaquePeerId",
    "sp_core::offchain::OpaqueMultiaddr",
    // shorten some well-known types
    "primitive_types::*",
    "sp_arithmetic::per_things::*",
    // runtime
    "*_runtime::RuntimeCall",
    "*_runtime::RuntimeEvent",
    // ink!
    "ink_env::types::*",
    "ink_primitives::types::*"
]);
var PATHS_SET = splitNamespace([
    "pallet_identity::types::BitFlags"
]);
var BITVEC_NS_LSB = [
    "bitvec::order::Lsb0",
    "BitOrderLsb0"
];
var BITVEC_NS_MSB = [
    "bitvec::order::Msb0",
    "BitOrderMsb0"
];
var BITVEC_NS = _to_consumable_array(BITVEC_NS_LSB).concat(_to_consumable_array(BITVEC_NS_MSB));
var WRAPPERS = [
    "BoundedBTreeMap",
    "BoundedBTreeSet",
    "BoundedVec",
    "Box",
    "BTreeMap",
    "BTreeSet",
    "Cow",
    "Option",
    "Range",
    "RangeInclusive",
    "Result",
    "WeakBoundedVec",
    "WrapperKeepOpaque",
    "WrapperOpaque"
];
var RESERVED = [
    // JS reserved words
    "entries",
    "keys",
    "new",
    "size",
    // exposed by all Codec objects
    "hash",
    "registry"
];
var PATH_RM_INDEX_1 = [
    "generic",
    "misc",
    "pallet",
    "traits",
    "types"
];
function sanitizeDocs(docs) {
    var result = new Array(docs.length);
    for(var i = 0; i < docs.length; i++){
        result[i] = docs[i].toString();
    }
    return result;
}
function splitNamespace(values) {
    var result = new Array(values.length);
    for(var i = 0; i < values.length; i++){
        result[i] = values[i].split("::");
    }
    return result;
}
function matchParts(first2, second) {
    return first2.length === second.length && first2.every(function(a, index) {
        var b = second[index].toString();
        if (a === "*" || a === b) {
            return true;
        }
        if (a.includes("*") && a.includes("_") && b.includes("_")) {
            var suba = a.split("_");
            var subb = b.split("_");
            if (suba[0] === "*") {
                var indexOf = subb.indexOf(suba[1]);
                if (indexOf !== -1) {
                    suba = suba.slice(1);
                    subb = subb.slice(indexOf);
                }
            }
            if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
                return true;
            }
            return matchParts(suba, subb);
        }
        return false;
    });
}
function getAliasPath(param) {
    var def = param.def, path = param.path;
    if ([
        "frame_support::weights::weight_v2::Weight",
        "sp_weights::weight_v2::Weight"
    ].includes(path.join("::"))) {
        return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
    }
    return path.length && PATHS_ALIAS.some(function(a) {
        return matchParts(a, path);
    }) ? path[path.length - 1].toString() : null;
}
function extractNameFlat(portable, lookupIndex, params, path) {
    var isInternal = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var count = path.length;
    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
        return null;
    }
    var camels = new Array(count);
    var lowers = new Array(count);
    for(var i = 0; i < count; i++){
        var c = stringPascalCase(isInternal ? path[i].replace("pallet_", "") : path[i]);
        var l13 = c.toLowerCase();
        camels[i] = c;
        lowers[i] = l13;
    }
    var name = "";
    for(var i1 = 0; i1 < count; i1++){
        var l131 = lowers[i1];
        if (i1 !== 1 || !PATH_RM_INDEX_1.includes(l131)) {
            if (l131 !== lowers[i1 + 1]) {
                name += camels[i1];
            }
        }
    }
    if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
        var instanceType = portable[params[1].type.unwrap().toNumber()];
        if (instanceType.type.path.length === 2) {
            name = "".concat(name).concat(instanceType.type.path[1].toString());
        }
    }
    return {
        lookupIndex: lookupIndex,
        name: name,
        params: params
    };
}
function extractName(portable, lookupIndex, param) {
    var _param_type = param.type, params = _param_type.params, path = _param_type.path;
    return extractNameFlat(portable, lookupIndex, params, path);
}
function nextDupeMatches(name, startAt, names2) {
    var result = [
        names2[startAt]
    ];
    for(var i = startAt + 1; i < names2.length; i++){
        var v = names2[i];
        if (v.name === name) {
            result.push(v);
        }
    }
    return result;
}
function rewriteDupes(input, rewrite) {
    var count = input.length;
    for(var i = 0; i < count; i++){
        var a = input[i];
        for(var j = i + 1; j < count; j++){
            var b = input[j];
            if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
                return false;
            }
        }
    }
    for(var i1 = 0; i1 < count; i1++){
        var p = input[i1];
        rewrite[p.lookupIndex] = p.name;
    }
    return true;
}
function removeDupeNames(lookup, portable, names2) {
    var rewrite = {};
    return names2.map(function(original, startAt) {
        var lookupIndex = original.lookupIndex, name = original.name, params = original.params;
        if (!name) {
            return null;
        } else if (rewrite[lookupIndex]) {
            return original;
        }
        var allSame = nextDupeMatches(name, startAt, names2);
        if (allSame.length === 1) {
            return original;
        }
        var anyDiff = allSame.some(function(o) {
            return params.length !== o.params.length || params.some(function(p, index) {
                return !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber();
            });
        });
        if (!anyDiff) {
            return original;
        }
        var paramIdx = params.findIndex(function(param, index) {
            var type = param.type;
            return allSame.every(function(param, aIndex) {
                var params2 = param.params;
                return params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type));
            });
        });
        if (paramIdx === -1) {
            return original;
        }
        var adjusted = new Array(allSame.length);
        for(var i = 0; i < allSame.length; i++){
            var _allSame_i = allSame[i], lookupIndex2 = _allSame_i.lookupIndex, name2 = _allSame_i.name, params2 = _allSame_i.params;
            var _lookup_getSiType = lookup.getSiType(params2[paramIdx].type.unwrap()), def = _lookup_getSiType.def, path = _lookup_getSiType.path;
            if (!def.isPrimitive && !path.length) {
                return null;
            }
            adjusted[i] = {
                lookupIndex: lookupIndex2,
                name: def.isPrimitive ? "".concat(name2).concat(def.asPrimitive.toString()) : "".concat(name2).concat(path[path.length - 1].toString())
            };
        }
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        for(var i1 = 0; i1 < allSame.length; i1++){
            var _allSame_i1 = allSame[i1], lookupIndex21 = _allSame_i1.lookupIndex, name21 = _allSame_i1.name, params21 = _allSame_i1.params;
            var _lookup_getSiType1 = lookup.getSiType(params21[paramIdx].type.unwrap()), def1 = _lookup_getSiType1.def, path1 = _lookup_getSiType1.path;
            var flat = extractNameFlat(portable, lookupIndex21, params21, path1, true);
            if (def1.isPrimitive || !flat) {
                return null;
            }
            adjusted[i1] = {
                lookupIndex: lookupIndex21,
                name: "".concat(name21).concat(flat.name)
            };
        }
        if (rewriteDupes(adjusted, rewrite)) {
            return original;
        }
        return null;
    }).filter(function(n) {
        return !!n;
    }).map(function(param) {
        var lookupIndex = param.lookupIndex, name = param.name, params = param.params;
        return {
            lookupIndex: lookupIndex,
            name: rewrite[lookupIndex] || name,
            params: params
        };
    });
}
function registerTypes(lookup, lookups, names2, params) {
    lookup.registry.register(lookups);
    if (params.SpRuntimeUncheckedExtrinsic) {
        var _params_SpRuntimeUncheckedExtrinsic = _sliced_to_array(params.SpRuntimeUncheckedExtrinsic, 3), addrParam = _params_SpRuntimeUncheckedExtrinsic[0], sigParam = _params_SpRuntimeUncheckedExtrinsic[2];
        var siAddress = lookup.getSiType(addrParam.type.unwrap());
        var siSignature = lookup.getSiType(sigParam.type.unwrap());
        var nsSignature = siSignature.path.join("::");
        var nsAccountId = siAddress.path.join("::");
        var isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
        if (isMultiAddress) {
            var _siAddress_params = _sliced_to_array(siAddress.params, 1), idParam = _siAddress_params[0];
            nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
        }
        lookup.registry.register({
            AccountId: [
                "sp_core::crypto::AccountId32"
            ].includes(nsAccountId) ? "AccountId32" : [
                "account::AccountId20",
                "primitive_types::H160"
            ].includes(nsAccountId) ? "AccountId20" : "AccountId32",
            // other, default to AccountId32
            Address: isMultiAddress ? "MultiAddress" : "AccountId",
            ExtrinsicSignature: [
                "sp_runtime::MultiSignature"
            ].includes(nsSignature) ? "MultiSignature" : names2[sigParam.type.unwrap().toNumber()] || "MultiSignature"
        });
    }
}
function extractAliases(params, isContract) {
    var hasParams = Object.keys(params).some(function(k) {
        return !k.startsWith("Pallet");
    });
    var alias2 = {};
    if (params.SpRuntimeUncheckedExtrinsic) {
        var _params_SpRuntimeUncheckedExtrinsic = _sliced_to_array(params.SpRuntimeUncheckedExtrinsic, 2), type = _params_SpRuntimeUncheckedExtrinsic[1].type;
        alias2[type.unwrap().toNumber()] = "Call";
    } else if (hasParams && !isContract) {
        l6.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
    }
    if (params.FrameSystemEventRecord) {
        var _params_FrameSystemEventRecord = _sliced_to_array(params.FrameSystemEventRecord, 1), type1 = _params_FrameSystemEventRecord[0].type;
        alias2[type1.unwrap().toNumber()] = "Event";
    } else if (hasParams && !isContract) {
        l6.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
    }
    return alias2;
}
function extractTypeInfo(lookup, portable) {
    var nameInfo = [];
    var types2 = {};
    var porCount = portable.length;
    for(var i = 0; i < porCount; i++){
        var type = portable[i];
        var lookupIndex = type.id.toNumber();
        var extracted = extractName(portable, lookupIndex, portable[i]);
        if (extracted) {
            nameInfo.push(extracted);
        }
        types2[lookupIndex] = type;
    }
    var lookups = {};
    var names2 = {};
    var params = {};
    var dedup = removeDupeNames(lookup, portable, nameInfo);
    var dedupCount = dedup.length;
    for(var i1 = 0; i1 < dedupCount; i1++){
        var _dedup_i = dedup[i1], lookupIndex1 = _dedup_i.lookupIndex, name = _dedup_i.name, p = _dedup_i.params;
        names2[lookupIndex1] = name;
        lookups[name] = lookup.registry.createLookupType(lookupIndex1);
        params[name] = p;
    }
    return {
        lookups: lookups,
        names: names2,
        params: params,
        types: types2
    };
}
var _alias = /* @__PURE__ */ _classPrivateFieldKey("alias");
var _lookups = /* @__PURE__ */ _classPrivateFieldKey("lookups");
var _names2 = /* @__PURE__ */ _classPrivateFieldKey("names");
var _params = /* @__PURE__ */ _classPrivateFieldKey("params");
var _typeDefs = /* @__PURE__ */ _classPrivateFieldKey("typeDefs");
var _types = /* @__PURE__ */ _classPrivateFieldKey("types");
var _createSiDef = /* @__PURE__ */ _classPrivateFieldKey("createSiDef");
var _getLookupId = /* @__PURE__ */ _classPrivateFieldKey("getLookupId");
var _extract = /* @__PURE__ */ _classPrivateFieldKey("extract");
var _extractArray = /* @__PURE__ */ _classPrivateFieldKey("extractArray");
var _extractBitSequence = /* @__PURE__ */ _classPrivateFieldKey("extractBitSequence");
var _extractCompact = /* @__PURE__ */ _classPrivateFieldKey("extractCompact");
var _extractComposite = /* @__PURE__ */ _classPrivateFieldKey("extractComposite");
var _extractCompositeSet = /* @__PURE__ */ _classPrivateFieldKey("extractCompositeSet");
var _extractFields = /* @__PURE__ */ _classPrivateFieldKey("extractFields");
var _extractFieldsAlias = /* @__PURE__ */ _classPrivateFieldKey("extractFieldsAlias");
var _extractHistoric = /* @__PURE__ */ _classPrivateFieldKey("extractHistoric");
var _extractPrimitive = /* @__PURE__ */ _classPrivateFieldKey("extractPrimitive");
var _extractAliasPath = /* @__PURE__ */ _classPrivateFieldKey("extractAliasPath");
var _extractSequence = /* @__PURE__ */ _classPrivateFieldKey("extractSequence");
var _extractTuple = /* @__PURE__ */ _classPrivateFieldKey("extractTuple");
var _extractVariant = /* @__PURE__ */ _classPrivateFieldKey("extractVariant");
var _extractVariantEnum = /* @__PURE__ */ _classPrivateFieldKey("extractVariantEnum");
var PortableRegistry = /*#__PURE__*/ function(Struct) {
    _inherits(PortableRegistry, Struct);
    var _super = _create_super(PortableRegistry);
    function PortableRegistry(registry, value1, isContract) {
        _class_call_check(this, PortableRegistry);
        var _this;
        _this = _super.call(this, registry, {
            types: "Vec<PortableType>"
        }, value1);
        Object.defineProperty(_assert_this_initialized(_this), _extractVariantEnum, {
            value: _extractVariantEnum2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractVariant, {
            value: _extractVariant2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractTuple, {
            value: _extractTuple2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractSequence, {
            value: _extractSequence2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractAliasPath, {
            value: _extractAliasPath2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractPrimitive, {
            value: _extractPrimitive2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractHistoric, {
            value: _extractHistoric2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractFieldsAlias, {
            value: _extractFieldsAlias2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractFields, {
            value: _extractFields2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractCompositeSet, {
            value: _extractCompositeSet2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractComposite, {
            value: _extractComposite2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractCompact, {
            value: _extractCompact2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractBitSequence, {
            value: _extractBitSequence2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extractArray, {
            value: _extractArray2
        });
        Object.defineProperty(_assert_this_initialized(_this), _extract, {
            value: _extract2
        });
        Object.defineProperty(_assert_this_initialized(_this), _getLookupId, {
            value: _getLookupId2
        });
        Object.defineProperty(_assert_this_initialized(_this), _createSiDef, {
            value: _createSiDef2
        });
        Object.defineProperty(_assert_this_initialized(_this), _alias, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(_assert_this_initialized(_this), _lookups, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(_assert_this_initialized(_this), _names2, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(_assert_this_initialized(_this), _params, {
            writable: true,
            value: void 0
        });
        Object.defineProperty(_assert_this_initialized(_this), _typeDefs, {
            writable: true,
            value: {}
        });
        Object.defineProperty(_assert_this_initialized(_this), _types, {
            writable: true,
            value: void 0
        });
        var _extractTypeInfo = extractTypeInfo(_assert_this_initialized(_this), _this.types), lookups = _extractTypeInfo.lookups, names2 = _extractTypeInfo.names, _params2 = _extractTypeInfo.params, types2 = _extractTypeInfo.types;
        _classPrivateFieldBase(_this, _alias)[_alias] = extractAliases(_params2, isContract);
        _classPrivateFieldBase(_this, _lookups)[_lookups] = lookups;
        _classPrivateFieldBase(_this, _names2)[_names2] = names2;
        _classPrivateFieldBase(_this, _params)[_params] = _params2;
        _classPrivateFieldBase(_this, _types)[_types] = types2;
        return _this;
    }
    _create_class(PortableRegistry, [
        {
            key: "names",
            get: /**
   * @description Returns all the available type names for this chain
   **/ function get() {
                return Object.values(_classPrivateFieldBase(this, _names2)[_names2]).sort();
            }
        },
        {
            key: "types",
            get: /**
   * @description The types of the registry
   */ function get() {
                return this.getT("types");
            }
        },
        {
            /**
   * @description Register all available types into the registry (generally for internal usage)
   */ key: "register",
            value: function register() {
                registerTypes(this, _classPrivateFieldBase(this, _lookups)[_lookups], _classPrivateFieldBase(this, _names2)[_names2], _classPrivateFieldBase(this, _params)[_params]);
            }
        },
        {
            /**
   * @description Returns the name for a specific lookup
   */ key: "getName",
            value: function getName(lookupId) {
                return _classPrivateFieldBase(this, _names2)[_names2][_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
            }
        },
        {
            /**
   * @description Finds a specific type in the registry
   */ key: "getSiType",
            value: function getSiType(lookupId) {
                var found = (_classPrivateFieldBase(this, _types)[_types] || this.types)[_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
                if (!found) {
                    throw new Error("PortableRegistry: Unable to find type with lookupId ".concat(lookupId.toString()));
                }
                return found.type;
            }
        },
        {
            /**
   * @description Lookup the type definition for the index
   */ key: "getTypeDef",
            value: function getTypeDef(lookupId) {
                var _this = this;
                var lookupIndex = _classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId);
                if (!_classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex]) {
                    var lookupName = _classPrivateFieldBase(this, _names2)[_names2][lookupIndex];
                    var empty2 = {
                        info: TypeDefInfo.DoNotConstruct,
                        lookupIndex: lookupIndex,
                        lookupName: lookupName,
                        type: this.registry.createLookupType(lookupIndex)
                    };
                    if (lookupName) {
                        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty2;
                    }
                    var extracted = _classPrivateFieldBase(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex);
                    if (!lookupName) {
                        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty2;
                    }
                    Object.keys(extracted).forEach(function(k) {
                        if (k !== "lookupName" || extracted[k]) {
                            _classPrivateFieldBase(_this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
                        }
                    });
                    if (extracted.info === TypeDefInfo.Plain) {
                        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
                        delete _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
                    }
                }
                return _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex];
            }
        },
        {
            /**
   * @description For a specific field, perform adjustments to not have built-in conflicts
   */ key: "sanitizeField",
            value: function sanitizeField(name) {
                var nameField = null;
                var nameOrig = null;
                if (name.isSome) {
                    nameField = stringCamelCase(name.unwrap());
                    if (nameField.includes("#")) {
                        nameOrig = nameField;
                        nameField = nameOrig.replace(/#/g, "_");
                    } else if (RESERVED.includes(nameField)) {
                        nameOrig = nameField;
                        nameField = "".concat(nameField, "_");
                    }
                }
                return [
                    nameField,
                    nameOrig
                ];
            }
        }
    ]);
    return PortableRegistry;
}(Struct);
function _createSiDef2(lookupId) {
    var typeDef = this.getTypeDef(lookupId);
    var lookupIndex = lookupId.toNumber();
    return [
        TypeDefInfo.DoNotConstruct,
        TypeDefInfo.Enum,
        TypeDefInfo.Struct
    ].includes(typeDef.info) && typeDef.lookupName ? {
        docs: typeDef.docs,
        info: TypeDefInfo.Si,
        lookupIndex: lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex],
        type: this.registry.createLookupType(lookupId)
    } : typeDef;
}
function _getLookupId2(lookupId) {
    if (isString(lookupId)) {
        if (!this.registry.isLookupType(lookupId)) {
            throw new Error("PortableRegistry: Expected a lookup string type, found ".concat(lookupId));
        }
        return parseInt(lookupId.replace("Lookup", ""), 10);
    } else if (isNumber(lookupId)) {
        return lookupId;
    }
    return lookupId.toNumber();
}
function _extract2(type, lookupIndex) {
    var namespace = type.path.join("::");
    var typeDef;
    var aliasType = _classPrivateFieldBase(this, _alias)[_alias][lookupIndex] || getAliasPath(type);
    try {
        if (aliasType) {
            typeDef = _classPrivateFieldBase(this, _extractAliasPath)[_extractAliasPath](lookupIndex, aliasType);
        } else {
            switch(type.def.type){
                case "Array":
                    typeDef = _classPrivateFieldBase(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
                    break;
                case "BitSequence":
                    typeDef = _classPrivateFieldBase(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
                    break;
                case "Compact":
                    typeDef = _classPrivateFieldBase(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
                    break;
                case "Composite":
                    typeDef = _classPrivateFieldBase(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
                    break;
                case "HistoricMetaCompat":
                    typeDef = _classPrivateFieldBase(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
                    break;
                case "Primitive":
                    typeDef = _classPrivateFieldBase(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
                    break;
                case "Sequence":
                    typeDef = _classPrivateFieldBase(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
                    break;
                case "Tuple":
                    typeDef = _classPrivateFieldBase(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
                    break;
                case "Variant":
                    typeDef = _classPrivateFieldBase(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
                    break;
                default:
                    assertUnreachable(type.def.type);
            }
        }
    } catch (error2) {
        throw new Error("PortableRegistry: ".concat(lookupIndex).concat(namespace ? " (".concat(namespace, ")") : "", ": Error extracting ").concat(stringify(type), ": ").concat(error2.message));
    }
    return objectSpread({
        docs: sanitizeDocs(type.docs),
        namespace: namespace
    }, typeDef);
}
function _extractArray2(_23, param) {
    var len = param.len, type = param.type;
    var length = len.toNumber();
    if (length > 2048) {
        throw new Error("Only support for [Type; <length>], where length <= 2048");
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.VecFixed,
        length: length,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
}
function _extractBitSequence2(_23, param) {
    var bitOrderType = param.bitOrderType, bitStoreType = param.bitStoreType;
    var a = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitOrderType);
    var b = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitStoreType);
    var _ref = _sliced_to_array(BITVEC_NS.includes(a.namespace || "") ? [
        a,
        b
    ] : [
        b,
        a
    ], 2), bitOrder = _ref[0], bitStore = _ref[1];
    if (!BITVEC_NS.includes(bitOrder.namespace || "")) {
        throw new Error("Unexpected bitOrder found as ".concat(bitOrder.namespace || "<unknown>"));
    } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
        throw new Error("Only u8 bitStore is currently supported, found ".concat(bitStore.type));
    }
    return {
        info: TypeDefInfo.Plain,
        type: "BitVec"
    };
}
function _extractCompact2(_23, param) {
    var type = param.type;
    return withTypeString(this.registry, {
        info: TypeDefInfo.Compact,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
}
function _extractComposite2(lookupIndex, param, param1) {
    var params = param.params, path = param.path, fields = param1.fields;
    var _this = this;
    if (path.length) {
        var pathFirst = path[0].toString();
        var pathLast = path[path.length - 1].toString();
        if (path.length === 1 && pathFirst === "BTreeMap") {
            if (params.length !== 2) {
                throw new Error("BTreeMap requires 2 parameters, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.BTreeMap,
                sub: params.map(function(param) {
                    var type = param.type;
                    return _classPrivateFieldBase(_this, _createSiDef)[_createSiDef](type.unwrap());
                })
            });
        } else if (path.length === 1 && pathFirst === "BTreeSet") {
            if (params.length !== 1) {
                throw new Error("BTreeSet requires 1 parameter, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.BTreeSet,
                sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
            });
        } else if ([
            "Range",
            "RangeInclusive"
        ].includes(pathFirst)) {
            if (params.length !== 1) {
                throw new Error("Range requires 1 parameter, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
                sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
                type: pathFirst
            });
        } else if ([
            "WrapperKeepOpaque",
            "WrapperOpaque"
        ].includes(pathLast)) {
            if (params.length !== 1) {
                throw new Error("WrapperOpaque requires 1 parameter, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
                sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
                type: pathLast
            });
        }
    }
    return PATHS_SET.some(function(p) {
        return matchParts(p, path);
    }) ? _classPrivateFieldBase(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : _classPrivateFieldBase(this, _extractFields)[_extractFields](lookupIndex, fields);
}
function _extractCompositeSet2(_23, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
        throw new Error("Set handling expects param/field as single entries");
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.Set,
        length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
        sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(function(param) {
            var index = param.index, name = param.name;
            return {
                // This will be an issue > 2^53 - 1 ... don't have those (yet)
                index: index.toNumber(),
                info: TypeDefInfo.Plain,
                name: name.toString(),
                type: "Null"
            };
        })
    });
}
function _extractFields2(lookupIndex, fields) {
    var isStruct = true;
    var isTuple = true;
    for(var f = 0; f < fields.length; f++){
        var name = fields[f].name;
        isStruct = isStruct && name.isSome;
        isTuple = isTuple && name.isNone;
    }
    if (!isTuple && !isStruct) {
        throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
    }
    if (fields.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: "Null"
        };
    } else if (isTuple && fields.length === 1) {
        var typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](fields[0].type);
        return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
            lookupIndex: lookupIndex,
            lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex],
            lookupNameRoot: typeDef.lookupName
        }, fields[0].typeName.isSome ? {
            typeName: sanitize(fields[0].typeName.unwrap())
        } : null);
    }
    var _classPrivateFieldBase__extractFieldsAlias = _sliced_to_array(_classPrivateFieldBase(this, _extractFieldsAlias)[_extractFieldsAlias](fields), 2), sub = _classPrivateFieldBase__extractFieldsAlias[0], alias2 = _classPrivateFieldBase__extractFieldsAlias[1];
    return withTypeString(this.registry, objectSpread({
        info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
        sub: sub
    }, alias2.size ? {
        alias: alias2
    } : null, lookupIndex === -1 ? null : {
        lookupIndex: lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex]
    }));
}
function _extractFieldsAlias2(fields) {
    var alias2 = /* @__PURE__ */ new Map();
    var sub = new Array(fields.length);
    for(var i = 0; i < fields.length; i++){
        var _fields_i = fields[i], docs = _fields_i.docs, name = _fields_i.name, type = _fields_i.type, typeName = _fields_i.typeName;
        var typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);
        if (name.isNone) {
            sub[i] = typeDef;
        } else {
            var _this_sanitizeField = _sliced_to_array(this.sanitizeField(name), 2), nameField = _this_sanitizeField[0], nameOrig = _this_sanitizeField[1];
            if (nameField && nameOrig) {
                alias2.set(nameField, nameOrig);
            }
            sub[i] = objectSpread({
                docs: sanitizeDocs(docs),
                name: nameField
            }, typeDef, typeName.isSome ? {
                typeName: sanitize(typeName.unwrap())
            } : null);
        }
    }
    return [
        sub,
        alias2
    ];
}
function _extractHistoric2(_23, type) {
    return objectSpread({
        displayName: type.toString(),
        isFromSi: true
    }, getTypeDef(type));
}
function _extractPrimitive2(_23, type) {
    var typeStr = type.def.asPrimitive.type.toString();
    return {
        info: TypeDefInfo.Plain,
        type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
}
function _extractAliasPath2(_23, type) {
    return {
        info: TypeDefInfo.Plain,
        type: type
    };
}
function _extractSequence2(lookupIndex, param) {
    var type = param.type;
    var sub = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);
    if (sub.type === "u8") {
        return {
            info: TypeDefInfo.Plain,
            type: "Bytes"
        };
    }
    return withTypeString(this.registry, {
        info: TypeDefInfo.Vec,
        lookupIndex: lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex],
        sub: sub
    });
}
function _extractTuple2(lookupIndex, ids) {
    var _this = this;
    if (ids.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: "Null"
        };
    } else if (ids.length === 1) {
        return this.getTypeDef(ids[0]);
    }
    var sub = ids.map(function(t2) {
        return _classPrivateFieldBase(_this, _createSiDef)[_createSiDef](t2);
    });
    return withTypeString(this.registry, {
        info: TypeDefInfo.Tuple,
        lookupIndex: lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex],
        sub: sub
    });
}
function _extractVariant2(lookupIndex, param, param1) {
    var params = param.params, path = param.path, variants = param1.variants;
    var _this = this;
    if (path.length) {
        var specialVariant = path[0].toString();
        if (specialVariant === "Option") {
            if (params.length !== 1) {
                throw new Error("Option requires 1 parameter, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Option,
                sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
            });
        } else if (specialVariant === "Result") {
            if (params.length !== 2) {
                throw new Error("Result requires 2 parameters, found ".concat(params.length));
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Result,
                sub: params.map(function(param, index) {
                    var type = param.type;
                    return objectSpread({
                        name: [
                            "Ok",
                            "Error"
                        ][index]
                    }, _classPrivateFieldBase(_this, _createSiDef)[_createSiDef](type.unwrap()));
                })
            });
        }
    }
    if (variants.length === 0) {
        return {
            info: TypeDefInfo.Null,
            type: "Null"
        };
    }
    return _classPrivateFieldBase(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
}
function _extractVariantEnum2(lookupIndex, variants) {
    var _this = this;
    var sub = [];
    variants.slice().sort(function(a, b) {
        return a.index.cmp(b.index);
    }).forEach(function(param) {
        var fields = param.fields, bnIndex = param.index, name = param.name;
        var index = bnIndex.toNumber();
        while(sub.length !== index){
            sub.push({
                index: sub.length,
                info: TypeDefInfo.Null,
                name: "__Unused".concat(sub.length),
                type: "Null"
            });
        }
        sub.push(objectSpread(_classPrivateFieldBase(_this, _extractFields)[_extractFields](-1, fields), {
            index: index,
            name: name.toString()
        }));
    });
    return withTypeString(this.registry, {
        info: TypeDefInfo.Enum,
        lookupIndex: lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names2)[_names2][lookupIndex],
        sub: sub
    });
}
// ../../node_modules/@polkadot/types/create/registry.js
var DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
var l7 = logger("registry");
function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
    return v.toString();
}
function getFieldArgs(lookup, fields) {
    var args = new Array(fields.length);
    for(var i = 0; i < fields.length; i++){
        args[i] = lookup.getTypeDef(fields[i].type).type;
    }
    return args;
}
function clearRecord(record) {
    var keys2 = Object.keys(record);
    for(var i = 0; i < keys2.length; i++){
        delete record[keys2[i]];
    }
}
function getVariantStringIdx(param) {
    var index = param.index;
    return index.toString();
}
function injectErrors(_23, param, version, result) {
    var _loop = function(i) {
        var _pallets_i = pallets[i], errors = _pallets_i.errors, index = _pallets_i.index, name = _pallets_i.name;
        if (errors.isSome) {
            var sectionName = stringCamelCase(name);
            lazyMethod(result, version >= 12 ? index.toNumber() : i, function() {
                return lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, function(param) {
                    var docs = param.docs, fields = param.fields, index2 = param.index, name2 = param.name;
                    return {
                        args: getFieldArgs(lookup, fields),
                        docs: docs.map(valueToString),
                        fields: fields,
                        index: index2.toNumber(),
                        method: name2.toString(),
                        name: name2.toString(),
                        section: sectionName
                    };
                });
            });
        }
    };
    var lookup = param.lookup, pallets = param.pallets;
    clearRecord(result);
    for(var i = 0; i < pallets.length; i++)_loop(i);
}
function injectEvents(registry, param, version, result) {
    var _loop = function(i) {
        var _filtered_i = filtered[i], events2 = _filtered_i.events, index = _filtered_i.index, name = _filtered_i.name;
        lazyMethod(result, version >= 12 ? index.toNumber() : i, function() {
            return lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, function(variant) {
                var meta = registry.createType("EventMetadataLatest", objectSpread({}, variant, {
                    args: getFieldArgs(lookup, variant.fields)
                }));
                return /*#__PURE__*/ function(GenericEventData) {
                    _inherits(_class, GenericEventData);
                    var _super = _create_super(_class);
                    function _class(registry2, value1) {
                        _class_call_check(this, _class);
                        return _super.call(this, registry2, value1, meta, stringCamelCase(name), variant.name.toString());
                    }
                    return _class;
                }(GenericEventData);
            });
        });
    };
    var lookup = param.lookup, pallets = param.pallets;
    var filtered = pallets.filter(filterEventsSome);
    clearRecord(result);
    for(var i = 0; i < filtered.length; i++)_loop(i);
}
function injectExtrinsics(registry, param, version, result, mapping2) {
    var _loop = function(i) {
        var _filtered_i = filtered[i], calls = _filtered_i.calls, index = _filtered_i.index, name = _filtered_i.name;
        var sectionIndex = version >= 12 ? index.toNumber() : i;
        var sectionName = stringCamelCase(name);
        var allCalls = calls.unwrap();
        lazyMethod(result, sectionIndex, function() {
            return lazyVariants(lookup, allCalls, getVariantStringIdx, function(variant) {
                return createCallFunction(registry, lookup, variant, sectionName, sectionIndex);
            });
        });
        var path = registry.lookup.getSiType(allCalls.type).path;
        var palletIdx = path.findIndex(function(v) {
            return v.eq("pallet");
        });
        if (palletIdx !== -1) {
            var name2 = stringCamelCase(path.slice(0, palletIdx).map(function(p, i2) {
                return i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p;
            }).join(" "));
            if (!mapping2[name2]) {
                mapping2[name2] = [
                    sectionName
                ];
            } else {
                mapping2[name2].push(sectionName);
            }
        }
    };
    var lookup = param.lookup, pallets = param.pallets;
    var filtered = pallets.filter(filterCallsSome);
    clearRecord(result);
    clearRecord(mapping2);
    for(var i = 0; i < filtered.length; i++)_loop(i);
}
function extractProperties(registry, metadata) {
    var original = registry.getChainProperties();
    var constants = decorateConstants(registry, metadata.asLatest, metadata.version);
    var ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);
    if (!ss58Format) {
        return original;
    }
    var _ref = original || {}, tokenDecimals = _ref.tokenDecimals, tokenSymbol = _ref.tokenSymbol;
    return registry.createTypeUnsafe("ChainProperties", [
        {
            ss58Format: ss58Format,
            tokenDecimals: tokenDecimals,
            tokenSymbol: tokenSymbol
        }
    ]);
}
var _chainProperties, _classes, _definitions, _firstCallIndex, _hasher, _knownTypes, _lookup, _metadata2, _metadataVersion, _signedExtensions, _unknownTypes, _userExtensions, _knownDefaults, _knownDefinitions, _metadataCalls, _metadataErrors, _metadataEvents, _moduleMap, _registerObject, _registerLookup;
var TypeRegistry = /*#__PURE__*/ function() {
    function TypeRegistry(createdAtHash) {
        var _this = this;
        _class_call_check(this, TypeRegistry);
        __privateAdd(this, _chainProperties, void 0);
        __privateAdd(this, _classes, /* @__PURE__ */ new Map());
        __privateAdd(this, _definitions, /* @__PURE__ */ new Map());
        __privateAdd(this, _firstCallIndex, null);
        __privateAdd(this, _hasher, blake2AsU8a);
        __privateAdd(this, _knownTypes, {});
        __privateAdd(this, _lookup, void 0);
        __privateAdd(this, _metadata2, void 0);
        __privateAdd(this, _metadataVersion, 0);
        __privateAdd(this, _signedExtensions, fallbackExtensions);
        __privateAdd(this, _unknownTypes, /* @__PURE__ */ new Map());
        __privateAdd(this, _userExtensions, void 0);
        __privateAdd(this, _knownDefaults, void 0);
        __privateAdd(this, _knownDefinitions, void 0);
        __privateAdd(this, _metadataCalls, {});
        __privateAdd(this, _metadataErrors, {});
        __privateAdd(this, _metadataEvents, {});
        __privateAdd(this, _moduleMap, {});
        __privateAdd(this, _registerObject, function(obj) {
            var entries = Object.entries(obj);
            for(var e = 0; e < entries.length; e++){
                var _entries_e = _sliced_to_array(entries[e], 2), name = _entries_e[0], type = _entries_e[1];
                if (isFunction(type)) {
                    __privateGet(_this, _classes).set(name, type);
                } else {
                    var def = isString(type) ? type : stringify(type);
                    if (name === def) {
                        throw new Error("Unable to register circular ".concat(name, " === ").concat(def));
                    }
                    if (__privateGet(_this, _classes).has(name)) {
                        __privateGet(_this, _classes).delete(name);
                    }
                    __privateGet(_this, _definitions).set(name, def);
                }
            }
        });
        // register alias types alongside the portable/lookup setup
        // (we don't combine this into setLookup since that would/could
        // affect stand-along lookups, such as ABIs which don't have
        // actual on-chain metadata)
        __privateAdd(this, _registerLookup, function(lookup) {
            _this.setLookup(lookup);
            var Weight = null;
            if (_this.hasType("SpWeightsWeightV2Weight")) {
                var weightv2 = _this.createType("SpWeightsWeightV2Weight");
                Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
            } else if (!isBn(_this.createType("Weight"))) {
                Weight = "WeightV1";
            }
            if (Weight) {
                _this.register({
                    Weight: Weight
                });
            }
        });
        __privateSet(this, _knownDefaults, objectSpread({
            Json: Json,
            Metadata: Metadata,
            PortableRegistry: PortableRegistry,
            Raw: Raw
        }, index_types_exports));
        __privateSet(this, _knownDefinitions, definitions_exports);
        var allKnown = Object.values(__privateGet(this, _knownDefinitions));
        for(var i = 0; i < allKnown.length; i++){
            this.register(allKnown[i].types);
        }
        if (createdAtHash) {
            this.createdAtHash = this.createType("BlockHash", createdAtHash);
        }
    }
    _create_class(TypeRegistry, [
        {
            key: "chainDecimals",
            get: function get() {
                var _this$chainProperties;
                if ((_this$chainProperties = __privateGet(this, _chainProperties)) != null && _this$chainProperties.tokenDecimals.isSome) {
                    var allDecimals = __privateGet(this, _chainProperties).tokenDecimals.unwrap();
                    if (allDecimals.length) {
                        return allDecimals.map(function(b) {
                            return b.toNumber();
                        });
                    }
                }
                return [
                    12
                ];
            }
        },
        {
            key: "chainSS58",
            get: function get() {
                var _this$chainProperties2;
                return (_this$chainProperties2 = __privateGet(this, _chainProperties)) != null && _this$chainProperties2.ss58Format.isSome ? __privateGet(this, _chainProperties).ss58Format.unwrap().toNumber() : void 0;
            }
        },
        {
            key: "chainTokens",
            get: function get() {
                var _this$chainProperties3;
                if ((_this$chainProperties3 = __privateGet(this, _chainProperties)) != null && _this$chainProperties3.tokenSymbol.isSome) {
                    var allTokens = __privateGet(this, _chainProperties).tokenSymbol.unwrap();
                    if (allTokens.length) {
                        return allTokens.map(valueToString);
                    }
                }
                return [
                    formatBalance2.getDefaults().unit
                ];
            }
        },
        {
            key: "firstCallIndex",
            get: function get() {
                return __privateGet(this, _firstCallIndex) || DEFAULT_FIRST_CALL_IDX;
            }
        },
        {
            /**
   * @description Returns true if the type is in a Compat format
   */ key: "isLookupType",
            value: function isLookupType(value1) {
                return /Lookup\d+$/.test(value1);
            }
        },
        {
            /**
   * @description Creates a lookup string from the supplied id
   */ key: "createLookupType",
            value: function createLookupType(lookupId) {
                return "Lookup".concat(typeof lookupId === "number" ? lookupId : lookupId.toNumber());
            }
        },
        {
            key: "knownTypes",
            get: function get() {
                return __privateGet(this, _knownTypes);
            }
        },
        {
            key: "lookup",
            get: function get() {
                return assertReturn(__privateGet(this, _lookup), "PortableRegistry has not been set on this registry");
            }
        },
        {
            key: "metadata",
            get: function get() {
                return assertReturn(__privateGet(this, _metadata2), "Metadata has not been set on this registry");
            }
        },
        {
            key: "unknownTypes",
            get: function get() {
                return _to_consumable_array(__privateGet(this, _unknownTypes).keys());
            }
        },
        {
            key: "signedExtensions",
            get: function get() {
                return __privateGet(this, _signedExtensions);
            }
        },
        {
            key: "clearCache",
            value: function clearCache() {
                __privateSet(this, _classes, /* @__PURE__ */ new Map());
            }
        },
        {
            /**
   * @describe Creates an instance of the class
   */ key: "createClass",
            value: function createClass(type) {
                return createClassUnsafe(this, type);
            }
        },
        {
            /**
   * @describe Creates an instance of the class
   */ key: "createClassUnsafe",
            value: function createClassUnsafe1(type) {
                return createClassUnsafe(this, type);
            }
        },
        {
            /**
   * @description Creates an instance of a type as registered
   */ key: "createType",
            value: function createType(type) {
                for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    params[_key - 1] = arguments[_key];
                }
                return createTypeUnsafe(this, type, params);
            }
        },
        {
            /**
   * @description Creates an instance of a type as registered
   */ key: "createTypeUnsafe",
            value: function createTypeUnsafe1(type, params, options) {
                return createTypeUnsafe(this, type, params, options);
            }
        },
        {
            // find a specific call
            key: "findMetaCall",
            value: function findMetaCall(callIndex) {
                var _ref = [
                    callIndex[0],
                    callIndex[1]
                ], section2 = _ref[0], method = _ref[1];
                return assertReturn(__privateGet(this, _metadataCalls)["".concat(section2)] && __privateGet(this, _metadataCalls)["".concat(section2)]["".concat(method)], function() {
                    return "findMetaCall: Unable to find Call with index [".concat(section2, ", ").concat(method, "]/[").concat(callIndex.toString(), "]");
                });
            }
        },
        {
            // finds an error
            key: "findMetaError",
            value: function findMetaError(errorIndex) {
                var _ref = _sliced_to_array(isU8a(errorIndex) ? [
                    errorIndex[0],
                    errorIndex[1]
                ] : [
                    errorIndex.index.toNumber(),
                    isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
                ], 2), section2 = _ref[0], method = _ref[1];
                return assertReturn(__privateGet(this, _metadataErrors)["".concat(section2)] && __privateGet(this, _metadataErrors)["".concat(section2)]["".concat(method)], function() {
                    return "findMetaError: Unable to find Error with index [".concat(section2, ", ").concat(method, "]/[").concat(errorIndex.toString(), "]");
                });
            }
        },
        {
            key: "findMetaEvent",
            value: function findMetaEvent(eventIndex) {
                var _ref = [
                    eventIndex[0],
                    eventIndex[1]
                ], section2 = _ref[0], method = _ref[1];
                return assertReturn(__privateGet(this, _metadataEvents)["".concat(section2)] && __privateGet(this, _metadataEvents)["".concat(section2)]["".concat(method)], function() {
                    return "findMetaEvent: Unable to find Event with index [".concat(section2, ", ").concat(method, "]/[").concat(eventIndex.toString(), "]");
                });
            }
        },
        {
            key: "get",
            value: function get(name, withUnknown, knownTypeDef) {
                return this.getUnsafe(name, withUnknown, knownTypeDef);
            }
        },
        {
            key: "getUnsafe",
            value: function getUnsafe(name, withUnknown, knownTypeDef) {
                var Type2 = __privateGet(this, _classes).get(name) || __privateGet(this, _knownDefaults)[name];
                if (!Type2) {
                    var definition = __privateGet(this, _definitions).get(name);
                    var BaseType;
                    if (definition) {
                        BaseType = createClassUnsafe(this, definition);
                    } else if (knownTypeDef) {
                        BaseType = constructTypeClass(this, knownTypeDef);
                    } else if (withUnknown) {
                        l7.warn("Unable to resolve type ".concat(name, ", it will fail on construction"));
                        __privateGet(this, _unknownTypes).set(name, true);
                        BaseType = DoNotConstruct.with(name);
                    }
                    if (BaseType) {
                        Type2 = /*#__PURE__*/ function(BaseType) {
                            _inherits(Type2, BaseType);
                            var _super = _create_super(Type2);
                            function Type2() {
                                _class_call_check(this, Type2);
                                return _super.apply(this, arguments);
                            }
                            return Type2;
                        }(BaseType);
                        __privateGet(this, _classes).set(name, Type2);
                        if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
                            __privateGet(this, _classes).set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
                        }
                    }
                }
                return Type2;
            }
        },
        {
            key: "getChainProperties",
            value: function getChainProperties() {
                return __privateGet(this, _chainProperties);
            }
        },
        {
            key: "getClassName",
            value: function getClassName(Type2) {
                var names2 = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = Object.entries(__privateGet(this, _knownDefaults))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), name = _step_value[0], Clazz = _step_value[1];
                        if (Type2 === Clazz) {
                            names2.push(name);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = __privateGet(this, _classes).entries()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var _step_value1 = _sliced_to_array(_step1.value, 2), name1 = _step_value1[0], Clazz1 = _step_value1[1];
                        if (Type2 === Clazz1) {
                            names2.push(name1);
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                names2.sort().reverse();
                return names2.length ? names2[0] : void 0;
            }
        },
        {
            key: "getDefinition",
            value: function getDefinition(typeName) {
                return __privateGet(this, _definitions).get(typeName);
            }
        },
        {
            key: "getModuleInstances",
            value: function getModuleInstances(specName, moduleName) {
                var _this$knownTypes, _this$knownTypes$type, _this$knownTypes$type2, _this$knownTypes$type3, _this$knownTypes$type4;
                return ((_this$knownTypes = __privateGet(this, _knownTypes)) == null ? void 0 : (_this$knownTypes$type = _this$knownTypes.typesBundle) == null ? void 0 : (_this$knownTypes$type2 = _this$knownTypes$type.spec) == null ? void 0 : (_this$knownTypes$type3 = _this$knownTypes$type2[specName.toString()]) == null ? void 0 : (_this$knownTypes$type4 = _this$knownTypes$type3.instances) == null ? void 0 : _this$knownTypes$type4[moduleName]) || __privateGet(this, _moduleMap)[moduleName];
            }
        },
        {
            key: "getOrThrow",
            value: function getOrThrow(name) {
                var Clazz = this.get(name);
                if (!Clazz) {
                    throw new Error("type ".concat(name, " not found"));
                }
                return Clazz;
            }
        },
        {
            key: "getOrUnknown",
            value: function getOrUnknown(name) {
                return this.get(name, true);
            }
        },
        {
            key: "getSignedExtensionExtra",
            value: function getSignedExtensionExtra() {
                return expandExtensionTypes(__privateGet(this, _signedExtensions), "payload", __privateGet(this, _userExtensions));
            }
        },
        {
            key: "getSignedExtensionTypes",
            value: function getSignedExtensionTypes() {
                return expandExtensionTypes(__privateGet(this, _signedExtensions), "extrinsic", __privateGet(this, _userExtensions));
            }
        },
        {
            key: "hasClass",
            value: function hasClass(name) {
                return __privateGet(this, _classes).has(name) || !!__privateGet(this, _knownDefaults)[name];
            }
        },
        {
            key: "hasDef",
            value: function hasDef(name) {
                return __privateGet(this, _definitions).has(name);
            }
        },
        {
            key: "hasType",
            value: function hasType(name) {
                return !__privateGet(this, _unknownTypes).get(name) && (this.hasClass(name) || this.hasDef(name));
            }
        },
        {
            key: "hash",
            value: function hash(data) {
                return this.createType("CodecHash", __privateGet(this, _hasher).call(this, data));
            }
        },
        {
            // eslint-disable-next-line no-dupe-class-members
            key: "register",
            value: function register(arg1, arg2) {
                if (isFunction(arg1)) {
                    __privateGet(this, _classes).set(arg1.name, arg1);
                } else if (isString(arg1)) {
                    if (!isFunction(arg2)) {
                        throw new Error("Expected class definition passed to '".concat(arg1, "' registration"));
                    } else if (arg1 === arg2.toString()) {
                        throw new Error("Unable to register circular ".concat(arg1, " === ").concat(arg1));
                    }
                    __privateGet(this, _classes).set(arg1, arg2);
                } else {
                    __privateGet(this, _registerObject).call(this, arg1);
                }
            }
        },
        {
            // sets the chain properties
            key: "setChainProperties",
            value: function setChainProperties(properties) {
                if (properties) {
                    __privateSet(this, _chainProperties, properties);
                }
            }
        },
        {
            key: "setHasher",
            value: function setHasher(hasher) {
                __privateSet(this, _hasher, hasher || blake2AsU8a);
            }
        },
        {
            key: "setKnownTypes",
            value: function setKnownTypes(knownTypes2) {
                __privateSet(this, _knownTypes, knownTypes2);
            }
        },
        {
            key: "setLookup",
            value: function setLookup(lookup) {
                __privateSet(this, _lookup, lookup);
                lookup.register();
            }
        },
        {
            // sets the metadata
            key: "setMetadata",
            value: function setMetadata(metadata, signedExtensions, userExtensions) {
                __privateSet(this, _metadata2, metadata.asLatest);
                __privateSet(this, _metadataVersion, metadata.version);
                __privateSet(this, _firstCallIndex, null);
                __privateGet(this, _registerLookup).call(this, __privateGet(this, _metadata2).lookup);
                injectExtrinsics(this, __privateGet(this, _metadata2), __privateGet(this, _metadataVersion), __privateGet(this, _metadataCalls), __privateGet(this, _moduleMap));
                injectErrors(this, __privateGet(this, _metadata2), __privateGet(this, _metadataVersion), __privateGet(this, _metadataErrors));
                injectEvents(this, __privateGet(this, _metadata2), __privateGet(this, _metadataVersion), __privateGet(this, _metadataEvents));
                var _Object_keys_sort = _sliced_to_array(Object.keys(__privateGet(this, _metadataCalls)).sort(sortDecimalStrings), 1), defSection = _Object_keys_sort[0];
                if (defSection) {
                    var _Object_keys_sort1 = _sliced_to_array(Object.keys(__privateGet(this, _metadataCalls)[defSection]).sort(sortDecimalStrings), 1), defMethod = _Object_keys_sort1[0];
                    if (defMethod) {
                        __privateSet(this, _firstCallIndex, new Uint8Array([
                            parseInt(defSection, 10),
                            parseInt(defMethod, 10)
                        ]));
                    }
                }
                this.setSignedExtensions(signedExtensions || (__privateGet(this, _metadata2).extrinsic.version.gt(BN_ZERO) ? __privateGet(this, _metadata2).extrinsic.signedExtensions.map(function(param) {
                    var identifier = param.identifier;
                    return identifier.toString();
                }) : fallbackExtensions), userExtensions);
                this.setChainProperties(extractProperties(this, metadata));
            }
        },
        {
            // sets the available signed extensions
            key: "setSignedExtensions",
            value: function setSignedExtensions() {
                var signedExtensions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : fallbackExtensions, userExtensions = arguments.length > 1 ? arguments[1] : void 0;
                __privateSet(this, _signedExtensions, signedExtensions);
                __privateSet(this, _userExtensions, userExtensions);
                var unknown = findUnknownExtensions(__privateGet(this, _signedExtensions), __privateGet(this, _userExtensions));
                if (unknown.length) {
                    l7.warn("Unknown signed extensions ".concat(unknown.join(", "), " found, treating them as no-effect"));
                }
            }
        }
    ]);
    return TypeRegistry;
}();
_chainProperties = new WeakMap();
_classes = new WeakMap();
_definitions = new WeakMap();
_firstCallIndex = new WeakMap();
_hasher = new WeakMap();
_knownTypes = new WeakMap();
_lookup = new WeakMap();
_metadata2 = new WeakMap();
_metadataVersion = new WeakMap();
_signedExtensions = new WeakMap();
_unknownTypes = new WeakMap();
_userExtensions = new WeakMap();
_knownDefaults = new WeakMap();
_knownDefinitions = new WeakMap();
_metadataCalls = new WeakMap();
_metadataErrors = new WeakMap();
_metadataEvents = new WeakMap();
_moduleMap = new WeakMap();
_registerObject = new WeakMap();
_registerLookup = new WeakMap();
// ../../node_modules/@polkadot/rpc-core/util/drr.js
var import_rxjs2 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/rpc-core/util/refCountDelay.js
var import_rxjs = __toESM(require_cjs(), 1);
function refCountDelay() {
    var delay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1750;
    return function(source) {
        var _ref = [
            0,
            0,
            import_rxjs.Subscription.EMPTY,
            import_rxjs.Subscription.EMPTY
        ], state2 = _ref[0], refCount3 = _ref[1], connection = _ref[2], scheduler = _ref[3];
        return new import_rxjs.Observable(function(ob) {
            source.subscribe(ob);
            if (refCount3++ === 0) {
                if (state2 === 1) {
                    scheduler.unsubscribe();
                } else {
                    connection = source.connect();
                }
                state2 = 3;
            }
            return function() {
                if (--refCount3 === 0) {
                    if (state2 === 2) {
                        state2 = 0;
                        scheduler.unsubscribe();
                    } else {
                        state2 = 1;
                        scheduler = import_rxjs.asapScheduler.schedule(function() {
                            state2 = 0;
                            connection.unsubscribe();
                        }, delay);
                    }
                }
            };
        });
    };
}
// ../../node_modules/@polkadot/rpc-core/util/drr.js
function CMP(a, b) {
    return stringify({
        t: a
    }) === stringify({
        t: b
    });
}
function ERR(error2) {
    throw error2;
}
function NOOP() {}
function drr() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, delay = _ref.delay, _ref_skipChange = _ref.skipChange, skipChange = _ref_skipChange === void 0 ? false : _ref_skipChange, _ref_skipTimeout = _ref.skipTimeout, skipTimeout = _ref_skipTimeout === void 0 ? false : _ref_skipTimeout;
    return function(source$) {
        return source$.pipe((0, import_rxjs2.catchError)(ERR), skipChange ? (0, import_rxjs2.tap)(NOOP) : (0, import_rxjs2.distinctUntilChanged)(CMP), // eslint-disable-next-line deprecation/deprecation
        (0, import_rxjs2.publishReplay)(1), skipTimeout ? (0, import_rxjs2.refCount)() : refCountDelay(delay));
    };
}
// ../../node_modules/@polkadot/rpc-core/util/memo.js
var import_rxjs3 = __toESM(require_cjs(), 1);
function memo(instanceId, inner) {
    var options = {
        getInstanceId: function() {
            return instanceId;
        }
    };
    var cached = memoize(function() {
        for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){
            params[_key] = arguments[_key];
        }
        return new import_rxjs3.Observable(function(observer) {
            var subscription = inner.apply(void 0, _to_consumable_array(params)).subscribe(observer);
            return function() {
                var _cached;
                (_cached = cached).unmemoize.apply(_cached, _to_consumable_array(params));
                subscription.unsubscribe();
            };
        }).pipe(drr());
    }, options);
    return cached;
}
// ../../node_modules/@polkadot/rpc-core/bundle.js
var l8 = logger("rpc-core");
var EMPTY_META = {
    fallback: void 0,
    modifier: {
        isOptional: true
    },
    type: {
        asMap: {
            linked: {
                isTrue: false
            }
        },
        isMap: false
    }
};
function logErrorMessage(method, param, error2) {
    var noErrorLog = param.noErrorLog, params = param.params, type = param.type;
    if (noErrorLog) {
        return;
    }
    var inputs = params.map(function(param) {
        var isOptional = param.isOptional, name = param.name, type2 = param.type;
        return "".concat(name).concat(isOptional ? "?" : "", ": ").concat(type2);
    }).join(", ");
    l8.error("".concat(method, "(").concat(inputs, "): ").concat(type, ":: ").concat(error2.message));
}
function isTreatAsHex(key) {
    return [
        "0x3a636f6465"
    ].includes(key.toHex());
}
var _instanceId, _registryDefault, _getBlockRegistry, _getBlockHash, _storageCache;
var RpcCore = /*#__PURE__*/ function() {
    function RpcCore(instanceId, registry, provider) {
        var userRpc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        var _this_sections;
        _class_call_check(this, RpcCore);
        __privateAdd(this, _instanceId, void 0);
        __privateAdd(this, _registryDefault, void 0);
        __privateAdd(this, _getBlockRegistry, void 0);
        __privateAdd(this, _getBlockHash, void 0);
        __privateAdd(this, _storageCache, /* @__PURE__ */ new Map());
        __publicField(this, "mapping", /* @__PURE__ */ new Map());
        __publicField(this, "sections", []);
        if (!provider || !isFunction(provider.send)) {
            throw new Error("Expected Provider to API create");
        }
        __privateSet(this, _instanceId, instanceId);
        __privateSet(this, _registryDefault, registry);
        this.provider = provider;
        var sectionNames = Object.keys(jsonrpc_default);
        (_this_sections = this.sections).push.apply(_this_sections, _to_consumable_array(sectionNames));
        this.addUserInterfaces(userRpc);
    }
    _create_class(RpcCore, [
        {
            key: "isConnected",
            get: /**
   * @description Returns the connected status of a provider
   */ function get() {
                return this.provider.isConnected;
            }
        },
        {
            /**
   * @description Manually connect from the attached provider
   */ key: "connect",
            value: function connect() {
                return this.provider.connect();
            }
        },
        {
            /**
   * @description Manually disconnect from the attached provider
   */ key: "disconnect",
            value: function disconnect() {
                return this.provider.disconnect();
            }
        },
        {
            /**
   * @description Sets a registry swap (typically from Api)
   */ key: "setRegistrySwap",
            value: function setRegistrySwap(registrySwap) {
                var _this = this;
                __privateSet(this, _getBlockRegistry, memoize(registrySwap, {
                    getInstanceId: function() {
                        return __privateGet(_this, _instanceId);
                    }
                }));
            }
        },
        {
            /**
   * @description Sets a function to resolve block hash from block number
   */ key: "setResolveBlockHash",
            value: function setResolveBlockHash(resolveBlockHash) {
                var _this = this;
                __privateSet(this, _getBlockHash, memoize(resolveBlockHash, {
                    getInstanceId: function() {
                        return __privateGet(_this, _instanceId);
                    }
                }));
            }
        },
        {
            key: "addUserInterfaces",
            value: function addUserInterfaces(userRpc) {
                var _this = this, _loop = function(s) {
                    var _this2 = _this, _loop = function(m) {
                        var method = methods[m];
                        var def = defs[method];
                        var jsonrpc2 = def.endpoint || "".concat(section2, "_").concat(method);
                        if (!_this2.mapping.has(jsonrpc2)) {
                            var isSubscription = !!def.pubsub;
                            if (!_this2[section2]) {
                                _this2[section2] = {};
                            }
                            _this2.mapping.set(jsonrpc2, objectSpread({}, def, {
                                isSubscription: isSubscription,
                                jsonrpc: jsonrpc2,
                                method: method,
                                section: section2
                            }));
                            lazyMethod(_this2[section2], method, function() {
                                return isSubscription ? _this1._createMethodSubscribe(section2, method, def) : _this1._createMethodSend(section2, method, def);
                            });
                        }
                    };
                    var section2 = _this.sections[s];
                    var defs = objectSpread({}, jsonrpc_default[section2], userRpc[section2]);
                    var methods = Object.keys(defs);
                    for(var m = 0; m < methods.length; m++)_loop(m);
                };
                var _this1 = this;
                var _this_sections;
                (_this_sections = this.sections).push.apply(_this_sections, _to_consumable_array(Object.keys(userRpc).filter(function(k) {
                    return !_this1.sections.includes(k);
                })));
                for(var s = 0; s < this.sections.length; s++)_loop(s);
            }
        },
        {
            key: "_memomize",
            value: function _memomize(creator, def) {
                var _this = this;
                var memoOpts = {
                    getInstanceId: function() {
                        return __privateGet(_this, _instanceId);
                    }
                };
                var memoized = memoize(creator(true), memoOpts);
                memoized.raw = memoize(creator(false), memoOpts);
                memoized.meta = def;
                return memoized;
            }
        },
        {
            key: "_formatResult",
            value: function _formatResult(isScale, registry, blockHash, method, def, params, result) {
                return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
            }
        },
        {
            key: "_createMethodSend",
            value: function _createMethodSend(section2, method, def) {
                var rpcName = def.endpoint || "".concat(section2, "_").concat(method);
                var hashIndex = def.params.findIndex(function(param) {
                    var isHistoric = param.isHistoric;
                    return isHistoric;
                });
                var memoized = null;
                var _this = this;
                var callWithRegistry = function() {
                    var _ref = _async_to_generator(function(isScale, values) {
                        var _this$getBlockHash, blockId, blockHash, _tmp, registry, _tmp1, params, result;
                        return __generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    blockId = hashIndex === -1 ? null : values[hashIndex];
                                    if (!(blockId && def.params[hashIndex].type === "BlockNumber")) return [
                                        3,
                                        2
                                    ];
                                    return [
                                        4,
                                        (_this$getBlockHash = __privateGet(_this, _getBlockHash)) == null ? void 0 : _this$getBlockHash.call(_this, blockId)
                                    ];
                                case 1:
                                    _tmp = _state.sent();
                                    return [
                                        3,
                                        3
                                    ];
                                case 2:
                                    _tmp = blockId;
                                    _state.label = 3;
                                case 3:
                                    blockHash = _tmp;
                                    if (!(isScale && blockHash && __privateGet(_this, _getBlockRegistry))) return [
                                        3,
                                        5
                                    ];
                                    return [
                                        4,
                                        __privateGet(_this, _getBlockRegistry).call(_this, u8aToU8a(blockHash))
                                    ];
                                case 4:
                                    _tmp1 = _state.sent();
                                    return [
                                        3,
                                        6
                                    ];
                                case 5:
                                    _tmp1 = {
                                        registry: __privateGet(_this, _registryDefault)
                                    };
                                    _state.label = 6;
                                case 6:
                                    registry = _tmp1.registry;
                                    params = _this._formatInputs(registry, null, def, values);
                                    return [
                                        4,
                                        _this.provider.send(rpcName, params.map(function(p) {
                                            return p.toJSON();
                                        }), !!blockHash)
                                    ];
                                case 7:
                                    result = _state.sent();
                                    return [
                                        2,
                                        _this._formatResult(isScale, registry, blockHash, method, def, params, result)
                                    ];
                            }
                        });
                    });
                    return function callWithRegistry(isScale, values) {
                        return _ref.apply(this, arguments);
                    };
                }();
                var creator = function(isScale) {
                    return function() {
                        for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                            values[_key] = arguments[_key];
                        }
                        var isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
                        return new import_rxjs4.Observable(function(observer) {
                            callWithRegistry(isScale, values).then(function(value1) {
                                observer.next(value1);
                                observer.complete();
                            }).catch(function(error2) {
                                logErrorMessage(method, def, error2);
                                observer.error(error2);
                                observer.complete();
                            });
                            return function() {
                                if (isScale) {
                                    var _memoized;
                                    var _memoized1;
                                    (_memoized1 = memoized) == null ? void 0 : (_memoized = _memoized1).unmemoize.apply(_memoized, _to_consumable_array(values));
                                } else {
                                    var _memoized2_raw;
                                    var _memoized2;
                                    (_memoized2 = memoized) == null ? void 0 : (_memoized2_raw = _memoized2.raw).unmemoize.apply(_memoized2_raw, _to_consumable_array(values));
                                }
                            };
                        }).pipe(// eslint-disable-next-line deprecation/deprecation
                        (0, import_rxjs4.publishReplay)(1), // create a Replay(1)
                        isDelayed ? refCountDelay() : (0, import_rxjs4.refCount)());
                    };
                };
                memoized = this._memomize(creator, def);
                return memoized;
            }
        },
        {
            // create a subscriptor, it subscribes once and resolves with the id as subscribe
            key: "_createSubscriber",
            value: function _createSubscriber(param, errorHandler) {
                var paramsJson = param.paramsJson, subName = param.subName, subType = param.subType, update = param.update;
                var _this = this;
                return new Promise(function(resolve, reject) {
                    _this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(function(error2) {
                        errorHandler(error2);
                        reject(error2);
                    });
                });
            }
        },
        {
            key: "_createMethodSubscribe",
            value: function _createMethodSubscribe(section2, method, def) {
                var _this = this;
                var _def_pubsub = _sliced_to_array(def.pubsub, 3), updateType = _def_pubsub[0], subMethod = _def_pubsub[1], unsubMethod = _def_pubsub[2];
                var subName = "".concat(section2, "_").concat(subMethod);
                var unsubName = "".concat(section2, "_").concat(unsubMethod);
                var subType = "".concat(section2, "_").concat(updateType);
                var memoized = null;
                var creator = function(isScale) {
                    return function() {
                        for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){
                            values[_key] = arguments[_key];
                        }
                        return new import_rxjs4.Observable(function(observer) {
                            var subscriptionPromise = Promise.resolve(null);
                            var registry = __privateGet(_this, _registryDefault);
                            var errorHandler = function(error2) {
                                logErrorMessage(method, def, error2);
                                observer.error(error2);
                            };
                            try {
                                var params = _this._formatInputs(registry, null, def, values);
                                var paramsJson = params.map(function(p) {
                                    return p.toJSON();
                                });
                                var update = function(error2, result) {
                                    if (error2) {
                                        logErrorMessage(method, def, error2);
                                        return;
                                    }
                                    try {
                                        observer.next(_this._formatResult(isScale, registry, null, method, def, params, result));
                                    } catch (error3) {
                                        observer.error(error3);
                                    }
                                };
                                subscriptionPromise = _this._createSubscriber({
                                    paramsJson: paramsJson,
                                    subName: subName,
                                    subType: subType,
                                    update: update
                                }, errorHandler);
                            } catch (error2) {
                                errorHandler(error2);
                            }
                            return function() {
                                if (isScale) {
                                    var _memoized3;
                                    var _memoized31;
                                    (_memoized31 = memoized) == null ? void 0 : (_memoized3 = _memoized31).unmemoize.apply(_memoized3, _to_consumable_array(values));
                                } else {
                                    var _memoized4_raw;
                                    var _memoized4;
                                    (_memoized4 = memoized) == null ? void 0 : (_memoized4_raw = _memoized4.raw).unmemoize.apply(_memoized4_raw, _to_consumable_array(values));
                                }
                                subscriptionPromise.then(function(subscriptionId) {
                                    return isNull(subscriptionId) ? Promise.resolve(false) : _this.provider.unsubscribe(subType, unsubName, subscriptionId);
                                }).catch(function(error2) {
                                    return logErrorMessage(method, def, error2);
                                });
                            };
                        }).pipe(drr());
                    };
                };
                memoized = this._memomize(creator, def);
                return memoized;
            }
        },
        {
            key: "_formatInputs",
            value: function _formatInputs(registry, blockHash, def, inputs) {
                var reqArgCount = def.params.filter(function(param) {
                    var isOptional = param.isOptional;
                    return !isOptional;
                }).length;
                var optText = reqArgCount === def.params.length ? "" : " (".concat(def.params.length - reqArgCount, " optional)");
                if (inputs.length < reqArgCount || inputs.length > def.params.length) {
                    throw new Error("Expected ".concat(def.params.length, " parameters").concat(optText, ", ").concat(inputs.length, " found instead"));
                }
                return inputs.map(function(input, index) {
                    return registry.createTypeUnsafe(def.params[index].type, [
                        input
                    ], {
                        blockHash: blockHash
                    });
                });
            }
        },
        {
            key: "_formatOutput",
            value: function _formatOutput(registry, blockHash, method, rpc18, params, result) {
                var _this = this;
                if (rpc18.type === "StorageData") {
                    var key = params[0];
                    return this._formatStorageData(registry, blockHash, key, result);
                } else if (rpc18.type === "StorageChangeSet") {
                    var keys2 = params[0];
                    return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
                } else if (rpc18.type === "Vec<StorageChangeSet>") {
                    var mapped = result.map(function(param) {
                        var block = param.block, changes = param.changes;
                        return [
                            registry.createType("Hash", block),
                            _this._formatStorageSet(registry, block, params[0], changes)
                        ];
                    });
                    return method === "queryStorageAt" ? mapped[0][1] : mapped;
                }
                return registry.createTypeUnsafe(rpc18.type, [
                    result
                ], {
                    blockHash: blockHash
                });
            }
        },
        {
            key: "_formatStorageData",
            value: function _formatStorageData(registry, blockHash, key, value1) {
                var isEmpty = isNull(value1);
                var input = isEmpty ? null : isTreatAsHex(key) ? value1 : u8aToU8a(value1);
                return this._newType(registry, blockHash, key, input, isEmpty);
            }
        },
        {
            key: "_formatStorageSet",
            value: function _formatStorageSet(registry, blockHash, keys2, changes) {
                var _this = this;
                var withCache = keys2.length !== 1;
                return keys2.reduce(function(results, key, index) {
                    results.push(_this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
                    return results;
                }, []);
            }
        },
        {
            key: "_formatStorageSetEntry",
            value: function _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
                var hexKey = key.toHex();
                var found = changes.find(function(param) {
                    var _param = _sliced_to_array(param, 1), key2 = _param[0];
                    return key2 === hexKey;
                });
                var isNotFound = isUndefined(found);
                if (isNotFound && withCache) {
                    var cached = __privateGet(this, _storageCache).get(hexKey);
                    if (cached) {
                        return cached;
                    }
                }
                var value1 = isNotFound ? null : found[1];
                var isEmpty = isNull(value1);
                var input = isEmpty || isTreatAsHex(key) ? value1 : u8aToU8a(value1);
                var codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
                __privateGet(this, _storageCache).set(hexKey, codec);
                return codec;
            }
        },
        {
            key: "_newType",
            value: function _newType(registry, blockHash, key, input, isEmpty) {
                var entryIndex = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : -1;
                var type = key.outputType || "Raw";
                var meta = key.meta || EMPTY_META;
                var entryNum = entryIndex === -1 ? "" : " entry ".concat(entryIndex, ":");
                try {
                    return registry.createTypeUnsafe(type, [
                        isEmpty ? meta.fallback ? type.includes("Linkage<") ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [
                            input
                        ], {
                            blockHash: blockHash,
                            isPedantic: true
                        }) : input
                    ], {
                        blockHash: blockHash,
                        isFallback: isEmpty && !!meta.fallback,
                        isOptional: meta.modifier.isOptional,
                        isPedantic: !meta.modifier.isOptional
                    });
                } catch (error2) {
                    throw new Error("Unable to decode storage ".concat(key.section || "unknown", ".").concat(key.method || "unknown", ":").concat(entryNum, ": ").concat(error2.message));
                }
            }
        }
    ]);
    return RpcCore;
}();
_instanceId = new WeakMap();
_registryDefault = new WeakMap();
_getBlockRegistry = new WeakMap();
_getBlockHash = new WeakMap();
_storageCache = new WeakMap();
// ../../node_modules/@polkadot/api-derive/util/blockNumber.js
function unwrapBlockNumber(hdr) {
    return isCompact(hdr.number) ? hdr.number.unwrap() : hdr.number;
}
// ../../node_modules/@polkadot/api-derive/util/cacheImpl.js
var deriveNoopCache = {
    del: function() {
        return void 0;
    },
    forEach: function() {
        return void 0;
    },
    get: function() {
        return void 0;
    },
    set: function(_23, value1) {
        return value1;
    }
};
// ../../node_modules/@polkadot/api-derive/util/cache.js
var CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
var deriveCache;
function wrapCache(keyStart, cache) {
    return {
        del: function(partial) {
            return cache.del("".concat(keyStart).concat(partial));
        },
        forEach: cache.forEach,
        get: function(partial) {
            var key = "".concat(keyStart).concat(partial);
            var cached = cache.get(key);
            if (cached) {
                cached.x = Date.now();
                cache.set(key, cached);
                return cached.v;
            }
            return void 0;
        },
        set: function(partial, v) {
            cache.set("".concat(keyStart).concat(partial), {
                v: v,
                x: Date.now()
            });
        }
    };
}
function clearCache(cache) {
    var now = Date.now();
    var all3 = [];
    cache.forEach(function(key, param) {
        var x = param.x;
        now - x > CHACHE_EXPIRY && all3.push(key);
    });
    all3.forEach(function(key) {
        return cache.del(key);
    });
}
function setDeriveCache() {
    var prefix2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", cache = arguments.length > 1 ? arguments[1] : void 0;
    deriveCache = cache ? wrapCache("derive:".concat(prefix2, ":"), cache) : deriveNoopCache;
    if (cache) {
        clearCache(cache);
    }
}
setDeriveCache();
// ../../node_modules/@polkadot/api-derive/util/first.js
var import_rxjs5 = __toESM(require_cjs(), 1);
function firstObservable(obs) {
    return obs.pipe((0, import_rxjs5.map)(function(param) {
        var _param = _sliced_to_array(param, 1), a = _param[0];
        return a;
    }));
}
function firstMemo(fn) {
    return function(instanceId, api) {
        return memo(instanceId, function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return firstObservable(fn.apply(void 0, [
                api
            ].concat(_to_consumable_array(args))));
        });
    };
}
// ../../node_modules/@polkadot/api-derive/util/lazy.js
function lazyDeriveSection(result, section2, getKeys, creator) {
    lazyMethod(result, section2, function() {
        return lazyMethods({}, getKeys(section2), function(method) {
            return creator(section2, method);
        });
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/accountId.js
function accountId(instanceId, api) {
    return memo(instanceId, function(address) {
        var decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
        if (decoded.length > 8) {
            return (0, import_rxjs6.of)(api.registry.createType("AccountId", decoded));
        }
        var accountIndex = api.registry.createType("AccountIndex", decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, import_rxjs6.map)(function(a) {
            return assertReturn(a, "Unable to retrieve accountId");
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/flags.js
var import_rxjs7 = __toESM(require_cjs(), 1);
function parseFlags(address, param) {
    var _param = _sliced_to_array(param, 5), electionsMembers = _param[0], councilMembers = _param[1], technicalCommitteeMembers = _param[2], societyMembers = _param[3], sudoKey = _param[4];
    var addrStr = address && address.toString();
    var isIncluded = function(id2) {
        return id2.toString() === addrStr;
    };
    return {
        isCouncil: ((electionsMembers == null ? void 0 : electionsMembers.map(function(r) {
            return Array.isArray(r) ? r[0] : r.who;
        })) || councilMembers || []).some(isIncluded),
        isSociety: (societyMembers || []).some(isIncluded),
        isSudo: (sudoKey == null ? void 0 : sudoKey.toString()) === addrStr,
        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
}
function _flags(instanceId, api) {
    return memo(instanceId, function() {
        var _ref, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;
        var results = [
            void 0,
            [],
            [],
            [],
            void 0
        ];
        var calls = [
            (_ref = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections) == null ? void 0 : _ref.members,
            (_api$query$council = api.query.council) == null ? void 0 : _api$query$council.members,
            (_api$query$technicalC = api.query.technicalCommittee) == null ? void 0 : _api$query$technicalC.members,
            (_api$query$society = api.query.society) == null ? void 0 : _api$query$society.members,
            (_api$query$sudo = api.query.sudo) == null ? void 0 : _api$query$sudo.key
        ];
        var filtered = calls.filter(function(c) {
            return c;
        });
        if (!filtered.length) {
            return (0, import_rxjs7.of)(results);
        }
        return api.queryMulti(filtered).pipe((0, import_rxjs7.map)(function(values) {
            var resultIndex = -1;
            for(var i = 0; i < calls.length; i++){
                if (isFunction(calls[i])) {
                    results[i] = values[++resultIndex];
                }
            }
            return results;
        }));
    });
}
function flags(instanceId, api) {
    return memo(instanceId, function(address) {
        return api.derive.accounts._flags().pipe((0, import_rxjs7.map)(function(r) {
            return parseFlags(address, r);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/idAndIndex.js
var import_rxjs8 = __toESM(require_cjs(), 1);
function idAndIndex(instanceId, api) {
    return memo(instanceId, function(address) {
        try {
            var decoded = isU8a(address) ? address : decodeAddress((address || "").toString());
            if (decoded.length > 8) {
                var accountId2 = api.registry.createType("AccountId", decoded);
                return api.derive.accounts.idToIndex(accountId2).pipe((0, import_rxjs8.map)(function(accountIndex2) {
                    return [
                        accountId2,
                        accountIndex2
                    ];
                }));
            }
            var accountIndex = api.registry.createType("AccountIndex", decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, import_rxjs8.map)(function(accountId2) {
                return [
                    accountId2,
                    accountIndex
                ];
            }));
        } catch (error2) {
            return (0, import_rxjs8.of)([
                void 0,
                void 0
            ]);
        }
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/idToIndex.js
var import_rxjs9 = __toESM(require_cjs(), 1);
function idToIndex(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        return api.derive.accounts.indexes().pipe((0, import_rxjs9.map)(function(indexes3) {
            return (indexes3 || {})[accountId2.toString()];
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/identity.js
var import_rxjs10 = __toESM(require_cjs(), 1);
var UNDEF_HEX = {
    toHex: function() {
        return void 0;
    }
};
function dataAsString(data) {
    return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
}
function extractOther(additional) {
    return additional.reduce(function(other, param) {
        var _param = _sliced_to_array(param, 2), _key = _param[0], _value = _param[1];
        var key = dataAsString(_key);
        var value1 = dataAsString(_value);
        if (key && value1) {
            other[key] = value1;
        }
        return other;
    }, {});
}
function extractIdentity(identityOfOpt, superOf) {
    if (!(identityOfOpt != null && identityOfOpt.isSome)) {
        return {
            judgements: []
        };
    }
    var _identityOfOpt_unwrap = identityOfOpt.unwrap(), info6 = _identityOfOpt_unwrap.info, judgements = _identityOfOpt_unwrap.judgements;
    var topDisplay = dataAsString(info6.display);
    return {
        display: superOf && dataAsString(superOf[1]) || topDisplay,
        displayParent: superOf && topDisplay,
        email: dataAsString(info6.email),
        image: dataAsString(info6.image),
        judgements: judgements,
        legal: dataAsString(info6.legal),
        other: extractOther(info6.additional),
        parent: superOf && superOf[0],
        pgp: info6.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
        riot: dataAsString(info6.riot),
        twitter: dataAsString(info6.twitter),
        web: dataAsString(info6.web)
    };
}
function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt != null && identityOfOpt.isSome) {
        return (0, import_rxjs10.of)([
            identityOfOpt,
            void 0
        ]);
    } else if (superOfOpt != null && superOfOpt.isSome) {
        var superOf = superOfOpt.unwrap();
        return (0, import_rxjs10.combineLatest)([
            api.derive.accounts._identity(superOf[0]).pipe((0, import_rxjs10.map)(function(param) {
                var _param = _sliced_to_array(param, 1), info6 = _param[0];
                return info6;
            })),
            (0, import_rxjs10.of)(superOf)
        ]);
    }
    return (0, import_rxjs10.of)([
        void 0,
        void 0
    ]);
}
function _identity(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        var _api$query$identity;
        return accountId2 && (_api$query$identity = api.query.identity) != null && _api$query$identity.identityOf ? (0, import_rxjs10.combineLatest)([
            api.query.identity.identityOf(accountId2),
            api.query.identity.superOf(accountId2)
        ]) : (0, import_rxjs10.of)([
            void 0,
            void 0
        ]);
    });
}
function identity(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        return api.derive.accounts._identity(accountId2).pipe((0, import_rxjs10.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), identityOfOpt = _param[0], superOfOpt = _param[1];
            return getParent(api, identityOfOpt, superOfOpt);
        }), (0, import_rxjs10.map)(function(param) {
            var _param = _sliced_to_array(param, 2), identityOfOpt = _param[0], superOf = _param[1];
            return extractIdentity(identityOfOpt, superOf);
        }));
    });
}
var hasIdentity = firstMemo(function(api, accountId2) {
    return api.derive.accounts.hasIdentityMulti([
        accountId2
    ]);
});
function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, function(accountIds) {
        var _api$query$identity2;
        return (_api$query$identity2 = api.query.identity) != null && _api$query$identity2.identityOf ? (0, import_rxjs10.combineLatest)([
            api.query.identity.identityOf.multi(accountIds),
            api.query.identity.superOf.multi(accountIds)
        ]).pipe((0, import_rxjs10.map)(function(param) {
            var _param = _sliced_to_array(param, 2), identities = _param[0], supers = _param[1];
            return identities.map(function(identityOfOpt, index) {
                var superOfOpt = supers[index];
                var parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
                var display;
                if (identityOfOpt && identityOfOpt.isSome) {
                    var value1 = dataAsString(identityOfOpt.unwrap().info.display);
                    if (value1 && !isHex(value1)) {
                        display = value1;
                    }
                }
                return {
                    display: display,
                    hasIdentity: !!(display || parentId),
                    parentId: parentId
                };
            });
        })) : (0, import_rxjs10.of)(accountIds.map(function() {
            return {
                hasIdentity: false
            };
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/indexToId.js
var import_rxjs11 = __toESM(require_cjs(), 1);
function indexToId(instanceId, api) {
    return memo(instanceId, function(accountIndex) {
        return api.query.indices ? api.query.indices.accounts(accountIndex).pipe((0, import_rxjs11.map)(function(optResult) {
            return optResult.unwrapOr([])[0];
        })) : (0, import_rxjs11.of)(void 0);
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/indexes.js
var import_rxjs12 = __toESM(require_cjs(), 1);
var indicesCache = null;
function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe((0, import_rxjs12.map)(function(entries) {
        return entries.reduce(function(indexes3, param) {
            var _param = _sliced_to_array(param, 2), key = _param[0], idOpt = _param[1];
            if (idOpt.isSome) {
                indexes3[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
            }
            return indexes3;
        }, {});
    }));
}
function indexes(instanceId, api) {
    return memo(instanceId, function() {
        return indicesCache ? (0, import_rxjs12.of)(indicesCache) : (api.query.indices ? queryAccounts(api).pipe((0, import_rxjs12.startWith)({})) : (0, import_rxjs12.of)({})).pipe((0, import_rxjs12.map)(function(indices) {
            indicesCache = indices;
            return indices;
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/accounts/info.js
var import_rxjs13 = __toESM(require_cjs(), 1);
function retrieveNick(api, accountId2) {
    var _api$query$nicks;
    return (accountId2 && (_api$query$nicks = api.query.nicks) != null && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId2) : (0, import_rxjs13.of)(void 0)).pipe((0, import_rxjs13.map)(function(nameOf) {
        return nameOf != null && nameOf.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : void 0;
    }));
}
function info(instanceId, api) {
    return memo(instanceId, function(address) {
        return api.derive.accounts.idAndIndex(address).pipe((0, import_rxjs13.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), accountId2 = _param[0], accountIndex = _param[1];
            return (0, import_rxjs13.combineLatest)([
                (0, import_rxjs13.of)({
                    accountId: accountId2,
                    accountIndex: accountIndex
                }),
                api.derive.accounts.identity(accountId2),
                retrieveNick(api, accountId2)
            ]);
        }), (0, import_rxjs13.map)(function(param) {
            var _param = _sliced_to_array(param, 3), _param_ = _param[0], accountId2 = _param_.accountId, accountIndex = _param_.accountIndex, identity3 = _param[1], nickname = _param[2];
            return {
                accountId: accountId2,
                accountIndex: accountIndex,
                identity: identity3,
                nickname: nickname
            };
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/alliance/index.js
var alliance_exports = {};
__export(alliance_exports, {
    hasProposals: function() {
        return hasProposals2;
    },
    members: function() {
        return members2;
    },
    prime: function() {
        return prime2;
    },
    proposal: function() {
        return proposal2;
    },
    proposalCount: function() {
        return proposalCount2;
    },
    proposalHashes: function() {
        return proposalHashes2;
    },
    proposals: function() {
        return proposals2;
    }
});
// ../../node_modules/@polkadot/api-derive/collective/helpers.js
var import_rxjs14 = __toESM(require_cjs(), 1);
function getInstance(api, section2) {
    var instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
    var name = instances && instances.length ? instances[0] : section2;
    return api.query[name];
}
function withSection(section2, fn) {
    return function(instanceId, api) {
        return memo(instanceId, fn(getInstance(api, section2), api, instanceId));
    };
}
function callMethod(method, empty2) {
    return function(section2) {
        return withSection(section2, function(query2) {
            return function() {
                return isFunction(query2 == null ? void 0 : query2[method]) ? query2[method]() : (0, import_rxjs14.of)(empty2);
            };
        });
    };
}
// ../../node_modules/@polkadot/api-derive/collective/members.js
var members = callMethod("members", []);
// ../../node_modules/@polkadot/api-derive/collective/prime.js
var import_rxjs15 = __toESM(require_cjs(), 1);
function prime(section2) {
    return withSection(section2, function(query2) {
        return function() {
            return isFunction(query2 == null ? void 0 : query2.prime) ? query2.prime().pipe((0, import_rxjs15.map)(function(o) {
                return o.unwrapOr(null);
            })) : (0, import_rxjs15.of)(null);
        };
    });
}
// ../../node_modules/@polkadot/api-derive/collective/proposals.js
var import_rxjs16 = __toESM(require_cjs(), 1);
function parse(api, param) {
    var _param = _sliced_to_array(param, 3), hashes = _param[0], proposals8 = _param[1], votes2 = _param[2];
    return proposals8.map(function(o, index) {
        return {
            hash: api.registry.createType("Hash", hashes[index]),
            proposal: o && o.isSome ? o.unwrap() : null,
            votes: votes2[index].unwrapOr(null)
        };
    });
}
function _proposalsFrom(api, query2, hashes) {
    return (isFunction(query2 == null ? void 0 : query2.proposals) && hashes.length ? (0, import_rxjs16.combineLatest)([
        (0, import_rxjs16.of)(hashes),
        // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
        // however we have had cases on Edgeware where the indices have moved around after an
        // upgrade, which results in invalid on-chain data
        query2.proposalOf.multi(hashes).pipe((0, import_rxjs16.catchError)(function() {
            return (0, import_rxjs16.of)(hashes.map(function() {
                return null;
            }));
        })),
        query2.voting.multi(hashes)
    ]) : (0, import_rxjs16.of)([
        [],
        [],
        []
    ])).pipe((0, import_rxjs16.map)(function(r) {
        return parse(api, r);
    }));
}
function hasProposals(section2) {
    return withSection(section2, function(query2) {
        return function() {
            return (0, import_rxjs16.of)(isFunction(query2 == null ? void 0 : query2.proposals));
        };
    });
}
function proposals(section2) {
    return withSection(section2, function(query2, api) {
        return function() {
            return api.derive[section2].proposalHashes().pipe((0, import_rxjs16.switchMap)(function(all3) {
                return _proposalsFrom(api, query2, all3);
            }));
        };
    });
}
function proposal(section2) {
    return withSection(section2, function(query2, api) {
        return function(hash3) {
            return isFunction(query2 == null ? void 0 : query2.proposals) ? firstObservable(_proposalsFrom(api, query2, [
                hash3
            ])) : (0, import_rxjs16.of)(null);
        };
    });
}
var proposalCount = callMethod("proposalCount", null);
var proposalHashes = callMethod("proposals", []);
// ../../node_modules/@polkadot/api-derive/alliance/index.js
var members2 = members("allianceMotion");
var hasProposals2 = hasProposals("allianceMotion");
var proposal2 = proposal("allianceMotion");
var proposalCount2 = proposalCount("allianceMotion");
var proposalHashes2 = proposalHashes("allianceMotion");
var proposals2 = proposals("allianceMotion");
var prime2 = prime("allianceMotion");
// ../../node_modules/@polkadot/api-derive/bagsList/index.js
var bagsList_exports = {};
__export(bagsList_exports, {
    _getIds: function() {
        return _getIds;
    },
    all: function() {
        return all;
    },
    expand: function() {
        return expand;
    },
    get: function() {
        return get;
    },
    getExpanded: function() {
        return getExpanded;
    },
    listNodes: function() {
        return listNodes;
    }
});
// ../../node_modules/@polkadot/api-derive/bagsList/get.js
var import_rxjs17 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/bagsList/util.js
function getQueryInterface(api) {
    return(// latest substrate (latest always first)
    api.query.voterBagsList || // previous substrate
    api.query.bagsList || // latest polkadot
    api.query.voterList);
}
// ../../node_modules/@polkadot/api-derive/bagsList/get.js
function orderBags(ids, bags) {
    var sorted = ids.map(function(id2, index) {
        return {
            bag: bags[index].unwrapOr(null),
            id: id2,
            key: id2.toString()
        };
    }).sort(function(a, b) {
        return b.id.cmp(a.id);
    });
    var max3 = sorted.length - 1;
    return sorted.map(function(entry, index) {
        return objectSpread(entry, {
            bagLower: index === max3 ? BN_ZERO : sorted[index + 1].id,
            bagUpper: entry.id,
            index: index
        });
    });
}
function _getIds(instanceId, api) {
    var query2 = getQueryInterface(api);
    return memo(instanceId, function(_ids) {
        var ids = _ids.map(function(id2) {
            return bnToBn(id2);
        });
        return ids.length ? query2.listBags.multi(ids).pipe((0, import_rxjs17.map)(function(bags) {
            return orderBags(ids, bags);
        })) : (0, import_rxjs17.of)([]);
    });
}
function all(instanceId, api) {
    var query2 = getQueryInterface(api);
    return memo(instanceId, function() {
        return query2.listBags.keys().pipe((0, import_rxjs17.switchMap)(function(keys2) {
            return api.derive.bagsList._getIds(keys2.map(function(param) {
                var _param_args = _sliced_to_array(param.args, 1), id2 = _param_args[0];
                return id2;
            }));
        }), (0, import_rxjs17.map)(function(list) {
            return list.filter(function(param) {
                var bag = param.bag;
                return bag;
            });
        }));
    });
}
function get(instanceId, api) {
    return memo(instanceId, function(id2) {
        return api.derive.bagsList._getIds([
            bnToBn(id2)
        ]).pipe((0, import_rxjs17.map)(function(bags) {
            return bags[0];
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/bagsList/getExpanded.js
var import_rxjs18 = __toESM(require_cjs(), 1);
function expand(instanceId, api) {
    return memo(instanceId, function(bag) {
        return api.derive.bagsList.listNodes(bag.bag).pipe((0, import_rxjs18.map)(function(nodes) {
            return objectSpread({
                nodes: nodes
            }, bag);
        }));
    });
}
function getExpanded(instanceId, api) {
    return memo(instanceId, function(id2) {
        return api.derive.bagsList.get(id2).pipe((0, import_rxjs18.switchMap)(function(bag) {
            return api.derive.bagsList.expand(bag);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/bagsList/listNodes.js
var import_rxjs19 = __toESM(require_cjs(), 1);
function traverseLinks(api, head) {
    var subject = new import_rxjs19.BehaviorSubject(head);
    var query2 = getQueryInterface(api);
    return subject.pipe((0, import_rxjs19.switchMap)(function(account3) {
        return query2.listNodes(account3);
    }), (0, import_rxjs19.tap)(function(node) {
        nextTick(function() {
            node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
        });
    }), (0, import_rxjs19.toArray)(), // toArray since we want to startSubject to be completed
    (0, import_rxjs19.map)(function(all3) {
        return all3.map(function(o) {
            return o.unwrap();
        });
    }));
}
function listNodes(instanceId, api) {
    return memo(instanceId, function(bag) {
        return bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : (0, import_rxjs19.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/balances/index.js
var balances_exports = {};
__export(balances_exports, {
    account: function() {
        return account;
    },
    all: function() {
        return all2;
    },
    votingBalance: function() {
        return votingBalance;
    },
    votingBalances: function() {
        return votingBalances;
    }
});
// ../../node_modules/@polkadot/api-derive/balances/all.js
var import_rxjs20 = __toESM(require_cjs(), 1);
var VESTING_ID = "0x76657374696e6720";
function calcLocked(api, bestNumber2, locks2) {
    var lockedBalance = api.registry.createType("Balance");
    var lockedBreakdown = [];
    var vestingLocked = api.registry.createType("Balance");
    var allLocked = false;
    if (Array.isArray(locks2)) {
        lockedBreakdown = locks2.filter(function(param) {
            var until = param.until;
            return !until || bestNumber2 && until.gt(bestNumber2);
        });
        allLocked = lockedBreakdown.some(function(param) {
            var amount = param.amount;
            return amount && amount.isMax();
        });
        vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(function(param) {
            var id2 = param.id;
            return id2.eq(VESTING_ID);
        }).reduce(function(result, param) {
            var amount = param.amount;
            return result.iadd(amount);
        }, new import_bn.default(0)));
        var notAll = lockedBreakdown.filter(function(param) {
            var amount = param.amount;
            return amount && !amount.isMax();
        });
        if (notAll.length) {
            lockedBalance = api.registry.createType("Balance", bnMax.apply(void 0, _to_consumable_array(notAll.map(function(param) {
                var amount = param.amount;
                return amount;
            }))));
        }
    }
    return {
        allLocked: allLocked,
        lockedBalance: lockedBalance,
        lockedBreakdown: lockedBreakdown,
        vestingLocked: vestingLocked
    };
}
function calcShared(api, bestNumber2, data, locks2) {
    var _calcLocked = calcLocked(api, bestNumber2, locks2), allLocked = _calcLocked.allLocked, lockedBalance = _calcLocked.lockedBalance, lockedBreakdown = _calcLocked.lockedBreakdown, vestingLocked = _calcLocked.vestingLocked;
    return objectSpread({}, data, {
        availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new import_bn.default(0), data != null && data.freeBalance ? data.freeBalance.sub(lockedBalance) : new import_bn.default(0))),
        lockedBalance: lockedBalance,
        lockedBreakdown: lockedBreakdown,
        vestingLocked: vestingLocked
    });
}
function calcVesting(bestNumber2, shared, _vesting) {
    var vesting = _vesting || [];
    var isVesting = !shared.vestingLocked.isZero();
    var vestedBalances = vesting.map(function(param) {
        var locked = param.locked, perBlock = param.perBlock, startingBlock = param.startingBlock;
        return bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO;
    });
    var vestedBalance = vestedBalances.reduce(function(all3, value1) {
        return all3.iadd(value1);
    }, new import_bn.default(0));
    var vestingTotal = vesting.reduce(function(all3, param) {
        var locked = param.locked;
        return all3.iadd(locked);
    }, new import_bn.default(0));
    return {
        isVesting: isVesting,
        vestedBalance: vestedBalance,
        vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
        vesting: vesting.map(function(param, index) {
            var locked = param.locked, perBlock = param.perBlock, startingBlock = param.startingBlock;
            return {
                endBlock: locked.div(perBlock).iadd(startingBlock),
                locked: locked,
                perBlock: perBlock,
                startingBlock: startingBlock,
                vested: vestedBalances[index]
            };
        }).filter(function(param) {
            var locked = param.locked;
            return !locked.isZero();
        }),
        vestingTotal: vestingTotal
    };
}
function calcBalances(api, result) {
    var _result = _sliced_to_array(result, 3), data = _result[0], _result_ = _sliced_to_array(_result[1], 3), vesting = _result_[0], allLocks = _result_[1], namedReserves = _result_[2], bestNumber2 = _result[2];
    var shared = calcShared(api, bestNumber2, data, allLocks[0]);
    return objectSpread(shared, calcVesting(bestNumber2, shared, vesting), {
        accountId: data.accountId,
        accountNonce: data.accountNonce,
        additional: allLocks.slice(1).map(function(l13, index) {
            return calcShared(api, bestNumber2, data.additional[index], l13);
        }),
        namedReserves: namedReserves
    });
}
function queryOld(api, accountId2) {
    return (0, import_rxjs20.combineLatest)([
        api.query.balances.locks(accountId2),
        api.query.balances.vesting(accountId2)
    ]).pipe((0, import_rxjs20.map)(function(param) {
        var _param = _sliced_to_array(param, 2), locks2 = _param[0], optVesting = _param[1];
        var vestingNew = null;
        if (optVesting.isSome) {
            var _optVesting_unwrap = optVesting.unwrap(), locked = _optVesting_unwrap.offset, perBlock = _optVesting_unwrap.perBlock, startingBlock = _optVesting_unwrap.startingBlock;
            vestingNew = api.registry.createType("VestingInfo", {
                locked: locked,
                perBlock: perBlock,
                startingBlock: startingBlock
            });
        }
        return [
            vestingNew ? [
                vestingNew
            ] : null,
            [
                locks2
            ],
            []
        ];
    }));
}
var isNonNullable = function(nullable) {
    return !!nullable;
};
function createCalls(calls) {
    return [
        calls.map(function(c) {
            return !c;
        }),
        calls.filter(isNonNullable)
    ];
}
function queryCurrent(api, accountId2) {
    var balanceInstances = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [
        "balances"
    ];
    var _api$query$vesting;
    var _createCalls = _sliced_to_array(createCalls(balanceInstances.map(function(m) {
        var _m, _api$query;
        return ((_m = api.derive[m]) == null ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) == null ? void 0 : _api$query.locks);
    })), 2), lockEmpty = _createCalls[0], lockQueries = _createCalls[1];
    var _createCalls1 = _sliced_to_array(createCalls(balanceInstances.map(function(m) {
        var _api$query2;
        return (_api$query2 = api.query[m]) == null ? void 0 : _api$query2.reserves;
    })), 2), reserveEmpty = _createCalls1[0], reserveQueries = _createCalls1[1];
    return (0, import_rxjs20.combineLatest)([
        (_api$query$vesting = api.query.vesting) != null && _api$query$vesting.vesting ? api.query.vesting.vesting(accountId2) : (0, import_rxjs20.of)(api.registry.createType("Option<VestingInfo>")),
        lockQueries.length ? (0, import_rxjs20.combineLatest)(lockQueries.map(function(c) {
            return c(accountId2);
        })) : (0, import_rxjs20.of)([]),
        reserveQueries.length ? (0, import_rxjs20.combineLatest)(reserveQueries.map(function(c) {
            return c(accountId2);
        })) : (0, import_rxjs20.of)([])
    ]).pipe((0, import_rxjs20.map)(function(param) {
        var _param = _sliced_to_array(param, 3), opt = _param[0], locks2 = _param[1], reserves = _param[2];
        var offsetLock = -1;
        var offsetReserve = -1;
        var vesting = opt.unwrapOr(null);
        return [
            vesting ? Array.isArray(vesting) ? vesting : [
                vesting
            ] : null,
            lockEmpty.map(function(e) {
                return e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock];
            }),
            reserveEmpty.map(function(e) {
                return e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve];
            })
        ];
    }));
}
function all2(instanceId, api) {
    var balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    return memo(instanceId, function(address) {
        var _api$query$system, _api$query$balances;
        return (0, import_rxjs20.combineLatest)([
            api.derive.balances.account(address),
            isFunction((_api$query$system = api.query.system) == null ? void 0 : _api$query$system.account) || isFunction((_api$query$balances = api.query.balances) == null ? void 0 : _api$query$balances.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
        ]).pipe((0, import_rxjs20.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), account3 = _param[0], locks2 = _param[1];
            return (0, import_rxjs20.combineLatest)([
                (0, import_rxjs20.of)(account3),
                (0, import_rxjs20.of)(locks2),
                api.derive.chain.bestNumber()
            ]);
        }), (0, import_rxjs20.map)(function(result) {
            return calcBalances(api, result);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/balances/account.js
var import_rxjs21 = __toESM(require_cjs(), 1);
function zeroBalance(api) {
    return api.registry.createType("Balance");
}
function getBalance(api, param) {
    var _param = _sliced_to_array(param, 4), freeBalance = _param[0], reservedBalance = _param[1], frozenFee = _param[2], frozenMisc = _param[3];
    var votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
    return {
        freeBalance: freeBalance,
        frozenFee: frozenFee,
        frozenMisc: frozenMisc,
        reservedBalance: reservedBalance,
        votingBalance: votingBalance2
    };
}
function calcBalances2(api, param) {
    var _param = _to_array(param), accountId2 = _param[0], _param_ = _to_array(_param[1]), accountNonce = _param_[0], _param__ = _to_array(_param_[1]), primary = _param__[0], additional = _param__.slice(1);
    return objectSpread({
        accountId: accountId2,
        accountNonce: accountNonce,
        additional: additional.map(function(b) {
            return getBalance(api, b);
        })
    }, getBalance(api, primary));
}
function queryBalancesFree(api, accountId2) {
    return (0, import_rxjs21.combineLatest)([
        api.query.balances.freeBalance(accountId2),
        api.query.balances.reservedBalance(accountId2),
        api.query.system.accountNonce(accountId2)
    ]).pipe((0, import_rxjs21.map)(function(param) {
        var _param = _sliced_to_array(param, 3), freeBalance = _param[0], reservedBalance = _param[1], accountNonce = _param[2];
        return [
            accountNonce,
            [
                [
                    freeBalance,
                    reservedBalance,
                    zeroBalance(api),
                    zeroBalance(api)
                ]
            ]
        ];
    }));
}
function queryNonceOnly(api, accountId2) {
    var fill = function(nonce) {
        return [
            nonce,
            [
                [
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api),
                    zeroBalance(api)
                ]
            ]
        ];
    };
    return isFunction(api.query.system.account) ? api.query.system.account(accountId2).pipe((0, import_rxjs21.map)(function(param) {
        var nonce = param.nonce;
        return fill(nonce);
    })) : isFunction(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId2).pipe((0, import_rxjs21.map)(function(nonce) {
        return fill(nonce);
    })) : (0, import_rxjs21.of)(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId2) {
    var modules = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [
        "balances"
    ];
    var balances = modules.map(function(m) {
        var _m, _api$query$m;
        return ((_m = api.derive[m]) == null ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) == null ? void 0 : _api$query$m.account);
    }).filter(function(q) {
        return isFunction(q);
    });
    var extract = function(nonce, data) {
        return [
            nonce,
            data.map(function(param) {
                var feeFrozen = param.feeFrozen, free = param.free, miscFrozen = param.miscFrozen, reserved = param.reserved;
                return [
                    free,
                    reserved,
                    feeFrozen,
                    miscFrozen
                ];
            })
        ];
    };
    return balances.length ? isFunction(api.query.system.account) ? (0, import_rxjs21.combineLatest)([
        api.query.system.account(accountId2)
    ].concat(_to_consumable_array(balances.map(function(c) {
        return c(accountId2);
    })))).pipe((0, import_rxjs21.map)(function(param) {
        var _param = _to_array(param), nonce = _param[0].nonce, balances2 = _param.slice(1);
        return extract(nonce, balances2);
    })) : (0, import_rxjs21.combineLatest)([
        api.query.system.accountNonce(accountId2)
    ].concat(_to_consumable_array(balances.map(function(c) {
        return c(accountId2);
    })))).pipe((0, import_rxjs21.map)(function(param) {
        var _param = _to_array(param), nonce = _param[0], balances2 = _param.slice(1);
        return extract(nonce, balances2);
    })) : queryNonceOnly(api, accountId2);
}
function querySystemAccount(api, accountId2) {
    return api.query.system.account(accountId2).pipe((0, import_rxjs21.map)(function(infoOrTuple) {
        var data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
        var nonce = infoOrTuple.nonce || infoOrTuple[0];
        if (!data || data.isEmpty) {
            return [
                nonce,
                [
                    [
                        zeroBalance(api),
                        zeroBalance(api),
                        zeroBalance(api),
                        zeroBalance(api)
                    ]
                ]
            ];
        }
        var feeFrozen = data.feeFrozen, free = data.free, miscFrozen = data.miscFrozen, reserved = data.reserved;
        return [
            nonce,
            [
                [
                    free,
                    reserved,
                    feeFrozen,
                    miscFrozen
                ]
            ]
        ];
    }));
}
function account(instanceId, api) {
    var balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
    var nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
    return memo(instanceId, function(address) {
        return api.derive.accounts.accountId(address).pipe((0, import_rxjs21.switchMap)(function(accountId2) {
            var _api$query$system, _api$query$balances, _api$query$balances2;
            return accountId2 ? (0, import_rxjs21.combineLatest)([
                (0, import_rxjs21.of)(accountId2),
                nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction((_api$query$system = api.query.system) == null ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId2) : isFunction((_api$query$balances = api.query.balances) == null ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId2) : isFunction((_api$query$balances2 = api.query.balances) == null ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
            ]) : (0, import_rxjs21.of)([
                api.registry.createType("AccountId"),
                [
                    api.registry.createType("Index"),
                    [
                        [
                            zeroBalance(api),
                            zeroBalance(api),
                            zeroBalance(api),
                            zeroBalance(api)
                        ]
                    ]
                ]
            ]);
        }), (0, import_rxjs21.map)(function(result) {
            return calcBalances2(api, result);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/balances/votingBalances.js
var import_rxjs22 = __toESM(require_cjs(), 1);
function votingBalances(instanceId, api) {
    return memo(instanceId, function(addresses) {
        return !addresses || !addresses.length ? (0, import_rxjs22.of)([]) : (0, import_rxjs22.combineLatest)(addresses.map(function(accountId2) {
            return api.derive.balances.account(accountId2);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/balances/index.js
var votingBalance = all2;
// ../../node_modules/@polkadot/api-derive/bounties/index.js
var bounties_exports = {};
__export(bounties_exports, {
    bounties: function() {
        return bounties;
    }
});
// ../../node_modules/@polkadot/api-derive/bounties/bounties.js
var import_rxjs23 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
function filterBountiesProposals(api, allProposals) {
    var bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    var bountyProposalCalls = [
        bountyTxBase.approveBounty,
        bountyTxBase.closeBounty,
        bountyTxBase.proposeCurator,
        bountyTxBase.unassignCurator
    ];
    return allProposals.filter(function(proposal6) {
        return bountyProposalCalls.find(function(bountyCall) {
            return proposal6.proposal && bountyCall.is(proposal6.proposal);
        });
    });
}
// ../../node_modules/@polkadot/api-derive/bounties/bounties.js
function parseResult(param) {
    var _param = _sliced_to_array(param, 4), maybeBounties = _param[0], maybeDescriptions = _param[1], ids = _param[2], bountyProposals = _param[3];
    var bounties2 = [];
    maybeBounties.forEach(function(bounty, index) {
        if (bounty.isSome) {
            bounties2.push({
                bounty: bounty.unwrap(),
                description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
                index: ids[index],
                proposals: bountyProposals.filter(function(bountyProposal) {
                    return bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]);
                })
            });
        }
    });
    return bounties2;
}
function bounties(instanceId, api) {
    var bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, function() {
        return bountyBase.bounties ? (0, import_rxjs23.combineLatest)([
            bountyBase.bountyCount(),
            api.query.council ? api.query.council.proposalCount() : (0, import_rxjs23.of)(0)
        ]).pipe((0, import_rxjs23.switchMap)(function() {
            return (0, import_rxjs23.combineLatest)([
                bountyBase.bounties.keys(),
                api.derive.council ? api.derive.council.proposals() : (0, import_rxjs23.of)([])
            ]);
        }), (0, import_rxjs23.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), keys2 = _param[0], proposals8 = _param[1];
            var ids = keys2.map(function(param) {
                var _param_args = _sliced_to_array(param.args, 1), id2 = _param_args[0];
                return id2;
            });
            return (0, import_rxjs23.combineLatest)([
                bountyBase.bounties.multi(ids),
                bountyBase.bountyDescriptions.multi(ids),
                (0, import_rxjs23.of)(ids),
                (0, import_rxjs23.of)(filterBountiesProposals(api, proposals8))
            ]);
        }), (0, import_rxjs23.map)(parseResult)) : (0, import_rxjs23.of)(parseResult([
            [],
            [],
            [],
            []
        ]));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/index.js
var chain_exports = {};
__export(chain_exports, {
    _getHeaderRange: function() {
        return _getHeaderRange;
    },
    bestNumber: function() {
        return bestNumber;
    },
    bestNumberFinalized: function() {
        return bestNumberFinalized;
    },
    bestNumberLag: function() {
        return bestNumberLag;
    },
    getBlock: function() {
        return getBlock;
    },
    getBlockByNumber: function() {
        return getBlockByNumber;
    },
    getHeader: function() {
        return getHeader;
    },
    subscribeFinalizedHeads: function() {
        return subscribeFinalizedHeads;
    },
    subscribeNewBlocks: function() {
        return subscribeNewBlocks;
    },
    subscribeNewHeads: function() {
        return subscribeNewHeads;
    }
});
// ../../node_modules/@polkadot/api-derive/chain/util.js
var import_rxjs24 = __toESM(require_cjs(), 1);
function createBlockNumberDerive(fn) {
    return function(instanceId, api) {
        return memo(instanceId, function() {
            return fn(api).pipe((0, import_rxjs24.map)(unwrapBlockNumber));
        });
    };
}
function getAuthorDetails(header, queryAt) {
    if (queryAt.authorMapping && queryAt.authorMapping.mappingWithDeposit) {
        var mapId = header.digest.logs[0] && (header.digest.logs[0].isConsensus && header.digest.logs[0].asConsensus[1] || header.digest.logs[0].isPreRuntime && header.digest.logs[0].asPreRuntime[1]);
        if (mapId) {
            return (0, import_rxjs24.combineLatest)([
                (0, import_rxjs24.of)(header),
                queryAt.session ? queryAt.session.validators() : (0, import_rxjs24.of)(null),
                queryAt.authorMapping.mappingWithDeposit(mapId).pipe((0, import_rxjs24.map)(function(opt) {
                    return opt.unwrapOr({
                        account: null
                    }).account;
                }))
            ]);
        }
    }
    return (0, import_rxjs24.combineLatest)([
        (0, import_rxjs24.of)(header),
        queryAt.session ? queryAt.session.validators() : (0, import_rxjs24.of)(null),
        (0, import_rxjs24.of)(null)
    ]);
}
// ../../node_modules/@polkadot/api-derive/chain/bestNumber.js
var bestNumber = createBlockNumberDerive(function(api) {
    return api.rpc.chain.subscribeNewHeads();
});
// ../../node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
var bestNumberFinalized = createBlockNumberDerive(function(api) {
    return api.rpc.chain.subscribeFinalizedHeads();
});
// ../../node_modules/@polkadot/api-derive/chain/bestNumberLag.js
var import_rxjs25 = __toESM(require_cjs(), 1);
function bestNumberLag(instanceId, api) {
    return memo(instanceId, function() {
        return (0, import_rxjs25.combineLatest)([
            api.derive.chain.bestNumber(),
            api.derive.chain.bestNumberFinalized()
        ]).pipe((0, import_rxjs25.map)(function(param) {
            var _param = _sliced_to_array(param, 2), bestNumber2 = _param[0], bestNumberFinalized2 = _param[1];
            return api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2));
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/getHeader.js
var import_rxjs26 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/type/util.js
function extractAuthor(digest) {
    var sessionValidators = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var _digest_logs_filter = _sliced_to_array(digest.logs.filter(function(e) {
        return e.isConsensus;
    }), 1), citem = _digest_logs_filter[0];
    var _digest_logs_filter1 = _sliced_to_array(digest.logs.filter(function(e) {
        return e.isPreRuntime;
    }), 1), pitem = _digest_logs_filter1[0];
    var _digest_logs_filter2 = _sliced_to_array(digest.logs.filter(function(e) {
        return e.isSeal;
    }), 1), sitem = _digest_logs_filter2[0];
    var accountId2;
    try {
        if (pitem) {
            var _pitem_asPreRuntime = _sliced_to_array(pitem.asPreRuntime, 2), engine = _pitem_asPreRuntime[0], data = _pitem_asPreRuntime[1];
            accountId2 = engine.extractAuthor(data, sessionValidators);
        }
        if (!accountId2 && citem) {
            var _citem_asConsensus = _sliced_to_array(citem.asConsensus, 2), engine1 = _citem_asConsensus[0], data1 = _citem_asConsensus[1];
            accountId2 = engine1.extractAuthor(data1, sessionValidators);
        }
        if (!accountId2 && sitem) {
            var _sitem_asSeal = _sliced_to_array(sitem.asSeal, 2), engine2 = _sitem_asSeal[0], data2 = _sitem_asSeal[1];
            accountId2 = engine2.extractAuthor(data2, sessionValidators);
        }
    } catch (e) {}
    return accountId2;
}
// ../../node_modules/@polkadot/api-derive/type/HeaderExtended.js
function createHeaderExtended(registry, header, validators2, author) {
    var _author;
    var HeaderBase = registry.createClass("Header");
    var Implementation = /*#__PURE__*/ function(HeaderBase) {
        _inherits(Implementation, HeaderBase);
        var _super = _create_super(Implementation);
        function Implementation(registry2, header2, validators3, author2) {
            _class_call_check(this, Implementation);
            var _this;
            _this = _super.call(this, registry2, header2);
            __privateAdd(_assert_this_initialized(_this), _author, void 0);
            __privateSet(_assert_this_initialized(_this), _author, author2 || extractAuthor(_this.digest, validators3 || []));
            _this.createdAtHash = header2 == null ? void 0 : header2.createdAtHash;
            return _this;
        }
        _create_class(Implementation, [
            {
                key: "author",
                get: /**
     * @description Convenience method, returns the author for the block
     */ function get() {
                    return __privateGet(this, _author);
                }
            }
        ]);
        return Implementation;
    }(HeaderBase);
    _author = new WeakMap();
    return new Implementation(registry, header, validators2, author);
}
// ../../node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
function mapExtrinsics(extrinsics, records) {
    return extrinsics.map(function(extrinsic, index) {
        var dispatchError;
        var dispatchInfo;
        var events2 = records.filter(function(param) {
            var phase = param.phase;
            return phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index);
        }).map(function(param) {
            var event = param.event;
            if (event.section === "system") {
                if (event.method === "ExtrinsicSuccess") {
                    dispatchInfo = event.data[0];
                } else if (event.method === "ExtrinsicFailed") {
                    dispatchError = event.data[0];
                    dispatchInfo = event.data[1];
                }
            }
            return event;
        });
        return {
            dispatchError: dispatchError,
            dispatchInfo: dispatchInfo,
            events: events2,
            extrinsic: extrinsic
        };
    });
}
function createSignedBlockExtended(registry, block, events2, validators2, author) {
    var _author, _events, _extrinsics;
    var SignedBlockBase = registry.createClass("SignedBlock");
    var Implementation = /*#__PURE__*/ function(SignedBlockBase) {
        _inherits(Implementation, SignedBlockBase);
        var _super = _create_super(Implementation);
        function Implementation(registry2, block2, events3, validators3, author2) {
            _class_call_check(this, Implementation);
            var _this;
            _this = _super.call(this, registry2, block2);
            __privateAdd(_assert_this_initialized(_this), _author, void 0);
            __privateAdd(_assert_this_initialized(_this), _events, void 0);
            __privateAdd(_assert_this_initialized(_this), _extrinsics, void 0);
            __privateSet(_assert_this_initialized(_this), _author, author2 || extractAuthor(_this.block.header.digest, validators3 || []));
            __privateSet(_assert_this_initialized(_this), _events, events3 || []);
            __privateSet(_assert_this_initialized(_this), _extrinsics, mapExtrinsics(_this.block.extrinsics, __privateGet(_assert_this_initialized(_this), _events)));
            _this.createdAtHash = block2 == null ? void 0 : block2.createdAtHash;
            return _this;
        }
        _create_class(Implementation, [
            {
                key: "author",
                get: /**
     * @description Convenience method, returns the author for the block
     */ function get() {
                    return __privateGet(this, _author);
                }
            },
            {
                key: "events",
                get: /**
     * @description Convenience method, returns the events associated with the block
     */ function get() {
                    return __privateGet(this, _events);
                }
            },
            {
                key: "extrinsics",
                get: /**
     * @description Returns the extrinsics and their events, mapped
     */ function get() {
                    return __privateGet(this, _extrinsics);
                }
            }
        ]);
        return Implementation;
    }(SignedBlockBase);
    _author = new WeakMap();
    _events = new WeakMap();
    _extrinsics = new WeakMap();
    return new Implementation(registry, block, events2, validators2, author);
}
// ../../node_modules/@polkadot/api-derive/chain/getHeader.js
function getHeader(instanceId, api) {
    return memo(instanceId, function(blockHash) {
        return (0, import_rxjs26.combineLatest)([
            api.rpc.chain.getHeader(blockHash),
            api.queryAt(blockHash)
        ]).pipe((0, import_rxjs26.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), header = _param[0], queryAt = _param[1];
            return getAuthorDetails(header, queryAt);
        }), (0, import_rxjs26.map)(function(param) {
            var _param = _sliced_to_array(param, 3), header = _param[0], validators2 = _param[1], author = _param[2];
            return createHeaderExtended((validators2 || header).registry, header, validators2, author);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/getBlock.js
var import_rxjs27 = __toESM(require_cjs(), 1);
function getBlock(instanceId, api) {
    return memo(instanceId, function(blockHash) {
        return (0, import_rxjs27.combineLatest)([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash)
        ]).pipe((0, import_rxjs27.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), signedBlock = _param[0], queryAt = _param[1];
            return (0, import_rxjs27.combineLatest)([
                (0, import_rxjs27.of)(signedBlock),
                queryAt.system.events(),
                getAuthorDetails(signedBlock.block.header, queryAt)
            ]);
        }), (0, import_rxjs27.map)(function(param) {
            var _param = _sliced_to_array(param, 3), signedBlock = _param[0], events2 = _param[1], _param_ = _sliced_to_array(_param[2], 3), validators2 = _param_[1], author = _param_[2];
            return createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
var import_rxjs28 = __toESM(require_cjs(), 1);
function getBlockByNumber(instanceId, api) {
    return memo(instanceId, function(blockNumber) {
        return api.rpc.chain.getBlockHash(blockNumber).pipe((0, import_rxjs28.switchMap)(function(h) {
            return api.derive.chain.getBlock(h);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js
var import_rxjs29 = __toESM(require_cjs(), 1);
function _getHeaderRange(instanceId, api) {
    return memo(instanceId, function(startHash, endHash) {
        var prev = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        return api.rpc.chain.getHeader(startHash).pipe((0, import_rxjs29.switchMap)(function(header) {
            return header.parentHash.eq(endHash) ? (0, import_rxjs29.of)([
                header
            ].concat(_to_consumable_array(prev))) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [
                header
            ].concat(_to_consumable_array(prev)));
        }));
    });
}
function subscribeFinalizedHeads(instanceId, api) {
    return memo(instanceId, function() {
        var prevHash = null;
        return api.rpc.chain.subscribeFinalizedHeads().pipe((0, import_rxjs29.switchMap)(function(header) {
            var endHash = prevHash;
            var startHash = header.parentHash;
            prevHash = header.createdAtHash = header.hash;
            return endHash === null || startHash.eq(endHash) ? (0, import_rxjs29.of)(header) : api.derive.chain._getHeaderRange(startHash, endHash, [
                header
            ]).pipe((0, import_rxjs29.switchMap)(function(headers) {
                return (0, import_rxjs29.from)(headers);
            }));
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
var import_rxjs30 = __toESM(require_cjs(), 1);
function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.chain.subscribeNewHeads().pipe((0, import_rxjs30.switchMap)(function(header) {
            return api.derive.chain.getBlock(header.createdAtHash || header.hash);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
var import_rxjs31 = __toESM(require_cjs(), 1);
function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, function() {
        return api.rpc.chain.subscribeNewHeads().pipe((0, import_rxjs31.switchMap)(function(header) {
            return (0, import_rxjs31.combineLatest)([
                (0, import_rxjs31.of)(header),
                api.queryAt(header.hash)
            ]);
        }), (0, import_rxjs31.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), header = _param[0], queryAt = _param[1];
            return getAuthorDetails(header, queryAt);
        }), (0, import_rxjs31.map)(function(param) {
            var _param = _sliced_to_array(param, 3), header = _param[0], validators2 = _param[1], author = _param[2];
            header.createdAtHash = header.hash;
            return createHeaderExtended(header.registry, header, validators2, author);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/contracts/index.js
var contracts_exports = {};
__export(contracts_exports, {
    fees: function() {
        return fees;
    }
});
// ../../node_modules/@polkadot/api-derive/contracts/fees.js
var import_rxjs32 = __toESM(require_cjs(), 1);
function queryConstants(api) {
    return (0, import_rxjs32.of)([
        // deprecated
        api.consts.contracts.callBaseFee || api.registry.createType("Balance"),
        api.consts.contracts.contractFee || api.registry.createType("Balance"),
        api.consts.contracts.creationFee || api.registry.createType("Balance"),
        api.consts.contracts.transactionBaseFee || api.registry.createType("Balance"),
        api.consts.contracts.transactionByteFee || api.registry.createType("Balance"),
        api.consts.contracts.transferFee || api.registry.createType("Balance"),
        // current
        api.consts.contracts.rentByteFee,
        api.consts.contracts.rentDepositOffset,
        api.consts.contracts.surchargeReward,
        api.consts.contracts.tombstoneDeposit
    ]);
}
function fees(instanceId, api) {
    return memo(instanceId, function() {
        return queryConstants(api).pipe((0, import_rxjs32.map)(function(param) {
            var _param = _sliced_to_array(param, 10), callBaseFee = _param[0], contractFee = _param[1], creationFee = _param[2], transactionBaseFee = _param[3], transactionByteFee = _param[4], transferFee = _param[5], rentByteFee = _param[6], rentDepositOffset = _param[7], surchargeReward = _param[8], tombstoneDeposit = _param[9];
            return {
                callBaseFee: callBaseFee,
                contractFee: contractFee,
                creationFee: creationFee,
                rentByteFee: rentByteFee,
                rentDepositOffset: rentDepositOffset,
                surchargeReward: surchargeReward,
                tombstoneDeposit: tombstoneDeposit,
                transactionBaseFee: transactionBaseFee,
                transactionByteFee: transactionByteFee,
                transferFee: transferFee
            };
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/council/index.js
var council_exports = {};
__export(council_exports, {
    hasProposals: function() {
        return hasProposals3;
    },
    members: function() {
        return members3;
    },
    prime: function() {
        return prime3;
    },
    proposal: function() {
        return proposal3;
    },
    proposalCount: function() {
        return proposalCount3;
    },
    proposalHashes: function() {
        return proposalHashes3;
    },
    proposals: function() {
        return proposals3;
    },
    votes: function() {
        return votes;
    },
    votesOf: function() {
        return votesOf;
    }
});
// ../../node_modules/@polkadot/api-derive/council/votes.js
var import_rxjs33 = __toESM(require_cjs(), 1);
function isVoter(value1) {
    return !Array.isArray(value1);
}
function retrieveStakeOf(elections) {
    return elections.stakeOf.entries().pipe((0, import_rxjs33.map)(function(entries) {
        return entries.map(function(param) {
            var _param = _sliced_to_array(param, 2), _param_ = _param[0], _param__args = _sliced_to_array(_param_.args, 1), accountId2 = _param__args[0], stake = _param[1];
            return [
                accountId2,
                stake
            ];
        });
    }));
}
function retrieveVoteOf(elections) {
    return elections.votesOf.entries().pipe((0, import_rxjs33.map)(function(entries) {
        return entries.map(function(param) {
            var _param = _sliced_to_array(param, 2), _param_ = _param[0], _param__args = _sliced_to_array(_param_.args, 1), accountId2 = _param__args[0], votes2 = _param[1];
            return [
                accountId2,
                votes2
            ];
        });
    }));
}
function retrievePrev(api, elections) {
    return (0, import_rxjs33.combineLatest)([
        retrieveStakeOf(elections),
        retrieveVoteOf(elections)
    ]).pipe((0, import_rxjs33.map)(function(param) {
        var _param = _sliced_to_array(param, 2), stakes = _param[0], votes2 = _param[1];
        var result = [];
        votes2.forEach(function(param) {
            var _param = _sliced_to_array(param, 2), voter = _param[0], votes3 = _param[1];
            result.push([
                voter,
                {
                    stake: api.registry.createType("Balance"),
                    votes: votes3
                }
            ]);
        });
        stakes.forEach(function(param) {
            var _param = _sliced_to_array(param, 2), staker = _param[0], stake = _param[1];
            var entry = result.find(function(param) {
                var _param = _sliced_to_array(param, 1), voter = _param[0];
                return voter.eq(staker);
            });
            if (entry) {
                entry[1].stake = stake;
            } else {
                result.push([
                    staker,
                    {
                        stake: stake,
                        votes: []
                    }
                ]);
            }
        });
        return result;
    }));
}
function retrieveCurrent(elections) {
    return elections.voting.entries().pipe((0, import_rxjs33.map)(function(entries) {
        return entries.map(function(param) {
            var _param = _sliced_to_array(param, 2), _param_ = _param[0], _param__args = _sliced_to_array(_param_.args, 1), accountId2 = _param__args[0], value1 = _param[1];
            return [
                accountId2,
                isVoter(value1) ? {
                    stake: value1.stake,
                    votes: value1.votes
                } : {
                    stake: value1[0],
                    votes: value1[1]
                }
            ];
        });
    }));
}
function votes(instanceId, api) {
    var elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return memo(instanceId, function() {
        return elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : (0, import_rxjs33.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/council/votesOf.js
var import_rxjs34 = __toESM(require_cjs(), 1);
function votesOf(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        return api.derive.council.votes().pipe((0, import_rxjs34.map)(function(votes2) {
            return (votes2.find(function(param) {
                var _param = _sliced_to_array(param, 1), from3 = _param[0];
                return from3.eq(accountId2);
            }) || [
                null,
                {
                    stake: api.registry.createType("Balance"),
                    votes: []
                }
            ])[1];
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/council/index.js
var members3 = members("council");
var hasProposals3 = hasProposals("council");
var proposal3 = proposal("council");
var proposalCount3 = proposalCount("council");
var proposalHashes3 = proposalHashes("council");
var proposals3 = proposals("council");
var prime3 = prime("council");
// ../../node_modules/@polkadot/api-derive/crowdloan/index.js
var crowdloan_exports = {};
__export(crowdloan_exports, {
    childKey: function() {
        return childKey;
    },
    contributions: function() {
        return contributions;
    },
    ownContributions: function() {
        return ownContributions;
    }
});
// ../../node_modules/@polkadot/api-derive/crowdloan/childKey.js
var import_rxjs35 = __toESM(require_cjs(), 1);
function createChildKey(info6) {
    return u8aToHex(u8aConcat(":child_storage:default:", blake2AsU8a(u8aConcat("crowdloan", (info6.fundIndex || info6.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
    return memo(instanceId, function(paraId) {
        return api.query.crowdloan.funds(paraId).pipe((0, import_rxjs35.map)(function(optInfo) {
            return optInfo.isSome ? createChildKey(optInfo.unwrap()) : null;
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/crowdloan/contributions.js
var import_rxjs36 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/crowdloan/util.js
function extractContributed(paraId, events2) {
    var _events$createdAtHash;
    var added = [];
    var removed = [];
    return events2.filter(function(param) {
        var _param_event = param.event, _param_event_data = _sliced_to_array(_param_event.data, 2), eventParaId = _param_event_data[1], method = _param_event.method, section2 = _param_event.section;
        return section2 === "crowdloan" && [
            "Contributed",
            "Withdrew"
        ].includes(method) && eventParaId.eq(paraId);
    }).reduce(function(result, param) {
        var _param_event = param.event, _param_event_data = _sliced_to_array(_param_event.data, 1), accountId2 = _param_event_data[0], method = _param_event.method;
        if (method === "Contributed") {
            result.added.push(accountId2.toHex());
        } else {
            result.removed.push(accountId2.toHex());
        }
        return result;
    }, {
        added: added,
        blockHash: ((_events$createdAtHash = events2.createdAtHash) == null ? void 0 : _events$createdAtHash.toHex()) || "-",
        removed: removed
    });
}
// ../../node_modules/@polkadot/api-derive/crowdloan/contributions.js
var PAGE_SIZE_K = 1e3;
function _getUpdates(api, paraId) {
    var added = [];
    var removed = [];
    return api.query.system.events().pipe((0, import_rxjs36.switchMap)(function(events2) {
        var changes = extractContributed(paraId, events2);
        if (changes.added.length || changes.removed.length) {
            var _added, _removed;
            var _events$createdAtHash;
            added = (_added = added).concat.apply(_added, _to_consumable_array(changes.added));
            removed = (_removed = removed).concat.apply(_removed, _to_consumable_array(changes.removed));
            return (0, import_rxjs36.of)({
                added: added,
                addedDelta: changes.added,
                blockHash: ((_events$createdAtHash = events2.createdAtHash) == null ? void 0 : _events$createdAtHash.toHex()) || "-",
                removed: removed,
                removedDelta: changes.removed
            });
        }
        return import_rxjs36.EMPTY;
    }), (0, import_rxjs36.startWith)({
        added: added,
        addedDelta: [],
        blockHash: "-",
        removed: removed,
        removedDelta: []
    }));
}
function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe((0, import_rxjs36.switchMap)(function(events2) {
        var _events$createdAtHash2;
        var items = events2.filter(function(param) {
            var _param_event = param.event, _param_event_data = _sliced_to_array(_param_event.data, 1), eventParaId = _param_event_data[0], method = _param_event.method, section2 = _param_event.section;
            return section2 === "crowdloan" && [
                "AllRefunded",
                "Dissolved",
                "PartiallyRefunded"
            ].includes(method) && eventParaId.eq(paraId);
        });
        return items.length ? (0, import_rxjs36.of)(((_events$createdAtHash2 = events2.createdAtHash) == null ? void 0 : _events$createdAtHash2.toHex()) || "-") : import_rxjs36.EMPTY;
    }), (0, import_rxjs36.startWith)("-"));
}
function _getKeysPaged(api, childKey2) {
    var subject = new import_rxjs36.BehaviorSubject(void 0);
    return subject.pipe((0, import_rxjs36.switchMap)(function(startKey) {
        return api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K, startKey);
    }), (0, import_rxjs36.tap)(function(keys2) {
        nextTick(function() {
            keys2.length === PAGE_SIZE_K ? subject.next(keys2[PAGE_SIZE_K - 1].toHex()) : subject.complete();
        });
    }), (0, import_rxjs36.toArray)(), // toArray since we want to startSubject to be completed
    (0, import_rxjs36.map)(function(keyArr) {
        return arrayFlatten(keyArr);
    }));
}
function _getAll(api, paraId, childKey2) {
    return _eventTriggerAll(api, paraId).pipe((0, import_rxjs36.switchMap)(function() {
        return isFunction(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x");
    }), (0, import_rxjs36.map)(function(keys2) {
        return keys2.map(function(k) {
            return k.toHex();
        });
    }));
}
function _contributions(api, paraId, childKey2) {
    return (0, import_rxjs36.combineLatest)([
        _getAll(api, paraId, childKey2),
        _getUpdates(api, paraId)
    ]).pipe((0, import_rxjs36.map)(function(param) {
        var _param = _sliced_to_array(param, 2), keys2 = _param[0], _param_ = _param[1], added = _param_.added, blockHash = _param_.blockHash, removed = _param_.removed;
        var contributorsMap = {};
        keys2.forEach(function(k) {
            contributorsMap[k] = true;
        });
        added.forEach(function(k) {
            contributorsMap[k] = true;
        });
        removed.forEach(function(k) {
            delete contributorsMap[k];
        });
        return {
            blockHash: blockHash,
            contributorsHex: Object.keys(contributorsMap)
        };
    }));
}
function contributions(instanceId, api) {
    return memo(instanceId, function(paraId) {
        return api.derive.crowdloan.childKey(paraId).pipe((0, import_rxjs36.switchMap)(function(childKey2) {
            return childKey2 ? _contributions(api, paraId, childKey2) : (0, import_rxjs36.of)({
                blockHash: "-",
                contributorsHex: []
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
var import_rxjs37 = __toESM(require_cjs(), 1);
function _getValues(api, childKey2, keys2) {
    return (0, import_rxjs37.combineLatest)(keys2.map(function(k) {
        return api.rpc.childstate.getStorage(childKey2, k);
    })).pipe((0, import_rxjs37.map)(function(values) {
        return values.map(function(v) {
            return api.registry.createType("Option<StorageData>", v);
        }).map(function(o) {
            return o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance");
        }).reduce(function(all3, b, index) {
            return objectSpread(all3, _define_property({}, keys2[index], b));
        }, {});
    }));
}
function _watchOwnChanges(api, paraId, childkey, keys2) {
    return api.query.system.events().pipe((0, import_rxjs37.switchMap)(function(events2) {
        var changes = extractContributed(paraId, events2);
        var filtered = keys2.filter(function(k) {
            return changes.added.includes(k) || changes.removed.includes(k);
        });
        return filtered.length ? _getValues(api, childkey, filtered) : import_rxjs37.EMPTY;
    }), (0, import_rxjs37.startWith)({}));
}
function _contributions2(api, paraId, childKey2, keys2) {
    return (0, import_rxjs37.combineLatest)([
        _getValues(api, childKey2, keys2),
        _watchOwnChanges(api, paraId, childKey2, keys2)
    ]).pipe((0, import_rxjs37.map)(function(param) {
        var _param = _sliced_to_array(param, 2), all3 = _param[0], latest2 = _param[1];
        return objectSpread({}, all3, latest2);
    }));
}
function ownContributions(instanceId, api) {
    return memo(instanceId, function(paraId, keys2) {
        return api.derive.crowdloan.childKey(paraId).pipe((0, import_rxjs37.switchMap)(function(childKey2) {
            return childKey2 && keys2.length ? _contributions2(api, paraId, childKey2, keys2) : (0, import_rxjs37.of)({});
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/index.js
var democracy_exports = {};
__export(democracy_exports, {
    _referendumInfo: function() {
        return _referendumInfo;
    },
    _referendumVotes: function() {
        return _referendumVotes;
    },
    _referendumsVotes: function() {
        return _referendumsVotes;
    },
    dispatchQueue: function() {
        return dispatchQueue;
    },
    locks: function() {
        return locks;
    },
    nextExternal: function() {
        return nextExternal;
    },
    preimage: function() {
        return preimage;
    },
    preimages: function() {
        return preimages;
    },
    proposals: function() {
        return proposals4;
    },
    referendumIds: function() {
        return referendumIds;
    },
    referendums: function() {
        return referendums;
    },
    referendumsActive: function() {
        return referendumsActive;
    },
    referendumsFinished: function() {
        return referendumsFinished;
    },
    referendumsInfo: function() {
        return referendumsInfo;
    },
    sqrtElectorate: function() {
        return sqrtElectorate;
    }
});
// ../../node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
var import_rxjs38 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/democracy/util.js
function isOldInfo(info6) {
    return !!info6.proposalHash;
}
function isCurrentStatus(status) {
    return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
    while(true){
        var q1 = n1.div(d1);
        var q2 = n2.div(d2);
        if (q1.lt(q2)) {
            return true;
        } else if (q2.lt(q1)) {
            return false;
        }
        var r1 = n1.mod(d1);
        var r2 = n2.mod(d2);
        if (r2.isZero()) {
            return false;
        } else if (r1.isZero()) {
            return true;
        }
        n1 = d2;
        n2 = d1;
        d1 = r2;
        d2 = r1;
    }
}
function calcPassingOther(threshold, sqrtElectorate2, param) {
    var votedAye = param.votedAye, votedNay = param.votedNay, votedTotal = param.votedTotal;
    var sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate2, state2) {
    return threshold.isSimpleMajority ? state2.votedAye.gt(state2.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state2);
}
function calcVotesPrev(votesFor) {
    return votesFor.reduce(function(state2, derived) {
        var balance = derived.balance, vote = derived.vote;
        var isDefault = vote.conviction.index === 0;
        var counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
        if (vote.isAye) {
            state2.allAye.push(derived);
            state2.voteCountAye++;
            state2.votedAye.iadd(counted);
        } else {
            state2.allNay.push(derived);
            state2.voteCountNay++;
            state2.votedNay.iadd(counted);
        }
        state2.voteCount++;
        state2.votedTotal.iadd(counted);
        return state2;
    }, {
        allAye: [],
        allNay: [],
        voteCount: 0,
        voteCountAye: 0,
        voteCountNay: 0,
        votedAye: new import_bn.default(0),
        votedNay: new import_bn.default(0),
        votedTotal: new import_bn.default(0)
    });
}
function calcVotesCurrent(tally, votes2) {
    var allAye = [];
    var allNay = [];
    votes2.forEach(function(derived) {
        if (derived.vote.isAye) {
            allAye.push(derived);
        } else {
            allNay.push(derived);
        }
    });
    return {
        allAye: allAye,
        allNay: allNay,
        voteCount: allAye.length + allNay.length,
        voteCountAye: allAye.length,
        voteCountNay: allNay.length,
        votedAye: tally.ayes,
        votedNay: tally.nays,
        votedTotal: tally.turnout
    };
}
function calcVotes(sqrtElectorate2, referendum, votes2) {
    var state2 = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
    return objectSpread({}, state2, {
        isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state2),
        votes: votes2
    });
}
function getStatus(info6) {
    if (info6.isNone) {
        return null;
    }
    var unwrapped = info6.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
}
function getImageHashBounded(hash3) {
    return hash3.isLegacy ? hash3.asLegacy.hash_.toHex() : hash3.isLookup ? hash3.asLookup.hash_.toHex() : hash3.isInline ? hash3.asInline.hash.toHex() : isString(hash3) ? isHex(hash3) ? hash3 : stringToHex(hash3) : isU8a(hash3) ? u8aToHex(hash3) : hash3.toHex();
}
function getImageHash(status) {
    return getImageHashBounded(status.proposal || status.proposalHash);
}
// ../../node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
var DEMOCRACY_ID = stringToHex("democrac");
function isMaybeHashedOrBounded(call2) {
    return _instanceof(call2, Enum);
}
function isBounded(call2) {
    return call2.isInline || call2.isLegacy || call2.isLookup;
}
function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe((0, import_rxjs38.switchMap)(function(dispatches) {
        return (0, import_rxjs38.combineLatest)([
            (0, import_rxjs38.of)(dispatches),
            api.derive.democracy.preimages(dispatches.map(function(param) {
                var _param = _sliced_to_array(param, 2), hash3 = _param[1];
                return hash3;
            }))
        ]);
    }), (0, import_rxjs38.map)(function(param) {
        var _param = _sliced_to_array(param, 2), dispatches = _param[0], images = _param[1];
        return dispatches.map(function(param, dispatchIndex) {
            var _param = _sliced_to_array(param, 3), at = _param[0], imageHash = _param[1], index = _param[2];
            return {
                at: at,
                image: images[dispatchIndex],
                imageHash: getImageHashBounded(imageHash),
                index: index
            };
        });
    }));
}
function schedulerEntries(api) {
    return api.derive.democracy.referendumsFinished().pipe((0, import_rxjs38.switchMap)(function() {
        return api.query.scheduler.agenda.keys();
    }), (0, import_rxjs38.switchMap)(function(keys2) {
        var blockNumbers = keys2.map(function(param) {
            var _param_args = _sliced_to_array(param.args, 1), blockNumber = _param_args[0];
            return blockNumber;
        });
        return blockNumbers.length ? (0, import_rxjs38.combineLatest)([
            (0, import_rxjs38.of)(blockNumbers),
            // this should simply be api.query.scheduler.agenda.multi,
            // however we have had cases on Darwinia where the indices have moved around after an
            // upgrade, which results in invalid on-chain data
            api.query.scheduler.agenda.multi(blockNumbers).pipe((0, import_rxjs38.catchError)(function() {
                return (0, import_rxjs38.of)(blockNumbers.map(function() {
                    return [];
                }));
            }))
        ]) : (0, import_rxjs38.of)([
            [],
            []
        ]);
    }));
}
function queryScheduler(api) {
    return schedulerEntries(api).pipe((0, import_rxjs38.switchMap)(function(param) {
        var _param = _sliced_to_array(param, 2), blockNumbers = _param[0], agendas = _param[1];
        var result = [];
        blockNumbers.forEach(function(at, index) {
            (agendas[index] || []).filter(function(o) {
                return o.isSome;
            }).forEach(function(o) {
                var scheduled = o.unwrap();
                if (scheduled.maybeId.isSome) {
                    var id2 = scheduled.maybeId.unwrap().toHex();
                    if (id2.startsWith(DEMOCRACY_ID)) {
                        var imageHash = isMaybeHashedOrBounded(scheduled.call) ? isBounded(scheduled.call) ? getImageHashBounded(scheduled.call) : scheduled.call.isHash ? scheduled.call.asHash.toHex() : scheduled.call.asValue.args[0].toHex() : scheduled.call.args[0].toHex();
                        result.push({
                            at: at,
                            imageHash: imageHash,
                            index: api.registry.createType("(u64, ReferendumIndex)", id2)[1]
                        });
                    }
                }
            });
        });
        return (0, import_rxjs38.combineLatest)([
            (0, import_rxjs38.of)(result),
            result.length ? api.derive.democracy.preimages(result.map(function(param) {
                var imageHash = param.imageHash;
                return imageHash;
            })) : (0, import_rxjs38.of)([])
        ]);
    }), (0, import_rxjs38.map)(function(param) {
        var _param = _sliced_to_array(param, 2), infos = _param[0], images = _param[1];
        return infos.map(function(info6, index) {
            return objectSpread({
                image: images[index]
            }, info6);
        });
    }));
}
function dispatchQueue(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$scheduler;
        return isFunction((_api$query$scheduler = api.query.scheduler) == null ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : (0, import_rxjs38.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/locks.js
var import_rxjs39 = __toESM(require_cjs(), 1);
var LOCKUPS = [
    0,
    1,
    2,
    4,
    8,
    16,
    32
];
function parseEnd(api, vote, param) {
    var approved = param.approved, end = param.end;
    return [
        end,
        approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO
    ];
}
function parseLock(api, param, referendum) {
    var _param = _sliced_to_array(param, 2), referendumId = _param[0], accountVote = _param[1];
    var _accountVote_asStandard = accountVote.asStandard, balance = _accountVote_asStandard.balance, vote = _accountVote_asStandard.vote;
    var _ref = _sliced_to_array(referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [
        BN_ZERO,
        BN_ZERO
    ], 2), referendumEnd = _ref[0], unlockAt = _ref[1];
    return {
        balance: balance,
        isDelegated: false,
        isFinished: referendum.isFinished,
        referendumEnd: referendumEnd,
        referendumId: referendumId,
        unlockAt: unlockAt,
        vote: vote
    };
}
function delegateLocks(api, param) {
    var balance = param.balance, conviction = param.conviction, target = param.target;
    return api.derive.democracy.locks(target).pipe((0, import_rxjs39.map)(function(available) {
        return available.map(function(param) {
            var isFinished = param.isFinished, referendumEnd = param.referendumEnd, referendumId = param.referendumId, unlockAt = param.unlockAt, vote = param.vote;
            return {
                balance: balance,
                isDelegated: true,
                isFinished: isFinished,
                referendumEnd: referendumEnd,
                referendumId: referendumId,
                unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
                vote: api.registry.createType("Vote", {
                    aye: vote.isAye,
                    conviction: conviction
                })
            };
        });
    }));
}
function directLocks(api, param) {
    var votes2 = param.votes;
    if (!votes2.length) {
        return (0, import_rxjs39.of)([]);
    }
    return api.query.democracy.referendumInfoOf.multi(votes2.map(function(param) {
        var _param = _sliced_to_array(param, 1), referendumId = _param[0];
        return referendumId;
    })).pipe((0, import_rxjs39.map)(function(referendums2) {
        return votes2.map(function(vote, index) {
            return [
                vote,
                referendums2[index].unwrapOr(null)
            ];
        }).filter(function(item) {
            return !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard;
        }).map(function(param) {
            var _param = _sliced_to_array(param, 2), directVote = _param[0], referendum = _param[1];
            return parseLock(api, directVote, referendum);
        });
    }));
}
function locks(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        return api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe((0, import_rxjs39.switchMap)(function(voting) {
            return voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : (0, import_rxjs39.of)([]);
        })) : (0, import_rxjs39.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/nextExternal.js
var import_rxjs40 = __toESM(require_cjs(), 1);
function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
        return (0, import_rxjs40.of)(null);
    }
    var _nextOpt_unwrap = _sliced_to_array(nextOpt.unwrap(), 2), hash3 = _nextOpt_unwrap[0], threshold = _nextOpt_unwrap[1];
    return api.derive.democracy.preimage(hash3).pipe((0, import_rxjs40.map)(function(image) {
        return {
            image: image,
            imageHash: getImageHashBounded(hash3),
            threshold: threshold
        };
    }));
}
function nextExternal(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$democracy;
        return (_api$query$democracy = api.query.democracy) != null && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe((0, import_rxjs40.switchMap)(function(nextOpt) {
            return withImage(api, nextOpt);
        })) : (0, import_rxjs40.of)(null);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/preimages.js
var import_rxjs41 = __toESM(require_cjs(), 1);
function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
}
function constructProposal(api, param) {
    var _param = _sliced_to_array(param, 4), bytes5 = _param[0], proposer = _param[1], balance = _param[2], at = _param[3];
    var proposal6;
    try {
        proposal6 = api.registry.createType("Call", bytes5.toU8a(true));
    } catch (error2) {
        console.error(error2);
    }
    return {
        at: at,
        balance: balance,
        proposal: proposal6,
        proposer: proposer
    };
}
function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
        return;
    }
    if (isDemocracyPreimage(api, imageOpt)) {
        var status = imageOpt.unwrap();
        if (status.isMissing) {
            return;
        }
        var _status_asAvailable = status.asAvailable, data = _status_asAvailable.data, deposit = _status_asAvailable.deposit, provider = _status_asAvailable.provider, since = _status_asAvailable.since;
        return constructProposal(api, [
            data,
            provider,
            deposit,
            since
        ]);
    }
    return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, param) {
    var _param = _sliced_to_array(param, 3), proposalHash = _param[0], status = _param[1], bytes5 = _param[2];
    if (!status) {
        return void 0;
    }
    var _ref = _sliced_to_array(status.isUnrequested ? status.asUnrequested.deposit : status.asRequested.deposit.unwrapOrDefault(), 2), proposer = _ref[0], balance = _ref[1];
    var proposal6;
    if (bytes5) {
        try {
            proposal6 = api.registry.createType("Call", bytes5.toU8a(true));
        } catch (error2) {
            console.error(error2);
        }
    }
    return {
        at: BN_ZERO,
        balance: balance,
        proposal: proposal6,
        proposalHash: proposalHash,
        proposer: proposer
    };
}
function getDemocracyImages(api, bounded) {
    var hashes = bounded.map(function(b) {
        return getImageHashBounded(b);
    });
    return api.query.democracy.preimages.multi(hashes).pipe((0, import_rxjs41.map)(function(images) {
        return images.map(function(imageOpt) {
            return parseDemocracy(api, imageOpt);
        });
    }));
}
function getImages(api, bounded) {
    var hashes = bounded.map(function(b) {
        return getImageHashBounded(b);
    });
    var bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
    return api.query.preimage.statusFor.multi(hashes).pipe((0, import_rxjs41.switchMap)(function(optStatus) {
        var statuses = optStatus.map(function(o) {
            return o.unwrapOr(null);
        });
        var keys2 = statuses.map(function(s, i) {
            return s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [
                hashes[i],
                s.asRequested.len.unwrapOr(0)
            ] : [
                hashes[i],
                s.asUnrequested.len
            ] : null;
        }).filter(function(p) {
            return !!p;
        });
        return api.query.preimage.preimageFor.multi(keys2).pipe((0, import_rxjs41.map)(function(optBytes) {
            var ptr = -1;
            return statuses.map(function(s, i) {
                return s ? [
                    hashes[i],
                    s,
                    optBytes[++ptr].unwrapOr(null)
                ] : [
                    hashes[i],
                    null,
                    null
                ];
            }).map(function(v) {
                return parseImage(api, v);
            });
        }));
    }));
}
function preimages(instanceId, api) {
    return memo(instanceId, function(hashes) {
        return hashes.length ? isFunction(api.query.democracy.preimages) ? getDemocracyImages(api, hashes) : isFunction(api.query.preimage.preimageFor) ? getImages(api, hashes) : (0, import_rxjs41.of)([]) : (0, import_rxjs41.of)([]);
    });
}
var preimage = firstMemo(function(api, hash3) {
    return api.derive.democracy.preimages([
        hash3
    ]);
});
// ../../node_modules/@polkadot/api-derive/democracy/proposals.js
var import_rxjs42 = __toESM(require_cjs(), 1);
function isNewDepositors(depositors) {
    return isFunction(depositors[1].mul);
}
function parse2(param) {
    var _param = _sliced_to_array(param, 3), proposals8 = _param[0], images = _param[1], optDepositors = _param[2];
    return proposals8.filter(function(param, index) {
        var _param = _sliced_to_array(param, 3), proposer = _param[2];
        var _optDepositors$index;
        return !!((_optDepositors$index = optDepositors[index]) != null && _optDepositors$index.isSome) && !proposer.isEmpty;
    }).map(function(param, proposalIndex) {
        var _param = _sliced_to_array(param, 3), index = _param[0], hash3 = _param[1], proposer = _param[2];
        var depositors = optDepositors[proposalIndex].unwrap();
        return objectSpread({
            image: images[proposalIndex],
            imageHash: getImageHashBounded(hash3),
            index: index,
            proposer: proposer
        }, isNewDepositors(depositors) ? {
            balance: depositors[1],
            seconds: depositors[0]
        } : {
            balance: depositors[0],
            seconds: depositors[1]
        });
    });
}
function proposals4(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$democracy;
        return isFunction((_api$query$democracy = api.query.democracy) == null ? void 0 : _api$query$democracy.publicProps) ? api.query.democracy.publicProps().pipe((0, import_rxjs42.switchMap)(function(proposals8) {
            return proposals8.length ? (0, import_rxjs42.combineLatest)([
                (0, import_rxjs42.of)(proposals8),
                api.derive.democracy.preimages(proposals8.map(function(param) {
                    var _param = _sliced_to_array(param, 2), hash3 = _param[1];
                    return hash3;
                })),
                api.query.democracy.depositOf.multi(proposals8.map(function(param) {
                    var _param = _sliced_to_array(param, 1), index = _param[0];
                    return index;
                }))
            ]) : (0, import_rxjs42.of)([
                [],
                [],
                []
            ]);
        }), (0, import_rxjs42.map)(parse2)) : (0, import_rxjs42.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/referendumIds.js
var import_rxjs43 = __toESM(require_cjs(), 1);
function referendumIds(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$democracy;
        return (_api$query$democracy = api.query.democracy) != null && _api$query$democracy.lowestUnbaked ? api.queryMulti([
            api.query.democracy.lowestUnbaked,
            api.query.democracy.referendumCount
        ]).pipe((0, import_rxjs43.map)(function(param) {
            var _param = _sliced_to_array(param, 2), first2 = _param[0], total = _param[1];
            return total.gt(first2) ? _to_consumable_array(Array(total.sub(first2).toNumber())).map(function(_23, i) {
                return first2.addn(i);
            }) : [];
        })) : (0, import_rxjs43.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/referendums.js
var import_rxjs44 = __toESM(require_cjs(), 1);
function referendums(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.democracy.referendumsActive().pipe((0, import_rxjs44.switchMap)(function(referendums2) {
            return referendums2.length ? (0, import_rxjs44.combineLatest)([
                (0, import_rxjs44.of)(referendums2),
                api.derive.democracy._referendumsVotes(referendums2)
            ]) : (0, import_rxjs44.of)([
                [],
                []
            ]);
        }), (0, import_rxjs44.map)(function(param) {
            var _param = _sliced_to_array(param, 2), referendums2 = _param[0], votes2 = _param[1];
            return referendums2.map(function(referendum, index) {
                return objectSpread({}, referendum, votes2[index]);
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/referendumsActive.js
var import_rxjs45 = __toESM(require_cjs(), 1);
function referendumsActive(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.democracy.referendumIds().pipe((0, import_rxjs45.switchMap)(function(ids) {
            return ids.length ? api.derive.democracy.referendumsInfo(ids) : (0, import_rxjs45.of)([]);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
var import_rxjs46 = __toESM(require_cjs(), 1);
function referendumsFinished(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.democracy.referendumIds().pipe((0, import_rxjs46.switchMap)(function(ids) {
            return api.query.democracy.referendumInfoOf.multi(ids);
        }), (0, import_rxjs46.map)(function(infos) {
            return infos.map(function(o) {
                return o.unwrapOr(null);
            }).filter(function(info6) {
                return !!info6 && info6.isFinished;
            }).map(function(info6) {
                return info6.asFinished;
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
var import_rxjs47 = __toESM(require_cjs(), 1);
function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe((0, import_rxjs47.switchMap)(function(votersFor) {
        return (0, import_rxjs47.combineLatest)([
            (0, import_rxjs47.of)(votersFor),
            votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(function(accountId2) {
                return [
                    referendumId,
                    accountId2
                ];
            })) : (0, import_rxjs47.of)([]),
            api.derive.balances.votingBalances(votersFor)
        ]);
    }), (0, import_rxjs47.map)(function(param) {
        var _param = _sliced_to_array(param, 3), votersFor = _param[0], votes2 = _param[1], balances = _param[2];
        return votersFor.map(function(accountId2, index) {
            return {
                accountId: accountId2,
                balance: balances[index].votingBalance || api.registry.createType("Balance"),
                isDelegating: false,
                vote: votes2[index] || api.registry.createType("Vote")
            };
        });
    }));
}
function extractVotes(mapped, referendumId) {
    return mapped.filter(function(param) {
        var _param = _sliced_to_array(param, 2), voting = _param[1];
        return voting.isDirect;
    }).map(function(param) {
        var _param = _sliced_to_array(param, 2), accountId2 = _param[0], voting = _param[1];
        return [
            accountId2,
            voting.asDirect.votes.filter(function(param) {
                var _param = _sliced_to_array(param, 1), idx = _param[0];
                return idx.eq(referendumId);
            })
        ];
    }).filter(function(param) {
        var _param = _sliced_to_array(param, 2), directVotes = _param[1];
        return !!directVotes.length;
    }).reduce(function(result, param) {
        var _param = _sliced_to_array(param, 2), accountId2 = _param[0], votes2 = _param[1];
        return(// FIXME We are ignoring split votes
        votes2.reduce(function(result2, param) {
            var _param = _sliced_to_array(param, 2), vote = _param[1];
            if (vote.isStandard) {
                result2.push(objectSpread({
                    accountId: accountId2,
                    isDelegating: false
                }, vote.asStandard));
            }
            return result2;
        }, result));
    }, []);
}
function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe((0, import_rxjs47.map)(function(allVoting) {
        var mapped = allVoting.map(function(param) {
            var _param = _sliced_to_array(param, 2), _param_ = _param[0], _param__args = _sliced_to_array(_param_.args, 1), accountId2 = _param__args[0], voting = _param[1];
            return [
                accountId2,
                voting
            ];
        });
        var votes2 = extractVotes(mapped, referendumId);
        var delegations = mapped.filter(function(param) {
            var _param = _sliced_to_array(param, 2), voting = _param[1];
            return voting.isDelegating;
        }).map(function(param) {
            var _param = _sliced_to_array(param, 2), accountId2 = _param[0], voting = _param[1];
            return [
                accountId2,
                voting.asDelegating
            ];
        });
        delegations.forEach(function(param) {
            var _param = _sliced_to_array(param, 2), accountId2 = _param[0], _param_ = _param[1], balance = _param_.balance, conviction = _param_.conviction, target = _param_.target;
            var toDelegator = delegations.find(function(param) {
                var _param = _sliced_to_array(param, 1), accountId3 = _param[0];
                return accountId3.eq(target);
            });
            var to = votes2.find(function(param) {
                var accountId3 = param.accountId;
                return accountId3.eq(toDelegator ? toDelegator[0] : target);
            });
            if (to) {
                votes2.push({
                    accountId: accountId2,
                    balance: balance,
                    isDelegating: true,
                    vote: api.registry.createType("Vote", {
                        aye: to.vote.isAye,
                        conviction: conviction
                    })
                });
            }
        });
        return votes2;
    }));
}
function _referendumVotes(instanceId, api) {
    return memo(instanceId, function(referendum) {
        return (0, import_rxjs47.combineLatest)([
            api.derive.democracy.sqrtElectorate(),
            isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
        ]).pipe((0, import_rxjs47.map)(function(param) {
            var _param = _sliced_to_array(param, 2), sqrtElectorate2 = _param[0], votes2 = _param[1];
            return calcVotes(sqrtElectorate2, referendum, votes2);
        }));
    });
}
function _referendumsVotes(instanceId, api) {
    return memo(instanceId, function(referendums2) {
        return referendums2.length ? (0, import_rxjs47.combineLatest)(referendums2.map(function(referendum) {
            return api.derive.democracy._referendumVotes(referendum);
        })) : (0, import_rxjs47.of)([]);
    });
}
function _referendumInfo(instanceId, api) {
    return memo(instanceId, function(index, info6) {
        var status = getStatus(info6);
        return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe((0, import_rxjs47.map)(function(image) {
            return {
                image: image,
                imageHash: getImageHash(status),
                index: api.registry.createType("ReferendumIndex", index),
                status: status
            };
        })) : (0, import_rxjs47.of)(null);
    });
}
function referendumsInfo(instanceId, api) {
    return memo(instanceId, function(ids) {
        return ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0, import_rxjs47.switchMap)(function(infos) {
            return (0, import_rxjs47.combineLatest)(ids.map(function(id2, index) {
                return api.derive.democracy._referendumInfo(id2, infos[index]);
            }));
        }), (0, import_rxjs47.map)(function(infos) {
            return infos.filter(function(r) {
                return !!r;
            });
        })) : (0, import_rxjs47.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
var import_rxjs48 = __toESM(require_cjs(), 1);
function sqrtElectorate(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.balances.totalIssuance().pipe((0, import_rxjs48.map)(bnSqrt));
    });
}
// ../../node_modules/@polkadot/api-derive/elections/index.js
var elections_exports = {};
__export(elections_exports, {
    info: function() {
        return info2;
    }
});
// ../../node_modules/@polkadot/api-derive/elections/info.js
var import_rxjs49 = __toESM(require_cjs(), 1);
function isSeatHolder(value1) {
    return !Array.isArray(value1);
}
function isCandidateTuple(value1) {
    return Array.isArray(value1);
}
function getAccountTuple(value1) {
    return isSeatHolder(value1) ? [
        value1.who,
        value1.stake
    ] : value1;
}
function getCandidate(value1) {
    return isCandidateTuple(value1) ? value1[0] : value1;
}
function sortAccounts(param, param1) {
    var _param = _sliced_to_array(param, 2), balanceA = _param[1], _param1 = _sliced_to_array(param1, 2), balanceB = _param1[1];
    return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
    return elections ? {
        candidacyBond: api.consts[elections].candidacyBond,
        desiredRunnersUp: api.consts[elections].desiredRunnersUp,
        desiredSeats: api.consts[elections].desiredMembers,
        termDuration: api.consts[elections].termDuration,
        votingBond: api.consts[elections].votingBond
    } : {};
}
function getModules(api) {
    var _ref = _sliced_to_array(api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || [
        "council"
    ], 1), council = _ref[0];
    var elections = api.query.phragmenElection ? "phragmenElection" : api.query.electionsPhragmen ? "electionsPhragmen" : api.query.elections ? "elections" : null;
    return [
        council,
        elections
    ];
}
function queryAll(api, council, elections) {
    return api.queryMulti([
        api.query[council].members,
        api.query[elections].candidates,
        api.query[elections].members,
        api.query[elections].runnersUp
    ]);
}
function queryCouncil(api, council) {
    return (0, import_rxjs49.combineLatest)([
        api.query[council].members(),
        (0, import_rxjs49.of)([]),
        (0, import_rxjs49.of)([]),
        (0, import_rxjs49.of)([])
    ]);
}
function info2(instanceId, api) {
    return memo(instanceId, function() {
        var _getModules = _sliced_to_array(getModules(api), 2), council = _getModules[0], elections = _getModules[1];
        return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe((0, import_rxjs49.map)(function(param) {
            var _param = _sliced_to_array(param, 4), councilMembers = _param[0], candidates2 = _param[1], members7 = _param[2], runnersUp = _param[3];
            return objectSpread({}, getConstants(api, elections), {
                candidateCount: api.registry.createType("u32", candidates2.length),
                candidates: candidates2.map(getCandidate),
                members: members7.length ? members7.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(function(a) {
                    return [
                        a,
                        api.registry.createType("Balance")
                    ];
                }),
                runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/imOnline/index.js
var imOnline_exports = {};
__export(imOnline_exports, {
    receivedHeartbeats: function() {
        return receivedHeartbeats;
    }
});
// ../../node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
var import_rxjs50 = __toESM(require_cjs(), 1);
function mapResult(param) {
    var _param = _sliced_to_array(param, 4), result = _param[0], validators2 = _param[1], heartbeats = _param[2], numBlocks = _param[3];
    validators2.forEach(function(validator, index) {
        var validatorId = validator.toString();
        var blockCount = numBlocks[index];
        var hasMessage = !heartbeats[index].isEmpty;
        var prev = result[validatorId];
        if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
            result[validatorId] = {
                blockCount: blockCount,
                hasMessage: hasMessage,
                isOnline: hasMessage || blockCount.gt(BN_ZERO)
            };
        }
    });
    return result;
}
function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$imOnline;
        return (_api$query$imOnline = api.query.imOnline) != null && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe((0, import_rxjs50.switchMap)(function(param) {
            var currentIndex = param.currentIndex, validators2 = param.validators;
            return (0, import_rxjs50.combineLatest)([
                (0, import_rxjs50.of)({}),
                (0, import_rxjs50.of)(validators2),
                api.query.imOnline.receivedHeartbeats.multi(validators2.map(function(_address, index) {
                    return [
                        currentIndex,
                        index
                    ];
                })),
                api.query.imOnline.authoredBlocks.multi(validators2.map(function(address) {
                    return [
                        currentIndex,
                        address
                    ];
                }))
            ]);
        }), (0, import_rxjs50.map)(mapResult)) : (0, import_rxjs50.of)({});
    });
}
// ../../node_modules/@polkadot/api-derive/membership/index.js
var membership_exports = {};
__export(membership_exports, {
    hasProposals: function() {
        return hasProposals4;
    },
    members: function() {
        return members4;
    },
    prime: function() {
        return prime4;
    },
    proposal: function() {
        return proposal4;
    },
    proposalCount: function() {
        return proposalCount4;
    },
    proposalHashes: function() {
        return proposalHashes4;
    },
    proposals: function() {
        return proposals5;
    }
});
var members4 = members("membership");
var hasProposals4 = hasProposals("membership");
var proposal4 = proposal("membership");
var proposalCount4 = proposalCount("membership");
var proposalHashes4 = proposalHashes("membership");
var proposals5 = proposals("membership");
var prime4 = prime("membership");
// ../../node_modules/@polkadot/api-derive/parachains/index.js
var parachains_exports = {};
__export(parachains_exports, {
    info: function() {
        return info3;
    },
    overview: function() {
        return overview;
    }
});
// ../../node_modules/@polkadot/api-derive/parachains/info.js
var import_rxjs51 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/parachains/util.js
function didUpdateToBool(didUpdate, id2) {
    return didUpdate.isSome ? didUpdate.unwrap().some(function(paraId) {
        return paraId.eq(id2);
    }) : false;
}
// ../../node_modules/@polkadot/api-derive/parachains/info.js
function parseActive(id2, active) {
    var found = active.find(function(param) {
        var _param = _sliced_to_array(param, 1), paraId = _param[0];
        return paraId === id2;
    });
    if (found && found[1].isSome) {
        var _found__unwrap = _sliced_to_array(found[1].unwrap(), 2), collatorId = _found__unwrap[0], retriable = _found__unwrap[1];
        return objectSpread({
            collatorId: collatorId
        }, retriable.isWithRetries ? {
            isRetriable: true,
            retries: retriable.asWithRetries.toNumber()
        } : {
            isRetriable: false,
            retries: 0
        });
    }
    return null;
}
function parseCollators(id2, collatorQueue) {
    return collatorQueue.map(function(queue) {
        var found = queue.find(function(param) {
            var _param = _sliced_to_array(param, 1), paraId = _param[0];
            return paraId === id2;
        });
        return found ? found[1] : null;
    });
}
function parse3(id2, param) {
    var _param = _sliced_to_array(param, 8), active = _param[0], retryQueue = _param[1], selectedThreads = _param[2], didUpdate = _param[3], info6 = _param[4], pendingSwap = _param[5], heads = _param[6], relayDispatchQueue = _param[7];
    if (info6.isNone) {
        return null;
    }
    return {
        active: parseActive(id2, active),
        didUpdate: didUpdateToBool(didUpdate, id2),
        heads: heads,
        id: id2,
        info: objectSpread({
            id: id2
        }, info6.unwrap()),
        pendingSwapId: pendingSwap.unwrapOr(null),
        relayDispatchQueue: relayDispatchQueue,
        retryCollators: parseCollators(id2, retryQueue),
        selectedCollators: parseCollators(id2, selectedThreads)
    };
}
function info3(instanceId, api) {
    return memo(instanceId, function(id2) {
        return api.query.registrar && api.query.parachains ? api.queryMulti([
            api.query.registrar.active,
            api.query.registrar.retryQueue,
            api.query.registrar.selectedThreads,
            api.query.parachains.didUpdate,
            [
                api.query.registrar.paras,
                id2
            ],
            [
                api.query.registrar.pendingSwap,
                id2
            ],
            [
                api.query.parachains.heads,
                id2
            ],
            [
                api.query.parachains.relayDispatchQueue,
                id2
            ]
        ]).pipe((0, import_rxjs51.map)(function(result) {
            return parse3(api.registry.createType("ParaId", id2), result);
        })) : (0, import_rxjs51.of)(null);
    });
}
// ../../node_modules/@polkadot/api-derive/parachains/overview.js
var import_rxjs52 = __toESM(require_cjs(), 1);
function parse4(param) {
    var _param = _sliced_to_array(param, 5), ids = _param[0], didUpdate = _param[1], infos = _param[2], pendingSwaps = _param[3], relayDispatchQueueSizes = _param[4];
    return ids.map(function(id2, index) {
        return {
            didUpdate: didUpdateToBool(didUpdate, id2),
            id: id2,
            info: objectSpread({
                id: id2
            }, infos[index].unwrapOr(null)),
            pendingSwapId: pendingSwaps[index].unwrapOr(null),
            relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
        };
    });
}
function overview(instanceId, api) {
    return memo(instanceId, function() {
        var _api$query$registrar;
        return (_api$query$registrar = api.query.registrar) != null && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe((0, import_rxjs52.switchMap)(function(paraIds) {
            return (0, import_rxjs52.combineLatest)([
                (0, import_rxjs52.of)(paraIds),
                api.query.parachains.didUpdate(),
                api.query.registrar.paras.multi(paraIds),
                api.query.registrar.pendingSwap.multi(paraIds),
                api.query.parachains.relayDispatchQueueSize.multi(paraIds)
            ]);
        }), (0, import_rxjs52.map)(parse4)) : (0, import_rxjs52.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/session/index.js
var session_exports = {};
__export(session_exports, {
    eraLength: function() {
        return eraLength;
    },
    eraProgress: function() {
        return eraProgress;
    },
    indexes: function() {
        return indexes2;
    },
    info: function() {
        return info4;
    },
    progress: function() {
        return progress;
    },
    sessionProgress: function() {
        return sessionProgress;
    }
});
// ../../node_modules/@polkadot/api-derive/session/indexes.js
var import_rxjs53 = __toESM(require_cjs(), 1);
function parse5(param) {
    var _param = _sliced_to_array(param, 5), currentIndex = _param[0], activeEra = _param[1], activeEraStart = _param[2], currentEra = _param[3], validatorCount = _param[4];
    return {
        activeEra: activeEra,
        activeEraStart: activeEraStart,
        currentEra: currentEra,
        currentIndex: currentIndex,
        validatorCount: validatorCount
    };
}
function queryStaking(api) {
    return api.queryMulti([
        api.query.session.currentIndex,
        api.query.staking.activeEra,
        api.query.staking.currentEra,
        api.query.staking.validatorCount
    ]).pipe((0, import_rxjs53.map)(function(param) {
        var _param = _sliced_to_array(param, 4), currentIndex = _param[0], activeOpt = _param[1], currentEra = _param[2], validatorCount = _param[3];
        var _activeOpt_unwrapOrDefault = activeOpt.unwrapOrDefault(), index = _activeOpt_unwrapOrDefault.index, start = _activeOpt_unwrapOrDefault.start;
        return parse5([
            currentIndex,
            index,
            start,
            currentEra.unwrapOrDefault(),
            validatorCount
        ]);
    }));
}
function querySession(api) {
    return api.query.session.currentIndex().pipe((0, import_rxjs53.map)(function(currentIndex) {
        return parse5([
            currentIndex,
            api.registry.createType("EraIndex"),
            api.registry.createType("Option<Moment>"),
            api.registry.createType("EraIndex"),
            api.registry.createType("u32")
        ]);
    }));
}
function empty(api) {
    return (0, import_rxjs53.of)(parse5([
        api.registry.createType("SessionIndex", 1),
        api.registry.createType("EraIndex"),
        api.registry.createType("Option<Moment>"),
        api.registry.createType("EraIndex"),
        api.registry.createType("u32")
    ]));
}
function indexes2(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api);
    });
}
// ../../node_modules/@polkadot/api-derive/session/info.js
var import_rxjs54 = __toESM(require_cjs(), 1);
function info4(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.session.indexes().pipe((0, import_rxjs54.map)(function(indexes3) {
            var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;
            var sessionLength = ((_api$consts = api.consts) == null ? void 0 : (_api$consts$babe = _api$consts.babe) == null ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType("u64", 1);
            var sessionsPerEra = ((_api$consts2 = api.consts) == null ? void 0 : (_api$consts2$staking = _api$consts2.staking) == null ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType("SessionIndex", 1);
            return objectSpread({
                eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
                isEpoch: !!api.query.babe,
                sessionLength: sessionLength,
                sessionsPerEra: sessionsPerEra
            }, indexes3);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/session/progress.js
var import_rxjs55 = __toESM(require_cjs(), 1);
function withProgressField(field) {
    return function(instanceId, api) {
        return memo(instanceId, function() {
            return api.derive.session.progress().pipe((0, import_rxjs55.map)(function(info6) {
                return info6[field];
            }));
        });
    };
}
function createDerive(api, info6, param) {
    var _param = _sliced_to_array(param, 4), currentSlot = _param[0], epochIndex = _param[1], epochOrGenesisStartSlot = _param[2], activeEraStartSessionIndex = _param[3];
    var epochStartSlot = epochIndex.mul(info6.sessionLength).iadd(epochOrGenesisStartSlot);
    var sessionProgress2 = currentSlot.sub(epochStartSlot);
    var eraProgress2 = info6.currentIndex.sub(activeEraStartSessionIndex).imul(info6.sessionLength).iadd(sessionProgress2);
    return objectSpread({
        eraProgress: api.registry.createType("BlockNumber", eraProgress2),
        sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
    }, info6);
}
function queryAura(api) {
    return api.derive.session.info().pipe((0, import_rxjs55.map)(function(info6) {
        return objectSpread({
            eraProgress: api.registry.createType("BlockNumber"),
            sessionProgress: api.registry.createType("BlockNumber")
        }, info6);
    }));
}
function queryBabe(api) {
    return api.derive.session.info().pipe((0, import_rxjs55.switchMap)(function(info6) {
        var _api$query$staking;
        return (0, import_rxjs55.combineLatest)([
            (0, import_rxjs55.of)(info6),
            // we may have no staking, but have babe (permissioned)
            (_api$query$staking = api.query.staking) != null && _api$query$staking.erasStartSessionIndex ? api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot,
                [
                    api.query.staking.erasStartSessionIndex,
                    info6.activeEra
                ]
            ]) : api.queryMulti([
                api.query.babe.currentSlot,
                api.query.babe.epochIndex,
                api.query.babe.genesisSlot
            ])
        ]);
    }), (0, import_rxjs55.map)(function(param) {
        var _param = _sliced_to_array(param, 2), info6 = _param[0], _param_ = _sliced_to_array(_param[1], 4), currentSlot = _param_[0], epochIndex = _param_[1], genesisSlot = _param_[2], optStartIndex = _param_[3];
        return [
            info6,
            [
                currentSlot,
                epochIndex,
                genesisSlot,
                optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)
            ]
        ];
    }));
}
function progress(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.babe ? queryBabe(api).pipe((0, import_rxjs55.map)(function(param) {
            var _param = _sliced_to_array(param, 2), info6 = _param[0], slots = _param[1];
            return createDerive(api, info6, slots);
        })) : queryAura(api);
    });
}
var eraLength = withProgressField("eraLength");
var eraProgress = withProgressField("eraProgress");
var sessionProgress = withProgressField("sessionProgress");
// ../../node_modules/@polkadot/api-derive/society/index.js
var society_exports = {};
__export(society_exports, {
    _members: function() {
        return _members;
    },
    candidates: function() {
        return candidates;
    },
    info: function() {
        return info5;
    },
    member: function() {
        return member;
    },
    members: function() {
        return members5;
    }
});
// ../../node_modules/@polkadot/api-derive/society/candidates.js
var import_rxjs56 = __toESM(require_cjs(), 1);
function candidates(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.society.candidates().pipe((0, import_rxjs56.switchMap)(function(candidates2) {
            return (0, import_rxjs56.combineLatest)([
                (0, import_rxjs56.of)(candidates2),
                api.query.society.suspendedCandidates.multi(candidates2.map(function(param) {
                    var who = param.who;
                    return who;
                }))
            ]);
        }), (0, import_rxjs56.map)(function(param) {
            var _param = _sliced_to_array(param, 2), candidates2 = _param[0], suspended = _param[1];
            return candidates2.map(function(param, index) {
                var kind = param.kind, value1 = param.value, who = param.who;
                return {
                    accountId: who,
                    isSuspended: suspended[index].isSome,
                    kind: kind,
                    value: value1
                };
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/society/info.js
var import_rxjs57 = __toESM(require_cjs(), 1);
function info5(instanceId, api) {
    return memo(instanceId, function() {
        return api.queryMulti([
            api.query.society.bids,
            api.query.society.defender,
            api.query.society.founder,
            api.query.society.head,
            api.query.society.maxMembers,
            api.query.society.pot
        ]).pipe((0, import_rxjs57.map)(function(param) {
            var _param = _sliced_to_array(param, 6), bids = _param[0], defender = _param[1], founder = _param[2], head = _param[3], maxMembers = _param[4], pot = _param[5];
            return {
                bids: bids,
                defender: defender.unwrapOr(void 0),
                founder: founder.unwrapOr(void 0),
                hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
                head: head.unwrapOr(void 0),
                maxMembers: maxMembers,
                pot: pot
            };
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/society/member.js
var import_rxjs58 = __toESM(require_cjs(), 1);
function member(instanceId, api) {
    return memo(instanceId, function(accountId2) {
        return api.derive.society._members([
            accountId2
        ]).pipe((0, import_rxjs58.map)(function(param) {
            var _param = _sliced_to_array(param, 1), result = _param[0];
            return result;
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/society/members.js
var import_rxjs59 = __toESM(require_cjs(), 1);
function _members(instanceId, api) {
    return memo(instanceId, function(accountIds) {
        return (0, import_rxjs59.combineLatest)([
            (0, import_rxjs59.of)(accountIds),
            api.query.society.payouts.multi(accountIds),
            api.query.society.strikes.multi(accountIds),
            api.query.society.defenderVotes.multi(accountIds),
            api.query.society.suspendedMembers.multi(accountIds),
            api.query.society.vouching.multi(accountIds)
        ]).pipe((0, import_rxjs59.map)(function(param) {
            var _param = _sliced_to_array(param, 6), accountIds2 = _param[0], payouts = _param[1], strikes = _param[2], defenderVotes = _param[3], suspended = _param[4], vouching = _param[5];
            return accountIds2.map(function(accountId2, index) {
                return {
                    accountId: accountId2,
                    isDefenderVoter: defenderVotes[index].isSome,
                    isSuspended: suspended[index].isTrue,
                    payouts: payouts[index],
                    strikes: strikes[index],
                    vote: defenderVotes[index].unwrapOr(void 0),
                    vouching: vouching[index].unwrapOr(void 0)
                };
            });
        }));
    });
}
function members5(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.society.members().pipe((0, import_rxjs59.switchMap)(function(members7) {
            return api.derive.society._members(members7);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/index.js
var staking_exports = {};
__export(staking_exports, {
    _eraExposure: function() {
        return _eraExposure;
    },
    _eraPrefs: function() {
        return _eraPrefs;
    },
    _eraSlashes: function() {
        return _eraSlashes;
    },
    _erasExposure: function() {
        return _erasExposure;
    },
    _erasPoints: function() {
        return _erasPoints;
    },
    _erasPrefs: function() {
        return _erasPrefs;
    },
    _erasRewards: function() {
        return _erasRewards;
    },
    _erasSlashes: function() {
        return _erasSlashes;
    },
    _ownExposures: function() {
        return _ownExposures;
    },
    _ownSlashes: function() {
        return _ownSlashes;
    },
    _stakerExposures: function() {
        return _stakerExposures;
    },
    _stakerPoints: function() {
        return _stakerPoints;
    },
    _stakerPrefs: function() {
        return _stakerPrefs;
    },
    _stakerRewards: function() {
        return _stakerRewards;
    },
    _stakerRewardsEras: function() {
        return _stakerRewardsEras;
    },
    _stakerSlashes: function() {
        return _stakerSlashes;
    },
    account: function() {
        return account2;
    },
    accounts: function() {
        return accounts;
    },
    currentPoints: function() {
        return currentPoints;
    },
    electedInfo: function() {
        return electedInfo;
    },
    eraExposure: function() {
        return eraExposure;
    },
    eraPrefs: function() {
        return eraPrefs;
    },
    eraSlashes: function() {
        return eraSlashes;
    },
    erasExposure: function() {
        return erasExposure;
    },
    erasHistoric: function() {
        return erasHistoric;
    },
    erasPoints: function() {
        return erasPoints;
    },
    erasPrefs: function() {
        return erasPrefs;
    },
    erasRewards: function() {
        return erasRewards;
    },
    erasSlashes: function() {
        return erasSlashes;
    },
    keys: function() {
        return keys;
    },
    keysMulti: function() {
        return keysMulti;
    },
    nextElected: function() {
        return nextElected;
    },
    overview: function() {
        return overview2;
    },
    ownExposure: function() {
        return ownExposure;
    },
    ownExposures: function() {
        return ownExposures;
    },
    ownSlash: function() {
        return ownSlash;
    },
    ownSlashes: function() {
        return ownSlashes;
    },
    query: function() {
        return query;
    },
    queryMulti: function() {
        return queryMulti;
    },
    stakerExposure: function() {
        return stakerExposure;
    },
    stakerExposures: function() {
        return stakerExposures;
    },
    stakerPoints: function() {
        return stakerPoints;
    },
    stakerPrefs: function() {
        return stakerPrefs;
    },
    stakerRewards: function() {
        return stakerRewards;
    },
    stakerRewardsMulti: function() {
        return stakerRewardsMulti;
    },
    stakerRewardsMultiEras: function() {
        return stakerRewardsMultiEras;
    },
    stakerSlashes: function() {
        return stakerSlashes;
    },
    stashes: function() {
        return stashes;
    },
    validators: function() {
        return validators;
    },
    waitingInfo: function() {
        return waitingInfo;
    }
});
// ../../node_modules/@polkadot/api-derive/staking/account.js
var import_rxjs60 = __toESM(require_cjs(), 1);
var QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
};
function groupByEra(list) {
    return list.reduce(function(map80, param) {
        var era = param.era, value1 = param.value;
        var key = era.toString();
        map80[key] = (map80[key] || BN_ZERO).add(value1.unwrap());
        return map80;
    }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
    var results = Object.entries(groupByEra(((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).filter(function(param) {
        var era = param.era;
        return era.unwrap().gt(sessionInfo.activeEra);
    }))).map(function(param) {
        var _param = _sliced_to_array(param, 2), eraString = _param[0], value1 = _param[1];
        return {
            remainingEras: new import_bn.default(eraString).isub(sessionInfo.activeEra),
            value: api.registry.createType("Balance", value1)
        };
    });
    return results.length ? results : void 0;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType("Balance", ((stakingLedger == null ? void 0 : stakingLedger.unlocking) || []).reduce(function(total, param) {
        var era = param.era, value1 = param.value;
        return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value1.unwrap());
    }, new import_bn.default(0)));
}
function parseResult2(api, sessionInfo, keys2, query2) {
    return objectSpread({}, keys2, query2, {
        redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
        unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
    });
}
function accounts(instanceId, api) {
    return memo(instanceId, function(accountIds) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : QUERY_OPTS;
        return api.derive.session.info().pipe((0, import_rxjs60.switchMap)(function(sessionInfo) {
            return (0, import_rxjs60.combineLatest)([
                api.derive.staking.keysMulti(accountIds),
                api.derive.staking.queryMulti(accountIds, opts)
            ]).pipe((0, import_rxjs60.map)(function(param) {
                var _param = _sliced_to_array(param, 2), keys2 = _param[0], queries = _param[1];
                return queries.map(function(q, index) {
                    return parseResult2(api, sessionInfo, keys2[index], q);
                });
            }));
        }));
    });
}
var account2 = firstMemo(function(api, accountId2, opts) {
    return api.derive.staking.accounts([
        accountId2
    ], opts);
});
// ../../node_modules/@polkadot/api-derive/staking/currentPoints.js
var import_rxjs61 = __toESM(require_cjs(), 1);
function currentPoints(instanceId, api) {
    return memo(instanceId, function() {
        return api.derive.session.indexes().pipe((0, import_rxjs61.switchMap)(function(param) {
            var activeEra = param.activeEra;
            return api.query.staking.erasRewardPoints(activeEra);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/erasExposure.js
var import_rxjs63 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/staking/cache.js
function getEraCache(CACHE_KEY6, era, withActive) {
    var cacheKey = "".concat(CACHE_KEY6, "-").concat(era.toString());
    return [
        cacheKey,
        withActive ? void 0 : deriveCache.get(cacheKey)
    ];
}
function getEraMultiCache(CACHE_KEY6, eras, withActive) {
    var cached = withActive ? [] : eras.map(function(e) {
        return deriveCache.get("".concat(CACHE_KEY6, "-").concat(e.toString()));
    }).filter(function(v) {
        return !!v;
    });
    return cached;
}
function setEraCache(cacheKey, withActive, value1) {
    !withActive && deriveCache.set(cacheKey, value1);
    return value1;
}
function setEraMultiCache(CACHE_KEY6, withActive, values) {
    !withActive && values.forEach(function(v) {
        return deriveCache.set("".concat(CACHE_KEY6, "-").concat(v.era.toString()), v);
    });
    return values;
}
function filterCachedEras(eras, cached, query2) {
    return eras.map(function(e) {
        return cached.find(function(param) {
            var era = param.era;
            return e.eq(era);
        }) || query2.find(function(param) {
            var era = param.era;
            return e.eq(era);
        });
    });
}
// ../../node_modules/@polkadot/api-derive/staking/util.js
var import_rxjs62 = __toESM(require_cjs(), 1);
var ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
    var chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
    var index = 0;
    var subject = new import_rxjs62.BehaviorSubject(chunked[index]);
    return subject.pipe((0, import_rxjs62.switchMap)(fn), (0, import_rxjs62.tap)(function() {
        nextTick(function() {
            index++;
            index === chunked.length ? subject.complete() : subject.next(chunked[index]);
        });
    }), (0, import_rxjs62.toArray)(), (0, import_rxjs62.map)(arrayFlatten));
}
function filterEras(eras, list) {
    return eras.filter(function(e) {
        return !list.some(function(param) {
            var era = param.era;
            return e.eq(era);
        });
    });
}
function erasHistoricApply(fn) {
    return function(instanceId, api) {
        return(// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo(instanceId, function() {
            var withActive = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            return api.derive.staking.erasHistoric(withActive).pipe((0, import_rxjs62.switchMap)(function(e) {
                return api.derive.staking[fn](e, withActive);
            }));
        }));
    };
}
function erasHistoricApplyAccount(fn) {
    return function(instanceId, api) {
        return(// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo(instanceId, function(accountId2) {
            var withActive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            return api.derive.staking.erasHistoric(withActive).pipe((0, import_rxjs62.switchMap)(function(e) {
                return api.derive.staking[fn](accountId2, e, withActive);
            }));
        }));
    };
}
function singleEra(fn) {
    return function(instanceId, api) {
        return(// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo(instanceId, function(era) {
            return api.derive.staking[fn](era, true);
        }));
    };
}
function combineEras(fn) {
    return function(instanceId, api) {
        return(// Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo(instanceId, function(eras, withActive) {
            return !eras.length ? (0, import_rxjs62.of)([]) : chunkEras(eras, function(eras2) {
                return (0, import_rxjs62.combineLatest)(eras2.map(function(e) {
                    return api.derive.staking[fn](e, withActive);
                }));
            });
        }));
    };
}
// ../../node_modules/@polkadot/api-derive/staking/erasExposure.js
var CACHE_KEY = "eraExposure";
function mapStakers(era, stakers) {
    var nominators = {};
    var validators2 = {};
    stakers.forEach(function(param) {
        var _param = _sliced_to_array(param, 2), key = _param[0], exposure = _param[1];
        var validatorId = key.args[1].toString();
        validators2[validatorId] = exposure;
        exposure.others.forEach(function(param, validatorIndex) {
            var who = param.who;
            var nominatorId = who.toString();
            nominators[nominatorId] = nominators[nominatorId] || [];
            nominators[nominatorId].push({
                validatorId: validatorId,
                validatorIndex: validatorIndex
            });
        });
    });
    return {
        era: era,
        nominators: nominators,
        validators: validators2
    };
}
function _eraExposure(instanceId, api) {
    return memo(instanceId, function(era) {
        var withActive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var _getEraCache = _sliced_to_array(getEraCache(CACHE_KEY, era, withActive), 2), cacheKey = _getEraCache[0], cached = _getEraCache[1];
        return cached ? (0, import_rxjs63.of)(cached) : api.query.staking.erasStakersClipped.entries(era).pipe((0, import_rxjs63.map)(function(r) {
            return setEraCache(cacheKey, withActive, mapStakers(era, r));
        }));
    });
}
var eraExposure = singleEra("_eraExposure");
var _erasExposure = combineEras("_eraExposure");
var erasExposure = erasHistoricApply("_erasExposure");
// ../../node_modules/@polkadot/api-derive/staking/erasHistoric.js
var import_rxjs64 = __toESM(require_cjs(), 1);
function erasHistoric(instanceId, api) {
    return memo(instanceId, function(withActive) {
        return (0, import_rxjs64.combineLatest)([
            api.query.staking.activeEra(),
            api.consts.staking.historyDepth ? (0, import_rxjs64.of)(api.consts.staking.historyDepth) : api.query.staking.historyDepth()
        ]).pipe((0, import_rxjs64.map)(function(param) {
            var _param = _sliced_to_array(param, 2), activeEraOpt = _param[0], historyDepth = _param[1];
            var result = [];
            var max3 = historyDepth.toNumber();
            var activeEra = activeEraOpt.unwrapOrDefault().index;
            var lastEra = activeEra;
            while(lastEra.gte(BN_ZERO) && result.length < max3){
                if (lastEra !== activeEra || withActive === true) {
                    result.push(api.registry.createType("EraIndex", lastEra));
                }
                lastEra = lastEra.sub(BN_ONE);
            }
            return result.reverse();
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/erasPoints.js
var import_rxjs65 = __toESM(require_cjs(), 1);
var CACHE_KEY2 = "eraPoints";
function mapValidators(param) {
    var individual = param.individual;
    return _to_consumable_array(individual.entries()).filter(function(param) {
        var _param = _sliced_to_array(param, 2), points = _param[1];
        return points.gt(BN_ZERO);
    }).reduce(function(result, param) {
        var _param = _sliced_to_array(param, 2), validatorId = _param[0], points = _param[1];
        result[validatorId.toString()] = points;
        return result;
    }, {});
}
function mapPoints(eras, points) {
    return eras.map(function(era, index) {
        return {
            era: era,
            eraPoints: points[index].total,
            validators: mapValidators(points[index])
        };
    });
}
function _erasPoints(instanceId, api) {
    return memo(instanceId, function(eras, withActive) {
        if (!eras.length) {
            return (0, import_rxjs65.of)([]);
        }
        var cached = getEraMultiCache(CACHE_KEY2, eras, withActive);
        var remaining = filterEras(eras, cached);
        return !remaining.length ? (0, import_rxjs65.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, import_rxjs65.map)(function(p) {
            return filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY2, withActive, mapPoints(remaining, p)));
        }));
    });
}
var erasPoints = erasHistoricApply("_erasPoints");
// ../../node_modules/@polkadot/api-derive/staking/erasPrefs.js
var import_rxjs66 = __toESM(require_cjs(), 1);
var CACHE_KEY3 = "eraPrefs";
function mapPrefs(era, all3) {
    var validators2 = {};
    all3.forEach(function(param) {
        var _param = _sliced_to_array(param, 2), key = _param[0], prefs = _param[1];
        validators2[key.args[1].toString()] = prefs;
    });
    return {
        era: era,
        validators: validators2
    };
}
function _eraPrefs(instanceId, api) {
    return memo(instanceId, function(era, withActive) {
        var _getEraCache = _sliced_to_array(getEraCache(CACHE_KEY3, era, withActive), 2), cacheKey = _getEraCache[0], cached = _getEraCache[1];
        return cached ? (0, import_rxjs66.of)(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe((0, import_rxjs66.map)(function(r) {
            return setEraCache(cacheKey, withActive, mapPrefs(era, r));
        }));
    });
}
var eraPrefs = singleEra("_eraPrefs");
var _erasPrefs = combineEras("_eraPrefs");
var erasPrefs = erasHistoricApply("_erasPrefs");
// ../../node_modules/@polkadot/api-derive/staking/erasRewards.js
var import_rxjs67 = __toESM(require_cjs(), 1);
var CACHE_KEY4 = "eraRewards";
function mapRewards(eras, optRewards) {
    return eras.map(function(era, index) {
        return {
            era: era,
            eraReward: optRewards[index].unwrapOrDefault()
        };
    });
}
function _erasRewards(instanceId, api) {
    return memo(instanceId, function(eras, withActive) {
        if (!eras.length) {
            return (0, import_rxjs67.of)([]);
        }
        var cached = getEraMultiCache(CACHE_KEY4, eras, withActive);
        var remaining = filterEras(eras, cached);
        if (!remaining.length) {
            return (0, import_rxjs67.of)(cached);
        }
        return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, import_rxjs67.map)(function(r) {
            return filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY4, withActive, mapRewards(remaining, r)));
        }));
    });
}
var erasRewards = erasHistoricApply("_erasRewards");
// ../../node_modules/@polkadot/api-derive/staking/erasSlashes.js
var import_rxjs68 = __toESM(require_cjs(), 1);
var CACHE_KEY5 = "eraSlashes";
function mapSlashes(era, noms, vals) {
    var nominators = {};
    var validators2 = {};
    noms.forEach(function(param) {
        var _param = _sliced_to_array(param, 2), key = _param[0], optBalance = _param[1];
        nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(function(param) {
        var _param = _sliced_to_array(param, 2), key = _param[0], optRes = _param[1];
        validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return {
        era: era,
        nominators: nominators,
        validators: validators2
    };
}
function _eraSlashes(instanceId, api) {
    return memo(instanceId, function(era, withActive) {
        var _getEraCache = _sliced_to_array(getEraCache(CACHE_KEY5, era, withActive), 2), cacheKey = _getEraCache[0], cached = _getEraCache[1];
        return cached ? (0, import_rxjs68.of)(cached) : (0, import_rxjs68.combineLatest)([
            api.query.staking.nominatorSlashInEra.entries(era),
            api.query.staking.validatorSlashInEra.entries(era)
        ]).pipe((0, import_rxjs68.map)(function(param) {
            var _param = _sliced_to_array(param, 2), n = _param[0], v = _param[1];
            return setEraCache(cacheKey, withActive, mapSlashes(era, n, v));
        }));
    });
}
var eraSlashes = singleEra("_eraSlashes");
var _erasSlashes = combineEras("_eraSlashes");
var erasSlashes = erasHistoricApply("_erasSlashes");
// ../../node_modules/@polkadot/api-derive/staking/electedInfo.js
var import_rxjs69 = __toESM(require_cjs(), 1);
var DEFAULT_FLAGS = {
    withController: true,
    withExposure: true,
    withPrefs: true
};
function combineAccounts(nextElected2, validators2) {
    return arrayFlatten([
        nextElected2,
        validators2.filter(function(v) {
            return !nextElected2.find(function(n) {
                return n.eq(v);
            });
        })
    ]);
}
function electedInfo(instanceId, api) {
    return memo(instanceId, function() {
        var flags2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_FLAGS;
        return api.derive.staking.validators().pipe((0, import_rxjs69.switchMap)(function(param) {
            var nextElected2 = param.nextElected, validators2 = param.validators;
            return api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2).pipe((0, import_rxjs69.map)(function(info6) {
                return {
                    info: info6,
                    nextElected: nextElected2,
                    validators: validators2
                };
            }));
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/keys.js
var import_rxjs70 = __toESM(require_cjs(), 1);
function extractsIds(stashId, queuedKeys, nextKeys) {
    var sessionIds = (queuedKeys.find(function(param) {
        var _param = _sliced_to_array(param, 1), currentId = _param[0];
        return currentId.eq(stashId);
    }) || [
        void 0,
        []
    ])[1];
    var nextSessionIds = nextKeys.unwrapOr([]);
    return {
        nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : _to_consumable_array(nextSessionIds.values()),
        sessionIds: Array.isArray(sessionIds) ? sessionIds : _to_consumable_array(sessionIds.values())
    };
}
var keys = firstMemo(function(api, stashId) {
    return api.derive.staking.keysMulti([
        stashId
    ]);
});
function keysMulti(instanceId, api) {
    return memo(instanceId, function(stashIds) {
        return stashIds.length ? api.query.session.queuedKeys().pipe((0, import_rxjs70.switchMap)(function(queuedKeys) {
            var _api$consts$session;
            return (0, import_rxjs70.combineLatest)([
                (0, import_rxjs70.of)(queuedKeys),
                (_api$consts$session = api.consts.session) != null && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(function(s) {
                    return [
                        api.consts.session.dedupKeyPrefix,
                        s
                    ];
                })) : (0, import_rxjs70.combineLatest)(stashIds.map(function(s) {
                    return api.query.session.nextKeys(s);
                }))
            ]);
        }), (0, import_rxjs70.map)(function(param) {
            var _param = _sliced_to_array(param, 2), queuedKeys = _param[0], nextKeys = _param[1];
            return stashIds.map(function(stashId, index) {
                return extractsIds(stashId, queuedKeys, nextKeys[index]);
            });
        })) : (0, import_rxjs70.of)([]);
    });
}
// ../../node_modules/@polkadot/api-derive/staking/overview.js
var import_rxjs71 = __toESM(require_cjs(), 1);
function overview2(instanceId, api) {
    return memo(instanceId, function() {
        return (0, import_rxjs71.combineLatest)([
            api.derive.session.indexes(),
            api.derive.staking.validators()
        ]).pipe((0, import_rxjs71.map)(function(param) {
            var _param = _sliced_to_array(param, 2), indexes3 = _param[0], _param_ = _param[1], nextElected2 = _param_.nextElected, validators2 = _param_.validators;
            return objectSpread({}, indexes3, {
                nextElected: nextElected2,
                validators: validators2
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/ownExposure.js
var import_rxjs72 = __toESM(require_cjs(), 1);
function _ownExposures(instanceId, api) {
    return memo(instanceId, function(accountId2, eras, _withActive) {
        return eras.length ? (0, import_rxjs72.combineLatest)([
            (0, import_rxjs72.combineLatest)(eras.map(function(e) {
                return api.query.staking.erasStakersClipped(e, accountId2);
            })),
            (0, import_rxjs72.combineLatest)(eras.map(function(e) {
                return api.query.staking.erasStakers(e, accountId2);
            }))
        ]).pipe((0, import_rxjs72.map)(function(param) {
            var _param = _sliced_to_array(param, 2), clp = _param[0], exp = _param[1];
            return eras.map(function(era, index) {
                return {
                    clipped: clp[index],
                    era: era,
                    exposure: exp[index]
                };
            });
        })) : (0, import_rxjs72.of)([]);
    });
}
var ownExposure = firstMemo(function(api, accountId2, era) {
    return api.derive.staking._ownExposures(accountId2, [
        era
    ], true);
});
var ownExposures = erasHistoricApplyAccount("_ownExposures");
// ../../node_modules/@polkadot/api-derive/staking/ownSlashes.js
var import_rxjs73 = __toESM(require_cjs(), 1);
function _ownSlashes(instanceId, api) {
    return memo(instanceId, function(accountId2, eras, _withActive) {
        return eras.length ? (0, import_rxjs73.combineLatest)([
            (0, import_rxjs73.combineLatest)(eras.map(function(e) {
                return api.query.staking.validatorSlashInEra(e, accountId2);
            })),
            (0, import_rxjs73.combineLatest)(eras.map(function(e) {
                return api.query.staking.nominatorSlashInEra(e, accountId2);
            }))
        ]).pipe((0, import_rxjs73.map)(function(param) {
            var _param = _sliced_to_array(param, 2), vals = _param[0], noms = _param[1];
            return eras.map(function(era, index) {
                return {
                    era: era,
                    total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
                };
            });
        })) : (0, import_rxjs73.of)([]);
    });
}
var ownSlash = firstMemo(function(api, accountId2, era) {
    return api.derive.staking._ownSlashes(accountId2, [
        era
    ], true);
});
var ownSlashes = erasHistoricApplyAccount("_ownSlashes");
// ../../node_modules/@polkadot/api-derive/staking/query.js
var import_rxjs74 = __toESM(require_cjs(), 1);
function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
        accountId: stashId,
        controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
        exposure: exposure,
        nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
        rewardDestination: rewardDestination,
        stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
        stashId: stashId,
        validatorPrefs: validatorPrefs
    };
}
function getLedgers(api, optIds, param) {
    var _param_withLedger = param.withLedger, withLedger = _param_withLedger === void 0 ? false : _param_withLedger;
    var ids = optIds.filter(function(o) {
        return withLedger && !!o && o.isSome;
    }).map(function(o) {
        return o.unwrap();
    });
    var emptyLed = api.registry.createType("Option<StakingLedger>");
    return (ids.length ? (0, import_rxjs74.combineLatest)(ids.map(function(s) {
        return api.query.staking.ledger(s);
    })) : (0, import_rxjs74.of)([])).pipe((0, import_rxjs74.map)(function(optLedgers) {
        var offset = -1;
        return optIds.map(function(o) {
            return o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed;
        });
    }));
}
function getStashInfo(api, stashIds, activeEra, param) {
    var withController = param.withController, withDestination = param.withDestination, withExposure = param.withExposure, withLedger = param.withLedger, withNominations = param.withNominations, withPrefs = param.withPrefs;
    var emptyNoms = api.registry.createType("Option<Nominations>");
    var emptyRewa = api.registry.createType("RewardDestination");
    var emptyExpo = api.registry.createType("Exposure");
    var emptyPrefs = api.registry.createType("ValidatorPrefs");
    return (0, import_rxjs74.combineLatest)([
        withController || withLedger ? (0, import_rxjs74.combineLatest)(stashIds.map(function(s) {
            return api.query.staking.bonded(s);
        })) : (0, import_rxjs74.of)(stashIds.map(function() {
            return null;
        })),
        withNominations ? (0, import_rxjs74.combineLatest)(stashIds.map(function(s) {
            return api.query.staking.nominators(s);
        })) : (0, import_rxjs74.of)(stashIds.map(function() {
            return emptyNoms;
        })),
        withDestination ? (0, import_rxjs74.combineLatest)(stashIds.map(function(s) {
            return api.query.staking.payee(s);
        })) : (0, import_rxjs74.of)(stashIds.map(function() {
            return emptyRewa;
        })),
        withPrefs ? (0, import_rxjs74.combineLatest)(stashIds.map(function(s) {
            return api.query.staking.validators(s);
        })) : (0, import_rxjs74.of)(stashIds.map(function() {
            return emptyPrefs;
        })),
        withExposure ? (0, import_rxjs74.combineLatest)(stashIds.map(function(s) {
            return api.query.staking.erasStakers(activeEra, s);
        })) : (0, import_rxjs74.of)(stashIds.map(function() {
            return emptyExpo;
        }))
    ]);
}
function getBatch(api, activeEra, stashIds, flags2) {
    return getStashInfo(api, stashIds, activeEra, flags2).pipe((0, import_rxjs74.switchMap)(function(param) {
        var _param = _sliced_to_array(param, 5), controllerIdOpt = _param[0], nominatorsOpt = _param[1], rewardDestination = _param[2], validatorPrefs = _param[3], exposure = _param[4];
        return getLedgers(api, controllerIdOpt, flags2).pipe((0, import_rxjs74.map)(function(stakingLedgerOpts) {
            return stashIds.map(function(stashId, index) {
                return parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]);
            });
        }));
    }));
}
var query = firstMemo(function(api, accountId2, flags2) {
    return api.derive.staking.queryMulti([
        accountId2
    ], flags2);
});
function queryMulti(instanceId, api) {
    return memo(instanceId, function(accountIds, flags2) {
        return api.derive.session.indexes().pipe((0, import_rxjs74.switchMap)(function(param) {
            var activeEra = param.activeEra;
            var stashIds = accountIds.map(function(a) {
                return api.registry.createType("AccountId", a);
            });
            return stashIds.length ? getBatch(api, activeEra, stashIds, flags2) : (0, import_rxjs74.of)([]);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/stakerExposure.js
var import_rxjs75 = __toESM(require_cjs(), 1);
function _stakerExposures(instanceId, api) {
    return memo(instanceId, function(accountIds, eras) {
        var withActive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var stakerIds = accountIds.map(function(a) {
            return api.registry.createType("AccountId", a).toString();
        });
        return api.derive.staking._erasExposure(eras, withActive).pipe((0, import_rxjs75.map)(function(exposures) {
            return stakerIds.map(function(stakerId) {
                return exposures.map(function(param) {
                    var era = param.era, allNominators = param.nominators, allValidators = param.validators;
                    var isValidator = !!allValidators[stakerId];
                    var validators2 = {};
                    var nominating = allNominators[stakerId] || [];
                    if (isValidator) {
                        validators2[stakerId] = allValidators[stakerId];
                    } else if (nominating) {
                        nominating.forEach(function(param) {
                            var validatorId = param.validatorId;
                            validators2[validatorId] = allValidators[validatorId];
                        });
                    }
                    return {
                        era: era,
                        isEmpty: !Object.keys(validators2).length,
                        isValidator: isValidator,
                        nominating: nominating,
                        validators: validators2
                    };
                });
            });
        }));
    });
}
function stakerExposures(instanceId, api) {
    return memo(instanceId, function(accountIds) {
        var withActive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        return api.derive.staking.erasHistoric(withActive).pipe((0, import_rxjs75.switchMap)(function(eras) {
            return api.derive.staking._stakerExposures(accountIds, eras, withActive);
        }));
    });
}
var stakerExposure = firstMemo(function(api, accountId2, withActive) {
    return api.derive.staking.stakerExposures([
        accountId2
    ], withActive);
});
// ../../node_modules/@polkadot/api-derive/staking/stakerPoints.js
var import_rxjs76 = __toESM(require_cjs(), 1);
function _stakerPoints(instanceId, api) {
    return memo(instanceId, function(accountId2, eras, withActive) {
        var stakerId = api.registry.createType("AccountId", accountId2).toString();
        return api.derive.staking._erasPoints(eras, withActive).pipe((0, import_rxjs76.map)(function(points) {
            return points.map(function(param) {
                var era = param.era, eraPoints = param.eraPoints, validators2 = param.validators;
                return {
                    era: era,
                    eraPoints: eraPoints,
                    points: validators2[stakerId] || api.registry.createType("RewardPoint")
                };
            });
        }));
    });
}
var stakerPoints = erasHistoricApplyAccount("_stakerPoints");
// ../../node_modules/@polkadot/api-derive/staking/stakerPrefs.js
var import_rxjs77 = __toESM(require_cjs(), 1);
function _stakerPrefs(instanceId, api) {
    return memo(instanceId, function(accountId2, eras, _withActive) {
        return api.query.staking.erasValidatorPrefs.multi(eras.map(function(e) {
            return [
                e,
                accountId2
            ];
        })).pipe((0, import_rxjs77.map)(function(all3) {
            return all3.map(function(validatorPrefs, index) {
                return {
                    era: eras[index],
                    validatorPrefs: validatorPrefs
                };
            });
        }));
    });
}
var stakerPrefs = erasHistoricApplyAccount("_stakerPrefs");
// ../../node_modules/@polkadot/api-derive/staking/stakerRewards.js
var import_rxjs78 = __toESM(require_cjs(), 1);
function parseRewards(api, stashId, param, exposures) {
    var _param = _sliced_to_array(param, 3), erasPoints2 = _param[0], erasPrefs2 = _param[1], erasRewards2 = _param[2];
    return exposures.map(function(param) {
        var era = param.era, isEmpty = param.isEmpty, isValidator = param.isValidator, nominating = param.nominating, eraValidators = param.validators;
        var _ref = erasPoints2.find(function(p) {
            return p.era.eq(era);
        }) || {
            eraPoints: BN_ZERO,
            validators: {}
        }, eraPoints = _ref.eraPoints, allValPoints = _ref.validators;
        var eraReward = (erasRewards2.find(function(r) {
            return r.era.eq(era);
        }) || {
            eraReward: api.registry.createType("Balance")
        }).eraReward;
        var _ref1 = erasPrefs2.find(function(p) {
            return p.era.eq(era);
        }) || {
            validators: {}
        }, allValPrefs = _ref1.validators;
        var validators2 = {};
        var stakerId = stashId.toString();
        Object.entries(eraValidators).forEach(function(param) {
            var _param = _sliced_to_array(param, 2), validatorId = _param[0], exposure = _param[1];
            var _allValPrefs$validato, _exposure$total;
            var valPoints = allValPoints[validatorId] || BN_ZERO;
            var valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) == null ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;
            var expTotal = ((_exposure$total = exposure.total) == null ? void 0 : _exposure$total.unwrap()) || BN_ZERO;
            var avail = BN_ZERO;
            var value1;
            if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                avail = eraReward.mul(valPoints).div(eraPoints);
                var valCut = valComm.mul(avail).div(BN_BILLION);
                var staked;
                if (validatorId === stakerId) {
                    staked = exposure.own.unwrap();
                } else {
                    var stakerExp = exposure.others.find(function(param) {
                        var who = param.who;
                        return who.eq(stakerId);
                    });
                    staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
                }
                value1 = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
            }
            validators2[validatorId] = {
                total: api.registry.createType("Balance", avail),
                value: api.registry.createType("Balance", value1)
            };
        });
        return {
            era: era,
            eraReward: eraReward,
            isEmpty: isEmpty,
            isValidator: isValidator,
            nominating: nominating,
            validators: validators2
        };
    });
}
function allUniqValidators(rewards) {
    return rewards.reduce(function(param, rewards2) {
        var _param = _sliced_to_array(param, 2), all3 = _param[0], perStash = _param[1];
        var uniq = [];
        perStash.push(uniq);
        rewards2.forEach(function(param) {
            var validators2 = param.validators;
            return Object.keys(validators2).forEach(function(validatorId) {
                if (!uniq.includes(validatorId)) {
                    uniq.push(validatorId);
                    if (!all3.includes(validatorId)) {
                        all3.push(validatorId);
                    }
                }
            });
        });
        return [
            all3,
            perStash
        ];
    }, [
        [],
        []
    ]);
}
function removeClaimed(validators2, queryValidators, reward) {
    var rm = [];
    Object.keys(reward.validators).forEach(function(validatorId) {
        var index = validators2.indexOf(validatorId);
        if (index !== -1) {
            var valLedger = queryValidators[index].stakingLedger;
            if (valLedger != null && valLedger.claimedRewards.some(function(e) {
                return reward.era.eq(e);
            })) {
                rm.push(validatorId);
            }
        }
    });
    rm.forEach(function(validatorId) {
        delete reward.validators[validatorId];
    });
}
function filterRewards(eras, valInfo, param) {
    var rewards = param.rewards, stakingLedger = param.stakingLedger;
    var filter = eras.filter(function(e) {
        return !stakingLedger.claimedRewards.some(function(s) {
            return s.eq(e);
        });
    });
    var validators2 = valInfo.map(function(param) {
        var _param = _sliced_to_array(param, 1), v = _param[0];
        return v;
    });
    var queryValidators = valInfo.map(function(param) {
        var _param = _sliced_to_array(param, 2), q = _param[1];
        return q;
    });
    return rewards.filter(function(param) {
        var isEmpty = param.isEmpty;
        return !isEmpty;
    }).filter(function(reward) {
        if (!filter.some(function(e) {
            return reward.era.eq(e);
        })) {
            return false;
        }
        removeClaimed(validators2, queryValidators, reward);
        return true;
    }).filter(function(param) {
        var validators3 = param.validators;
        return Object.keys(validators3).length !== 0;
    }).map(function(reward) {
        return objectSpread({}, reward, {
            nominators: reward.nominating.filter(function(n) {
                return reward.validators[n.validatorId];
            })
        });
    });
}
function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, function(eras) {
        var withActive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        return (0, import_rxjs78.combineLatest)([
            api.derive.staking._erasPoints(eras, withActive),
            api.derive.staking._erasPrefs(eras, withActive),
            api.derive.staking._erasRewards(eras, withActive)
        ]);
    });
}
function _stakerRewards(instanceId, api) {
    return memo(instanceId, function(accountIds, eras) {
        var withActive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        return (0, import_rxjs78.combineLatest)([
            api.derive.staking.queryMulti(accountIds, {
                withLedger: true
            }),
            api.derive.staking._stakerExposures(accountIds, eras, withActive),
            api.derive.staking._stakerRewardsEras(eras, withActive)
        ]).pipe((0, import_rxjs78.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 3), queries = _param[0], exposures = _param[1], erasResult = _param[2];
            var allRewards = queries.map(function(param, index) {
                var stakingLedger = param.stakingLedger, stashId = param.stashId;
                return !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]);
            });
            if (withActive) {
                return (0, import_rxjs78.of)(allRewards);
            }
            var _allUniqValidators = _sliced_to_array(allUniqValidators(allRewards), 2), allValidators = _allUniqValidators[0], stashValidators = _allUniqValidators[1];
            return api.derive.staking.queryMulti(allValidators, {
                withLedger: true
            }).pipe((0, import_rxjs78.map)(function(queriedVals) {
                return queries.map(function(param, index) {
                    var stakingLedger = param.stakingLedger;
                    return filterRewards(eras, stashValidators[index].map(function(validatorId) {
                        return [
                            validatorId,
                            queriedVals.find(function(q) {
                                return q.accountId.eq(validatorId);
                            })
                        ];
                    }), {
                        rewards: allRewards[index],
                        stakingLedger: stakingLedger
                    });
                });
            }));
        }));
    });
}
var stakerRewards = firstMemo(function(api, accountId2, withActive) {
    return api.derive.staking.erasHistoric(withActive).pipe((0, import_rxjs78.switchMap)(function(eras) {
        return api.derive.staking._stakerRewards([
            accountId2
        ], eras, withActive);
    }));
});
function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, function(accountIds, eras) {
        return accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : (0, import_rxjs78.of)([]);
    });
}
function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, function(accountIds) {
        var withActive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        return api.derive.staking.erasHistoric(withActive).pipe((0, import_rxjs78.switchMap)(function(eras) {
            return api.derive.staking.stakerRewardsMultiEras(accountIds, eras);
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/stakerSlashes.js
var import_rxjs79 = __toESM(require_cjs(), 1);
function _stakerSlashes(instanceId, api) {
    return memo(instanceId, function(accountId2, eras, withActive) {
        var stakerId = api.registry.createType("AccountId", accountId2).toString();
        return api.derive.staking._erasSlashes(eras, withActive).pipe((0, import_rxjs79.map)(function(slashes) {
            return slashes.map(function(param) {
                var era = param.era, nominators = param.nominators, validators2 = param.validators;
                return {
                    era: era,
                    total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
                };
            });
        }));
    });
}
var stakerSlashes = erasHistoricApplyAccount("_stakerSlashes");
// ../../node_modules/@polkadot/api-derive/staking/stashes.js
var import_rxjs80 = __toESM(require_cjs(), 1);
function onBondedEvent(api) {
    var current = Date.now();
    return api.query.system.events().pipe((0, import_rxjs80.map)(function(events2) {
        current = events2.filter(function(param) {
            var event = param.event, phase = param.phase;
            try {
                return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
            } catch (e) {
                return false;
            }
        }) ? Date.now() : current;
        return current;
    }), (0, import_rxjs80.startWith)(current), drr({
        skipTimeout: true
    }));
}
function stashes(instanceId, api) {
    return memo(instanceId, function() {
        return onBondedEvent(api).pipe((0, import_rxjs80.switchMap)(function() {
            return api.query.staking.validators.keys();
        }), (0, import_rxjs80.map)(function(keys2) {
            return keys2.map(function(param) {
                var _param_args = _sliced_to_array(param.args, 1), v = _param_args[0];
                return v;
            }).filter(function(a) {
                return a;
            });
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/validators.js
var import_rxjs81 = __toESM(require_cjs(), 1);
function nextElected(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.staking.erasStakers ? api.derive.session.indexes().pipe(// only populate for next era in the last session, so track both here - entries are not
        // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
        (0, import_rxjs81.switchMap)(function(param) {
            var currentEra = param.currentEra;
            return api.query.staking.erasStakers.keys(currentEra);
        }), (0, import_rxjs81.map)(function(keys2) {
            return keys2.map(function(param) {
                var _param_args = _sliced_to_array(param.args, 2), accountId2 = _param_args[1];
                return accountId2;
            });
        })) : api.query.staking.currentElected();
    });
}
function validators(instanceId, api) {
    return memo(instanceId, function() {
        return(// Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
        // in all actual real-world deployed chains, it does create some confusion for limited template chains
        (0, import_rxjs81.combineLatest)([
            api.query.session ? api.query.session.validators() : (0, import_rxjs81.of)([]),
            api.query.staking ? api.derive.staking.nextElected() : (0, import_rxjs81.of)([])
        ]).pipe((0, import_rxjs81.map)(function(param) {
            var _param = _sliced_to_array(param, 2), validators2 = _param[0], nextElected2 = _param[1];
            return {
                nextElected: nextElected2.length ? nextElected2 : validators2,
                validators: validators2
            };
        })));
    });
}
// ../../node_modules/@polkadot/api-derive/staking/waitingInfo.js
var import_rxjs82 = __toESM(require_cjs(), 1);
var DEFAULT_FLAGS2 = {
    withController: true,
    withPrefs: true
};
function waitingInfo(instanceId, api) {
    return memo(instanceId, function() {
        var flags2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_FLAGS2;
        return (0, import_rxjs82.combineLatest)([
            api.derive.staking.validators(),
            api.derive.staking.stashes()
        ]).pipe((0, import_rxjs82.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), _param_ = _param[0], nextElected2 = _param_.nextElected, stashes2 = _param[1];
            var elected = nextElected2.map(function(a) {
                return a.toString();
            });
            var waiting = stashes2.filter(function(v) {
                return !elected.includes(v.toString());
            });
            return api.derive.staking.queryMulti(waiting, flags2).pipe((0, import_rxjs82.map)(function(info6) {
                return {
                    info: info6,
                    waiting: waiting
                };
            }));
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/technicalCommittee/index.js
var technicalCommittee_exports = {};
__export(technicalCommittee_exports, {
    hasProposals: function() {
        return hasProposals5;
    },
    members: function() {
        return members6;
    },
    prime: function() {
        return prime5;
    },
    proposal: function() {
        return proposal5;
    },
    proposalCount: function() {
        return proposalCount5;
    },
    proposalHashes: function() {
        return proposalHashes5;
    },
    proposals: function() {
        return proposals6;
    }
});
var members6 = members("technicalCommittee");
var hasProposals5 = hasProposals("technicalCommittee");
var proposal5 = proposal("technicalCommittee");
var proposalCount5 = proposalCount("technicalCommittee");
var proposalHashes5 = proposalHashes("technicalCommittee");
var proposals6 = proposals("technicalCommittee");
var prime5 = prime("technicalCommittee");
// ../../node_modules/@polkadot/api-derive/treasury/index.js
var treasury_exports = {};
__export(treasury_exports, {
    proposals: function() {
        return proposals7;
    }
});
// ../../node_modules/@polkadot/api-derive/treasury/proposals.js
var import_rxjs83 = __toESM(require_cjs(), 1);
function parseResult3(api, param) {
    var allIds = param.allIds, allProposals = param.allProposals, approvalIds = param.approvalIds, councilProposals = param.councilProposals, proposalCount6 = param.proposalCount;
    var approvals = [];
    var proposals8 = [];
    var councilTreasury = councilProposals.filter(function(param) {
        var proposal6 = param.proposal;
        return proposal6 && (api.tx.treasury.approveProposal.is(proposal6) || api.tx.treasury.rejectProposal.is(proposal6));
    });
    allIds.forEach(function(id2, index) {
        if (allProposals[index].isSome) {
            var council = councilTreasury.filter(function(param) {
                var proposal6 = param.proposal;
                return proposal6 && id2.eq(proposal6.args[0]);
            }).sort(function(a, b) {
                return a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1;
            });
            var isApproval = approvalIds.some(function(approvalId) {
                return approvalId.eq(id2);
            });
            var derived = {
                council: council,
                id: id2,
                proposal: allProposals[index].unwrap()
            };
            if (isApproval) {
                approvals.push(derived);
            } else {
                proposals8.push(derived);
            }
        }
    });
    return {
        approvals: approvals,
        proposalCount: proposalCount6,
        proposals: proposals8
    };
}
function retrieveProposals(api, proposalCount6, approvalIds) {
    var _loop = function(index) {
        if (!approvalIds.some(function(id2) {
            return id2.eqn(index);
        })) {
            proposalIds.push(api.registry.createType("ProposalIndex", index));
        }
    };
    var proposalIds = [];
    var count = proposalCount6.toNumber();
    for(var index = 0; index < count; index++)_loop(index);
    var allIds = _to_consumable_array(proposalIds).concat(_to_consumable_array(approvalIds));
    return (0, import_rxjs83.combineLatest)([
        api.query.treasury.proposals.multi(allIds),
        api.derive.council ? api.derive.council.proposals() : (0, import_rxjs83.of)([])
    ]).pipe((0, import_rxjs83.map)(function(param) {
        var _param = _sliced_to_array(param, 2), allProposals = _param[0], councilProposals = _param[1];
        return parseResult3(api, {
            allIds: allIds,
            allProposals: allProposals,
            approvalIds: approvalIds,
            councilProposals: councilProposals,
            proposalCount: proposalCount6
        });
    }));
}
function proposals7(instanceId, api) {
    return memo(instanceId, function() {
        return api.query.treasury ? (0, import_rxjs83.combineLatest)([
            api.query.treasury.proposalCount(),
            api.query.treasury.approvals()
        ]).pipe((0, import_rxjs83.switchMap)(function(param) {
            var _param = _sliced_to_array(param, 2), proposalCount6 = _param[0], approvalIds = _param[1];
            return retrieveProposals(api, proposalCount6, approvalIds);
        })) : (0, import_rxjs83.of)({
            approvals: [],
            proposalCount: api.registry.createType("ProposalIndex"),
            proposals: []
        });
    });
}
// ../../node_modules/@polkadot/api-derive/tx/index.js
var tx_exports = {};
__export(tx_exports, {
    events: function() {
        return events;
    },
    signingInfo: function() {
        return signingInfo;
    }
});
// ../../node_modules/@polkadot/api-derive/tx/events.js
var import_rxjs84 = __toESM(require_cjs(), 1);
function events(instanceId, api) {
    return memo(instanceId, function(blockHash) {
        return (0, import_rxjs84.combineLatest)([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash).pipe((0, import_rxjs84.switchMap)(function(queryAt) {
                return queryAt.system.events();
            }))
        ]).pipe((0, import_rxjs84.map)(function(param) {
            var _param = _sliced_to_array(param, 2), block = _param[0], events2 = _param[1];
            return {
                block: block,
                events: events2
            };
        }));
    });
}
// ../../node_modules/@polkadot/api-derive/tx/signingInfo.js
var import_rxjs85 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api-derive/tx/constants.js
var FALLBACK_MAX_HASH_COUNT = 250;
var FALLBACK_PERIOD = new import_bn.default(6 * 1e3);
var MAX_FINALITY_LAG = new import_bn.default(5);
var MORTAL_PERIOD = new import_bn.default(5 * 60 * 1e3);
// ../../node_modules/@polkadot/api-derive/tx/signingInfo.js
function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe((0, import_rxjs85.map)(function(param) {
        var accountNonce = param.accountNonce;
        return accountNonce;
    }));
}
function nextNonce(api, address) {
    var _api$rpc$system;
    return (_api$rpc$system = api.rpc.system) != null && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}
function signingHeader(api) {
    return (0, import_rxjs85.combineLatest)([
        api.rpc.chain.getHeader().pipe((0, import_rxjs85.switchMap)(function(header) {
            return(// check for chains at genesis (until block 1 is produced, e.g. 6s), since
            // we do need to allow transactions at chain start (also dev/seal chains)
            header.parentHash.isEmpty ? (0, import_rxjs85.of)(header) : api.rpc.chain.getHeader(header.parentHash));
        })),
        api.rpc.chain.getFinalizedHead().pipe((0, import_rxjs85.switchMap)(function(hash3) {
            return api.rpc.chain.getHeader(hash3);
        }))
    ]).pipe((0, import_rxjs85.map)(function(param) {
        var _param = _sliced_to_array(param, 2), current = _param[0], finalized = _param[1];
        return(// determine the hash to use, current when lag > max, else finalized
        unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized);
    }));
}
function signingInfo(_instanceId3, api) {
    return function(address, nonce, era) {
        return (0, import_rxjs85.combineLatest)([
            // retrieve nonce if none was specified
            isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : (0, import_rxjs85.of)(api.registry.createType("Index", nonce)),
            // if no era (create) or era > 0 (mortal), do block retrieval
            isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : (0, import_rxjs85.of)(null)
        ]).pipe((0, import_rxjs85.map)(function(param) {
            var _param = _sliced_to_array(param, 2), nonce2 = _param[0], header = _param[1];
            var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;
            return {
                header: header,
                mortalLength: Math.min(((_api$consts$system = api.consts.system) == null ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) == null ? void 0 : _api$consts$system$bl.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) == null ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) == null ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
                nonce: nonce2
            };
        }));
    };
}
// ../../node_modules/@polkadot/api-derive/derive.js
var derive = {
    accounts: accounts_exports,
    alliance: alliance_exports,
    bagsList: bagsList_exports,
    balances: balances_exports,
    bounties: bounties_exports,
    chain: chain_exports,
    contracts: contracts_exports,
    council: council_exports,
    crowdloan: crowdloan_exports,
    democracy: democracy_exports,
    elections: elections_exports,
    imOnline: imOnline_exports,
    membership: membership_exports,
    parachains: parachains_exports,
    session: session_exports,
    society: society_exports,
    staking: staking_exports,
    technicalCommittee: technicalCommittee_exports,
    treasury: treasury_exports,
    tx: tx_exports
};
// ../../node_modules/@polkadot/api-derive/bundle.js
var checks = {
    allianceMotion: {
        instances: [
            "allianceMotion"
        ],
        methods: []
    },
    bagsList: {
        instances: [
            "voterBagsList",
            "voterList",
            "bagsList"
        ],
        methods: [],
        withDetect: true
    },
    contracts: {
        instances: [
            "contracts"
        ],
        methods: []
    },
    council: {
        instances: [
            "council"
        ],
        methods: [],
        withDetect: true
    },
    crowdloan: {
        instances: [
            "crowdloan"
        ],
        methods: []
    },
    democracy: {
        instances: [
            "democracy"
        ],
        methods: []
    },
    elections: {
        instances: [
            "phragmenElection",
            "electionsPhragmen",
            "elections",
            "council"
        ],
        methods: [],
        withDetect: true
    },
    imOnline: {
        instances: [
            "imOnline"
        ],
        methods: []
    },
    membership: {
        instances: [
            "membership"
        ],
        methods: []
    },
    parachains: {
        instances: [
            "parachains",
            "registrar"
        ],
        methods: []
    },
    session: {
        instances: [
            "session"
        ],
        methods: []
    },
    society: {
        instances: [
            "society"
        ],
        methods: []
    },
    staking: {
        instances: [
            "staking"
        ],
        methods: [
            "erasRewardPoints"
        ]
    },
    technicalCommittee: {
        instances: [
            "technicalCommittee"
        ],
        methods: [],
        withDetect: true
    },
    treasury: {
        instances: [
            "treasury"
        ],
        methods: []
    }
};
function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
}
function injectFunctions(instanceId, api, derives) {
    var result = {};
    var names2 = Object.keys(derives);
    var keys2 = Object.keys(api.query);
    var specName = api.runtimeVersion.specName;
    var filterKeys = function(q) {
        return keys2.includes(q);
    };
    var filterInstances = function(q) {
        return getModuleInstances(api, specName, q).some(filterKeys);
    };
    var filterMethods = function(all3) {
        return function(m) {
            return all3.some(function(q) {
                return keys2.includes(q) && api.query[q][m];
            });
        };
    };
    var getKeys = function(s) {
        return Object.keys(derives[s]);
    };
    var creator = function(s, m) {
        return derives[s][m](instanceId, api);
    };
    var isIncluded = function(c) {
        return !checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);
    };
    for(var i = 0; i < names2.length; i++){
        var name = names2[i];
        isIncluded(name) && lazyDeriveSection(result, name, getKeys, creator);
    }
    return result;
}
function getAvailableDerives(instanceId, api) {
    var custom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return _object_spread({}, injectFunctions(instanceId, api, derive), injectFunctions(instanceId, api, custom));
}
// ../../node_modules/@polkadot/api/util/decorate.js
function decorateDeriveSections(decorateMethod, derives) {
    var getKeys = function(s) {
        return Object.keys(derives[s]);
    };
    var creator = function(s, m) {
        return decorateMethod(derives[s][m]);
    };
    var result = {};
    var names2 = Object.keys(derives);
    for(var i = 0; i < names2.length; i++){
        lazyDeriveSection(result, names2[i], getKeys, creator);
    }
    return result;
}
// ../../node_modules/@polkadot/api/util/logging.js
var l9 = logger("api/util");
// ../../node_modules/@polkadot/api/util/filterEvents.js
function filterEvents(txHash, param, allEvents, status) {
    var _param_block = param.block, extrinsics = _param_block.extrinsics, header = _param_block.header;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        var _loop = function() {
            var _step_value = _sliced_to_array(_step.value, 2), txIndex = _step_value[0], x = _step_value[1];
            if (x.hash.eq(txHash)) {
                return {
                    v: {
                        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
                        events: allEvents.filter(function(param) {
                            var phase = param.phase;
                            return phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex);
                        }),
                        txIndex: txIndex
                    }
                };
            }
        };
        for(var _iterator = extrinsics.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _ret = _loop();
            if (_type_of(_ret) === "object") return _ret.v;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    if (status.isInBlock) {
        var allHashes = extrinsics.map(function(x) {
            return x.hash.toHex();
        });
        l9.warn("block ".concat(header.hash.toHex(), ": Unable to find extrinsic ").concat(txHash.toHex(), " inside ").concat(allHashes.join(", ")));
    }
    return {};
}
// ../../node_modules/@polkadot/api/util/isKeyringPair.js
function isKeyringPair(account3) {
    return isFunction(account3.sign);
}
// ../../node_modules/@polkadot/api/submittable/Result.js
var recordIdentity = function(record) {
    return record;
};
function filterAndApply(events2, section2, methods, onFound) {
    return events2.filter(function(param) {
        var event = param.event;
        return section2 === event.section && methods.includes(event.method);
    }).map(function(record) {
        return onFound(record);
    });
}
function getDispatchError(param) {
    var _param_event = param.event, _param_event_data = _sliced_to_array(_param_event.data, 1), dispatchError = _param_event_data[0];
    return dispatchError;
}
function getDispatchInfo(param) {
    var _param_event = param.event, data = _param_event.data, method = _param_event.method;
    return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError() {
    var events2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return filterAndApply(events2, "system", [
        "ExtrinsicFailed"
    ], getDispatchError)[0];
}
function extractInfo() {
    var events2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return filterAndApply(events2, "system", [
        "ExtrinsicFailed",
        "ExtrinsicSuccess"
    ], getDispatchInfo)[0];
}
var SubmittableResult = /*#__PURE__*/ function() {
    function SubmittableResult(param) {
        var blockNumber = param.blockNumber, dispatchError = param.dispatchError, dispatchInfo = param.dispatchInfo, events2 = param.events, internalError = param.internalError, status = param.status, txHash = param.txHash, txIndex = param.txIndex;
        _class_call_check(this, SubmittableResult);
        this.dispatchError = dispatchError || extractError(events2);
        this.dispatchInfo = dispatchInfo || extractInfo(events2);
        this.events = events2 || [];
        this.internalError = internalError;
        this.status = status;
        this.txHash = txHash;
        this.txIndex = txIndex;
        this.blockNumber = blockNumber;
    }
    _create_class(SubmittableResult, [
        {
            key: "isCompleted",
            get: function get() {
                return this.isError || this.status.isInBlock || this.status.isFinalized;
            }
        },
        {
            key: "isError",
            get: function get() {
                return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
            }
        },
        {
            key: "isFinalized",
            get: function get() {
                return this.status.isFinalized;
            }
        },
        {
            key: "isInBlock",
            get: function get() {
                return this.status.isInBlock;
            }
        },
        {
            key: "isWarning",
            get: function get() {
                return this.status.isRetracted;
            }
        },
        {
            /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */ key: "filterRecords",
            value: function filterRecords(section2, method) {
                return filterAndApply(this.events, section2, Array.isArray(method) ? method : [
                    method
                ], recordIdentity);
            }
        },
        {
            /**
   * @description Finds an EventRecord for the specified method & section
   */ key: "findRecord",
            value: function findRecord(section2, method) {
                return this.filterRecords(section2, method)[0];
            }
        },
        {
            /**
   * @description Creates a human representation of the output
   */ key: "toHuman",
            value: function toHuman(isExtended) {
                var _this$dispatchError, _this$dispatchInfo, _this$internalError;
                return {
                    dispatchError: (_this$dispatchError = this.dispatchError) == null ? void 0 : _this$dispatchError.toHuman(),
                    dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) == null ? void 0 : _this$dispatchInfo.toHuman(),
                    events: this.events.map(function(e) {
                        return e.toHuman(isExtended);
                    }),
                    internalError: (_this$internalError = this.internalError) == null ? void 0 : _this$internalError.message.toString(),
                    status: this.status.toHuman(isExtended)
                };
            }
        }
    ]);
    return SubmittableResult;
}();
// ../../node_modules/@polkadot/api/submittable/createClass.js
var identity2 = function(input) {
    return input;
};
function makeEraOptions(api, registry, partialOptions, param) {
    var header = param.header, mortalLength = param.mortalLength, nonce = param.nonce;
    if (!header) {
        if (partialOptions.era && !partialOptions.blockHash) {
            throw new Error("Expected blockHash to be passed alongside non-immortal era options");
        }
        if (isNumber(partialOptions.era)) {
            delete partialOptions.era;
            delete partialOptions.blockHash;
        }
        return makeSignOptions(api, partialOptions, {
            nonce: nonce
        });
    }
    return makeSignOptions(api, partialOptions, {
        blockHash: header.hash,
        era: registry.createTypeUnsafe("ExtrinsicEra", [
            {
                current: header.number,
                period: partialOptions.era || mortalLength
            }
        ]),
        nonce: nonce
    });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
    var options = {};
    if (isFunction(partialOptions)) {
        statusCb = partialOptions;
    } else {
        options = objectSpread({}, partialOptions);
    }
    return [
        options,
        statusCb
    ];
}
function makeSignOptions(api, partialOptions, extras) {
    return objectSpread({
        blockHash: api.genesisHash,
        genesisHash: api.genesisHash
    }, partialOptions, extras, {
        runtimeVersion: api.runtimeVersion,
        signedExtensions: api.registry.signedExtensions,
        version: api.extrinsicType
    });
}
function optionsOrNonce() {
    var partialOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return isBn(partialOptions) || isNumber(partialOptions) ? {
        nonce: partialOptions
    } : partialOptions;
}
function createClass(param) {
    var api = param.api, apiType = param.apiType, blockHash = param.blockHash, decorateMethod = param.decorateMethod;
    var _ignoreStatusCb, _transformResult, _observeSign, _observeStatus, _observeSend, _observeSubscribe, _signViaSigner, _updateSigner;
    var ExtrinsicBase2 = api.registry.createClass("Extrinsic");
    var Submittable = /*#__PURE__*/ function(ExtrinsicBase2) {
        _inherits(Submittable, ExtrinsicBase2);
        var _super = _create_super(Submittable);
        function Submittable(registry, extrinsic) {
            _class_call_check(this, Submittable);
            var _this;
            _this = _super.call(this, registry, extrinsic, {
                version: api.extrinsicType
            });
            __privateAdd(_assert_this_initialized(_this), _ignoreStatusCb, void 0);
            __privateAdd(_assert_this_initialized(_this), _transformResult, identity2);
            __privateAdd(_assert_this_initialized(_this), _observeSign, function(account3, partialOptions) {
                var address = isKeyringPair(account3) ? account3.address : account3.toString();
                var options = optionsOrNonce(partialOptions);
                var _this1 = _assert_this_initialized(_this);
                return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe((0, import_rxjs86.first)(), (0, import_rxjs86.mergeMap)(function() {
                    var _ref = _async_to_generator(function(signingInfo2) {
                        var eraOptions, updateId;
                        return __generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    eraOptions = makeEraOptions(api, _this1.registry, options, signingInfo2);
                                    updateId = -1;
                                    if (!isKeyringPair(account3)) return [
                                        3,
                                        1
                                    ];
                                    _this1.sign(account3, eraOptions);
                                    return [
                                        3,
                                        3
                                    ];
                                case 1:
                                    return [
                                        4,
                                        __privateGet(_this1, _signViaSigner).call(_this1, address, eraOptions, signingInfo2.header)
                                    ];
                                case 2:
                                    updateId = _state.sent();
                                    _state.label = 3;
                                case 3:
                                    return [
                                        2,
                                        {
                                            options: eraOptions,
                                            updateId: updateId
                                        }
                                    ];
                            }
                        });
                    });
                    return function(signingInfo2) {
                        return _ref.apply(this, arguments);
                    };
                }()));
            });
            __privateAdd(_assert_this_initialized(_this), _observeStatus, function(txHash, status) {
                if (!status.isFinalized && !status.isInBlock) {
                    return (0, import_rxjs86.of)(__privateGet(_this, _transformResult).call(_assert_this_initialized(_this), new SubmittableResult({
                        status: status,
                        txHash: txHash
                    })));
                }
                var blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
                return api.derive.tx.events(blockHash2).pipe((0, import_rxjs86.map)(function(param) {
                    var block = param.block, events2 = param.events;
                    return __privateGet(_this, _transformResult).call(_assert_this_initialized(_this), new SubmittableResult(_object_spread_props(_object_spread({}, filterEvents(txHash, block, events2, status)), {
                        status: status,
                        txHash: txHash
                    })));
                }), (0, import_rxjs86.catchError)(function(internalError) {
                    return (0, import_rxjs86.of)(__privateGet(_this, _transformResult).call(_assert_this_initialized(_this), new SubmittableResult({
                        internalError: internalError,
                        status: status,
                        txHash: txHash
                    })));
                }));
            });
            __privateAdd(_assert_this_initialized(_this), _observeSend, function(info6) {
                return api.rpc.author.submitExtrinsic(_this).pipe((0, import_rxjs86.tap)(function(hash3) {
                    __privateGet(_this, _updateSigner).call(_assert_this_initialized(_this), hash3, info6);
                }));
            });
            __privateAdd(_assert_this_initialized(_this), _observeSubscribe, function(info6) {
                var txHash = _this.hash;
                return api.rpc.author.submitAndWatchExtrinsic(_this).pipe((0, import_rxjs86.switchMap)(function(status) {
                    return __privateGet(_this, _observeStatus).call(_assert_this_initialized(_this), txHash, status);
                }), (0, import_rxjs86.tap)(function(status) {
                    __privateGet(_this, _updateSigner).call(_assert_this_initialized(_this), status, info6);
                }));
            });
            var _this1 = _assert_this_initialized(_this), _superprop_get_addSignature = function() {
                return _get((_assert_this_initialized(_this), _get_prototype_of(Submittable.prototype)), "addSignature", _this);
            };
            __privateAdd(_assert_this_initialized(_this), _signViaSigner, function() {
                var _ref = _async_to_generator(function(address, options, header) {
                    var signer, payload, result;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                signer = options.signer || api.signer;
                                if (!signer) {
                                    throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
                                }
                                payload = _this1.registry.createTypeUnsafe("SignerPayload", [
                                    objectSpread({}, options, {
                                        address: address,
                                        blockNumber: header ? header.number : 0,
                                        method: _this1.method
                                    })
                                ]);
                                if (!isFunction(signer.signPayload)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    signer.signPayload(payload.toPayload())
                                ];
                            case 1:
                                result = _state.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 2:
                                if (!isFunction(signer.signRaw)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    signer.signRaw(payload.toRaw())
                                ];
                            case 3:
                                result = _state.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 4:
                                throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
                            case 5:
                                _superprop_get_addSignature().call(_this1, address, result.signature, payload.toPayload());
                                return [
                                    2,
                                    result.id
                                ];
                        }
                    });
                });
                return function(address, options, header) {
                    return _ref.apply(this, arguments);
                };
            }());
            __privateAdd(_assert_this_initialized(_this), _updateSigner, function(status, info6) {
                if (info6 && info6.updateId !== -1) {
                    var options = info6.options, updateId = info6.updateId;
                    var signer = options.signer || api.signer;
                    if (signer && isFunction(signer.update)) {
                        signer.update(updateId, status);
                    }
                }
            });
            __privateSet(_assert_this_initialized(_this), _ignoreStatusCb, apiType === "rxjs");
            return _this;
        }
        _create_class(Submittable, [
            {
                key: "hasDryRun",
                get: function get() {
                    var _api$rpc$system;
                    return isFunction((_api$rpc$system = api.rpc.system) == null ? void 0 : _api$rpc$system.dryRun);
                }
            },
            {
                key: "hasPaymentInfo",
                get: function get() {
                    var _api$call$transaction;
                    return isFunction((_api$call$transaction = api.call.transactionPaymentApi) == null ? void 0 : _api$call$transaction.queryInfo);
                }
            },
            {
                // dry run an extrinsic
                key: "dryRun",
                value: function dryRun(account3, optionsOrHash) {
                    var _this = this;
                    if (!this.hasDryRun) {
                        throw new Error("The system.dryRun RPC call is not available in your environment");
                    }
                    if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                        return decorateMethod(function() {
                            return api.rpc.system.dryRun(_this.toHex(), blockHash || optionsOrHash);
                        });
                    }
                    return decorateMethod(function() {
                        return __privateGet(_this, _observeSign).call(_this, account3, optionsOrHash).pipe((0, import_rxjs86.switchMap)(function() {
                            return api.rpc.system.dryRun(_this.toHex());
                        }));
                    })();
                }
            },
            {
                // calculate the payment info for this transaction (if signed and submitted)
                key: "paymentInfo",
                value: function paymentInfo(account3, optionsOrHash) {
                    var _this = this;
                    if (!this.hasPaymentInfo) {
                        throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
                    }
                    if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                        return decorateMethod(function() {
                            return api.callAt(blockHash || optionsOrHash).pipe((0, import_rxjs86.switchMap)(function(callAt) {
                                var u8a = _this.toU8a();
                                return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
                            }));
                        });
                    }
                    var _makeSignAndSendOptions = _sliced_to_array(makeSignAndSendOptions(optionsOrHash), 1), allOptions = _makeSignAndSendOptions[0];
                    var address = isKeyringPair(account3) ? account3.address : account3.toString();
                    return decorateMethod(function() {
                        return api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe((0, import_rxjs86.first)(), (0, import_rxjs86.switchMap)(function(signingInfo2) {
                            var eraOptions = makeEraOptions(api, _this.registry, allOptions, signingInfo2);
                            var signOptions = makeSignOptions(api, eraOptions, {});
                            var u8a = _this.isSigned ? api.tx(_this).signFake(address, signOptions).toU8a() : _this.signFake(address, signOptions).toU8a();
                            return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
                        }));
                    })();
                }
            },
            {
                // send with an immediate Hash result
                // send implementation for both immediate Hash and statusCb variants
                key: "send",
                value: function send(statusCb) {
                    var isSubscription = api.hasSubscriptions && (__privateGet(this, _ignoreStatusCb) || !!statusCb);
                    return decorateMethod(isSubscription ? __privateGet(this, _observeSubscribe) : __privateGet(this, _observeSend))(statusCb);
                }
            },
            {
                /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */ key: "signAsync",
                value: function signAsync(account3, partialOptions) {
                    var _this = this;
                    return decorateMethod(function() {
                        return __privateGet(_this, _observeSign).call(_this, account3, partialOptions).pipe((0, import_rxjs86.map)(function() {
                            return _this;
                        }));
                    })();
                }
            },
            {
                // signAndSend with an immediate Hash result
                // signAndSend implementation for all 3 cases above
                key: "signAndSend",
                value: function signAndSend(account3, partialOptions, optionalStatusCb) {
                    var _this = this;
                    var _makeSignAndSendOptions = _sliced_to_array(makeSignAndSendOptions(partialOptions, optionalStatusCb), 2), options = _makeSignAndSendOptions[0], statusCb = _makeSignAndSendOptions[1];
                    var isSubscription = api.hasSubscriptions && (__privateGet(this, _ignoreStatusCb) || !!statusCb);
                    return decorateMethod(function() {
                        return __privateGet(_this, _observeSign).call(_this, account3, options).pipe((0, import_rxjs86.switchMap)(function(info6) {
                            return isSubscription ? __privateGet(_this, _observeSubscribe).call(_this, info6) : __privateGet(_this, _observeSend).call(_this, info6);
                        }));
                    })(statusCb);
                }
            },
            {
                // adds a transform to the result, applied before result is returned
                key: "withResultTransform",
                value: function withResultTransform(transform) {
                    __privateSet(this, _transformResult, transform);
                    return this;
                }
            }
        ]);
        return Submittable;
    }(ExtrinsicBase2);
    _ignoreStatusCb = new WeakMap();
    _transformResult = new WeakMap();
    _observeSign = new WeakMap();
    _observeStatus = new WeakMap();
    _observeSend = new WeakMap();
    _observeSubscribe = new WeakMap();
    _signViaSigner = new WeakMap();
    _updateSigner = new WeakMap();
    return Submittable;
}
// ../../node_modules/@polkadot/api/submittable/createSubmittable.js
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    var Submittable = createClass({
        api: api,
        apiType: apiType,
        blockHash: blockHash,
        decorateMethod: decorateMethod
    });
    return function(extrinsic) {
        return new Submittable(registry || api.registry, extrinsic);
    };
}
// ../../node_modules/@polkadot/api/base/find.js
function findCall(registry, callIndex) {
    return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
    return registry.findMetaError(u8aToU8a(errorIndex));
}
// ../../node_modules/@polkadot/api/base/Init.js
var import_rxjs88 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/types-known/chain/index.js
var typesChain = {};
var chain_default = typesChain;
// ../../node_modules/@polkadot/types-known/spec/centrifuge-chain.js
var sharedTypes = {
    // Anchor
    AnchorData: {
        anchoredBlock: "u64",
        docRoot: "H256",
        id: "H256"
    },
    DispatchErrorModule: "DispatchErrorModuleU8",
    PreCommitData: {
        expirationBlock: "u64",
        identity: "H256",
        signingRoot: "H256"
    },
    // Fees
    Fee: {
        key: "Hash",
        price: "Balance"
    },
    // MultiAccount
    MultiAccountData: {
        deposit: "Balance",
        depositor: "AccountId",
        signatories: "Vec<AccountId>",
        threshold: "u16"
    },
    // Bridge
    ChainId: "u8",
    DepositNonce: "u64",
    ResourceId: "[u8; 32]",
    "chainbridge::ChainId": "u8",
    // NFT
    RegistryId: "H160",
    TokenId: "U256",
    AssetId: {
        registryId: "RegistryId",
        tokenId: "TokenId"
    },
    AssetInfo: {
        metadata: "Bytes"
    },
    MintInfo: {
        anchorId: "Hash",
        proofs: "Vec<ProofMint>",
        staticHashes: "[Hash; 3]"
    },
    Proof: {
        leafHash: "H256",
        sortedHashes: "H256"
    },
    ProofMint: {
        hashes: "Vec<Hash>",
        property: "Bytes",
        salt: "[u8; 32]",
        value: "Bytes"
    },
    RegistryInfo: {
        fields: "Vec<Bytes>",
        ownerCanBurn: "bool"
    },
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "NonProxy"
        ]
    }
};
var standaloneTypes = objectSpread({}, sharedTypes, {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    LookupSource: "IndicesLookupSource",
    Multiplier: "Fixed64",
    RefCount: "RefCountTo259"
});
var versioned = [
    {
        minmax: [
            240,
            243
        ],
        types: objectSpread({}, standaloneTypes, {
            ProxyType: {
                _enum: [
                    "Any",
                    "NonTransfer",
                    "Governance",
                    "Staking",
                    "Vesting"
                ]
            }
        })
    },
    {
        minmax: [
            244,
            999
        ],
        types: objectSpread({}, standaloneTypes)
    },
    {
        minmax: [
            1e3,
            void 0
        ],
        types: objectSpread({}, sharedTypes)
    }
];
var centrifuge_chain_default = versioned;
// ../../node_modules/@polkadot/types-known/spec/kusama.js
var sharedTypes2 = {
    CompactAssignments: "CompactAssignmentsWith24",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith24",
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Governance",
            "Staking",
            "IdentityJudgement",
            "CancelProxy",
            "Auction"
        ]
    },
    Weight: "WeightV1"
};
var addrIndicesTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "LookupSource",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "IndicesLookupSource",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var addrAccountIdTypes = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned2 = [
    {
        // 1020 is first CC3
        minmax: [
            1019,
            1031
        ],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchError: "DispatchErrorTo198",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            IdentityInfo: "IdentityInfoTo198",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            SlashingSpans: "SlashingSpansTo204",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        })
    },
    {
        minmax: [
            1032,
            1042
        ],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            SlashingSpans: "SlashingSpansTo204",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        })
    },
    {
        // actual at 1045 (1043-1044 is dev)
        minmax: [
            1043,
            1045
        ],
        types: objectSpread({}, addrIndicesTypes, {
            BalanceLock: "BalanceLockTo212",
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Keys: "SessionKeys5",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            StakingLedger: "StakingLedgerTo223",
            Votes: "VotesTo230",
            Weight: "u32"
        })
    },
    {
        minmax: [
            1046,
            1049
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            StakingLedger: "StakingLedgerTo223",
            Weight: "u32"
        })
    },
    {
        minmax: [
            1050,
            1054
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            ReferendumInfo: "ReferendumInfoTo239",
            StakingLedger: "StakingLedgerTo240",
            Weight: "u32"
        })
    },
    {
        minmax: [
            1055,
            1056
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            StakingLedger: "StakingLedgerTo240",
            Weight: "u32"
        })
    },
    {
        minmax: [
            1057,
            1061
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            1062,
            2012
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            2013,
            2022
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            CompactAssignments: "CompactAssignmentsTo257",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            2023,
            2024
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes, {
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            2025,
            2027
        ],
        types: objectSpread({}, sharedTypes2, addrAccountIdTypes)
    },
    {
        minmax: [
            2028,
            2029
        ],
        types: objectSpread({}, sharedTypes2, {
            AccountInfo: "AccountInfoWithDualRefCount",
            CompactAssignments: "CompactAssignmentsWith16",
            RawSolution: "RawSolutionWith16"
        })
    },
    {
        minmax: [
            2030,
            9e3
        ],
        types: objectSpread({}, sharedTypes2, {
            CompactAssignments: "CompactAssignmentsWith16",
            RawSolution: "RawSolutionWith16"
        })
    },
    {
        minmax: [
            9010,
            9099
        ],
        types: objectSpread({}, sharedTypes2, mapXcmTypes("V0"))
    },
    {
        // jump from 9100 to 9110, however align with Rococo
        minmax: [
            9100,
            9105
        ],
        types: objectSpread({}, sharedTypes2, mapXcmTypes("V1"))
    },
    {
        // metadata v14
        minmax: [
            9106,
            void 0
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];
var kusama_default = versioned2;
// ../../node_modules/@polkadot/types-known/spec/node.js
var versioned3 = [
    {
        minmax: [
            0,
            void 0
        ],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: "WeightV2"
        }
    }
];
var node_default = versioned3;
// ../../node_modules/@polkadot/types-known/spec/node-template.js
var versioned4 = [
    {
        minmax: [
            0,
            void 0
        ],
        types: {
            // nothing, API tracks master
            // (v2 weights are not yet the default)
            Weight: "WeightV2"
        }
    }
];
var node_template_default = versioned4;
// ../../node_modules/@polkadot/types-known/spec/polkadot.js
var sharedTypes3 = {
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: {
            Any: 0,
            NonTransfer: 1,
            Governance: 2,
            Staking: 3,
            UnusedSudoBalances: 4,
            IdentityJudgement: 5,
            CancelProxy: 6,
            Auction: 7
        }
    },
    Weight: "WeightV1"
};
var addrAccountIdTypes2 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    DispatchErrorModule: "DispatchErrorModuleU8",
    Keys: "SessionKeys5",
    LookupSource: "AccountId",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned5 = [
    {
        minmax: [
            0,
            12
        ],
        types: objectSpread({}, sharedTypes3, addrAccountIdTypes2, {
            CompactAssignments: "CompactAssignmentsTo257",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            13,
            22
        ],
        types: objectSpread({}, sharedTypes3, addrAccountIdTypes2, {
            CompactAssignments: "CompactAssignmentsTo257",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            23,
            24
        ],
        types: objectSpread({}, sharedTypes3, addrAccountIdTypes2, {
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            25,
            27
        ],
        types: objectSpread({}, sharedTypes3, addrAccountIdTypes2)
    },
    {
        minmax: [
            28,
            29
        ],
        types: objectSpread({}, sharedTypes3, {
            AccountInfo: "AccountInfoWithDualRefCount"
        })
    },
    {
        minmax: [
            30,
            9109
        ],
        types: objectSpread({}, sharedTypes3)
    },
    {
        // metadata v14
        minmax: [
            9110,
            void 0
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];
var polkadot_default = versioned5;
// ../../node_modules/@polkadot/types-known/spec/rococo.js
var sharedTypes4 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    FullIdentification: "()",
    // No staking, only session (as per config)
    Keys: "SessionKeys7B",
    Weight: "WeightV1"
};
var versioned6 = [
    {
        minmax: [
            0,
            200
        ],
        types: objectSpread({}, sharedTypes4, {
            AccountInfo: "AccountInfoWithDualRefCount",
            Address: "AccountId",
            LookupSource: "AccountId"
        })
    },
    {
        minmax: [
            201,
            214
        ],
        types: objectSpread({}, sharedTypes4, {
            AccountInfo: "AccountInfoWithDualRefCount"
        })
    },
    {
        minmax: [
            215,
            228
        ],
        types: objectSpread({}, sharedTypes4, {
            Keys: "SessionKeys6"
        })
    },
    {
        minmax: [
            229,
            9099
        ],
        types: objectSpread({}, sharedTypes4, mapXcmTypes("V0"))
    },
    {
        minmax: [
            9100,
            9105
        ],
        types: objectSpread({}, sharedTypes4, mapXcmTypes("V1"))
    },
    {
        // metadata v14
        minmax: [
            9106,
            void 0
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];
var rococo_default = versioned6;
// ../../node_modules/@polkadot/types-known/spec/shell.js
var versioned7 = [
    {
        minmax: [
            0,
            void 0
        ],
        types: {
        }
    }
];
var shell_default = versioned7;
// ../../node_modules/@polkadot/types-known/spec/statemint.js
var sharedTypes5 = {
    DispatchErrorModule: "DispatchErrorModuleU8",
    TAssetBalance: "u128",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "CancelProxy",
            "Assets",
            "AssetOwner",
            "AssetManager",
            "Staking"
        ]
    },
    Weight: "WeightV1"
};
var versioned8 = [
    {
        minmax: [
            0,
            3
        ],
        types: objectSpread({
            // Enum was modified mid-flight -
            // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
            DispatchError: "DispatchErrorPre6First"
        }, sharedTypes5, mapXcmTypes("V0"))
    },
    {
        minmax: [
            4,
            5
        ],
        types: objectSpread({
            // As above, see https://github.com/polkadot-js/api/issues/5301
            DispatchError: "DispatchErrorPre6First"
        }, sharedTypes5, mapXcmTypes("V1"))
    },
    {
        // metadata V14
        minmax: [
            500,
            void 0
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];
var statemint_default = versioned8;
// ../../node_modules/@polkadot/types-known/spec/westend.js
var sharedTypes6 = {
    // 16 validators
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    RawSolution: "RawSolutionWith16",
    // general
    Keys: "SessionKeys6",
    ProxyType: {
        _enum: [
            "Any",
            "NonTransfer",
            "Staking",
            "SudoBalances",
            "IdentityJudgement",
            "CancelProxy"
        ]
    },
    Weight: "WeightV1"
};
var addrAccountIdTypes3 = {
    AccountInfo: "AccountInfoWithRefCount",
    Address: "AccountId",
    CompactAssignments: "CompactAssignmentsWith16",
    DispatchErrorModule: "DispatchErrorModuleU8",
    LookupSource: "AccountId",
    Keys: "SessionKeys5",
    RawSolution: "RawSolutionWith16",
    ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned9 = [
    {
        minmax: [
            1,
            2
        ],
        types: objectSpread({}, sharedTypes6, addrAccountIdTypes3, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            Multiplier: "Fixed64",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259",
            Weight: "u32"
        })
    },
    {
        minmax: [
            3,
            22
        ],
        types: objectSpread({}, sharedTypes6, addrAccountIdTypes3, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            OpenTip: "OpenTipTo225",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            23,
            42
        ],
        types: objectSpread({}, sharedTypes6, addrAccountIdTypes3, {
            CompactAssignments: "CompactAssignmentsTo257",
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            43,
            44
        ],
        types: objectSpread({}, sharedTypes6, addrAccountIdTypes3, {
            DispatchInfo: "DispatchInfoTo244",
            Heartbeat: "HeartbeatTo244",
            RefCount: "RefCountTo259"
        })
    },
    {
        minmax: [
            45,
            47
        ],
        types: objectSpread({}, sharedTypes6, addrAccountIdTypes3)
    },
    {
        minmax: [
            48,
            49
        ],
        types: objectSpread({}, sharedTypes6, {
            AccountInfo: "AccountInfoWithDualRefCount"
        })
    },
    {
        minmax: [
            50,
            9099
        ],
        types: objectSpread({}, sharedTypes6, mapXcmTypes("V0"))
    },
    {
        minmax: [
            9100,
            9105
        ],
        types: objectSpread({}, sharedTypes6, mapXcmTypes("V1"))
    },
    {
        // metadata v14
        minmax: [
            9106,
            void 0
        ],
        types: {
            Weight: "WeightV1"
        }
    }
];
var westend_default = versioned9;
// ../../node_modules/@polkadot/types-known/spec/index.js
var typesSpec = {
    "centrifuge-chain": centrifuge_chain_default,
    kusama: kusama_default,
    node: node_default,
    "node-template": node_template_default,
    polkadot: polkadot_default,
    rococo: rococo_default,
    shell: shell_default,
    statemine: statemint_default,
    statemint: statemint_default,
    westend: westend_default,
    westmint: statemint_default
};
var spec_default = typesSpec;
// ../../node_modules/@polkadot/types-known/upgrades/e2e/index.js
var e2e_exports = {};
__export(e2e_exports, {
    kusama: function() {
        return kusama_default2;
    },
    polkadot: function() {
        return polkadot_default2;
    },
    westend: function() {
        return westend_default2;
    }
});
// ../../node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
var upgrades = [
    [
        0,
        1020,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        26669,
        1021,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        38245,
        1022,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        54248,
        1023,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        59659,
        1024,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        67651,
        1025,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        82191,
        1027,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        83238,
        1028,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        101503,
        1029,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        203466,
        1030,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        295787,
        1031,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        461692,
        1032,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        504329,
        1033,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        569327,
        1038,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                1
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        587687,
        1039,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        653183,
        1040,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        693488,
        1042,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        901442,
        1045,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1375086,
        1050,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1445458,
        1051,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1472960,
        1052,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1475648,
        1053,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1491596,
        1054,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1574408,
        1055,
        [
            [
                "0xdf6acb689907609b",
                2
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                1
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2064961,
        1058,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2201991,
        1062,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2671528,
        2005,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2704202,
        2007,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2728002,
        2008,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2832534,
        2011,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2962294,
        2012,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        324e4,
        2013,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3274408,
        2015,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3323565,
        2019,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3534175,
        2022,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3860281,
        2023,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4143129,
        2024,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4401242,
        2025,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4841367,
        2026,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5961600,
        2027,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6137912,
        2028,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6561855,
        2029,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7100891,
        2030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7468792,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7668600,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7812476,
        9040,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8010981,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8073833,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8555825,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8945245,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9611377,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9625129,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9866422,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10403784,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10960765,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11006614,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11404482,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11601803,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12008022,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12405451,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12665416,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12909508,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13109752,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13555777,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        13727747,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        14248044,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14433840,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        14645900,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15048375,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15426015,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15680713,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        15756296,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];
var kusama_default2 = upgrades;
// ../../node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
var upgrades2 = [
    [
        0,
        0,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        29231,
        1,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        188836,
        5,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        199405,
        6,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        214264,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        244358,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        303079,
        9,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        314201,
        10,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        342400,
        11,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        443963,
        12,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        528470,
        13,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        687751,
        14,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        746085,
        15,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        787923,
        16,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        799302,
        17,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1205128,
        18,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1603423,
        23,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1733218,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2005673,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2436698,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3613564,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3899547,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4345767,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4876134,
        30,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5661442,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6321619,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6713249,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7217907,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7229126,
        9110,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7560558,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8115869,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8638103,
        9151,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9280179,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9738717,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10156856,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10458576,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10655116,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10879371,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11328884,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11532856,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11933818,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        12217535,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12245277,
        9281,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12532644,
        9291,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ],
    [
        12876189,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ]
        ]
    ]
];
var polkadot_default2 = upgrades2;
// ../../node_modules/@polkadot/types-known/upgrades/e2e/westend.js
var upgrades3 = [
    [
        214356,
        4,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                1
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        392764,
        7,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        409740,
        8,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        809976,
        20,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        877581,
        24,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        879238,
        25,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        889472,
        26,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        902937,
        27,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        932751,
        28,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        991142,
        29,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1030162,
        31,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1119657,
        32,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1199282,
        33,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1342534,
        34,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1392263,
        35,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1431703,
        36,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1433369,
        37,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        1490972,
        41,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2087397,
        43,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2316688,
        44,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        2549864,
        45,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925782,
        46,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        3925843,
        47,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4207800,
        48,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        4627944,
        49,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5124076,
        50,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5478664,
        900,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5482450,
        9e3,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                4
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5584305,
        9010,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5784566,
        9030,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5879822,
        9031,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5896856,
        9032,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        5897316,
        9033,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6117927,
        9050,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6210274,
        9070,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                2
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6379314,
        9080,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                2
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        6979141,
        9090,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7568453,
        9100,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7766394,
        9111,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7911691,
        9120,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7968866,
        9121,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        7982889,
        9122,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        8514322,
        9130,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091726,
        9140,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9091774,
        9150,
        [
            [
                "0xdf6acb689907609b",
                3
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                1
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9406726,
        9160,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        9921066,
        9170,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10007115,
        9180,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                5
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10480973,
        9190,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10578091,
        9200,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10678509,
        9210,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        10811001,
        9220,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11096116,
        9230,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11409279,
        9250,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11584820,
        9251,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11716837,
        9260,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11876919,
        9261,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ]
        ]
    ],
    [
        11987927,
        9270,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12077324,
        9271,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12301871,
        9280,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12604343,
        9290,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                2
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        12841034,
        9300,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13128237,
        9310,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                1
            ],
            [
                "0xf3ff14d5ab527059",
                1
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13272363,
        9320,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13483497,
        9330,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13649433,
        9340,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ],
    [
        13761100,
        9350,
        [
            [
                "0xdf6acb689907609b",
                4
            ],
            [
                "0x37e397fc7c91f5e4",
                1
            ],
            [
                "0x40fe3ad401f8959a",
                6
            ],
            [
                "0xd2bc9897eed08f15",
                3
            ],
            [
                "0xf78b278be53f454c",
                2
            ],
            [
                "0xaf2c0297a23e6d3d",
                3
            ],
            [
                "0x49eaaf1b548a0cb0",
                1
            ],
            [
                "0x91d5df18b0d2cf58",
                1
            ],
            [
                "0xed99c5acb25eedf5",
                3
            ],
            [
                "0xcbca25e39f142387",
                2
            ],
            [
                "0x687ad44ad37f03c2",
                1
            ],
            [
                "0xab3c0572291feb8b",
                1
            ],
            [
                "0xbc9d89904f5b923f",
                1
            ],
            [
                "0x37c8bb1350a9a2a8",
                2
            ],
            [
                "0xf3ff14d5ab527059",
                2
            ],
            [
                "0x17a6bc0d0062aeb3",
                1
            ]
        ]
    ]
];
var westend_default2 = upgrades3;
// ../../node_modules/@polkadot/types-known/upgrades/index.js
var NET_EXTRA = {
    westend: {
        genesisHash: [
            "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
        ]
    }
};
function mapRaw(param) {
    var _param = _sliced_to_array(param, 2), network = _param[0], versions = _param[1];
    var chain2 = selectableNetworks.find(function(n) {
        return n.network === network;
    }) || NET_EXTRA[network];
    if (!chain2) {
        throw new Error("Unable to find info for chain ".concat(network));
    }
    return {
        genesisHash: hexToU8a(chain2.genesisHash[0]),
        network: network,
        versions: versions.map(function(param) {
            var _param = _sliced_to_array(param, 3), blockNumber = _param[0], specVersion = _param[1], apis = _param[2];
            return {
                apis: apis,
                blockNumber: new import_bn.default(blockNumber),
                specVersion: new import_bn.default(specVersion)
            };
        })
    };
}
var upgrades4 = Object.entries(e2e_exports).map(mapRaw);
var upgrades_default = upgrades4;
// ../../node_modules/@polkadot/types-known/util.js
function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
}
function filterVersions() {
    var versions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], specVersion = arguments.length > 1 ? arguments[1] : void 0;
    return versions.filter(function(param) {
        var _param_minmax = _sliced_to_array(param.minmax, 2), min = _param_minmax[0], max3 = _param_minmax[1];
        return (min === void 0 || min === null || specVersion >= min) && (max3 === void 0 || max3 === null || specVersion <= max3);
    }).reduce(function(result, param) {
        var types2 = param.types;
        return objectSpread(result, types2);
    }, {});
}
function getSpecExtensions(param, chainName, specName) {
    var knownTypes2 = param.knownTypes;
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;
        return objectSpread({}, (_knownTypes$typesBund = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) == null ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[s]) == null ? void 0 : _knownTypes$typesBund3.signedExtensions, (_knownTypes$typesBund4 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) == null ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[c]) == null ? void 0 : _knownTypes$typesBund6.signedExtensions);
    });
}
function getSpecTypes(param, chainName, specName, specVersion) {
    var knownTypes2 = param.knownTypes;
    var _specVersion = bnToBn(specVersion).toNumber();
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;
        return(// The order here is always, based on -
        //   - spec then chain
        //   - typesBundle takes higher precedence
        //   - types is the final catch-all override
        objectSpread({}, filterVersions(spec_default[s], _specVersion), filterVersions(chain_default[c], _specVersion), filterVersions((_knownTypes$typesBund7 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) == null ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[s]) == null ? void 0 : _knownTypes$typesBund9.types, _specVersion), filterVersions((_knownTypes$typesBund10 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) == null ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[c]) == null ? void 0 : _knownTypes$typesBund12.types, _specVersion), (_knownTypes$typesSpec = knownTypes2.typesSpec) == null ? void 0 : _knownTypes$typesSpec[s], (_knownTypes$typesChai = knownTypes2.typesChain) == null ? void 0 : _knownTypes$typesChai[c], knownTypes2.types));
    });
}
function getSpecHasher(param, chainName, specName) {
    var knownTypes2 = param.knownTypes;
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;
        return knownTypes2.hasher || ((_knownTypes$typesBund13 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) == null ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[c]) == null ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) == null ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[s]) == null ? void 0 : _knownTypes$typesBund18.hasher) || null;
    });
}
function getSpecRpc(param, chainName, specName) {
    var knownTypes2 = param.knownTypes;
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;
        return objectSpread({}, (_knownTypes$typesBund19 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) == null ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[s]) == null ? void 0 : _knownTypes$typesBund21.rpc, (_knownTypes$typesBund22 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) == null ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[c]) == null ? void 0 : _knownTypes$typesBund24.rpc);
    });
}
function getSpecRuntime(param, chainName, specName) {
    var knownTypes2 = param.knownTypes;
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;
        return objectSpread({}, (_knownTypes$typesBund25 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) == null ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[s]) == null ? void 0 : _knownTypes$typesBund27.runtime, (_knownTypes$typesBund28 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) == null ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[c]) == null ? void 0 : _knownTypes$typesBund30.runtime);
    });
}
function getSpecAlias(param, chainName, specName) {
    var knownTypes2 = param.knownTypes;
    return withNames(chainName, specName, function(c, s) {
        var _knownTypes$typesBund31, _knownTypes$typesBund32, _knownTypes$typesBund33, _knownTypes$typesBund34, _knownTypes$typesBund35, _knownTypes$typesBund36;
        return(// as per versions, first spec, then chain then finally non-versioned
        objectSpread({}, (_knownTypes$typesBund31 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund32 = _knownTypes$typesBund31.spec) == null ? void 0 : (_knownTypes$typesBund33 = _knownTypes$typesBund32[s]) == null ? void 0 : _knownTypes$typesBund33.alias, (_knownTypes$typesBund34 = knownTypes2.typesBundle) == null ? void 0 : (_knownTypes$typesBund35 = _knownTypes$typesBund34.chain) == null ? void 0 : (_knownTypes$typesBund36 = _knownTypes$typesBund35[c]) == null ? void 0 : _knownTypes$typesBund36.alias, knownTypes2.typesAlias));
    });
}
function getUpgradeVersion(genesisHash, blockNumber) {
    var known2 = upgrades_default.find(function(u) {
        return genesisHash.eq(u.genesisHash);
    });
    return known2 ? [
        known2.versions.reduce(function(last, version) {
            return blockNumber.gt(version.blockNumber) ? version : last;
        }, void 0),
        known2.versions.find(function(version) {
            return blockNumber.lte(version.blockNumber);
        })
    ] : [
        void 0,
        void 0
    ];
}
// ../../node_modules/@polkadot/api/base/Decorate.js
var import_rxjs87 = __toESM(require_cjs(), 1);
// ../../node_modules/@polkadot/api/util/augmentObject.js
var l10 = logger("api/augment");
function logLength(type, values) {
    var and = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return values.length ? " ".concat(values.length, " ").concat(type).concat(and.length ? " and" : "") : "";
}
function logValues(type, values) {
    return values.length ? "\n	".concat(type.padStart(7), ": ").concat(values.sort().join(", ")) : "";
}
function warn(prefix2, type, param) {
    var _param = _sliced_to_array(param, 2), added = _param[0], removed = _param[1];
    if (added.length || removed.length) {
        l10.warn("api.".concat(prefix2, ": Found").concat(logLength("added", added, removed)).concat(logLength("removed", removed), " ").concat(type, ":").concat(logValues("added", added)).concat(logValues("removed", removed)));
    }
}
function findSectionExcludes(a, b) {
    return a.filter(function(s) {
        return !b.includes(s);
    });
}
function findSectionIncludes(a, b) {
    return a.filter(function(s) {
        return b.includes(s);
    });
}
function extractSections(src, dst) {
    var srcSections = Object.keys(src);
    var dstSections = Object.keys(dst);
    return [
        findSectionExcludes(srcSections, dstSections),
        findSectionExcludes(dstSections, srcSections)
    ];
}
function findMethodExcludes(src, dst) {
    var srcSections = Object.keys(src);
    var dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    var excludes = [];
    for(var s = 0; s < dstSections.length; s++){
        var section2 = dstSections[s];
        var srcMethods = Object.keys(src[section2]);
        var dstMethods = Object.keys(dst[section2]);
        for(var d = 0; d < dstMethods.length; d++){
            var method = dstMethods[d];
            if (!srcMethods.includes(method)) {
                excludes.push("".concat(section2, ".").concat(method));
            }
        }
    }
    return excludes;
}
function extractMethods(src, dst) {
    return [
        findMethodExcludes(dst, src),
        findMethodExcludes(src, dst)
    ];
}
function augmentObject(prefix2, src, dst) {
    var _loop = function(i) {
        var section2 = sections[i];
        var methods = src[section2];
        if (!dst[section2]) {
            dst[section2] = {};
        }
        lazyMethods(dst[section2], Object.keys(methods), function(m) {
            return methods[m];
        });
    };
    var fromEmpty = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    fromEmpty && objectClear(dst);
    if (prefix2 && Object.keys(dst).length) {
        warn(prefix2, "modules", extractSections(src, dst));
        warn(prefix2, "calls", extractMethods(src, dst));
    }
    var sections = Object.keys(src);
    for(var i = 0; i < sections.length; i++)_loop(i);
    return dst;
}
// ../../node_modules/@polkadot/api/util/validate.js
function sig(param, param1, args) {
    var lookup = param.lookup, method = param1.method, section2 = param1.section;
    return "".concat(section2, ".").concat(method, "(").concat(args.map(function(a) {
        return lookup.getTypeDef(a).type;
    }).join(", "), ")");
}
function extractStorageArgs(registry, creator, _args2) {
    var args = _args2.filter(function(a) {
        return !isUndefined(a);
    });
    if (creator.meta.type.isPlain) {
        if (args.length !== 0) {
            throw new Error("".concat(sig(registry, creator, []), " does not take any arguments, ").concat(args.length, " found"));
        }
    } else {
        var _creator_meta_type_asMap = creator.meta.type.asMap, hashers = _creator_meta_type_asMap.hashers, key = _creator_meta_type_asMap.key;
        var keys2 = hashers.length === 1 ? [
            key
        ] : registry.lookup.getSiType(key).def.asTuple.map(function(t2) {
            return t2;
        });
        if (args.length !== keys2.length) {
            throw new Error("".concat(sig(registry, creator, keys2), " is a map, requiring ").concat(keys2.length, " arguments, ").concat(args.length, " found"));
        }
    }
    return [
        creator,
        args
    ];
}
// ../../node_modules/@polkadot/api/base/Events.js
var _eventemitter2;
var Events = /*#__PURE__*/ function() {
    function Events() {
        _class_call_check(this, Events);
        __privateAdd(this, _eventemitter2, new eventemitter3_default());
    }
    _create_class(Events, [
        {
            key: "emit",
            value: function emit(type) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                var __privateGet1;
                return (__privateGet1 = __privateGet(this, _eventemitter2)).emit.apply(__privateGet1, [
                    type
                ].concat(_to_consumable_array(args)));
            }
        },
        {
            /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */ key: "on",
            value: function on(type, handler) {
                __privateGet(this, _eventemitter2).on(type, handler);
                return this;
            }
        },
        {
            /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */ key: "off",
            value: function off(type, handler) {
                __privateGet(this, _eventemitter2).removeListener(type, handler);
                return this;
            }
        },
        {
            /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */ key: "once",
            value: function once(type, handler) {
                __privateGet(this, _eventemitter2).once(type, handler);
                return this;
            }
        }
    ]);
    return Events;
}();
_eventemitter2 = new WeakMap();
// ../../node_modules/@polkadot/api/base/Decorate.js
var PAGE_SIZE_K2 = 1e3;
var PAGE_SIZE_V = 250;
var PAGE_SIZE_Q = 50;
var l11 = logger("api/init");
var instanceCounter = 0;
function getAtQueryFn(api, param) {
    var method = param.method, section2 = param.section;
    return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], function() {
        return "query.".concat(section2, ".").concat(method, " is not available in this version of the metadata");
    });
}
var _instanceId2, _runtimeLog, _registry, _storageGetQ, _storageSubQ;
var Decorate = /*#__PURE__*/ function(Events) {
    _inherits(Decorate, Events);
    var _super = _create_super(Decorate);
    function Decorate(options, type, decorateMethod) {
        _class_call_check(this, Decorate);
        var _this;
        var _options$source;
        _this = _super.call(this);
        __privateAdd(_assert_this_initialized(_this), _instanceId2, void 0);
        __privateAdd(_assert_this_initialized(_this), _runtimeLog, {});
        __privateAdd(_assert_this_initialized(_this), _registry, void 0);
        __privateAdd(_assert_this_initialized(_this), _storageGetQ, []);
        __privateAdd(_assert_this_initialized(_this), _storageSubQ, []);
        // HACK Use BN import so decorateDerive works... yes, wtf.
        __publicField(_assert_this_initialized(_this), "__phantom", new import_bn.default(0));
        __publicField(_assert_this_initialized(_this), "_call", {});
        __publicField(_assert_this_initialized(_this), "_consts", {});
        __publicField(_assert_this_initialized(_this), "_errors", {});
        __publicField(_assert_this_initialized(_this), "_events", {});
        __publicField(_assert_this_initialized(_this), "_extrinsicType", GenericExtrinsic.LATEST_EXTRINSIC_VERSION);
        __publicField(_assert_this_initialized(_this), "_isReady", false);
        __publicField(_assert_this_initialized(_this), "_query", {});
        __publicField(_assert_this_initialized(_this), "_runtimeMap", {});
        __publicField(_assert_this_initialized(_this), "_rx", {
            call: {},
            consts: {},
            query: {},
            tx: {}
        });
        /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */ __publicField(_assert_this_initialized(_this), "_rxDecorateMethod", function(method) {
            return method;
        });
        __privateSet(_assert_this_initialized(_this), _instanceId2, "".concat(++instanceCounter));
        __privateSet(_assert_this_initialized(_this), _registry, ((_options$source = options.source) == null ? void 0 : _options$source.registry) || options.registry || new TypeRegistry());
        _this._rx.callAt = function(blockHash, knownVersion) {
            return (0, import_rxjs87.from)(_this.at(blockHash, knownVersion)).pipe((0, import_rxjs87.map)(function(a) {
                return a.rx.call;
            }));
        };
        _this._rx.queryAt = function(blockHash, knownVersion) {
            return (0, import_rxjs87.from)(_this.at(blockHash, knownVersion)).pipe((0, import_rxjs87.map)(function(a) {
                return a.rx.query;
            }));
        };
        _this._rx.registry = __privateGet(_assert_this_initialized(_this), _registry);
        var thisProvider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
        _this._decorateMethod = decorateMethod;
        _this._options = options;
        _this._type = type;
        _this._rpcCore = new RpcCore(__privateGet(_assert_this_initialized(_this), _instanceId2), __privateGet(_assert_this_initialized(_this), _registry), thisProvider, _this._options.rpc);
        _this._isConnected = new import_rxjs87.BehaviorSubject(_this._rpcCore.provider.isConnected);
        _this._rx.hasSubscriptions = _this._rpcCore.provider.hasSubscriptions;
        return _this;
    }
    _create_class(Decorate, [
        {
            key: "registry",
            get: /**
   * @description Return the current used registry
   */ function get() {
                return __privateGet(this, _registry);
            }
        },
        {
            /**
   * @description Creates an instance of a type as registered
   */ key: "createType",
            value: function createType(type) {
                for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    params[_key - 1] = arguments[_key];
                }
                var __privateGet1;
                return (__privateGet1 = __privateGet(this, _registry)).createType.apply(__privateGet1, [
                    type
                ].concat(_to_consumable_array(params)));
            }
        },
        {
            /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */ key: "registerTypes",
            value: function registerTypes(types2) {
                types2 && __privateGet(this, _registry).register(types2);
            }
        },
        {
            key: "hasSubscriptions",
            get: /**
   * @returns `true` if the API operates with subscriptions
   */ function get() {
                return this._rpcCore.provider.hasSubscriptions;
            }
        },
        {
            key: "supportMulti",
            get: /**
   * @returns `true` if the API decorate multi-key queries
   */ function get() {
                return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
            }
        },
        {
            key: "_emptyDecorated",
            value: function _emptyDecorated(registry, blockHash) {
                return {
                    call: {},
                    consts: {},
                    errors: {},
                    events: {},
                    query: {},
                    registry: registry,
                    rx: {
                        call: {},
                        query: {}
                    },
                    tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
                };
            }
        },
        {
            key: "_createDecorated",
            value: function _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
                if (!decoratedApi) {
                    decoratedApi = this._emptyDecorated(registry.registry, blockHash);
                }
                if (fromEmpty || !registry.decoratedMeta) {
                    registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
                }
                var runtime26 = this._decorateCalls(registry, this._decorateMethod, blockHash);
                var runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
                var storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
                var storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
                augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
                augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
                augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
                augmentObject("query", storage, decoratedApi.query, fromEmpty);
                augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
                augmentObject("call", runtime26, decoratedApi.call, fromEmpty);
                augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
                decoratedApi.findCall = function(callIndex) {
                    return findCall(registry.registry, callIndex);
                };
                decoratedApi.findError = function(errorIndex) {
                    return findError(registry.registry, errorIndex);
                };
                decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
                decoratedApi.runtimeVersion = registry.runtimeVersion;
                return {
                    createdAt: blockHash,
                    decoratedApi: decoratedApi,
                    decoratedMeta: registry.decoratedMeta
                };
            }
        },
        {
            key: "_injectMetadata",
            value: function _injectMetadata(registry) {
                var fromEmpty = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                if (fromEmpty || !registry.decoratedApi) {
                    registry.decoratedApi = this._emptyDecorated(registry.registry);
                }
                var _this__createDecorated = this._createDecorated(registry, fromEmpty, registry.decoratedApi), decoratedApi = _this__createDecorated.decoratedApi, decoratedMeta = _this__createDecorated.decoratedMeta;
                this._call = decoratedApi.call;
                this._consts = decoratedApi.consts;
                this._errors = decoratedApi.errors;
                this._events = decoratedApi.events;
                this._query = decoratedApi.query;
                this._rx.call = decoratedApi.rx.call;
                this._rx.query = decoratedApi.rx.query;
                var tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
                var rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
                if (fromEmpty || !this._extrinsics) {
                    this._extrinsics = tx;
                    this._rx.tx = rxtx;
                } else {
                    augmentObject("tx", tx, this._extrinsics, false);
                    augmentObject(null, rxtx, this._rx.tx, false);
                }
                augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
                this.emit("decorated");
            }
        },
        {
            /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */ key: "injectMetadata",
            value: function injectMetadata(metadata, fromEmpty, registry) {
                this._injectMetadata({
                    counter: 0,
                    metadata: metadata,
                    registry: registry || __privateGet(this, _registry),
                    runtimeVersion: __privateGet(this, _registry).createType("RuntimeVersionPartial")
                }, fromEmpty);
            }
        },
        {
            key: "_decorateFunctionMeta",
            value: function _decorateFunctionMeta(input, output4) {
                output4.meta = input.meta;
                output4.method = input.method;
                output4.section = input.section;
                output4.toJSON = input.toJSON;
                if (input.callIndex) {
                    output4.callIndex = input.callIndex;
                }
                return output4;
            }
        },
        {
            // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
            // manner to cater for both old and new:
            //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
            //   - when non-zero, remove anything that is not in the array (we don't do this)
            key: "_filterRpc",
            value: function _filterRpc(methods, additional) {
                if (Object.keys(additional).length !== 0) {
                    this._rpcCore.addUserInterfaces(additional);
                    this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
                    this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
                }
                var sectionMap = {};
                for(var i = 0; i < methods.length; i++){
                    var _methods_i_split = _sliced_to_array(methods[i].split("_"), 1), section2 = _methods_i_split[0];
                    sectionMap[section2] = true;
                }
                var sections = Object.keys(sectionMap);
                for(var i1 = 0; i1 < sections.length; i1++){
                    var nameA = stringUpperFirst(sections[i1]);
                    var nameB = "".concat(nameA, "Api");
                    this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
                    this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
                }
                this._filterRpcMethods(methods);
            }
        },
        {
            key: "_filterRpcMethods",
            value: function _filterRpcMethods(exposed) {
                var hasResults = exposed.length !== 0;
                var allKnown = _to_consumable_array(this._rpcCore.mapping.entries());
                var allKeys = [];
                for(var i = 0; i < allKnown.length; i++){
                    var _allKnown_i = _sliced_to_array(allKnown[i], 2), _allKnown_i_ = _allKnown_i[1], alias2 = _allKnown_i_.alias, endpoint = _allKnown_i_.endpoint, method = _allKnown_i_.method, pubsub = _allKnown_i_.pubsub, section2 = _allKnown_i_.section;
                    allKeys.push("".concat(section2, "_").concat(method));
                    if (pubsub) {
                        allKeys.push("".concat(section2, "_").concat(pubsub[1]));
                        allKeys.push("".concat(section2, "_").concat(pubsub[2]));
                    }
                    if (alias2) {
                        var _allKeys;
                        (_allKeys = allKeys).push.apply(_allKeys, _to_consumable_array(alias2));
                    }
                    if (endpoint) {
                        allKeys.push(endpoint);
                    }
                }
                var unknown = exposed.filter(function(k) {
                    return !allKeys.includes(k) && !k.includes("_unstable_");
                });
                if (unknown.length && !this._options.noInitWarn) {
                    l11.warn("RPC methods not decorated: ".concat(unknown.join(", ")));
                }
                for(var i1 = 0; i1 < allKnown.length; i1++){
                    var _allKnown_i1 = _sliced_to_array(allKnown[i1], 2), k = _allKnown_i1[0], _allKnown_i_1 = _allKnown_i1[1], method1 = _allKnown_i_1.method, section21 = _allKnown_i_1.section;
                    if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
                        if (this._rpc[section21]) {
                            delete this._rpc[section21][method1];
                            delete this._rx.rpc[section21][method1];
                        }
                    }
                }
            }
        },
        {
            key: "_rpcSubmitter",
            value: function _rpcSubmitter(decorateMethod) {
                var _this = this;
                var method = function(method2) {
                    for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                        params[_key - 1] = arguments[_key];
                    }
                    return (0, import_rxjs87.from)(_this._rpcCore.provider.send(method2, params));
                };
                return decorateMethod(method);
            }
        },
        {
            key: "_decorateRpc",
            value: function _decorateRpc(rpc18, decorateMethod) {
                var _this = this, _loop = function(s) {
                    var section2 = rpc18.sections[s];
                    if (!Object.prototype.hasOwnProperty.call(out, section2)) {
                        var methods = Object.keys(rpc18[section2]);
                        var decorateInternal = function(method) {
                            return decorateFn(section2, method);
                        };
                        for(var m = 0; m < methods.length; m++){
                            var method = methods[m];
                            if (_this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
                                if (!Object.prototype.hasOwnProperty.call(out, section2)) {
                                    out[section2] = {};
                                }
                                lazyMethod(out[section2], method, decorateInternal);
                            }
                        }
                    }
                };
                var input = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this._rpcSubmitter(decorateMethod);
                var out = input;
                var decorateFn = function(section2, method) {
                    var source = rpc18[section2][method];
                    var fn = decorateMethod(source, {
                        methodName: method
                    });
                    fn.meta = source.meta;
                    fn.raw = decorateMethod(source.raw, {
                        methodName: method
                    });
                    return fn;
                };
                for(var s = 0; s < rpc18.sections.length; s++)_loop(s);
                return out;
            }
        },
        {
            // add all definition entries
            key: "_addRuntimeDef",
            value: function _addRuntimeDef(result, additional) {
                var _loop = function(j) {
                    var _entries_j = _sliced_to_array(entries[j], 2), key = _entries_j[0], defs = _entries_j[1];
                    if (result[key]) {
                        var _loop = function(k) {
                            var def = defs[k];
                            var prev = result[key].find(function(param) {
                                var version = param.version;
                                return def.version === version;
                            });
                            if (prev) {
                                objectSpread(prev.methods, def.methods);
                            } else {
                                result[key].push(def);
                            }
                        };
                        for(var k = 0; k < defs.length; k++)_loop(k);
                    } else {
                        result[key] = defs;
                    }
                };
                if (!additional) {
                    return;
                }
                var entries = Object.entries(additional);
                for(var j = 0; j < entries.length; j++)_loop(j);
            }
        },
        {
            // extract all runtime definitions
            key: "_getRuntimeDefs",
            value: function _getRuntimeDefs(registry, specName) {
                var chain2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
                var result = {};
                var defValues = Object.values(definitions_exports);
                for(var i = 0; i < defValues.length; i++){
                    this._addRuntimeDef(result, defValues[i].runtime);
                }
                this._addRuntimeDef(result, getSpecRuntime(registry, chain2, specName));
                this._addRuntimeDef(result, this._options.runtime);
                return Object.entries(result);
            }
        },
        {
            // pre-metadata decoration
            key: "_decorateCalls",
            value: function _decorateCalls(param, decorateMethod, blockHash) {
                var _loop = function(i) {
                    var _sections_i = _sliced_to_array(sections[i], 2), _section3 = _sections_i[0], secs = _sections_i[1];
                    var sectionHash = blake2AsHex(_section3, 64);
                    var rtApi = apis.find(function(param) {
                        var _param = _sliced_to_array(param, 1), a = _param[0];
                        return a.eq(sectionHash);
                    });
                    hashes[sectionHash] = true;
                    if (rtApi) {
                        var all3 = secs.map(function(param) {
                            var version = param.version;
                            return version;
                        }).sort();
                        var sec = secs.find(function(param) {
                            var version = param.version;
                            return rtApi[1].eq(version);
                        });
                        if (sec) {
                            var section2 = stringCamelCase(_section3);
                            var methods = Object.entries(sec.methods);
                            if (methods.length) {
                                if (!named[section2]) {
                                    named[section2] = {};
                                }
                                for(var m = 0; m < methods.length; m++){
                                    var _methods_m = _sliced_to_array(methods[m], 2), _method3 = _methods_m[0], def = _methods_m[1];
                                    var method = stringCamelCase(_method3);
                                    named[section2][method] = objectSpread({
                                        method: method,
                                        name: "".concat(_section3, "_").concat(_method3),
                                        section: section2,
                                        sectionHash: sectionHash
                                    }, def);
                                }
                            }
                        } else {
                            older.push("".concat(_section3, "/").concat(rtApi[1].toString(), " (").concat(all3.join("/"), " known)"));
                        }
                    }
                };
                var registry = param.registry, _param_runtimeVersion = param.runtimeVersion, apis = _param_runtimeVersion.apis, specName = _param_runtimeVersion.specName, specVersion = _param_runtimeVersion.specVersion;
                var _this = this;
                var result = {};
                var named = {};
                var hashes = {};
                var sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
                var older = [];
                var implName = "".concat(specName.toString(), "/").concat(specVersion.toString());
                var hasLogged = __privateGet(this, _runtimeLog)[implName] || false;
                __privateGet(this, _runtimeLog)[implName] = true;
                for(var i = 0; i < sections.length; i++)_loop(i);
                var notFound = apis.map(function(param) {
                    var _param = _sliced_to_array(param, 2), a = _param[0], v = _param[1];
                    return [
                        a.toHex(),
                        v.toString()
                    ];
                }).filter(function(param) {
                    var _param = _sliced_to_array(param, 1), a = _param[0];
                    return !hashes[a];
                }).map(function(param) {
                    var _param = _sliced_to_array(param, 2), a = _param[0], v = _param[1];
                    return "".concat(_this._runtimeMap[a] || a, "/").concat(v);
                });
                if (!this._options.noInitWarn && !hasLogged) {
                    if (older.length) {
                        l11.warn("".concat(implName, ": Not decorating runtime apis without matching versions: ").concat(older.join(", ")));
                    }
                    if (notFound.length) {
                        l11.warn("".concat(implName, ": Not decorating unknown runtime apis: ").concat(notFound.join(", ")));
                    }
                }
                var stateCall = blockHash ? function(name, bytes5) {
                    return _this._rpcCore.state.call(name, bytes5, blockHash);
                } : function(name, bytes5) {
                    return _this._rpcCore.state.call(name, bytes5);
                };
                var lazySection = function(section2) {
                    return lazyMethods({}, Object.keys(named[section2]), function(method) {
                        return _this._decorateCall(registry, named[section2][method], stateCall, decorateMethod);
                    });
                };
                var modules = Object.keys(named);
                for(var i1 = 0; i1 < modules.length; i1++){
                    lazyMethod(result, modules[i1], lazySection);
                }
                return result;
            }
        },
        {
            key: "_decorateCall",
            value: function _decorateCall(registry, def, stateCall, decorateMethod) {
                var decorated = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    if (args.length !== def.params.length) {
                        throw new Error("".concat(def.name, ":: Expected ").concat(def.params.length, " arguments, found ").concat(args.length));
                    }
                    var bytes5 = registry.createType("Raw", u8aConcatStrict(args.map(function(a, i) {
                        return registry.createTypeUnsafe(def.params[i].type, [
                            a
                        ]).toU8a();
                    })));
                    return stateCall(def.name, bytes5).pipe((0, import_rxjs87.map)(function(r) {
                        return registry.createTypeUnsafe(def.type, [
                            r
                        ]);
                    }));
                });
                decorated.meta = def;
                return decorated;
            }
        },
        {
            // only be called if supportMulti is true
            key: "_decorateMulti",
            value: function _decorateMulti(decorateMethod) {
                var _this = this;
                return decorateMethod(function(keys2) {
                    return keys2.length ? (_this.hasSubscriptions ? _this._rpcCore.state.subscribeStorage : _this._rpcCore.state.queryStorageAt)(keys2.map(function(args) {
                        return Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [
                            args[0].creator
                        ] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [
                            args[0].creator,
                            args.slice(1)
                        ] : [
                            args[0].creator
                        ].concat(_to_consumable_array(args.slice(1))) : [
                            args.creator
                        ];
                    })) : (0, import_rxjs87.of)([]);
                });
            }
        },
        {
            key: "_decorateMultiAt",
            value: function _decorateMultiAt(atApi, decorateMethod, blockHash) {
                var _this = this;
                return decorateMethod(function(calls) {
                    return calls.length ? _this._rpcCore.state.queryStorageAt(calls.map(function(args) {
                        if (Array.isArray(args)) {
                            var creator = getAtQueryFn(atApi, args[0].creator).creator;
                            return creator.meta.type.isPlain ? [
                                creator
                            ] : creator.meta.type.asMap.hashers.length === 1 ? [
                                creator,
                                args.slice(1)
                            ] : [
                                creator
                            ].concat(_to_consumable_array(args.slice(1)));
                        }
                        return [
                            getAtQueryFn(atApi, args.creator).creator
                        ];
                    }), blockHash) : (0, import_rxjs87.of)([]);
                });
            }
        },
        {
            key: "_decorateExtrinsics",
            value: function _decorateExtrinsics(param, decorateMethod) {
                var tx = param.tx;
                var _this = this;
                var result = createSubmittable(this._type, this._rx, decorateMethod);
                var lazySection = function(section2) {
                    return lazyMethods({}, Object.keys(tx[section2]), function(method) {
                        return method.startsWith("$") ? tx[section2][method] : _this._decorateExtrinsicEntry(tx[section2][method], result);
                    });
                };
                var sections = Object.keys(tx);
                for(var i = 0; i < sections.length; i++){
                    lazyMethod(result, sections[i], lazySection);
                }
                return result;
            }
        },
        {
            key: "_decorateExtrinsicEntry",
            value: function _decorateExtrinsicEntry(method, creator) {
                var decorated = function() {
                    for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){
                        params[_key] = arguments[_key];
                    }
                    return creator(method.apply(void 0, _to_consumable_array(params)));
                };
                decorated.is = function(other) {
                    return method.is(other);
                };
                return this._decorateFunctionMeta(method, decorated);
            }
        },
        {
            key: "_decorateStorage",
            value: function _decorateStorage(param, decorateMethod, blockHash) {
                var query2 = param.query, registry = param.registry;
                var _this = this;
                var result = {};
                var lazySection = function(section2) {
                    return lazyMethods({}, Object.keys(query2[section2]), function(method) {
                        return blockHash ? _this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : _this._decorateStorageEntry(query2[section2][method], decorateMethod);
                    });
                };
                var sections = Object.keys(query2);
                for(var i = 0; i < sections.length; i++){
                    lazyMethod(result, sections[i], lazySection);
                }
                return result;
            }
        },
        {
            key: "_decorateStorageEntry",
            value: function _decorateStorageEntry(creator, decorateMethod) {
                var _this = this;
                var _creator;
                var getArgs = function(args, registry) {
                    return extractStorageArgs(registry || __privateGet(_this, _registry), creator, args);
                };
                var getQueryAt = function(blockHash) {
                    return (0, import_rxjs87.from)(_this.at(blockHash)).pipe((0, import_rxjs87.map)(function(api) {
                        return getAtQueryFn(api, creator);
                    }));
                };
                var decorated = this._decorateStorageCall(creator, decorateMethod);
                decorated.creator = creator;
                decorated.at = decorateMethod(function(blockHash) {
                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                        args[_key - 1] = arguments[_key];
                    }
                    return getQueryAt(blockHash).pipe((0, import_rxjs87.switchMap)(function(q) {
                        return q.apply(void 0, _to_consumable_array(args));
                    }));
                });
                decorated.hash = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return _this._rpcCore.state.getStorageHash(getArgs(args));
                });
                decorated.is = function(key) {
                    return key.section === creator.section && key.method === creator.method;
                };
                decorated.key = function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return u8aToHex(compactStripLength(creator.apply(void 0, _to_consumable_array(args)))[1]);
                };
                decorated.keyPrefix = function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return u8aToHex((_creator = creator).keyPrefix.apply(_creator, _to_consumable_array(args)));
                };
                decorated.size = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return _this._rpcCore.state.getStorageSize(getArgs(args));
                });
                decorated.sizeAt = decorateMethod(function(blockHash) {
                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                        args[_key - 1] = arguments[_key];
                    }
                    return getQueryAt(blockHash).pipe((0, import_rxjs87.switchMap)(function(q) {
                        return _this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash);
                    }));
                });
                if (creator.iterKey && creator.meta.type.isMap) {
                    decorated.entries = decorateMethod(memo(__privateGet(this, _instanceId2), function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        return _this._retrieveMapEntries(creator, null, args);
                    }));
                    decorated.entriesAt = decorateMethod(memo(__privateGet(this, _instanceId2), function(blockHash) {
                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            args[_key - 1] = arguments[_key];
                        }
                        return getQueryAt(blockHash).pipe((0, import_rxjs87.switchMap)(function(q) {
                            return _this._retrieveMapEntries(q.creator, blockHash, args);
                        }));
                    }));
                    decorated.entriesPaged = decorateMethod(memo(__privateGet(this, _instanceId2), function(opts) {
                        return _this._retrieveMapEntriesPaged(creator, void 0, opts);
                    }));
                    decorated.keys = decorateMethod(memo(__privateGet(this, _instanceId2), function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        return _this._retrieveMapKeys(creator, null, args);
                    }));
                    decorated.keysAt = decorateMethod(memo(__privateGet(this, _instanceId2), function(blockHash) {
                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            args[_key - 1] = arguments[_key];
                        }
                        return getQueryAt(blockHash).pipe((0, import_rxjs87.switchMap)(function(q) {
                            return _this._retrieveMapKeys(q.creator, blockHash, args);
                        }));
                    }));
                    decorated.keysPaged = decorateMethod(memo(__privateGet(this, _instanceId2), function(opts) {
                        return _this._retrieveMapKeysPaged(creator, void 0, opts);
                    }));
                }
                if (this.supportMulti && creator.meta.type.isMap) {
                    decorated.multi = decorateMethod(function(args) {
                        return creator.meta.type.asMap.hashers.length === 1 ? _this._retrieveMulti(args.map(function(a) {
                            return [
                                creator,
                                [
                                    a
                                ]
                            ];
                        })) : _this._retrieveMulti(args.map(function(a) {
                            return [
                                creator,
                                a
                            ];
                        }));
                    });
                }
                return this._decorateFunctionMeta(creator, decorated);
            }
        },
        {
            key: "_decorateStorageEntryAt",
            value: function _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
                var _this = this;
                var _creator;
                var getArgs = function(args) {
                    return extractStorageArgs(registry, creator, args);
                };
                var decorated = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return _this._rpcCore.state.getStorage(getArgs(args), blockHash);
                });
                decorated.creator = creator;
                decorated.hash = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return _this._rpcCore.state.getStorageHash(getArgs(args), blockHash);
                });
                decorated.is = function(key) {
                    return key.section === creator.section && key.method === creator.method;
                };
                decorated.key = function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return u8aToHex(compactStripLength(creator.apply(void 0, _to_consumable_array(args)))[1]);
                };
                decorated.keyPrefix = function() {
                    for(var _len = arguments.length, keys2 = new Array(_len), _key = 0; _key < _len; _key++){
                        keys2[_key] = arguments[_key];
                    }
                    return u8aToHex((_creator = creator).keyPrefix.apply(_creator, _to_consumable_array(keys2)));
                };
                decorated.size = decorateMethod(function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    return _this._rpcCore.state.getStorageSize(getArgs(args), blockHash);
                });
                if (creator.iterKey && creator.meta.type.isMap) {
                    decorated.entries = decorateMethod(memo(__privateGet(this, _instanceId2), function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        return _this._retrieveMapEntries(creator, blockHash, args);
                    }));
                    decorated.entriesPaged = decorateMethod(memo(__privateGet(this, _instanceId2), function(opts) {
                        return _this._retrieveMapEntriesPaged(creator, blockHash, opts);
                    }));
                    decorated.keys = decorateMethod(memo(__privateGet(this, _instanceId2), function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        return _this._retrieveMapKeys(creator, blockHash, args);
                    }));
                    decorated.keysPaged = decorateMethod(memo(__privateGet(this, _instanceId2), function(opts) {
                        return _this._retrieveMapKeysPaged(creator, blockHash, opts);
                    }));
                }
                if (this.supportMulti && creator.meta.type.isMap) {
                    decorated.multi = decorateMethod(function(args) {
                        return creator.meta.type.asMap.hashers.length === 1 ? _this._retrieveMulti(args.map(function(a) {
                            return [
                                creator,
                                [
                                    a
                                ]
                            ];
                        }), blockHash) : _this._retrieveMulti(args.map(function(a) {
                            return [
                                creator,
                                a
                            ];
                        }), blockHash);
                    });
                }
                return this._decorateFunctionMeta(creator, decorated);
            }
        },
        {
            key: "_queueStorage",
            value: function _queueStorage(call2, queue) {
                var query2 = queue === __privateGet(this, _storageSubQ) ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
                var queueIdx = queue.length - 1;
                var valueIdx = 0;
                var valueObs;
                if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
                    queueIdx++;
                    valueObs = (0, import_rxjs87.from)(// we delay the execution until the next tick, this allows
                    // any queries made in this timeframe to be added to the same
                    // queue for a single query
                    new Promise(function(resolve) {
                        nextTick(function() {
                            var calls = queue[queueIdx][1];
                            delete queue[queueIdx];
                            resolve(calls);
                        });
                    })).pipe((0, import_rxjs87.switchMap)(function(calls) {
                        return query2(calls);
                    }));
                    queue.push([
                        valueObs,
                        [
                            call2
                        ]
                    ]);
                } else {
                    valueObs = queue[queueIdx][0];
                    valueIdx = queue[queueIdx][1].length;
                    queue[queueIdx][1].push(call2);
                }
                return valueObs.pipe(// return the single value at this index
                (0, import_rxjs87.map)(function(values) {
                    return values[valueIdx];
                }));
            }
        },
        {
            // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
            // we make a subscription, alternatively we push this through a single-shot query
            key: "_decorateStorageCall",
            value: function _decorateStorageCall(creator, decorateMethod) {
                var _this = this;
                var memoed = memo(__privateGet(this, _instanceId2), function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    var call2 = extractStorageArgs(__privateGet(_this, _registry), creator, args);
                    if (!_this.hasSubscriptions) {
                        return _this._rpcCore.state.getStorage(call2);
                    }
                    return _this._queueStorage(call2, __privateGet(_this, _storageSubQ));
                });
                return decorateMethod(memoed, {
                    methodName: creator.method,
                    overrideNoSub: function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        return _this._queueStorage(extractStorageArgs(__privateGet(_this, _registry), creator, args), __privateGet(_this, _storageGetQ));
                    }
                });
            }
        },
        {
            // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
            key: "_retrieveMulti",
            value: function _retrieveMulti(keys2, blockHash) {
                if (!keys2.length) {
                    return (0, import_rxjs87.of)([]);
                }
                var query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
                if (keys2.length <= PAGE_SIZE_V) {
                    return blockHash ? query2(keys2, blockHash) : query2(keys2);
                }
                return (0, import_rxjs87.combineLatest)(arrayChunk(keys2, PAGE_SIZE_V).map(function(k) {
                    return blockHash ? query2(k, blockHash) : query2(k);
                })).pipe((0, import_rxjs87.map)(arrayFlatten));
            }
        },
        {
            key: "_retrieveMapKeys",
            value: function _retrieveMapKeys(param, at, args) {
                var iterKey = param.iterKey, meta = param.meta, method = param.method, section2 = param.section;
                var _this = this;
                if (!iterKey || !meta.type.isMap) {
                    throw new Error("keys can only be retrieved on maps");
                }
                var headKey = iterKey.apply(void 0, _to_consumable_array(args)).toHex();
                var startSubject = new import_rxjs87.BehaviorSubject(headKey);
                var query2 = at ? function(startKey) {
                    return _this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey, at);
                } : function(startKey) {
                    return _this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey);
                };
                var setMeta = function(key) {
                    return key.setMeta(meta, section2, method);
                };
                return startSubject.pipe((0, import_rxjs87.switchMap)(query2), (0, import_rxjs87.map)(function(keys2) {
                    return keys2.map(setMeta);
                }), (0, import_rxjs87.tap)(function(keys2) {
                    return nextTick(function() {
                        keys2.length === PAGE_SIZE_K2 ? startSubject.next(keys2[PAGE_SIZE_K2 - 1].toHex()) : startSubject.complete();
                    });
                }), (0, import_rxjs87.toArray)(), // toArray since we want to startSubject to be completed
                (0, import_rxjs87.map)(arrayFlatten));
            }
        },
        {
            key: "_retrieveMapKeysPaged",
            value: function _retrieveMapKeysPaged(param, at, opts) {
                var iterKey = param.iterKey, meta = param.meta, method = param.method, section2 = param.section;
                var _this = this;
                if (!iterKey || !meta.type.isMap) {
                    throw new Error("keys can only be retrieved on maps");
                }
                var setMeta = function(key) {
                    return key.setMeta(meta, section2, method);
                };
                var query2 = at ? function(headKey) {
                    return _this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at);
                } : function(headKey) {
                    return _this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
                };
                return query2(iterKey.apply(void 0, _to_consumable_array(opts.args)).toHex()).pipe((0, import_rxjs87.map)(function(keys2) {
                    return keys2.map(setMeta);
                }));
            }
        },
        {
            key: "_retrieveMapEntries",
            value: function _retrieveMapEntries(entry, at, args) {
                var _this = this;
                var query2 = at ? function(keys2) {
                    return _this._rpcCore.state.queryStorageAt(keys2, at);
                } : function(keys2) {
                    return _this._rpcCore.state.queryStorageAt(keys2);
                };
                return this._retrieveMapKeys(entry, at, args).pipe((0, import_rxjs87.switchMap)(function(keys2) {
                    return keys2.length ? (0, import_rxjs87.combineLatest)(arrayChunk(keys2, PAGE_SIZE_V).map(query2)).pipe((0, import_rxjs87.map)(function(valsArr) {
                        return arrayFlatten(valsArr).map(function(value1, index) {
                            return [
                                keys2[index],
                                value1
                            ];
                        });
                    })) : (0, import_rxjs87.of)([]);
                }));
            }
        },
        {
            key: "_retrieveMapEntriesPaged",
            value: function _retrieveMapEntriesPaged(entry, at, opts) {
                var _this = this;
                var query2 = at ? function(keys2) {
                    return _this._rpcCore.state.queryStorageAt(keys2, at);
                } : function(keys2) {
                    return _this._rpcCore.state.queryStorageAt(keys2);
                };
                return this._retrieveMapKeysPaged(entry, at, opts).pipe((0, import_rxjs87.switchMap)(function(keys2) {
                    return keys2.length ? query2(keys2).pipe((0, import_rxjs87.map)(function(valsArr) {
                        return valsArr.map(function(value1, index) {
                            return [
                                keys2[index],
                                value1
                            ];
                        });
                    })) : (0, import_rxjs87.of)([]);
                }));
            }
        },
        {
            key: "_decorateDeriveRx",
            value: function _decorateDeriveRx(decorateMethod) {
                var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;
                var specName = (_this$_runtimeVersion = this._runtimeVersion) == null ? void 0 : _this$_runtimeVersion.specName.toString();
                var available = getAvailableDerives(__privateGet(this, _instanceId2), this._rx, objectSpread({}, this._options.derives, (_this$_options$typesB = this._options.typesBundle) == null ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) == null ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName || ""]) == null ? void 0 : _this$_options$typesB3.derives));
                return decorateDeriveSections(decorateMethod, available);
            }
        },
        {
            key: "_decorateDerive",
            value: function _decorateDerive(decorateMethod) {
                return decorateDeriveSections(decorateMethod, this._rx.derive);
            }
        }
    ]);
    return Decorate;
}(Events);
_instanceId2 = new WeakMap();
_runtimeLog = new WeakMap();
_registry = new WeakMap();
_storageGetQ = new WeakMap();
_storageSubQ = new WeakMap();
// ../../node_modules/@polkadot/api/base/Init.js
var KEEPALIVE_INTERVAL = 1e4;
var WITH_VERSION_SHORTCUT = false;
var l12 = logger("api/init");
function textToString(t2) {
    return t2.toString();
}
var _atLast = /* @__PURE__ */ _classPrivateFieldKey("atLast");
var _healthTimer = /* @__PURE__ */ _classPrivateFieldKey("healthTimer");
var _registries = /* @__PURE__ */ _classPrivateFieldKey("registries");
var _updateSub = /* @__PURE__ */ _classPrivateFieldKey("updateSub");
var _waitingRegistries = /* @__PURE__ */ _classPrivateFieldKey("waitingRegistries");
var _onProviderConnect = /* @__PURE__ */ _classPrivateFieldKey("onProviderConnect");
var _onProviderDisconnect = /* @__PURE__ */ _classPrivateFieldKey("onProviderDisconnect");
var _onProviderError = /* @__PURE__ */ _classPrivateFieldKey("onProviderError");
var Init = /*#__PURE__*/ function(Decorate) {
    _inherits(Init, Decorate);
    var _super = _create_super(Init);
    function Init(options, type, decorateMethod) {
        _class_call_check(this, Init);
        var _this;
        _this = _super.call(this, options, type, decorateMethod);
        Object.defineProperty(_assert_this_initialized(_this), _onProviderError, {
            value: _onProviderError2
        });
        Object.defineProperty(_assert_this_initialized(_this), _onProviderDisconnect, {
            value: _onProviderDisconnect2
        });
        Object.defineProperty(_assert_this_initialized(_this), _onProviderConnect, {
            value: _onProviderConnect2
        });
        Object.defineProperty(_assert_this_initialized(_this), _atLast, {
            writable: true,
            value: null
        });
        Object.defineProperty(_assert_this_initialized(_this), _healthTimer, {
            writable: true,
            value: null
        });
        Object.defineProperty(_assert_this_initialized(_this), _registries, {
            writable: true,
            value: []
        });
        Object.defineProperty(_assert_this_initialized(_this), _updateSub, {
            writable: true,
            value: null
        });
        Object.defineProperty(_assert_this_initialized(_this), _waitingRegistries, {
            writable: true,
            value: {}
        });
        _this.registry.setKnownTypes(options);
        if (!options.source) {
            _this.registerTypes(options.types);
        } else {
            _classPrivateFieldBase(_this, _registries)[_registries] = _classPrivateFieldBase(options.source, _registries)[_registries];
        }
        _this._rpc = _this._decorateRpc(_this._rpcCore, _this._decorateMethod);
        _this._rx.rpc = _this._decorateRpc(_this._rpcCore, _this._rxDecorateMethod);
        if (_this.supportMulti) {
            _this._queryMulti = _this._decorateMulti(_this._decorateMethod);
            _this._rx.queryMulti = _this._decorateMulti(_this._rxDecorateMethod);
        }
        _this._rx.signer = options.signer;
        _this._rpcCore.setRegistrySwap(function(blockHash) {
            return _this.getBlockRegistry(blockHash);
        });
        _this._rpcCore.setResolveBlockHash(function(blockNumber) {
            return (0, import_rxjs88.firstValueFrom)(_this._rpcCore.chain.getBlockHash(blockNumber));
        });
        if (_this.hasSubscriptions) {
            _this._rpcCore.provider.on("disconnected", function() {
                return _classPrivateFieldBase(_this, _onProviderDisconnect)[_onProviderDisconnect]();
            });
            _this._rpcCore.provider.on("error", function(e) {
                return _classPrivateFieldBase(_this, _onProviderError)[_onProviderError](e);
            });
            _this._rpcCore.provider.on("connected", function() {
                return _classPrivateFieldBase(_this, _onProviderConnect)[_onProviderConnect]();
            });
        } else if (!_this._options.noInitWarn) {
            l12.warn("Api will be available in a limited mode since the provider does not support subscriptions");
        }
        if (_this._rpcCore.provider.isConnected) {
            _classPrivateFieldBase(_this, _onProviderConnect)[_onProviderConnect]();
        }
        return _this;
    }
    _create_class(Init, [
        {
            /**
   * @description Decorates a registry based on the runtime version
   */ key: "_initRegistry",
            value: function _initRegistry(registry, chain2, version, metadata, chainProps) {
                registry.clearCache();
                registry.setChainProperties(chainProps || this.registry.getChainProperties());
                registry.setKnownTypes(this._options);
                registry.register(getSpecTypes(registry, chain2, version.specName, version.specVersion));
                registry.setHasher(getSpecHasher(registry, chain2, version.specName));
                if (registry.knownTypes.typesBundle) {
                    registry.knownTypes.typesAlias = getSpecAlias(registry, chain2, version.specName);
                }
                registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain2, version.specName), this._options.signedExtensions));
            }
        },
        {
            /**
   * @description Returns the default versioned registry
   */ key: "_getDefaultRegistry",
            value: function _getDefaultRegistry() {
                return assertReturn(_classPrivateFieldBase(this, _registries)[_registries].find(function(param) {
                    var isDefault = param.isDefault;
                    return isDefault;
                }), "Initialization error, cannot find the default registry");
            }
        },
        {
            key: "at",
            value: /**
   * @description Returns a decorated API instance at a specific point in time
   */ function at(blockHash, knownVersion) {
                var _this = this;
                return _async_to_generator(function() {
                    var u8aHash, u8aHex, registry;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                u8aHash = u8aToU8a(blockHash);
                                u8aHex = u8aToHex(u8aHash);
                                return [
                                    4,
                                    _this.getBlockRegistry(u8aHash, knownVersion)
                                ];
                            case 1:
                                registry = _state.sent();
                                if (!_classPrivateFieldBase(_this, _atLast)[_atLast] || _classPrivateFieldBase(_this, _atLast)[_atLast][0] !== u8aHex) {
                                    _classPrivateFieldBase(_this, _atLast)[_atLast] = [
                                        u8aHex,
                                        _this._createDecorated(registry, true, null, u8aHash).decoratedApi
                                    ];
                                }
                                return [
                                    2,
                                    _classPrivateFieldBase(_this, _atLast)[_atLast][1]
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_createBlockRegistry",
            value: function _createBlockRegistry(blockHash, header, version) {
                var _this = this;
                return _async_to_generator(function() {
                    var registry, metadata, _, _tmp, result;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                registry = new TypeRegistry(blockHash);
                                _ = Metadata.bind;
                                _tmp = [
                                    void 0,
                                    registry
                                ];
                                return [
                                    4,
                                    (0, import_rxjs88.firstValueFrom)(_this._rpcCore.state.getMetadata.raw(header.parentHash))
                                ];
                            case 1:
                                metadata = new (_.apply(Metadata, _tmp.concat([
                                    _state.sent()
                                ])));
                                _this._initRegistry(registry, _this._runtimeChain, version, metadata);
                                result = {
                                    counter: 0,
                                    lastBlockHash: blockHash,
                                    metadata: metadata,
                                    registry: registry,
                                    runtimeVersion: version
                                };
                                _classPrivateFieldBase(_this, _registries)[_registries].push(result);
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_cacheBlockRegistryProgress",
            value: function _cacheBlockRegistryProgress(key, creator) {
                var _this = this;
                var waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
                if (isUndefined(waiting)) {
                    waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key] = new Promise(function(resolve, reject) {
                        creator().then(function(registry) {
                            delete _classPrivateFieldBase(_this, _waitingRegistries)[_waitingRegistries][key];
                            resolve(registry);
                        }).catch(function(error2) {
                            delete _classPrivateFieldBase(_this, _waitingRegistries)[_waitingRegistries][key];
                            reject(error2);
                        });
                    });
                }
                return waiting;
            }
        },
        {
            key: "_getBlockRegistryViaVersion",
            value: function _getBlockRegistryViaVersion(blockHash, version) {
                if (version) {
                    var existingViaVersion = _classPrivateFieldBase(this, _registries)[_registries].find(function(param) {
                        var _param_runtimeVersion = param.runtimeVersion, specName = _param_runtimeVersion.specName, specVersion = _param_runtimeVersion.specVersion;
                        return specName.eq(version.specName) && specVersion.eq(version.specVersion);
                    });
                    if (existingViaVersion) {
                        existingViaVersion.counter++;
                        existingViaVersion.lastBlockHash = blockHash;
                        return existingViaVersion;
                    }
                }
                return null;
            }
        },
        {
            key: "_getBlockRegistryViaHash",
            value: function _getBlockRegistryViaHash(blockHash) {
                var _this = this;
                return _async_to_generator(function() {
                    var header, _, _1, _tmp, _tmp1, _getUpgradeVersion, firstVersion, lastVersion, version, _2, _3, _tmp2, _tmp3, _tmp4;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this._genesisHash || !_this._runtimeVersion) {
                                    throw new Error("Cannot retrieve data on an uninitialized chain");
                                }
                                _1 = (_ = _this.registry).createType;
                                _tmp = [
                                    "HeaderPartial"
                                ];
                                if (!_this._genesisHash.eq(blockHash)) return [
                                    3,
                                    1
                                ];
                                _tmp1 = {
                                    number: BN_ZERO,
                                    parentHash: _this._genesisHash
                                };
                                return [
                                    3,
                                    3
                                ];
                            case 1:
                                return [
                                    4,
                                    (0, import_rxjs88.firstValueFrom)(_this._rpcCore.chain.getHeader.raw(blockHash))
                                ];
                            case 2:
                                _tmp1 = _state.sent();
                                _state.label = 3;
                            case 3:
                                header = _1.apply(_, _tmp.concat([
                                    _tmp1
                                ]));
                                if (header.parentHash.isEmpty) {
                                    throw new Error("Unable to retrieve header and parent from supplied hash");
                                }
                                _getUpgradeVersion = _sliced_to_array(getUpgradeVersion(_this._genesisHash, header.number), 2), firstVersion = _getUpgradeVersion[0], lastVersion = _getUpgradeVersion[1];
                                _3 = (_2 = _this.registry).createType;
                                _tmp2 = [
                                    "RuntimeVersionPartial"
                                ];
                                if (!(WITH_VERSION_SHORTCUT && firstVersion && (lastVersion || firstVersion.specVersion.eq(_this._runtimeVersion.specVersion)))) return [
                                    3,
                                    4
                                ];
                                _tmp3 = {
                                    apis: firstVersion.apis,
                                    specName: _this._runtimeVersion.specName,
                                    specVersion: firstVersion.specVersion
                                };
                                return [
                                    3,
                                    6
                                ];
                            case 4:
                                return [
                                    4,
                                    (0, import_rxjs88.firstValueFrom)(_this._rpcCore.state.getRuntimeVersion.raw(header.parentHash))
                                ];
                            case 5:
                                _tmp3 = _state.sent();
                                _state.label = 6;
                            case 6:
                                version = _3.apply(_2, _tmp2.concat([
                                    _tmp3
                                ]));
                                _tmp4 = // try to find via version
                                _this._getBlockRegistryViaVersion(blockHash, version);
                                if (_tmp4) return [
                                    3,
                                    8
                                ];
                                // return new or in-flight result
                                return [
                                    4,
                                    _this._cacheBlockRegistryProgress(version.toHex(), function() {
                                        return _this._createBlockRegistry(blockHash, header, version);
                                    })
                                ];
                            case 7:
                                _tmp4 = _state.sent();
                                _state.label = 8;
                            case 8:
                                return [
                                    2,
                                    _tmp4
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getBlockRegistry",
            value: /**
   * @description Sets up a registry based on the block hash defined
   */ function getBlockRegistry(blockHash, knownVersion) {
                var _this = this;
                return _async_to_generator(function() {
                    var _tmp;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _tmp = // try to find via blockHash
                                _classPrivateFieldBase(_this, _registries)[_registries].find(function(param) {
                                    var lastBlockHash = param.lastBlockHash;
                                    return lastBlockHash && u8aEq(lastBlockHash, blockHash);
                                }) || // try to find via version
                                _this._getBlockRegistryViaVersion(blockHash, knownVersion);
                                if (_tmp) return [
                                    3,
                                    2
                                ];
                                // return new or in-flight result
                                return [
                                    4,
                                    _this._cacheBlockRegistryProgress(u8aToHex(blockHash), function() {
                                        return _this._getBlockRegistryViaHash(blockHash);
                                    })
                                ];
                            case 1:
                                _tmp = _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2,
                                    _tmp
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_loadMeta",
            value: function _loadMeta() {
                var _this = this;
                return _async_to_generator(function() {
                    var _this$_options$source, ref, _tmp;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (_this._isReady) {
                                    return [
                                        2,
                                        true
                                    ];
                                }
                                _this._unsubscribeUpdates();
                                if (!((_this$_options$source = _this._options.source) != null && _this$_options$source._isReady)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    _this._metaFromSource(_this._options.source)
                                ];
                            case 1:
                                _tmp = _state.sent();
                                return [
                                    3,
                                    4
                                ];
                            case 2:
                                return [
                                    4,
                                    _this._metaFromChain(_this._options.metadata)
                                ];
                            case 3:
                                _tmp = _state.sent();
                                _state.label = 4;
                            case 4:
                                ref = _sliced_to_array.apply(void 0, [
                                    _tmp,
                                    2
                                ]), _this._genesisHash = ref[0], _this._runtimeMetadata = ref[1], ref;
                                return [
                                    2,
                                    _this._initFromMeta(_this._runtimeMetadata)
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_metaFromSource",
            value: // eslint-disable-next-line @typescript-eslint/require-await
            function _metaFromSource(source) {
                var _this = this;
                return _async_to_generator(function() {
                    var sections, rpcs, s, section2, methods, m;
                    return __generator(this, function(_state) {
                        _this._extrinsicType = source.extrinsicVersion;
                        _this._runtimeChain = source.runtimeChain;
                        _this._runtimeVersion = source.runtimeVersion;
                        sections = Object.keys(source.rpc);
                        rpcs = [];
                        for(s = 0; s < sections.length; s++){
                            section2 = sections[s];
                            methods = Object.keys(source.rpc[section2]);
                            for(m = 0; m < methods.length; m++){
                                rpcs.push("".concat(section2, "_").concat(methods[m]));
                            }
                        }
                        _this._filterRpc(rpcs, getSpecRpc(_this.registry, source.runtimeChain, source.runtimeVersion.specName));
                        return [
                            2,
                            [
                                source.genesisHash,
                                source.runtimeMetadata
                            ]
                        ];
                    });
                })();
            }
        },
        {
            // subscribe to metadata updates, inject the types on changes
            key: "_subscribeUpdates",
            value: function _subscribeUpdates() {
                var _this = this;
                if (_classPrivateFieldBase(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
                    return;
                }
                _classPrivateFieldBase(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe((0, import_rxjs88.switchMap)(function(version) {
                    var _this$_runtimeVersion;
                    return(// only retrieve the metadata when the on-chain version has been changed
                    (_this$_runtimeVersion = _this._runtimeVersion) != null && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? (0, import_rxjs88.of)(false) : _this._rpcCore.state.getMetadata().pipe((0, import_rxjs88.map)(function(metadata) {
                        l12.log("Runtime version updated to spec=".concat(version.specVersion.toString(), ", tx=").concat(version.transactionVersion.toString()));
                        _this._runtimeMetadata = metadata;
                        _this._runtimeVersion = version;
                        _this._rx.runtimeVersion = version;
                        var thisRegistry = _this._getDefaultRegistry();
                        thisRegistry.metadata = metadata;
                        thisRegistry.runtimeVersion = version;
                        _this._initRegistry(_this.registry, _this._runtimeChain, version, metadata);
                        _this._injectMetadata(thisRegistry, true);
                        return true;
                    })));
                })).subscribe();
            }
        },
        {
            key: "_metaFromChain",
            value: function _metaFromChain(optMetadata) {
                var _this = this;
                return _async_to_generator(function() {
                    var _ref, genesisHash, runtimeVersion, chain2, chainProps, rpcMethods, chainMetadata, metadataKey, metadata, _tmp, _tmp1;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Promise.all([
                                        (0, import_rxjs88.firstValueFrom)(_this._rpcCore.chain.getBlockHash(0)),
                                        (0, import_rxjs88.firstValueFrom)(_this._rpcCore.state.getRuntimeVersion()),
                                        (0, import_rxjs88.firstValueFrom)(_this._rpcCore.system.chain()),
                                        (0, import_rxjs88.firstValueFrom)(_this._rpcCore.system.properties()),
                                        (0, import_rxjs88.firstValueFrom)(_this._rpcCore.rpc.methods()),
                                        optMetadata ? Promise.resolve(null) : (0, import_rxjs88.firstValueFrom)(_this._rpcCore.state.getMetadata())
                                    ])
                                ];
                            case 1:
                                _ref = _sliced_to_array.apply(void 0, [
                                    _state.sent(),
                                    6
                                ]), genesisHash = _ref[0], runtimeVersion = _ref[1], chain2 = _ref[2], chainProps = _ref[3], rpcMethods = _ref[4], chainMetadata = _ref[5];
                                _this._runtimeChain = chain2;
                                _this._runtimeVersion = runtimeVersion;
                                _this._rx.runtimeVersion = runtimeVersion;
                                metadataKey = "".concat(genesisHash.toHex() || "0x", "-").concat(runtimeVersion.specVersion.toString());
                                _tmp = chainMetadata;
                                if (_tmp) return [
                                    3,
                                    5
                                ];
                                if (!(optMetadata && optMetadata[metadataKey])) return [
                                    3,
                                    2
                                ];
                                _tmp1 = new Metadata(_this.registry, optMetadata[metadataKey]);
                                return [
                                    3,
                                    4
                                ];
                            case 2:
                                return [
                                    4,
                                    (0, import_rxjs88.firstValueFrom)(_this._rpcCore.state.getMetadata())
                                ];
                            case 3:
                                _tmp1 = _state.sent();
                                _state.label = 4;
                            case 4:
                                _tmp = _tmp1;
                                _state.label = 5;
                            case 5:
                                metadata = _tmp;
                                _this._initRegistry(_this.registry, chain2, runtimeVersion, metadata, chainProps);
                                _this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(_this.registry, chain2, runtimeVersion.specName));
                                _this._subscribeUpdates();
                                if (!_classPrivateFieldBase(_this, _registries)[_registries].length) {
                                    _classPrivateFieldBase(_this, _registries)[_registries].push({
                                        counter: 0,
                                        isDefault: true,
                                        metadata: metadata,
                                        registry: _this.registry,
                                        runtimeVersion: runtimeVersion
                                    });
                                }
                                metadata.getUniqTypes(_this._options.throwOnUnknown || false);
                                return [
                                    2,
                                    [
                                        genesisHash,
                                        metadata
                                    ]
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_initFromMeta",
            value: function _initFromMeta(metadata) {
                this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
                this._rx.extrinsicType = this._extrinsicType;
                this._rx.genesisHash = this._genesisHash;
                this._rx.runtimeVersion = this._runtimeVersion;
                this._injectMetadata(this._getDefaultRegistry(), true);
                this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
                this._derive = this._decorateDerive(this._decorateMethod);
                return true;
            }
        },
        {
            key: "_subscribeHealth",
            value: function _subscribeHealth() {
                var _this = this;
                _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(function() {
                    (0, import_rxjs88.firstValueFrom)(_this._rpcCore.system.health.raw()).catch(function() {
                        return void 0;
                    });
                }, KEEPALIVE_INTERVAL) : null;
            }
        },
        {
            key: "_unsubscribeHealth",
            value: function _unsubscribeHealth() {
                if (_classPrivateFieldBase(this, _healthTimer)[_healthTimer]) {
                    clearInterval(_classPrivateFieldBase(this, _healthTimer)[_healthTimer]);
                    _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = null;
                }
            }
        },
        {
            key: "_unsubscribeUpdates",
            value: function _unsubscribeUpdates() {
                if (_classPrivateFieldBase(this, _updateSub)[_updateSub]) {
                    _classPrivateFieldBase(this, _updateSub)[_updateSub].unsubscribe();
                    _classPrivateFieldBase(this, _updateSub)[_updateSub] = null;
                }
            }
        },
        {
            key: "_unsubscribe",
            value: function _unsubscribe() {
                this._unsubscribeHealth();
                this._unsubscribeUpdates();
            }
        }
    ]);
    return Init;
}(Decorate);
function _onProviderConnect2() {
    return __onProviderConnect2.apply(this, arguments);
}
function __onProviderConnect2() {
    __onProviderConnect2 = _async_to_generator(function() {
        var cryptoReady, _tmp, hasMeta, _error, error2;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    this._isConnected.next(true);
                    this.emit("connected");
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        ,
                        7
                    ]);
                    if (!(this._options.initWasm === false)) return [
                        3,
                        2
                    ];
                    _tmp = true;
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        cryptoWaitReady()
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    cryptoReady = _tmp;
                    return [
                        4,
                        this._loadMeta()
                    ];
                case 5:
                    hasMeta = _state.sent();
                    this._subscribeHealth();
                    if (hasMeta && !this._isReady && cryptoReady) {
                        this._isReady = true;
                        this.emit("ready", this);
                    }
                    return [
                        3,
                        7
                    ];
                case 6:
                    _error = _state.sent();
                    error2 = new Error("FATAL: Unable to initialize the API: ".concat(_error.message));
                    l12.error(error2);
                    this.emit("error", error2);
                    return [
                        3,
                        7
                    ];
                case 7:
                    return [
                        2
                    ];
            }
        });
    });
    return __onProviderConnect2.apply(this, arguments);
}
function _onProviderDisconnect2() {
    this._isConnected.next(false);
    this._unsubscribeHealth();
    this.emit("disconnected");
}
function _onProviderError2(error2) {
    this.emit("error", error2);
}
// ../../node_modules/@polkadot/api/base/Getters.js
function assertResult(value1) {
    if (value1 === void 0) {
        throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
    }
    return value1;
}
var Getters = /*#__PURE__*/ function(Init) {
    _inherits(Getters, Init);
    var _super = _create_super(Getters);
    function Getters() {
        _class_call_check(this, Getters);
        return _super.apply(this, arguments);
    }
    _create_class(Getters, [
        {
            key: "call",
            get: /**
   * @description Runtime call interfaces (currently untyped, only decorated via API options)
   */ function get() {
                return assertResult(this._call);
            }
        },
        {
            key: "consts",
            get: /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */ function get() {
                return assertResult(this._consts);
            }
        },
        {
            key: "derive",
            get: /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */ function get() {
                return assertResult(this._derive);
            }
        },
        {
            key: "errors",
            get: /**
   * @description Errors from metadata
   */ function get() {
                return assertResult(this._errors);
            }
        },
        {
            key: "events",
            get: /**
   * @description Events from metadata
   */ function get() {
                return assertResult(this._events);
            }
        },
        {
            key: "extrinsicVersion",
            get: /**
   * @description  Returns the version of extrinsics in-use on this chain
   */ function get() {
                return this._extrinsicType;
            }
        },
        {
            key: "genesisHash",
            get: /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */ function get() {
                return assertResult(this._genesisHash);
            }
        },
        {
            key: "isConnected",
            get: /**
   * @description true is the underlying provider is connected
   */ function get() {
                return this._isConnected.getValue();
            }
        },
        {
            key: "libraryInfo",
            get: /**
   * @description The library information name & version (from package.json)
   */ function get() {
                return "".concat(packageInfo.name, " v").concat(packageInfo.version);
            }
        },
        {
            key: "query",
            get: /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */ function get() {
                return assertResult(this._query);
            }
        },
        {
            key: "queryMulti",
            get: /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */ function get() {
                return assertResult(this._queryMulti);
            }
        },
        {
            key: "rpc",
            get: /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */ function get() {
                return assertResult(this._rpc);
            }
        },
        {
            key: "runtimeChain",
            get: /**
   * @description Contains the chain information for the current node.
   */ function get() {
                return assertResult(this._runtimeChain);
            }
        },
        {
            key: "runtimeMetadata",
            get: /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */ function get() {
                return assertResult(this._runtimeMetadata);
            }
        },
        {
            key: "runtimeVersion",
            get: /**
   * @description Contains the version information for the current runtime.
   */ function get() {
                return assertResult(this._runtimeVersion);
            }
        },
        {
            key: "rx",
            get: /**
   * @description The underlying Rx API interface
   */ function get() {
                return assertResult(this._rx);
            }
        },
        {
            key: "stats",
            get: /**
   * @description Returns the underlying provider stats
   */ function get() {
                return this._rpcCore.provider.stats;
            }
        },
        {
            key: "type",
            get: /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */ function get() {
                return this._type;
            }
        },
        {
            key: "tx",
            get: /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transfer(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */ function get() {
                return assertResult(this._extrinsics);
            }
        },
        {
            /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */ key: "findCall",
            value: function findCall1(callIndex) {
                return findCall(this.registry, callIndex);
            }
        },
        {
            /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */ key: "findError",
            value: function findError1(errorIndex) {
                return findError(this.registry, errorIndex);
            }
        }
    ]);
    return Getters;
}(Init);
// ../../node_modules/@polkadot/api/base/index.js
var ApiBase = /*#__PURE__*/ function(Getters) {
    _inherits(ApiBase, Getters);
    var _super = _create_super(ApiBase);
    function ApiBase() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, type = arguments.length > 1 ? arguments[1] : void 0, decorateMethod = arguments.length > 2 ? arguments[2] : void 0;
        _class_call_check(this, ApiBase);
        return _super.call(this, options, type, decorateMethod);
    }
    _create_class(ApiBase, [
        {
            /**
   * @description Connect from the underlying provider, halting all network traffic
   */ key: "connect",
            value: function connect() {
                return this._rpcCore.connect();
            }
        },
        {
            /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */ key: "disconnect",
            value: function disconnect() {
                this._unsubscribe();
                return this._rpcCore.disconnect();
            }
        },
        {
            /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */ key: "setSigner",
            value: function setSigner(signer) {
                this._rx.signer = signer;
            }
        },
        {
            key: "sign",
            value: /**
   * @description Signs a raw signer payload, string or Uint8Array
   */ function sign(address, data) {
                var signer = (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}).signer;
                var _this = this;
                return _async_to_generator(function() {
                    var _signer;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!isString(address)) return [
                                    3,
                                    2
                                ];
                                _signer = signer || _this._rx.signer;
                                if (!_signer || !_signer.signRaw) {
                                    throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
                                }
                                return [
                                    4,
                                    _signer.signRaw(objectSpread({
                                        type: "bytes"
                                    }, data, {
                                        address: address
                                    }))
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent().signature
                                ];
                            case 2:
                                return [
                                    2,
                                    u8aToHex(address.sign(u8aToU8a(data.data)))
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ApiBase;
}(Getters);
// ../../node_modules/@polkadot/api/promise/Combinator.js
var _allHasFired, _callback, _fired, _fns, _isActive, _results, _subscriptions2;
var Combinator = /*#__PURE__*/ function() {
    function Combinator(fns, callback) {
        _class_call_check(this, Combinator);
        __privateAdd(this, _allHasFired, false);
        __privateAdd(this, _callback, void 0);
        __privateAdd(this, _fired, []);
        __privateAdd(this, _fns, []);
        __privateAdd(this, _isActive, true);
        __privateAdd(this, _results, []);
        __privateAdd(this, _subscriptions2, []);
        __privateSet(this, _callback, callback);
        var _this = this;
        __privateSet(this, _subscriptions2, fns.map(function() {
            var _ref = _async_to_generator(function(input, index) {
                var _ref, fn, args;
                return __generator(this, function(_state) {
                    _ref = _to_array(Array.isArray(input) ? input : [
                        input
                    ]), fn = _ref[0], args = _ref.slice(1);
                    __privateGet(_this, _fired).push(false);
                    __privateGet(_this, _fns).push(fn);
                    return [
                        2,
                        fn.apply(void 0, _to_consumable_array(args).concat([
                            _this._createCallback(index)
                        ]))
                    ];
                });
            });
            return function(input, index) {
                return _ref.apply(this, arguments);
            };
        }()));
    }
    _create_class(Combinator, [
        {
            key: "_allHasFired",
            value: function _allHasFired1() {
                __privateGet(this, _allHasFired) || __privateSet(this, _allHasFired, __privateGet(this, _fired).filter(function(hasFired) {
                    return !hasFired;
                }).length === 0);
                return __privateGet(this, _allHasFired);
            }
        },
        {
            key: "_createCallback",
            value: function _createCallback(index) {
                var _this = this;
                return function(value1) {
                    __privateGet(_this, _fired)[index] = true;
                    __privateGet(_this, _results)[index] = value1;
                    _this._triggerUpdate();
                };
            }
        },
        {
            key: "_triggerUpdate",
            value: function _triggerUpdate() {
                if (!__privateGet(this, _isActive) || !isFunction(__privateGet(this, _callback)) || !this._allHasFired()) {
                    return;
                }
                try {
                    __privateGet(this, _callback).call(this, __privateGet(this, _results));
                } catch (error2) {}
            }
        },
        {
            key: "unsubscribe",
            value: function unsubscribe() {
                if (!__privateGet(this, _isActive)) {
                    return;
                }
                __privateSet(this, _isActive, false);
                __privateGet(this, _subscriptions2).forEach(function() {
                    var _ref = _async_to_generator(function(subscription) {
                        var unsubscribe, error2;
                        return __generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    _state.trys.push([
                                        0,
                                        2,
                                        ,
                                        3
                                    ]);
                                    return [
                                        4,
                                        subscription
                                    ];
                                case 1:
                                    unsubscribe = _state.sent();
                                    if (isFunction(unsubscribe)) {
                                        unsubscribe();
                                    }
                                    return [
                                        3,
                                        3
                                    ];
                                case 2:
                                    error2 = _state.sent();
                                    return [
                                        3,
                                        3
                                    ];
                                case 3:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return function(subscription) {
                        return _ref.apply(this, arguments);
                    };
                }());
            }
        }
    ]);
    return Combinator;
}();
_allHasFired = new WeakMap();
_callback = new WeakMap();
_fired = new WeakMap();
_fns = new WeakMap();
_isActive = new WeakMap();
_results = new WeakMap();
_subscriptions2 = new WeakMap();
// ../../node_modules/@polkadot/api/promise/decorateMethod.js
var import_rxjs89 = __toESM(require_cjs(), 1);
function promiseTracker(resolve, reject) {
    var isCompleted = false;
    return {
        reject: function(error2) {
            if (!isCompleted) {
                isCompleted = true;
                reject(error2);
            }
            return import_rxjs89.EMPTY;
        },
        resolve: function(value1) {
            if (!isCompleted) {
                isCompleted = true;
                resolve(value1);
            }
        }
    };
}
function extractArgs(args, needsCallback) {
    var actualArgs = args.slice();
    var callback = args.length && isFunction(args[args.length - 1]) ? actualArgs.pop() : void 0;
    if (needsCallback && !isFunction(callback)) {
        throw new Error("Expected a callback to be passed with subscriptions");
    }
    return [
        actualArgs,
        callback
    ];
}
function decorateCall(method, args) {
    return new Promise(function(resolve, reject) {
        var tracker = promiseTracker(resolve, reject);
        var subscription = method.apply(void 0, _to_consumable_array(args)).pipe((0, import_rxjs89.catchError)(function(error2) {
            return tracker.reject(error2);
        })).subscribe(function(result) {
            tracker.resolve(result);
            nextTick(function() {
                return subscription.unsubscribe();
            });
        });
    });
}
function decorateSubscribe(method, args, resultCb) {
    return new Promise(function(resolve, reject) {
        var tracker = promiseTracker(resolve, reject);
        var subscription = method.apply(void 0, _to_consumable_array(args)).pipe((0, import_rxjs89.catchError)(function(error2) {
            return tracker.reject(error2);
        }), (0, import_rxjs89.tap)(function() {
            return tracker.resolve(function() {
                return subscription.unsubscribe();
            });
        })).subscribe(function(result) {
            nextTick(function() {
                return resultCb(result);
            });
        });
    });
}
function toPromiseMethod(method, options) {
    var needsCallback = !!(options && options.methodName && options.methodName.includes("subscribe"));
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var _extractArgs = _sliced_to_array(extractArgs(args, needsCallback), 2), actualArgs = _extractArgs[0], resultCb = _extractArgs[1];
        return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options == null ? void 0 : options.overrideNoSub) || method, actualArgs);
    };
}
// ../../node_modules/@polkadot/api/promise/Api.js
var _isReadyPromise2, _isReadyOrErrorPromise;
var _ApiPromise = /*#__PURE__*/ function(ApiBase) {
    _inherits(_ApiPromise1, ApiBase);
    var _super = _create_super(_ApiPromise1);
    function _ApiPromise1(options) {
        _class_call_check(this, _ApiPromise1);
        var _this;
        _this = _super.call(this, options, "promise", toPromiseMethod);
        __privateAdd(_assert_this_initialized(_this), _isReadyPromise2, void 0);
        __privateAdd(_assert_this_initialized(_this), _isReadyOrErrorPromise, void 0);
        __privateSet(_assert_this_initialized(_this), _isReadyPromise2, new Promise(function(resolve) {
            _get((_assert_this_initialized(_this), _get_prototype_of(_ApiPromise1.prototype)), "once", _this).call(_this, "ready", function() {
                return resolve(_assert_this_initialized(_this));
            });
        }));
        __privateSet(_assert_this_initialized(_this), _isReadyOrErrorPromise, new Promise(function(resolve, reject) {
            var tracker = promiseTracker(resolve, reject);
            _get((_assert_this_initialized(_this), _get_prototype_of(_ApiPromise1.prototype)), "once", _this).call(_this, "ready", function() {
                return tracker.resolve(_assert_this_initialized(_this));
            });
            _get((_assert_this_initialized(_this), _get_prototype_of(_ApiPromise1.prototype)), "once", _this).call(_this, "error", function(error2) {
                return tracker.reject(error2);
            });
        }));
        return _this;
    }
    _create_class(_ApiPromise1, [
        {
            key: "isReady",
            get: /**
   * @description Promise that resolves the first time we are connected and loaded
   */ function get() {
                return __privateGet(this, _isReadyPromise2);
            }
        },
        {
            key: "isReadyOrError",
            get: /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */ function get() {
                return __privateGet(this, _isReadyOrErrorPromise);
            }
        },
        {
            /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */ key: "clone",
            value: function clone() {
                return new _ApiPromise(objectSpread({}, this._options, {
                    source: this
                }));
            }
        },
        {
            key: "combineLatest",
            value: /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */ // eslint-disable-next-line @typescript-eslint/require-await
            function combineLatest(fns, callback) {
                return _async_to_generator(function() {
                    var combinator;
                    return __generator(this, function(_state) {
                        combinator = new Combinator(fns, callback);
                        return [
                            2,
                            function() {
                                combinator.unsubscribe();
                            }
                        ];
                    });
                })();
            }
        }
    ], [
        {
            key: "create",
            value: /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */ function create(options) {
                var instance2 = new _ApiPromise(options);
                if (options && options.throwOnConnect) {
                    return instance2.isReadyOrError;
                }
                instance2.isReadyOrError.catch(function() {});
                return instance2.isReady;
            }
        }
    ]);
    return _ApiPromise1;
}(ApiBase);
var ApiPromise = _ApiPromise;
_isReadyPromise2 = new WeakMap();
_isReadyOrErrorPromise = new WeakMap();
// node_modules/@polkadot/x-textdecoder/node.js
var import_util305 = __toESM(require("util"), 1);
// node_modules/@polkadot/x-global/index.js
function evaluateThis2(fn) {
    return fn("return this");
}
var xglobal2 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis2(Function);
function extractGlobal2(name, fallback) {
    return typeof xglobal2[name] === "undefined" ? fallback : xglobal2[name];
}
// node_modules/@polkadot/x-textdecoder/node.js
var TextDecoder3 = /* @__PURE__ */ extractGlobal2("TextDecoder", import_util305.default.TextDecoder);
// ../../node_modules/tslib/tslib.es6.js
function __classPrivateFieldGet(receiver, state2, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
}
function __classPrivateFieldSet(receiver, state2, value1, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value1) : f ? f.value = value1 : state2.set(receiver, value1), value1;
}
// node_modules/@polkadot/x-textencoder/node.js
var import_util306 = __toESM(require("util"), 1);
var _Fallback_encoder;
var Fallback2 = /*#__PURE__*/ function() {
    function Fallback2() {
        _class_call_check(this, Fallback2);
        _Fallback_encoder.set(this, void 0);
        __classPrivateFieldSet(this, _Fallback_encoder, new import_util306.default.TextEncoder(), "f");
    }
    _create_class(Fallback2, [
        {
            // For a Jest 26.0.1 environment, Buffer !== Uint8Array
            key: "encode",
            value: function encode(value1) {
                return Uint8Array.from(__classPrivateFieldGet(this, _Fallback_encoder, "f").encode(value1));
            }
        }
    ]);
    return Fallback2;
}();
_Fallback_encoder = /* @__PURE__ */ new WeakMap();
var TextEncoder3 = /* @__PURE__ */ extractGlobal2("TextEncoder", Fallback2);
// node_modules/@polkadot/util/is/function.js
function isFunction2(value1) {
    return typeof value1 === "function";
}
// node_modules/@polkadot/x-bigint/index.js
var BigInt3 = typeof xglobal2.BigInt === "function" && typeof xglobal2.BigInt.asIntN === "function" ? xglobal2.BigInt : function() {
    return Number.NaN;
};
// node_modules/@polkadot/util/hex/toU8a.js
var CHR2 = "0123456789abcdef";
var U83 = new Uint8Array(256);
var U163 = new Uint8Array(256 * 256);
for(var i11 = 0; i11 < CHR2.length; i11++){
    U83[CHR2[i11].charCodeAt(0) | 0] = i11 | 0;
    if (i11 > 9) {
        U83[CHR2[i11].toUpperCase().charCodeAt(0) | 0] = i11 | 0;
    }
}
for(var i12 = 0; i12 < 256; i12++){
    var s2 = i12 << 8;
    for(var j3 = 0; j3 < 256; j3++){
        U163[s2 | j3] = U83[i12] << 4 | U83[j3];
    }
}
function hexToU8a2(value1) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
    if (!value1) {
        return new Uint8Array();
    }
    var s = value1.startsWith("0x") ? 2 : 0;
    var decLength = Math.ceil((value1.length - s) / 2);
    var endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
    var result = new Uint8Array(endLength);
    var offset = endLength > decLength ? endLength - decLength : 0;
    for(var i = offset; i < endLength; i++, s += 2){
        result[i] = U163[value1.charCodeAt(s) << 8 | value1.charCodeAt(s + 1)];
    }
    return result;
}
// node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED2 = /^0x[\da-fA-F]+$/;
function isHex2(value1) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, ignoreLength = arguments.length > 2 ? arguments[2] : void 0;
    return typeof value1 === "string" && (value1 === "0x" || REGEX_HEX_PREFIXED2.test(value1)) && (bitLength === -1 ? ignoreLength || value1.length % 2 === 0 : value1.length === 2 + Math.ceil(bitLength / 4));
}
// node_modules/@polkadot/util/has.js
var hasBigInt2 = typeof BigInt3 === "function" && typeof BigInt3.asIntN === "function";
var hasBuffer2 = typeof xglobal2.Buffer === "function" && typeof xglobal2.Buffer.isBuffer === "function";
var hasProcess2 = typeof xglobal2.process === "object";
// node_modules/@polkadot/util/is/buffer.js
function isBuffer2(value1) {
    return hasBuffer2 && isFunction2(value1 && value1.readDoubleLE) && xglobal2.Buffer.isBuffer(value1);
}
// node_modules/@polkadot/util/is/u8a.js
function isU8a2(value1) {
    return (value1 && value1.constructor) === Uint8Array || _instanceof(value1, Uint8Array);
}
// node_modules/@polkadot/util/string/toU8a.js
var encoder2 = new TextEncoder3();
function stringToU8a2(value1) {
    return value1 ? encoder2.encode(value1.toString()) : new Uint8Array();
}
// node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a2(value1) {
    return isU8a2(value1) ? isBuffer2(value1) ? new Uint8Array(value1) : value1 : isHex2(value1) ? hexToU8a2(value1) : Array.isArray(value1) ? new Uint8Array(value1) : stringToU8a2(value1);
}
// node_modules/@polkadot/util/u8a/concat.js
function u8aConcat2() {
    for(var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++){
        list[_key] = arguments[_key];
    }
    var u8as = new Array(list.length);
    var length = 0;
    for(var i = 0; i < list.length; i++){
        u8as[i] = u8aToU8a2(list[i]);
        length += u8as[i].length;
    }
    return u8aConcatStrict2(u8as, length);
}
function u8aConcatStrict2(u8as) {
    var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var offset = 0;
    if (!length) {
        for(var i = 0; i < u8as.length; i++){
            length += u8as[i].length;
        }
    }
    var result = new Uint8Array(length);
    for(var i1 = 0; i1 < u8as.length; i1++){
        result.set(u8as[i1], offset);
        offset += u8as[i1].length;
    }
    return result;
}
// node_modules/@polkadot/util/u8a/toString.js
var decoder2 = new TextDecoder3("utf-8");
function u8aToString2(value1) {
    return value1 ? decoder2.decode(value1) : "";
}
// node_modules/@polkadot/x-randomvalues/node.js
var import_crypto3 = __toESM(require("crypto"), 1);
function getRandomValues2(output4) {
    var bytes5 = import_crypto3.default.randomBytes(output4.length);
    for(var i = 0; i < bytes5.length; i++){
        output4[i] = bytes5[i];
    }
    return output4;
}
// node_modules/@noble/hashes/esm/_assert.js
function number2(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error("Wrong positive integer: ".concat(n));
}
function bool3(b) {
    if (typeof b !== "boolean") throw new Error("Expected boolean, not ".concat(b));
}
function bytes3(b) {
    for(var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        lengths[_key - 1] = arguments[_key];
    }
    if (!_instanceof(b, Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError("Expected Uint8Array of length ".concat(lengths, ", not of length=").concat(b.length));
}
function hash2(hash3) {
    if (typeof hash3 !== "function" || typeof hash3.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number2(hash3.outputLen);
    number2(hash3.blockLen);
}
function exists2(instance2) {
    var checkFinished = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (instance2.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance2.finished) throw new Error("Hash#digest() has already been called");
}
function output2(out, instance2) {
    bytes3(out);
    var min = instance2.outputLen;
    if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least ".concat(min));
    }
}
var assert3 = {
    number: number2,
    bool: bool3,
    bytes: bytes3,
    hash: hash2,
    exists: exists2,
    output: output2
};
var assert_default2 = assert3;
// node_modules/@noble/hashes/esm/cryptoNode.js
var nc = __toESM(require("crypto"), 1);
var crypto5 = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : void 0;
// node_modules/@noble/hashes/esm/utils.js
var u324 = function(arr) {
    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
};
var isLE2 = new Uint8Array(new Uint32Array([
    287454020
]).buffer)[0] === 68;
if (!isLE2) throw new Error("Non little-endian hardware is not supported");
var hexes3 = Array.from({
    length: 256
}, function(v, i) {
    return i.toString(16).padStart(2, "0");
});
function utf8ToBytes2(str) {
    if (typeof str !== "string") {
        throw new TypeError("utf8ToBytes expected string, got ".concat(typeof str === "undefined" ? "undefined" : _type_of(str)));
    }
    return new TextEncoder().encode(str);
}
function toBytes2(data) {
    if (typeof data === "string") data = utf8ToBytes2(data);
    if (!_instanceof(data, Uint8Array)) throw new TypeError("Expected input type is Uint8Array (got ".concat(typeof data === "undefined" ? "undefined" : _type_of(data), ")"));
    return data;
}
var Hash2 = /*#__PURE__*/ function() {
    function Hash2() {
        _class_call_check(this, Hash2);
    }
    _create_class(Hash2, [
        {
            // Safe version that clones internal state
            key: "clone",
            value: function clone() {
                return this._cloneInto();
            }
        }
    ]);
    return Hash2;
}();
function wrapConstructorWithOpts2(hashCons) {
    var hashC = function(msg, opts) {
        return hashCons(opts).update(toBytes2(msg)).digest();
    };
    var tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = function(opts) {
        return hashCons(opts);
    };
    return hashC;
}
// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK642 = BigInt(Math.pow(2, 32) - 1);
var _32n3 = BigInt(32);
function fromBig2(n) {
    var le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (le) return {
        h: Number(n & U32_MASK642),
        l: Number(n >> _32n3 & U32_MASK642)
    };
    return {
        h: Number(n >> _32n3 & U32_MASK642) | 0,
        l: Number(n & U32_MASK642) | 0
    };
}
function split2(lst) {
    var le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var Ah = new Uint32Array(lst.length);
    var Al = new Uint32Array(lst.length);
    for(var i = 0; i < lst.length; i++){
        var _fromBig2 = fromBig2(lst[i], le), h = _fromBig2.h, l13 = _fromBig2.l;
        var ref;
        ref = [
            h,
            l13
        ], Ah[i] = ref[0], Al[i] = ref[1], ref;
    }
    return [
        Ah,
        Al
    ];
}
var toBig2 = function(h, l13) {
    return BigInt(h >>> 0) << _32n3 | BigInt(l13 >>> 0);
};
var shrSH2 = function(h, l13, s) {
    return h >>> s;
};
var shrSL2 = function(h, l13, s) {
    return h << 32 - s | l13 >>> s;
};
var rotrSH2 = function(h, l13, s) {
    return h >>> s | l13 << 32 - s;
};
var rotrSL2 = function(h, l13, s) {
    return h << 32 - s | l13 >>> s;
};
var rotrBH2 = function(h, l13, s) {
    return h << 64 - s | l13 >>> s - 32;
};
var rotrBL2 = function(h, l13, s) {
    return h >>> s - 32 | l13 << 64 - s;
};
var rotr32H2 = function(h, l13) {
    return l13;
};
var rotr32L2 = function(h, l13) {
    return h;
};
var rotlSH2 = function(h, l13, s) {
    return h << s | l13 >>> 32 - s;
};
var rotlSL2 = function(h, l13, s) {
    return l13 << s | h >>> 32 - s;
};
var rotlBH2 = function(h, l13, s) {
    return l13 << s - 32 | h >>> 64 - s;
};
var rotlBL2 = function(h, l13, s) {
    return h << s - 32 | l13 >>> 64 - s;
};
function add2(Ah, Al, Bh, Bl) {
    var l13 = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l13 / Math.pow(2, 32) | 0) | 0,
        l: l13 | 0
    };
}
var add3L2 = function(Al, Bl, Cl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
};
var add3H2 = function(low, Ah, Bh, Ch) {
    return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;
};
var add4L2 = function(Al, Bl, Cl, Dl) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
};
var add4H2 = function(low, Ah, Bh, Ch, Dh) {
    return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;
};
var add5L2 = function(Al, Bl, Cl, Dl, El) {
    return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
};
var add5H2 = function(low, Ah, Bh, Ch, Dh, Eh) {
    return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;
};
var u643 = {
    fromBig: fromBig2,
    split: split2,
    toBig: toBig2,
    shrSH: shrSH2,
    shrSL: shrSL2,
    rotrSH: rotrSH2,
    rotrSL: rotrSL2,
    rotrBH: rotrBH2,
    rotrBL: rotrBL2,
    rotr32H: rotr32H2,
    rotr32L: rotr32L2,
    rotlSH: rotlSH2,
    rotlSL: rotlSL2,
    rotlBH: rotlBH2,
    rotlBL: rotlBL2,
    add: add2,
    add3L: add3L2,
    add3H: add3H2,
    add4L: add4L2,
    add4H: add4H2,
    add5H: add5H2,
    add5L: add5L2
};
var u64_default2 = u643;
// node_modules/@polkadot/wasm-bridge/wbg.js
var _Wbg_bridge;
var DEFAULT_CRYPTO2 = {
    getRandomValues: getRandomValues2
};
var DEFAULT_SELF2 = {
    crypto: DEFAULT_CRYPTO2
};
var Wbg2 = function Wbg2(bridge3) {
    var _this = this;
    _class_call_check(this, Wbg2);
    _Wbg_bridge.set(this, void 0);
    this.abort = function() {
        throw new Error("abort");
    };
    this.__wbindgen_is_undefined = function(idx) {
        return __classPrivateFieldGet(_this, _Wbg_bridge, "f").getObject(idx) === void 0;
    };
    this.__wbindgen_throw = function(ptr, len) {
        throw new Error(__classPrivateFieldGet(_this, _Wbg_bridge, "f").getString(ptr, len));
    };
    this.__wbg_self_1b7a39e3a92c949c = function() {
        return __classPrivateFieldGet(_this, _Wbg_bridge, "f").addObject(DEFAULT_SELF2);
    };
    this.__wbg_require_604837428532a733 = function(ptr, len) {
        throw new Error("Unable to require ".concat(__classPrivateFieldGet(_this, _Wbg_bridge, "f").getString(ptr, len)));
    };
    this.__wbg_crypto_968f1772287e2df0 = function(_idx) {
        return __classPrivateFieldGet(_this, _Wbg_bridge, "f").addObject(DEFAULT_CRYPTO2);
    };
    this.__wbg_getRandomValues_a3d34b4fee3c2869 = function(_idx) {
        return __classPrivateFieldGet(_this, _Wbg_bridge, "f").addObject(DEFAULT_CRYPTO2.getRandomValues);
    };
    this.__wbg_getRandomValues_f5e14ab7ac8e995d = function(_arg0, ptr, len) {
        DEFAULT_CRYPTO2.getRandomValues(__classPrivateFieldGet(_this, _Wbg_bridge, "f").getU8a(ptr, len));
    };
    this.__wbg_randomFillSync_d5bd2d655fdf256a = function(_idx, _ptr, _len) {
        throw new Error("randomFillsync is not available");
    };
    this.__wbindgen_object_drop_ref = function(idx) {
        __classPrivateFieldGet(_this, _Wbg_bridge, "f").takeObject(idx);
    };
    __classPrivateFieldSet(this, _Wbg_bridge, bridge3, "f");
};
_Wbg_bridge = /* @__PURE__ */ new WeakMap();
// node_modules/@polkadot/wasm-bridge/bridge.js
var _Bridge_cachegetInt32;
var _Bridge_cachegetUint8;
var _Bridge_createWasm;
var _Bridge_heap;
var _Bridge_heapNext;
var _Bridge_wasm;
var _Bridge_wasmError;
var _Bridge_wasmPromise;
var _Bridge_wbg;
var _Bridge_type;
var Bridge2 = /*#__PURE__*/ function() {
    function Bridge2(createWasm3) {
        _class_call_check(this, Bridge2);
        _Bridge_cachegetInt32.set(this, void 0);
        _Bridge_cachegetUint8.set(this, void 0);
        _Bridge_createWasm.set(this, void 0);
        _Bridge_heap.set(this, void 0);
        _Bridge_heapNext.set(this, void 0);
        _Bridge_wasm.set(this, void 0);
        _Bridge_wasmError.set(this, void 0);
        _Bridge_wasmPromise.set(this, void 0);
        _Bridge_wbg.set(this, void 0);
        _Bridge_type.set(this, void 0);
        __classPrivateFieldSet(this, _Bridge_createWasm, createWasm3, "f");
        __classPrivateFieldSet(this, _Bridge_cachegetInt32, null, "f");
        __classPrivateFieldSet(this, _Bridge_cachegetUint8, null, "f");
        __classPrivateFieldSet(this, _Bridge_heap, new Array(32).fill(void 0).concat(void 0, null, true, false), "f");
        __classPrivateFieldSet(this, _Bridge_heapNext, __classPrivateFieldGet(this, _Bridge_heap, "f").length, "f");
        __classPrivateFieldSet(this, _Bridge_type, "none", "f");
        __classPrivateFieldSet(this, _Bridge_wasm, null, "f");
        __classPrivateFieldSet(this, _Bridge_wasmError, null, "f");
        __classPrivateFieldSet(this, _Bridge_wasmPromise, null, "f");
        __classPrivateFieldSet(this, _Bridge_wbg, _object_spread({}, new Wbg2(this)), "f");
    }
    _create_class(Bridge2, [
        {
            key: "error",
            get: /** @description Returns the init error */ function get() {
                return __classPrivateFieldGet(this, _Bridge_wasmError, "f");
            }
        },
        {
            key: "type",
            get: /** @description Returns the init type */ function get() {
                return __classPrivateFieldGet(this, _Bridge_type, "f");
            }
        },
        {
            key: "wasm",
            get: /** @description Returns the created wasm interface */ function get() {
                return __classPrivateFieldGet(this, _Bridge_wasm, "f");
            }
        },
        {
            key: "init",
            value: /** @description Performs the wasm initialization */ function init(createWasm3) {
                var _this = this;
                return _async_to_generator(function() {
                    var _ref, error2, type, wasm;
                    return __generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!__classPrivateFieldGet(_this, _Bridge_wasmPromise, "f") || createWasm3) {
                                    __classPrivateFieldSet(_this, _Bridge_wasmPromise, (createWasm3 || __classPrivateFieldGet(_this, _Bridge_createWasm, "f"))(__classPrivateFieldGet(_this, _Bridge_wbg, "f")), "f");
                                }
                                return [
                                    4,
                                    __classPrivateFieldGet(_this, _Bridge_wasmPromise, "f")
                                ];
                            case 1:
                                _ref = _state.sent(), error2 = _ref.error, type = _ref.type, wasm = _ref.wasm;
                                __classPrivateFieldSet(_this, _Bridge_type, type, "f");
                                __classPrivateFieldSet(_this, _Bridge_wasm, wasm, "f");
                                __classPrivateFieldSet(_this, _Bridge_wasmError, error2, "f");
                                return [
                                    2,
                                    __classPrivateFieldGet(_this, _Bridge_wasm, "f")
                                ];
                        }
                    });
                })();
            }
        },
        {
            /**
   * @internal
   * @description Gets an object from the heap
   */ key: "getObject",
            value: function getObject(idx) {
                return __classPrivateFieldGet(this, _Bridge_heap, "f")[idx];
            }
        },
        {
            /**
   * @internal
   * @description Removes an object from the heap
   */ key: "dropObject",
            value: function dropObject(idx) {
                if (idx < 36) {
                    return;
                }
                __classPrivateFieldGet(this, _Bridge_heap, "f")[idx] = __classPrivateFieldGet(this, _Bridge_heapNext, "f");
                __classPrivateFieldSet(this, _Bridge_heapNext, idx, "f");
            }
        },
        {
            /**
   * @internal
   * @description Retrieves and removes an object to the heap
   */ key: "takeObject",
            value: function takeObject(idx) {
                var ret = this.getObject(idx);
                this.dropObject(idx);
                return ret;
            }
        },
        {
            /**
   * @internal
   * @description Adds an object to the heap
   */ key: "addObject",
            value: function addObject(obj) {
                if (__classPrivateFieldGet(this, _Bridge_heapNext, "f") === __classPrivateFieldGet(this, _Bridge_heap, "f").length) {
                    __classPrivateFieldGet(this, _Bridge_heap, "f").push(__classPrivateFieldGet(this, _Bridge_heap, "f").length + 1);
                }
                var idx = __classPrivateFieldGet(this, _Bridge_heapNext, "f");
                __classPrivateFieldSet(this, _Bridge_heapNext, __classPrivateFieldGet(this, _Bridge_heap, "f")[idx], "f");
                __classPrivateFieldGet(this, _Bridge_heap, "f")[idx] = obj;
                return idx;
            }
        },
        {
            /**
   * @internal
   * @description Retrieve an Int32 in the WASM interface
   */ key: "getInt32",
            value: function getInt32() {
                if (__classPrivateFieldGet(this, _Bridge_cachegetInt32, "f") === null || __classPrivateFieldGet(this, _Bridge_cachegetInt32, "f").buffer !== __classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer) {
                    __classPrivateFieldSet(this, _Bridge_cachegetInt32, new Int32Array(__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer), "f");
                }
                return __classPrivateFieldGet(this, _Bridge_cachegetInt32, "f");
            }
        },
        {
            /**
   * @internal
   * @description Retrieve an Uint8Array in the WASM interface
   */ key: "getUint8",
            value: function getUint8() {
                if (__classPrivateFieldGet(this, _Bridge_cachegetUint8, "f") === null || __classPrivateFieldGet(this, _Bridge_cachegetUint8, "f").buffer !== __classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer) {
                    __classPrivateFieldSet(this, _Bridge_cachegetUint8, new Uint8Array(__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer), "f");
                }
                return __classPrivateFieldGet(this, _Bridge_cachegetUint8, "f");
            }
        },
        {
            /**
   * @internal
   * @description Retrieves an Uint8Array in the WASM interface
   */ key: "getU8a",
            value: function getU8a(ptr, len) {
                return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
            }
        },
        {
            /**
   * @internal
   * @description Retrieves a string in the WASM interface
   */ key: "getString",
            value: function getString(ptr, len) {
                return u8aToString2(this.getU8a(ptr, len));
            }
        },
        {
            /**
   * @internal
   * @description Allocates an Uint8Array in the WASM interface
   */ key: "allocU8a",
            value: function allocU8a(arg) {
                var ptr = __classPrivateFieldGet(this, _Bridge_wasm, "f").__wbindgen_malloc(arg.length * 1);
                this.getUint8().set(arg, ptr / 1);
                return [
                    ptr,
                    arg.length
                ];
            }
        },
        {
            /**
   * @internal
   * @description Allocates a string in the WASM interface
   */ key: "allocString",
            value: function allocString(arg) {
                return this.allocU8a(stringToU8a2(arg));
            }
        },
        {
            /**
   * @internal
   * @description Retrieves an Uint8Array from the WASM interface
   */ key: "resultU8a",
            value: function resultU8a() {
                var r0 = this.getInt32()[8 / 4 + 0];
                var r1 = this.getInt32()[8 / 4 + 1];
                var ret = this.getU8a(r0, r1).slice();
                __classPrivateFieldGet(this, _Bridge_wasm, "f").__wbindgen_free(r0, r1 * 1);
                return ret;
            }
        },
        {
            /**
   * @internal
   * @description Retrieve a string from the WASM interface
   */ key: "resultString",
            value: function resultString() {
                return u8aToString2(this.resultU8a());
            }
        }
    ]);
    return Bridge2;
}();
_Bridge_cachegetInt32 = /* @__PURE__ */ new WeakMap(), _Bridge_cachegetUint8 = /* @__PURE__ */ new WeakMap(), _Bridge_createWasm = /* @__PURE__ */ new WeakMap(), _Bridge_heap = /* @__PURE__ */ new WeakMap(), _Bridge_heapNext = /* @__PURE__ */ new WeakMap(), _Bridge_wasm = /* @__PURE__ */ new WeakMap(), _Bridge_wasmError = /* @__PURE__ */ new WeakMap(), _Bridge_wasmPromise = /* @__PURE__ */ new WeakMap(), _Bridge_wbg = /* @__PURE__ */ new WeakMap(), _Bridge_type = /* @__PURE__ */ new WeakMap();
// node_modules/@polkadot/wasm-bridge/init.js
function createWasmFn2(root, wasmBytes3, asmFn) {
    return function() {
        var _ref = _async_to_generator(function(wbg) {
            var result, source, error2;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        result = {
                            error: null,
                            type: "none",
                            wasm: null
                        };
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        if (!wasmBytes3 || !wasmBytes3.length) {
                            throw new Error("No WebAssembly provided for initialization");
                        } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
                            throw new Error("WebAssembly is not available in your environment");
                        }
                        return [
                            4,
                            WebAssembly.instantiate(wasmBytes3, {
                                wbg: wbg
                            })
                        ];
                    case 2:
                        source = _state.sent();
                        result.wasm = source.instance.exports;
                        result.type = "wasm";
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error2 = _state.sent();
                        if (typeof asmFn === "function") {
                            result.wasm = asmFn(wbg);
                            result.type = "asm";
                        } else {
                            result.error = "FATAL: Unable to initialize @polkadot/wasm-".concat(root, ":: ").concat(error2.message);
                            console.error(result.error);
                        }
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2,
                            result
                        ];
                }
            });
        });
        return function(wbg) {
            return _ref.apply(this, arguments);
        };
    }();
}
// node_modules/@polkadot/wasm-util/base64.js
var chr2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var map79 = new Array(256);
for(var i13 = 0; i13 < chr2.length; i13++){
    map79[chr2.charCodeAt(i13)] = i13;
}
function base64Decode2(data, out) {
    var len = out.length;
    var byte = 0;
    var bits3 = 0;
    var pos = -1;
    for(var i = 0; pos < len; i++){
        byte = byte << 6 | map79[data.charCodeAt(i)];
        if ((bits3 += 6) >= 8) {
            out[++pos] = byte >>> (bits3 -= 8) & 255;
        }
    }
    return out;
}
// node_modules/@polkadot/wasm-util/fflate.js
var u83 = Uint8Array;
var u163 = Uint16Array;
var u325 = Uint32Array;
var clim2 = new u83([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
var fleb2 = new u83([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */ 0,
    0,
    /* impossible */ 0
]);
var fdeb2 = new u83([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */ 0,
    0
]);
var freb2 = function(eb, start) {
    var b = new u163(31);
    for(var i = 0; i < 31; ++i){
        b[i] = start += 1 << eb[i - 1];
    }
    var r = new u325(b[30]);
    for(var i1 = 1; i1 < 30; ++i1){
        for(var j = b[i1]; j < b[i1 + 1]; ++j){
            r[j] = j - b[i1] << 5 | i1;
        }
    }
    return [
        b,
        r
    ];
};
var _freb2 = _sliced_to_array(freb2(fleb2, 2), 2), fl2 = _freb2[0], revfl2 = _freb2[1];
fl2[28] = 258, revfl2[258] = 28;
var _freb21 = _sliced_to_array(freb2(fdeb2, 0), 1), fd2 = _freb21[0];
var rev2 = new u163(32768);
for(var i14 = 0; i14 < 32768; ++i14){
    var x2 = (i14 & 43690) >>> 1 | (i14 & 21845) << 1;
    x2 = (x2 & 52428) >>> 2 | (x2 & 13107) << 2;
    x2 = (x2 & 61680) >>> 4 | (x2 & 3855) << 4;
    rev2[i14] = ((x2 & 65280) >>> 8 | (x2 & 255) << 8) >>> 1;
}
var hMap2 = function(cd, mb, r) {
    var s = cd.length;
    var i = 0;
    var l13 = new u163(mb);
    for(; i < s; ++i)++l13[cd[i] - 1];
    var le = new u163(mb);
    for(i = 0; i < mb; ++i){
        le[i] = le[i - 1] + l13[i - 1] << 1;
    }
    var co;
    if (r) {
        co = new u163(1 << mb);
        var rvb = 15 - mb;
        for(i = 0; i < s; ++i){
            if (cd[i]) {
                var sv = i << 4 | cd[i];
                var r2 = mb - cd[i];
                var v = le[cd[i] - 1]++ << r2;
                for(var m = v | (1 << r2) - 1; v <= m; ++v){
                    co[rev2[v] >>> rvb] = sv;
                }
            }
        }
    } else {
        co = new u163(s);
        for(i = 0; i < s; ++i)co[i] = rev2[le[cd[i] - 1]++] >>> 15 - cd[i];
    }
    return co;
};
var flt2 = new u83(288);
for(var i15 = 0; i15 < 144; ++i15)flt2[i15] = 8;
for(var i17 = 144; i17 < 256; ++i17)flt2[i17] = 9;
for(var i18 = 256; i18 < 280; ++i18)flt2[i18] = 7;
for(var i19 = 280; i19 < 288; ++i19)flt2[i19] = 8;
var fdt2 = new u83(32);
for(var i20 = 0; i20 < 32; ++i20)fdt2[i20] = 5;
var flrm2 = hMap2(flt2, 9, 1);
var fdrm2 = hMap2(fdt2, 5, 1);
var bits2 = function(d, p, m) {
    var o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
var bits162 = function(d, p) {
    var o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
var shft2 = function(p) {
    return (p >>> 3) + (p & 7 && 1);
};
var slc2 = function(v, s, e) {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    var n = new (_instanceof(v, u163) ? u163 : _instanceof(v, u325) ? u325 : u83)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
var max2 = function(a) {
    var m = a[0];
    for(var i = 1; i < a.length; ++i){
        if (a[i] > m) m = a[i];
    }
    return m;
};
var inflt2 = function(dat, buf, st) {
    var noSt = !st || st.i;
    if (!st) st = {};
    var sl = dat.length;
    var noBuf = !buf || !noSt;
    if (!buf) buf = new u83(sl * 3);
    var cbuf = function(l13) {
        var bl = buf.length;
        if (l13 > bl) {
            var nbuf = new u83(Math.max(bl << 1, l13));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    if (final && !lm) return buf;
    var tbts = sl << 3;
    do {
        if (!lm) {
            st.f = final = bits2(dat, pos, 1);
            var type = bits2(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                var s = shft2(pos) + 4, l13 = dat[s - 4] | dat[s - 3] << 8, t2 = s + l13;
                if (t2 > sl) {
                    if (noSt) throw "unexpected EOF";
                    break;
                }
                if (noBuf) cbuf(bt + l13);
                buf.set(dat.subarray(s, t2), bt);
                st.b = bt += l13, st.p = pos = t2 << 3;
                continue;
            } else if (type == 1) lm = flrm2, dm = fdrm2, lbt = 9, dbt = 5;
            else if (type == 2) {
                var hLit = bits2(dat, pos, 31) + 257, hcLen = bits2(dat, pos + 10, 15) + 4;
                var tl = hLit + bits2(dat, pos + 5, 31) + 1;
                pos += 14;
                var ldt = new u83(tl);
                var clt = new u83(19);
                for(var i = 0; i < hcLen; ++i){
                    clt[clim2[i]] = bits2(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                var clb = max2(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts) break;
                var clm = hMap2(clt, clb, 1);
                for(var i1 = 0; i1 < tl;){
                    var r = clm[bits2(dat, pos, clbmsk)];
                    pos += r & 15;
                    var s1 = r >>> 4;
                    if (s1 < 16) {
                        ldt[i1++] = s1;
                    } else {
                        var c = 0, n = 0;
                        if (s1 == 16) n = 3 + bits2(dat, pos, 3), pos += 2, c = ldt[i1 - 1];
                        else if (s1 == 17) n = 3 + bits2(dat, pos, 7), pos += 3;
                        else if (s1 == 18) n = 11 + bits2(dat, pos, 127), pos += 7;
                        while(n--)ldt[i1++] = c;
                    }
                }
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                lbt = max2(lt);
                dbt = max2(dt);
                lm = hMap2(lt, lbt, 1);
                dm = hMap2(dt, dbt, 1);
            } else throw "invalid block type";
            if (pos > tbts) throw "unexpected EOF";
        }
        if (noBuf) cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while(noSt || pos + mxa < tbts){
            var c1 = lm[bits162(dat, pos) & lms], sym = c1 >>> 4;
            pos += c1 & 15;
            if (pos > tbts) throw "unexpected EOF";
            if (!c1) throw "invalid length/literal";
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
                lm = void 0;
                break;
            } else {
                var add3 = sym - 254;
                if (sym > 264) {
                    var i2 = sym - 257, b = fleb2[i2];
                    add3 = bits2(dat, pos, (1 << b) - 1) + fl2[i2];
                    pos += b;
                }
                var d = dm[bits162(dat, pos) & dms], dsym = d >>> 4;
                if (!d) throw "invalid distance";
                pos += d & 15;
                var dt1 = fd2[dsym];
                if (dsym > 3) {
                    var b1 = fdeb2[dsym];
                    dt1 += bits162(dat, pos) & (1 << b1) - 1, pos += b1;
                }
                if (pos > tbts) throw "unexpected EOF";
                if (noBuf) cbuf(bt + 131072);
                var end = bt + add3;
                for(; bt < end; bt += 4){
                    buf[bt] = buf[bt - dt1];
                    buf[bt + 1] = buf[bt + 1 - dt1];
                    buf[bt + 2] = buf[bt + 2 - dt1];
                    buf[bt + 3] = buf[bt + 3 - dt1];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    }while (!final);
    return bt == buf.length ? buf : slc2(buf, 0, bt);
};
var zlv2 = function(d) {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw "invalid zlib data";
    if (d[1] & 32) throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync2(data, out) {
    return inflt2((zlv2(data), data.subarray(2, -4)), out);
}
// node_modules/@polkadot/wasm-crypto-wasm/bundle.js
var import_bytes2 = __toESM(require_bytes2(), 1);
var wasmBytes2 = /* @__PURE__ */ unzlibSync2(base64Decode2(import_bytes2.bytes, new Uint8Array(import_bytes2.lenIn)), new Uint8Array(import_bytes2.lenOut));
// node_modules/@polkadot/wasm-crypto-init/wasm.js
var createWasm2 = /* @__PURE__ */ createWasmFn2("crypto", wasmBytes2, null);
// node_modules/@polkadot/wasm-crypto/init.js
var bridge2 = new Bridge2(createWasm2);
// node_modules/@polkadot/wasm-crypto/bundle.js
function withWasm2(fn) {
    return function() {
        for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){
            params[_key] = arguments[_key];
        }
        if (!bridge2.wasm) {
            throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
        }
        return fn.apply(void 0, [
            bridge2.wasm
        ].concat(_to_consumable_array(params)));
    };
}
var blake2b3 = /* @__PURE__ */ withWasm2(function(wasm, data, key, size) {
    var _wasm;
    (_wasm = wasm).ext_blake2b.apply(_wasm, [
        8
    ].concat(_to_consumable_array(bridge2.allocU8a(data)), _to_consumable_array(bridge2.allocU8a(key)), [
        size
    ]));
    return bridge2.resultU8a();
});
function isReady2() {
    return !!bridge2.wasm;
}
// node_modules/@polkadot/util-crypto/base32/helpers.js
function createDecode2(param, validate) {
    var coder = param.coder, ipfs = param.ipfs;
    return function(value1, ipfsCompat) {
        validate(value1, ipfsCompat);
        return coder.decode(ipfs && ipfsCompat ? value1.substring(1) : value1);
    };
}
function createEncode2(param) {
    var coder = param.coder, ipfs = param.ipfs;
    return function(value1, ipfsCompat) {
        var out = coder.encode(u8aToU8a2(value1));
        return ipfs && ipfsCompat ? "".concat(ipfs).concat(out) : out;
    };
}
function createValidate2(param) {
    var chars2 = param.chars, ipfs = param.ipfs, type = param.type;
    return function(value1, ipfsCompat) {
        if (typeof value1 !== "string") {
            throw new Error("Expected ".concat(type, " string input"));
        } else if (ipfs && ipfsCompat && value1[0] !== ipfs) {
            throw new Error("Expected ipfs-compatible ".concat(type, " to start with '").concat(ipfs, "'"));
        }
        for(var i = ipfsCompat ? 1 : 0; i < value1.length; i++){
            if (!(chars2.includes(value1[i]) || value1[i] === "=" && (i === value1.length - 1 || !chars2.includes(value1[i + 1])))) {
                throw new Error("Invalid ".concat(type, ' character "').concat(value1[i], '" (0x').concat(value1.charCodeAt(i).toString(16), ") at index ").concat(i));
            }
        }
        return true;
    };
}
// node_modules/@polkadot/util-crypto/base58/bs58.js
var config2 = {
    chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    coder: base58,
    ipfs: "z",
    type: "base58"
};
var base58Validate2 = /* @__PURE__ */ createValidate2(config2);
var base58Decode2 = /* @__PURE__ */ createDecode2(config2, base58Validate2);
var base58Encode2 = /* @__PURE__ */ createEncode2(config2);
// node_modules/@noble/hashes/esm/_blake2.js
var SIGMA2 = new Uint8Array([
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
]);
var BLAKE22 = /*#__PURE__*/ function(Hash2) {
    _inherits(BLAKE22, Hash2);
    var _super = _create_super(BLAKE22);
    function BLAKE22(blockLen, outputLen) {
        var opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, keyLen = arguments.length > 3 ? arguments[3] : void 0, saltLen = arguments.length > 4 ? arguments[4] : void 0, persLen = arguments.length > 5 ? arguments[5] : void 0;
        _class_call_check(this, BLAKE22);
        var _this;
        _this = _super.call(this);
        _this.blockLen = blockLen;
        _this.outputLen = outputLen;
        _this.length = 0;
        _this.pos = 0;
        _this.finished = false;
        _this.destroyed = false;
        assert_default2.number(blockLen);
        assert_default2.number(outputLen);
        assert_default2.number(keyLen);
        if (outputLen < 0 || outputLen > keyLen) throw new Error("outputLen bigger than keyLen");
        if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error("key must be up 1..".concat(keyLen, " byte long or undefined"));
        if (opts.salt !== void 0 && opts.salt.length !== saltLen) throw new Error("salt must be ".concat(saltLen, " byte long or undefined"));
        if (opts.personalization !== void 0 && opts.personalization.length !== persLen) throw new Error("personalization must be ".concat(persLen, " byte long or undefined"));
        _this.buffer32 = u324(_this.buffer = new Uint8Array(blockLen));
        return _this;
    }
    _create_class(BLAKE22, [
        {
            key: "update",
            value: function update(data) {
                assert_default2.exists(this);
                var _this = this, blockLen = _this.blockLen, buffer = _this.buffer, buffer32 = _this.buffer32;
                data = toBytes2(data);
                var len = data.length;
                for(var pos = 0; pos < len;){
                    if (this.pos === blockLen) {
                        this.compress(buffer32, 0, false);
                        this.pos = 0;
                    }
                    var take = Math.min(blockLen - this.pos, len - pos);
                    var dataOffset = data.byteOffset + pos;
                    if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                        var data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                        for(var pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen){
                            this.length += blockLen;
                            this.compress(data32, pos32, false);
                        }
                        continue;
                    }
                    buffer.set(data.subarray(pos, pos + take), this.pos);
                    this.pos += take;
                    this.length += take;
                    pos += take;
                }
                return this;
            }
        },
        {
            key: "digestInto",
            value: function digestInto(out) {
                assert_default2.exists(this);
                assert_default2.output(out, this);
                var _this = this, pos = _this.pos, buffer32 = _this.buffer32;
                this.finished = true;
                this.buffer.subarray(pos).fill(0);
                this.compress(buffer32, 0, true);
                var out32 = u324(out);
                this.get().forEach(function(v, i) {
                    return out32[i] = v;
                });
            }
        },
        {
            key: "digest",
            value: function digest() {
                var _this = this, buffer = _this.buffer, outputLen = _this.outputLen;
                this.digestInto(buffer);
                var res = buffer.slice(0, outputLen);
                this.destroy();
                return res;
            }
        },
        {
            key: "_cloneInto",
            value: function _cloneInto(to) {
                var _to;
                var _this = this, buffer = _this.buffer, length = _this.length, finished = _this.finished, destroyed = _this.destroyed, outputLen = _this.outputLen, pos = _this.pos;
                to || (to = new this.constructor({
                    dkLen: outputLen
                }));
                (_to = to).set.apply(_to, _to_consumable_array(this.get()));
                to.length = length;
                to.finished = finished;
                to.destroyed = destroyed;
                to.outputLen = outputLen;
                to.buffer.set(buffer);
                to.pos = pos;
                return to;
            }
        }
    ]);
    return BLAKE22;
}(Hash2);
// node_modules/@noble/hashes/esm/blake2b.js
var IV2 = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
]);
var BUF2 = new Uint32Array(32);
function G12(a, b, c, d, msg, x) {
    var Xl = msg[x], Xh = msg[x + 1];
    var Al = BUF2[2 * a], Ah = BUF2[2 * a + 1];
    var Bl = BUF2[2 * b], Bh = BUF2[2 * b + 1];
    var Cl = BUF2[2 * c], Ch = BUF2[2 * c + 1];
    var Dl = BUF2[2 * d], Dh = BUF2[2 * d + 1];
    var ll = u64_default2.add3L(Al, Bl, Xl);
    Ah = u64_default2.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    var ref;
    ref = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    }, Dh = ref.Dh, Dl = ref.Dl, ref;
    var ref1;
    ref1 = {
        Dh: u64_default2.rotr32H(Dh, Dl),
        Dl: u64_default2.rotr32L(Dh, Dl)
    }, Dh = ref1.Dh, Dl = ref1.Dl, ref1;
    var ref2;
    ref2 = u64_default2.add(Ch, Cl, Dh, Dl), Ch = ref2.h, Cl = ref2.l, ref2;
    var ref3;
    ref3 = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    }, Bh = ref3.Bh, Bl = ref3.Bl, ref3;
    var ref4;
    ref4 = {
        Bh: u64_default2.rotrSH(Bh, Bl, 24),
        Bl: u64_default2.rotrSL(Bh, Bl, 24)
    }, Bh = ref4.Bh, Bl = ref4.Bl, ref4;
    BUF2[2 * a] = Al, BUF2[2 * a + 1] = Ah;
    BUF2[2 * b] = Bl, BUF2[2 * b + 1] = Bh;
    BUF2[2 * c] = Cl, BUF2[2 * c + 1] = Ch;
    BUF2[2 * d] = Dl, BUF2[2 * d + 1] = Dh;
}
function G22(a, b, c, d, msg, x) {
    var Xl = msg[x], Xh = msg[x + 1];
    var Al = BUF2[2 * a], Ah = BUF2[2 * a + 1];
    var Bl = BUF2[2 * b], Bh = BUF2[2 * b + 1];
    var Cl = BUF2[2 * c], Ch = BUF2[2 * c + 1];
    var Dl = BUF2[2 * d], Dh = BUF2[2 * d + 1];
    var ll = u64_default2.add3L(Al, Bl, Xl);
    Ah = u64_default2.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    var ref;
    ref = {
        Dh: Dh ^ Ah,
        Dl: Dl ^ Al
    }, Dh = ref.Dh, Dl = ref.Dl, ref;
    var ref1;
    ref1 = {
        Dh: u64_default2.rotrSH(Dh, Dl, 16),
        Dl: u64_default2.rotrSL(Dh, Dl, 16)
    }, Dh = ref1.Dh, Dl = ref1.Dl, ref1;
    var ref2;
    ref2 = u64_default2.add(Ch, Cl, Dh, Dl), Ch = ref2.h, Cl = ref2.l, ref2;
    var ref3;
    ref3 = {
        Bh: Bh ^ Ch,
        Bl: Bl ^ Cl
    }, Bh = ref3.Bh, Bl = ref3.Bl, ref3;
    var ref4;
    ref4 = {
        Bh: u64_default2.rotrBH(Bh, Bl, 63),
        Bl: u64_default2.rotrBL(Bh, Bl, 63)
    }, Bh = ref4.Bh, Bl = ref4.Bl, ref4;
    BUF2[2 * a] = Al, BUF2[2 * a + 1] = Ah;
    BUF2[2 * b] = Bl, BUF2[2 * b + 1] = Bh;
    BUF2[2 * c] = Cl, BUF2[2 * c + 1] = Ch;
    BUF2[2 * d] = Dl, BUF2[2 * d + 1] = Dh;
}
var BLAKE2b2 = /*#__PURE__*/ function(BLAKE22) {
    _inherits(BLAKE2b2, BLAKE22);
    var _super = _create_super(BLAKE2b2);
    function BLAKE2b2() {
        var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _class_call_check(this, BLAKE2b2);
        var _this;
        _this = _super.call(this, 128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
        _this.v0l = IV2[0] | 0;
        _this.v0h = IV2[1] | 0;
        _this.v1l = IV2[2] | 0;
        _this.v1h = IV2[3] | 0;
        _this.v2l = IV2[4] | 0;
        _this.v2h = IV2[5] | 0;
        _this.v3l = IV2[6] | 0;
        _this.v3h = IV2[7] | 0;
        _this.v4l = IV2[8] | 0;
        _this.v4h = IV2[9] | 0;
        _this.v5l = IV2[10] | 0;
        _this.v5h = IV2[11] | 0;
        _this.v6l = IV2[12] | 0;
        _this.v6h = IV2[13] | 0;
        _this.v7l = IV2[14] | 0;
        _this.v7h = IV2[15] | 0;
        var keyLength = opts.key ? opts.key.length : 0;
        _this.v0l ^= _this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
        if (opts.salt) {
            var salt = u324(toBytes2(opts.salt));
            _this.v4l ^= salt[0];
            _this.v4h ^= salt[1];
            _this.v5l ^= salt[2];
            _this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            var pers = u324(toBytes2(opts.personalization));
            _this.v6l ^= pers[0];
            _this.v6h ^= pers[1];
            _this.v7l ^= pers[2];
            _this.v7h ^= pers[3];
        }
        if (opts.key) {
            var tmp = new Uint8Array(_this.blockLen);
            tmp.set(toBytes2(opts.key));
            _this.update(tmp);
        }
        return _this;
    }
    _create_class(BLAKE2b2, [
        {
            // prettier-ignore
            key: "get",
            value: function get() {
                var _this = this, v0l = _this.v0l, v0h = _this.v0h, v1l = _this.v1l, v1h = _this.v1h, v2l = _this.v2l, v2h = _this.v2h, v3l = _this.v3l, v3h = _this.v3h, v4l = _this.v4l, v4h = _this.v4h, v5l = _this.v5l, v5h = _this.v5h, v6l = _this.v6l, v6h = _this.v6h, v7l = _this.v7l, v7h = _this.v7h;
                return [
                    v0l,
                    v0h,
                    v1l,
                    v1h,
                    v2l,
                    v2h,
                    v3l,
                    v3h,
                    v4l,
                    v4h,
                    v5l,
                    v5h,
                    v6l,
                    v6h,
                    v7l,
                    v7h
                ];
            }
        },
        {
            // prettier-ignore
            key: "set",
            value: function set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
                this.v0l = v0l | 0;
                this.v0h = v0h | 0;
                this.v1l = v1l | 0;
                this.v1h = v1h | 0;
                this.v2l = v2l | 0;
                this.v2h = v2h | 0;
                this.v3l = v3l | 0;
                this.v3h = v3h | 0;
                this.v4l = v4l | 0;
                this.v4h = v4h | 0;
                this.v5l = v5l | 0;
                this.v5h = v5h | 0;
                this.v6l = v6l | 0;
                this.v6h = v6h | 0;
                this.v7l = v7l | 0;
                this.v7h = v7h | 0;
            }
        },
        {
            key: "compress",
            value: function compress(msg, offset, isLast) {
                this.get().forEach(function(v, i) {
                    return BUF2[i] = v;
                });
                BUF2.set(IV2, 16);
                var _u64_default2_fromBig = u64_default2.fromBig(BigInt(this.length)), h = _u64_default2_fromBig.h, l13 = _u64_default2_fromBig.l;
                BUF2[24] = IV2[8] ^ l13;
                BUF2[25] = IV2[9] ^ h;
                if (isLast) {
                    BUF2[28] = ~BUF2[28];
                    BUF2[29] = ~BUF2[29];
                }
                var j = 0;
                var s = SIGMA2;
                for(var i = 0; i < 12; i++){
                    G12(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                    G22(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                    G12(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                    G22(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                    G12(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                    G22(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                    G12(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                    G22(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                    G12(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                    G22(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                    G12(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                    G22(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                    G12(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                    G22(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                    G12(3, 4, 9, 14, msg, offset + 2 * s[j++]);
                    G22(3, 4, 9, 14, msg, offset + 2 * s[j++]);
                }
                this.v0l ^= BUF2[0] ^ BUF2[16];
                this.v0h ^= BUF2[1] ^ BUF2[17];
                this.v1l ^= BUF2[2] ^ BUF2[18];
                this.v1h ^= BUF2[3] ^ BUF2[19];
                this.v2l ^= BUF2[4] ^ BUF2[20];
                this.v2h ^= BUF2[5] ^ BUF2[21];
                this.v3l ^= BUF2[6] ^ BUF2[22];
                this.v3h ^= BUF2[7] ^ BUF2[23];
                this.v4l ^= BUF2[8] ^ BUF2[24];
                this.v4h ^= BUF2[9] ^ BUF2[25];
                this.v5l ^= BUF2[10] ^ BUF2[26];
                this.v5h ^= BUF2[11] ^ BUF2[27];
                this.v6l ^= BUF2[12] ^ BUF2[28];
                this.v6h ^= BUF2[13] ^ BUF2[29];
                this.v7l ^= BUF2[14] ^ BUF2[30];
                this.v7h ^= BUF2[15] ^ BUF2[31];
                BUF2.fill(0);
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                this.destroyed = true;
                this.buffer32.fill(0);
                this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
    ]);
    return BLAKE2b2;
}(BLAKE22);
var blake2b4 = wrapConstructorWithOpts2(function(opts) {
    return new BLAKE2b2(opts);
});
// node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a2(data) {
    var bitLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 256, key = arguments.length > 2 ? arguments[2] : void 0, onlyJs = arguments.length > 3 ? arguments[3] : void 0;
    var byteLength = Math.ceil(bitLength / 8);
    var u8a = u8aToU8a2(data);
    return !hasBigInt2 || !onlyJs && isReady2() ? blake2b3(u8a, u8aToU8a2(key), byteLength) : blake2b4(u8a, {
        dkLen: byteLength,
        key: key || void 0
    });
}
// node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX2 = stringToU8a2("SS58PRE");
function sshash2(key) {
    return blake2AsU8a2(u8aConcat2(SS58_PREFIX2, key), 512);
}
// node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum2(decoded) {
    var ss58Length = decoded[0] & 64 ? 2 : 1;
    var ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
    var isPublicKey = [
        34 + ss58Length,
        35 + ss58Length
    ].includes(decoded.length);
    var length = decoded.length - (isPublicKey ? 2 : 1);
    var hash3 = sshash2(decoded.subarray(0, length));
    var isValid = (decoded[0] & 128) === 0 && ![
        46,
        47
    ].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash3[0] && decoded[decoded.length - 1] === hash3[1] : decoded[decoded.length - 1] === hash3[0]);
    return [
        isValid,
        length,
        ss58Length,
        ss58Decoded
    ];
}
// node_modules/@polkadot/networks/defaults/genesis.js
var knownGenesis2 = {
    acala: [
        "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
    ],
    ajuna: [
        "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
    ],
    "aleph-node": [
        "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
    ],
    astar: [
        "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
    ],
    basilisk: [
        "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
    ],
    bifrost: [
        "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
    ],
    "bifrost-kusama": [
        "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
    ],
    bittensor: [
        "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
    ],
    centrifuge: [
        "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
        "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
    ],
    composable: [
        "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
    ],
    darwinia: [
        "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
    ],
    "dock-mainnet": [
        "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
        "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
    ],
    edgeware: [
        "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
    ],
    equilibrium: [
        "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
    ],
    genshiro: [
        "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
    ],
    hydradx: [
        "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
        "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
        "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
        "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
        "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    ],
    "interlay-parachain": [
        "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
    ],
    karura: [
        "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
    ],
    khala: [
        "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
    ],
    kulupu: [
        "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
    ],
    kusama: [
        "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
        "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
        "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    ],
    nodle: [
        "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
    ],
    origintrail: [
        "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
    ],
    p3d: [
        "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
    ],
    parallel: [
        "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
    ],
    pendulum: [
        "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
    ],
    phala: [
        "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
    ],
    picasso: [
        "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
        "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
    ],
    polkadex: [
        "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
    ],
    polkadot: [
        "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
    ],
    polymesh: [
        "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
    ],
    rococo: [
        "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
        "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
        "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
        "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
        "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
        "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
        "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
        "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
        "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
        "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
        "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
        "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
    ],
    sora: [
        "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
    ],
    stafi: [
        "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
    ],
    statemine: [
        "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
    ],
    statemint: [
        "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
    ],
    subsocial: [
        "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
    ],
    ternoa: [
        "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
    ],
    unique: [
        "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
    ],
    vtb: [
        "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
        "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
    ],
    westend: [
        "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
    ],
    xxnetwork: [
        "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
    ]
};
// node_modules/@polkadot/networks/defaults/icons.js
var knownIcon2 = {
    centrifuge: "polkadot",
    kusama: "polkadot",
    polkadot: "polkadot",
    sora: "polkadot",
    statemine: "polkadot",
    statemint: "polkadot",
    westmint: "polkadot"
};
// node_modules/@polkadot/networks/defaults/ledger.js
var knownLedger2 = {
    acala: 787,
    ajuna: 354,
    "aleph-node": 643,
    astar: 810,
    bifrost: 788,
    "bifrost-kusama": 788,
    centrifuge: 747,
    composable: 354,
    darwinia: 354,
    "dock-mainnet": 594,
    edgeware: 523,
    equilibrium: 99999997,
    genshiro: 99999996,
    hydradx: 354,
    "interlay-parachain": 354,
    karura: 686,
    khala: 434,
    kusama: 434,
    nodle: 1003,
    origintrail: 354,
    parallel: 354,
    pendulum: 354,
    phala: 354,
    picasso: 434,
    polkadex: 799,
    polkadot: 354,
    polymesh: 595,
    sora: 617,
    stafi: 907,
    statemine: 434,
    statemint: 354,
    ternoa: 995,
    unique: 354,
    vtb: 694,
    xxnetwork: 1955
};
// node_modules/@polkadot/networks/defaults/testnets.js
var knownTestnet2 = {
    "": true,
    "cess-testnet": true,
    "dock-testnet": true,
    jupiter: true,
    "mathchain-testnet": true,
    p3dt: true,
    subspace_testnet: true,
    "zero-alphaville": true
};
// node_modules/@polkadot/networks/interfaces.js
var UNSORTED2 = [
    0,
    2,
    42
];
var TESTNETS2 = [
    "testnet"
];
function toExpanded2(o) {
    var network = o.network || "";
    var nameParts = network.replace(/_/g, "-").split("-");
    var n = o;
    n.slip44 = knownLedger2[network];
    n.hasLedgerSupport = !!n.slip44;
    n.genesisHash = knownGenesis2[network] || [];
    n.icon = knownIcon2[network] || "substrate";
    n.isTestnet = !!knownTestnet2[network] || TESTNETS2.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
    return n;
}
function filterSelectable2(param) {
    var genesisHash = param.genesisHash, prefix2 = param.prefix;
    return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable2(n) {
    return !n.isIgnored && !!n.network;
}
function sortNetworks2(a, b) {
    var isUnSortedA = UNSORTED2.includes(a.prefix);
    var isUnSortedB = UNSORTED2.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
var allNetworks2 = esm_default.map(toExpanded2);
var availableNetworks2 = allNetworks2.filter(filterAvailable2).sort(sortNetworks2);
var selectableNetworks2 = availableNetworks2.filter(filterSelectable2);
// node_modules/@polkadot/util-crypto/address/defaults.js
var defaults2 = {
    allowedDecodedLengths: [
        1,
        2,
        4,
        8,
        32,
        33
    ],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [
        3,
        4,
        6,
        10,
        35,
        36,
        37,
        38
    ],
    allowedPrefix: availableNetworks2.map(function(param) {
        var prefix2 = param.prefix;
        return prefix2;
    }),
    prefix: 42
};
// node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress2(encoded, ignoreChecksum) {
    var ss58Format = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1;
    if (!encoded) {
        throw new Error("Invalid empty address passed");
    }
    if (isU8a2(encoded) || isHex2(encoded)) {
        return u8aToU8a2(encoded);
    }
    try {
        var decoded = base58Decode2(encoded);
        if (!defaults2.allowedEncodedLengths.includes(decoded.length)) {
            throw new Error("Invalid decoded address length");
        }
        var _checkAddressChecksum2 = _sliced_to_array(checkAddressChecksum2(decoded), 4), isValid = _checkAddressChecksum2[0], endPos = _checkAddressChecksum2[1], ss58Length = _checkAddressChecksum2[2], ss58Decoded = _checkAddressChecksum2[3];
        if (!isValid && !ignoreChecksum) {
            throw new Error("Invalid decoded address checksum");
        } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
            throw new Error("Expected ss58Format ".concat(ss58Format, ", received ").concat(ss58Decoded));
        }
        return decoded.slice(ss58Length, endPos);
    } catch (error2) {
        throw new Error("Decoding ".concat(encoded, ": ").concat(error2.message));
    }
}
// node_modules/@polkadot/util-crypto/address/encode.js
function encodeAddress2(key) {
    var ss58Format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaults2.prefix;
    var u8a = decodeAddress2(key);
    if (ss58Format < 0 || ss58Format > 16383 || [
        46,
        47
    ].includes(ss58Format)) {
        throw new Error("Out of range ss58Format specified");
    } else if (!defaults2.allowedDecodedLengths.includes(u8a.length)) {
        throw new Error("Expected a valid key to convert, with length ".concat(defaults2.allowedDecodedLengths.join(", ")));
    }
    var input = u8aConcat2(ss58Format < 64 ? [
        ss58Format
    ] : [
        (ss58Format & 252) >> 2 | 64,
        ss58Format >> 8 | (ss58Format & 3) << 6
    ], u8a);
    return base58Encode2(u8aConcat2(input, sshash2(input).subarray(0, [
        32,
        33
    ].includes(u8a.length) ? 2 : 1)));
}
// src/utils/address.ts
function getSs58AddressByAsset(address, asset) {
    var metadata = ASSET_METADATA[asset];
    if (!metadata) {
        throw new Error("Asset ".concat(asset, " is unsupported."));
    }
    return encodeAddress2(address, metadata.network.config.ss58Prefix);
}
// src/utils/substrate.ts
var connections = {};
function createConnection(rpc18) {
    return _createConnection.apply(this, arguments);
}
function _createConnection() {
    _createConnection = _async_to_generator(function(rpc18) {
        var provider;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!!connections[rpc18]) return [
                        3,
                        2
                    ];
                    provider = new WsProvider(rpc18);
                    return [
                        4,
                        ApiPromise.create({
                            provider: provider
                        })
                    ];
                case 1:
                    connections[rpc18] = _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2,
                        connections[rpc18]
                    ];
            }
        });
    });
    return _createConnection.apply(this, arguments);
}
function createTransferTx(rpc18, account3, to, amount, asset) {
    return _createTransferTx.apply(this, arguments);
}
function _createTransferTx() {
    _createTransferTx = _async_to_generator(function(rpc18, account3, to, amount, asset) {
        var connection, signed;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        createConnection(rpc18)
                    ];
                case 1:
                    connection = _state.sent();
                    connection.setSigner(account3.signer);
                    return [
                        4,
                        connection.tx.balances.transfer(getSs58AddressByAsset(to, asset), amount).signAsync(getSs58AddressByAsset(account3.address, asset))
                    ];
                case 2:
                    signed = _state.sent();
                    return [
                        2,
                        signed.toJSON()
                    ];
            }
        });
    });
    return _createTransferTx.apply(this, arguments);
}
// src/components/Checkout/PaymentSummary.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
function pay(payment, account3, email) {
    return _pay.apply(this, arguments);
}
function _pay() {
    _pay = _async_to_generator(function(payment, account3, email) {
        var payee, amount, asset, productName, assetMetadata, tx, response;
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    payee = payment.payee, amount = payment.amount, asset = payment.asset, productName = payment.productName;
                    assetMetadata = ASSET_METADATA[asset];
                    return [
                        4,
                        createTransferTx(assetMetadata.network.config.rpc, account3, payee, amount, asset)
                    ];
                case 1:
                    tx = _state.sent();
                    return [
                        4,
                        fetch("".concat(window.location.href, "/pay"), {
                            body: JSON.stringify({
                                from: getSs58AddressByAsset(account3.address, asset),
                                to: getSs58AddressByAsset(payee, asset),
                                description: "".concat(email, " + ").concat(productName),
                                amount: amount,
                                asset: asset,
                                tx: tx,
                                email: email
                            }),
                            method: "post",
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                    ];
                case 2:
                    response = _state.sent();
                    if (response.status !== 200 && response.status !== 201) {
                        throw new Error(response.statusText);
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _pay.apply(this, arguments);
}
function PaymentSummary(param) {
    var _param_previewMode = param.previewMode, previewMode = _param_previewMode === void 0 ? true : _param_previewMode, payment = param.payment, onPaymentSuccess = param.onPaymentSuccess, onPaymentFailed = param.onPaymentFailed;
    var _ref = (0, import_react_i18next2.useTranslation)(), t2 = _ref.t;
    var _ref1 = _sliced_to_array((0, import_react7.useState)(false), 2), paying = _ref1[0], setPaying = _ref1[1];
    var _ref2 = _sliced_to_array((0, import_react7.useState)(null), 2), account3 = _ref2[0], setAccount = _ref2[1];
    var _ref3 = _sliced_to_array((0, import_react7.useState)(""), 2), email = _ref3[0], setEmail = _ref3[1];
    var _ref4 = _sliced_to_array((0, import_react7.useState)(""), 2), emailError = _ref4[0], setEmailError = _ref4[1];
    (0, import_react7.useEffect)(function() {
        var assetMetadata = ASSET_METADATA[payment.asset];
        createConnection(assetMetadata.network.config.rpc);
    }, []);
    var handleAccountConnected = function() {
        var _ref = _async_to_generator(function(account4) {
            return __generator(this, function(_state) {
                setAccount(account4);
                return [
                    2
                ];
            });
        });
        return function handleAccountConnected(account4) {
            return _ref.apply(this, arguments);
        };
    }();
    var validateEmail = function() {
        if (!email) {
            setEmailError("Email is required.");
            return false;
        }
        if (!/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(.\w{2,3})+$/.test(email)) {
            setEmailError("Invalid email.");
            return false;
        }
        return true;
    };
    var handlePay = function() {
        var _ref = _async_to_generator(function() {
            var err;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!previewMode) return [
                            3,
                            1
                        ];
                        setPaying(true);
                        setTimeout(function() {
                            setPaying(false);
                        }, 1e3);
                        return [
                            3,
                            6
                        ];
                    case 1:
                        if (!validateEmail()) return [
                            3,
                            6
                        ];
                        setPaying(true);
                        _state.label = 2;
                    case 2:
                        _state.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4,
                            pay(payment, account3, email)
                        ];
                    case 3:
                        _state.sent();
                        onPaymentSuccess();
                        return [
                            3,
                            5
                        ];
                    case 4:
                        err = _state.sent();
                        onPaymentFailed(err);
                        return [
                            3,
                            5
                        ];
                    case 5:
                        setPaying(false);
                        _state.label = 6;
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
        return function handlePay() {
            return _ref.apply(this, arguments);
        };
    }();
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", {
        style: {
            width: 380,
            maxWidth: 380,
            marginLeft: "auto"
        },
        children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_antd5.Typography.Title, {
                level: 4,
                style: {
                    marginBottom: 12
                },
                children: t2("checkout.contactInformation")
            }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_antd5.Form, {
                layout: "vertical",
                requiredMark: false,
                children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_antd5.Form.Item, {
                    label: "Email",
                    validateStatus: emailError ? "error" : void 0,
                    children: [
                        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_antd5.Input, {
                            value: email,
                            onInput: function(e) {
                                setEmail(e.target.value);
                            },
                            placeholder: "john.doe@example.com"
                        }),
                        emailError && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_antd5.Typography.Text, {
                            type: "danger",
                            children: emailError
                        })
                    ]
                })
            }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", {
                children: [
                    /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_antd5.Typography.Title, {
                        level: 4,
                        children: [
                            t2("checkout.paymentMethod"),
                            " "
                        ]
                    }),
                    previewMode && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(AccountInfo, {
                        variant: "select",
                        account: {
                            name: "Test Account",
                            address: "5ERjkQVj8M7v5UVZQ8qTbZ2qb1o5TgNXq9tXt2BsWF9jBpDu"
                        }
                    }),
                    !previewMode && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ExtensionsProvider, {
                        children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(AccountConnection, {
                            onAccountConnected: handleAccountConnected
                        })
                    }),
                    (previewMode || !!account3) && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_antd5.Button, {
                        style: {
                            marginTop: 32
                        },
                        type: "primary",
                        size: "large",
                        block: true,
                        loading: paying,
                        onClick: handlePay,
                        children: t2("checkout.pay")
                    })
                ]
            })
        ]
    });
}
// src/components/Checkout/Brand.tsx
var import_react8 = require("react");
var import_styled_components3 = __toESM(require("styled-components"));
var import_antd6 = require("antd");
var import_jsx_runtime8 = require("react/jsx-runtime");
var Title = import_antd6.Typography.Title;
var LogoBox = import_styled_components3.default.div(_templateObject5());
var LogoWrapper = import_styled_components3.default.div(_templateObject6());
var CheckoutBrand = function(param) {
    var branding = param.branding, loading = param.loading;
    var name = branding.name, logo = branding.logo;
    var HasNoBrand = !logo && !name;
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(LogoBox, {
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(LogoWrapper, {
            children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_antd6.Skeleton, {
                className: "brand-skeleton",
                paragraph: false,
                loading: loading,
                active: true,
                children: HasNoBrand ? "Brand" : /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_react8.Fragment, {
                    children: [
                        logo && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("img", {
                            style: {
                                height: 24
                            },
                            src: logo,
                            alt: "brand logo"
                        }),
                        name && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Title, {
                            style: {
                                margin: 0
                            },
                            level: 5,
                            children: name
                        })
                    ]
                })
            })
        })
    });
};
var Brand_default = CheckoutBrand;
// src/components/Checkout/AfterPaymentPreviewer.tsx
var import_antd7 = require("antd");
var import_react_i18next3 = require("react-i18next");
var import_jsx_runtime9 = require("react/jsx-runtime");
var AfterPaymentPreviewer = function(param) {
    var afterPayment = param.afterPayment;
    var _afterPayment_config;
    var _ref = (0, import_react_i18next3.useTranslation)(), t2 = _ref.t;
    var message2 = (_afterPayment_config = afterPayment.config) === null || _afterPayment_config === void 0 ? void 0 : _afterPayment_config.message;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", {
        style: {
            width: 380,
            maxWidth: 380,
            marginLeft: "auto"
        },
        children: [
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_antd7.Result, {
                status: "success",
                title: message2 || t2("checkout.thankForYourPayment"),
                subTitle: !message2 && t2("checkout.orderWillBeSent")
            })
        ]
    });
};
var AfterPaymentPreviewer_default = AfterPaymentPreviewer;
// src/components/Checkout/index.tsx
var import_react_i18next5 = require("react-i18next");
// ../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance2, Constructor) {
    if (!_instanceof(instance2, Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
// ../../node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties1(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties1(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
// ../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
}
// ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
    };
    return _setPrototypeOf(o, p);
}
// ../../node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
// ../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call2) {
    if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
        return call2;
    } else if (call2 !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
}
// ../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
}
// ../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
// ../../node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}
// ../../node_modules/i18next/dist/esm/i18next.js
function ownKeys$6(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$6(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var consoleLogger = {
    type: "logger",
    log: function log(args) {
        this.output("log", args);
    },
    warn: function warn2(args) {
        this.output("warn", args);
    },
    error: function error(args) {
        this.output("error", args);
    },
    output: function output3(type, args) {
        if (console && console[type]) console[type].apply(console, args);
    }
};
var Logger = function() {
    function Logger2(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        _classCallCheck(this, Logger2);
        this.init(concreteLogger, options);
    }
    _createClass(Logger2, [
        {
            key: "init",
            value: function init3(concreteLogger) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                this.prefix = options.prefix || "i18next:";
                this.logger = concreteLogger || consoleLogger;
                this.options = options;
                this.debug = options.debug;
            }
        },
        {
            key: "setDebug",
            value: function setDebug(bool4) {
                this.debug = bool4;
            }
        },
        {
            key: "log",
            value: function log2() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                return this.forward(args, "log", "", true);
            }
        },
        {
            key: "warn",
            value: function warn3() {
                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
                    args[_key2] = arguments[_key2];
                }
                return this.forward(args, "warn", "", true);
            }
        },
        {
            key: "error",
            value: function error2() {
                for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){
                    args[_key3] = arguments[_key3];
                }
                return this.forward(args, "error", "");
            }
        },
        {
            key: "deprecate",
            value: function deprecate() {
                for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){
                    args[_key4] = arguments[_key4];
                }
                return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
            }
        },
        {
            key: "forward",
            value: function forward(args, lvl, prefix2, debugOnly) {
                if (debugOnly && !this.debug) return null;
                if (typeof args[0] === "string") args[0] = "".concat(prefix2).concat(this.prefix, " ").concat(args[0]);
                return this.logger[lvl](args);
            }
        },
        {
            key: "create",
            value: function create(moduleName) {
                return new Logger2(this.logger, _objectSpread$6(_objectSpread$6({}, {
                    prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
                }), this.options));
            }
        },
        {
            key: "clone",
            value: function clone(options) {
                options = options || this.options;
                options.prefix = options.prefix || this.prefix;
                return new Logger2(this.logger, options);
            }
        }
    ]);
    return Logger2;
}();
var baseLogger = new Logger();
var EventEmitter2 = function() {
    function EventEmitter3() {
        _classCallCheck(this, EventEmitter3);
        this.observers = {};
    }
    _createClass(EventEmitter3, [
        {
            key: "on",
            value: function on(events2, listener) {
                var _this = this;
                events2.split(" ").forEach(function(event) {
                    _this.observers[event] = _this.observers[event] || [];
                    _this.observers[event].push(listener);
                });
                return this;
            }
        },
        {
            key: "off",
            value: function off(event, listener) {
                if (!this.observers[event]) return;
                if (!listener) {
                    delete this.observers[event];
                    return;
                }
                this.observers[event] = this.observers[event].filter(function(l13) {
                    return l13 !== listener;
                });
            }
        },
        {
            key: "emit",
            value: function emit(event) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                if (this.observers[event]) {
                    var cloned = [].concat(this.observers[event]);
                    cloned.forEach(function(observer) {
                        observer.apply(void 0, args);
                    });
                }
                if (this.observers["*"]) {
                    var _cloned = [].concat(this.observers["*"]);
                    _cloned.forEach(function(observer) {
                        observer.apply(observer, [
                            event
                        ].concat(args));
                    });
                }
            }
        }
    ]);
    return EventEmitter3;
}();
function defer() {
    var res;
    var rej;
    var promise = new Promise(function(resolve, reject) {
        res = resolve;
        rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
}
function makeString(object) {
    if (object == null) return "";
    return "" + object;
}
function copy(a, s, t2) {
    a.forEach(function(m) {
        if (s[m]) t2[m] = s[m];
    });
}
function getLastOfPath(object, path, Empty) {
    var cleanKey = function cleanKey(key2) {
        return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
    };
    var canNotTraverseDeeper = function canNotTraverseDeeper() {
        return !object || typeof object === "string";
    };
    var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
    while(stack.length > 1){
        if (canNotTraverseDeeper()) return {};
        var key = cleanKey(stack.shift());
        if (!object[key] && Empty) object[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object, key)) {
            object = object[key];
        } else {
            object = {};
        }
    }
    if (canNotTraverseDeeper()) return {};
    return {
        obj: object,
        k: cleanKey(stack.shift())
    };
}
function setPath(object, path, newValue) {
    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
    obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
    obj[k] = obj[k] || [];
    if (concat) obj[k] = obj[k].concat(newValue);
    if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
    if (!obj) return void 0;
    return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
    var value1 = getPath(data, key);
    if (value1 !== void 0) {
        return value1;
    }
    return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
    for(var prop in source){
        if (prop !== "__proto__" && prop !== "constructor") {
            if (prop in target) {
                if (typeof target[prop] === "string" || _instanceof(target[prop], String) || typeof source[prop] === "string" || _instanceof(source[prop], String)) {
                    if (overwrite) target[prop] = source[prop];
                } else {
                    deepExtend(target[prop], source[prop], overwrite);
                }
            } else {
                target[prop] = source[prop];
            }
        }
    }
    return target;
}
function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;",
    "/": "&#x2F;"
};
function escape(data) {
    if (typeof data === "string") {
        return data.replace(/[&<>"'\/]/g, function(s) {
            return _entityMap[s];
        });
    }
    return data;
}
var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
var chars = [
    " ",
    ",",
    "?",
    "!",
    ";"
];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
    nsSeparator = nsSeparator || "";
    keySeparator = keySeparator || "";
    var possibleChars = chars.filter(function(c) {
        return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
    });
    if (possibleChars.length === 0) return true;
    var r = new RegExp("(".concat(possibleChars.map(function(c) {
        return c === "?" ? "\\?" : c;
    }).join("|"), ")"));
    var matched = !r.test(key);
    if (!matched) {
        var ki = key.indexOf(keySeparator);
        if (ki > 0 && !r.test(key.substring(0, ki))) {
            matched = true;
        }
    }
    return matched;
}
function deepFind(obj, path) {
    var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
    if (!obj) return void 0;
    if (obj[path]) return obj[path];
    var paths = path.split(keySeparator);
    var current = obj;
    for(var i = 0; i < paths.length; ++i){
        if (!current) return void 0;
        if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
            return void 0;
        }
        if (current[paths[i]] === void 0) {
            var j = 2;
            var p = paths.slice(i, i + j).join(keySeparator);
            var mix2 = current[p];
            while(mix2 === void 0 && paths.length > i + j){
                j++;
                p = paths.slice(i, i + j).join(keySeparator);
                mix2 = current[p];
            }
            if (mix2 === void 0) return void 0;
            if (mix2 === null) return null;
            if (path.endsWith(p)) {
                if (typeof mix2 === "string") return mix2;
                if (p && typeof mix2[p] === "string") return mix2[p];
            }
            var joinedPath = paths.slice(i + j).join(keySeparator);
            if (joinedPath) return deepFind(mix2, joinedPath, keySeparator);
            return void 0;
        }
        current = current[paths[i]];
    }
    return current;
}
function ownKeys$5(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$5(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createSuper$3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _isNativeReflectConstruct$3() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
var ResourceStore = function(_EventEmitter) {
    _inherits1(ResourceStore2, _EventEmitter);
    var _super = _createSuper$3(ResourceStore2);
    function ResourceStore2(data) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
            ns: [
                "translation"
            ],
            defaultNS: "translation"
        };
        _classCallCheck(this, ResourceStore2);
        _this = _super.call(this);
        if (isIE10) {
            EventEmitter2.call(_assertThisInitialized(_this));
        }
        _this.data = data || {};
        _this.options = options;
        if (_this.options.keySeparator === void 0) {
            _this.options.keySeparator = ".";
        }
        if (_this.options.ignoreJSONStructure === void 0) {
            _this.options.ignoreJSONStructure = true;
        }
        return _this;
    }
    _createClass(ResourceStore2, [
        {
            key: "addNamespaces",
            value: function addNamespaces(ns) {
                if (this.options.ns.indexOf(ns) < 0) {
                    this.options.ns.push(ns);
                }
            }
        },
        {
            key: "removeNamespaces",
            value: function removeNamespaces(ns) {
                var index = this.options.ns.indexOf(ns);
                if (index > -1) {
                    this.options.ns.splice(index, 1);
                }
            }
        },
        {
            key: "getResource",
            value: function getResource(lng, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                var ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
                var path = [
                    lng,
                    ns
                ];
                if (key && typeof key !== "string") path = path.concat(key);
                if (key && typeof key === "string") path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf(".") > -1) {
                    path = lng.split(".");
                }
                var result = getPath(this.data, path);
                if (result || !ignoreJSONStructure || typeof key !== "string") return result;
                return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
            }
        },
        {
            key: "addResource",
            value: function addResource(lng, ns, key, value1) {
                var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
                    silent: false
                };
                var keySeparator = this.options.keySeparator;
                if (keySeparator === void 0) keySeparator = ".";
                var path = [
                    lng,
                    ns
                ];
                if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf(".") > -1) {
                    path = lng.split(".");
                    value1 = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                setPath(this.data, path, value1);
                if (!options.silent) this.emit("added", lng, ns, key, value1);
            }
        },
        {
            key: "addResources",
            value: function addResources(lng, ns, resources) {
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
                    silent: false
                };
                for(var m in resources){
                    if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]") this.addResource(lng, ns, m, resources[m], {
                        silent: true
                    });
                }
                if (!options.silent) this.emit("added", lng, ns, resources);
            }
        },
        {
            key: "addResourceBundle",
            value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
                var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
                    silent: false
                };
                var path = [
                    lng,
                    ns
                ];
                if (lng.indexOf(".") > -1) {
                    path = lng.split(".");
                    deep = resources;
                    resources = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                var pack = getPath(this.data, path) || {};
                if (deep) {
                    deepExtend(pack, resources, overwrite);
                } else {
                    pack = _objectSpread$5(_objectSpread$5({}, pack), resources);
                }
                setPath(this.data, path, pack);
                if (!options.silent) this.emit("added", lng, ns, resources);
            }
        },
        {
            key: "removeResourceBundle",
            value: function removeResourceBundle(lng, ns) {
                if (this.hasResourceBundle(lng, ns)) {
                    delete this.data[lng][ns];
                }
                this.removeNamespaces(ns);
                this.emit("removed", lng, ns);
            }
        },
        {
            key: "hasResourceBundle",
            value: function hasResourceBundle(lng, ns) {
                return this.getResource(lng, ns) !== void 0;
            }
        },
        {
            key: "getResourceBundle",
            value: function getResourceBundle(lng, ns) {
                if (!ns) ns = this.options.defaultNS;
                if (this.options.compatibilityAPI === "v1") return _objectSpread$5(_objectSpread$5({}, {}), this.getResource(lng, ns));
                return this.getResource(lng, ns);
            }
        },
        {
            key: "getDataByLanguage",
            value: function getDataByLanguage(lng) {
                return this.data[lng];
            }
        },
        {
            key: "hasLanguageSomeTranslations",
            value: function hasLanguageSomeTranslations(lng) {
                var data = this.getDataByLanguage(lng);
                var n = data && Object.keys(data) || [];
                return !!n.find(function(v) {
                    return data[v] && Object.keys(data[v]).length > 0;
                });
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.data;
            }
        }
    ]);
    return ResourceStore2;
}(EventEmitter2);
var postProcessor = {
    processors: {},
    addPostProcessor: function addPostProcessor(module2) {
        this.processors[module2.name] = module2;
    },
    handle: function handle(processors, value1, key, options, translator) {
        var _this = this;
        processors.forEach(function(processor) {
            if (_this.processors[processor]) value1 = _this.processors[processor].process(value1, key, options, translator);
        });
        return value1;
    }
};
function ownKeys$4(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$4(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createSuper$2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _isNativeReflectConstruct$2() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
    _inherits1(Translator2, _EventEmitter);
    var _super = _createSuper$2(Translator2);
    function Translator2(services) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        _classCallCheck(this, Translator2);
        _this = _super.call(this);
        if (isIE10) {
            EventEmitter2.call(_assertThisInitialized(_this));
        }
        copy([
            "resourceStore",
            "languageUtils",
            "pluralResolver",
            "interpolator",
            "backendConnector",
            "i18nFormat",
            "utils"
        ], services, _assertThisInitialized(_this));
        _this.options = options;
        if (_this.options.keySeparator === void 0) {
            _this.options.keySeparator = ".";
        }
        _this.logger = baseLogger.create("translator");
        return _this;
    }
    _createClass(Translator2, [
        {
            key: "changeLanguage",
            value: function changeLanguage2(lng) {
                if (lng) this.language = lng;
            }
        },
        {
            key: "exists",
            value: function exists4(key) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                    interpolation: {}
                };
                if (key === void 0 || key === null) {
                    return false;
                }
                var resolved = this.resolve(key, options);
                return resolved && resolved.res !== void 0;
            }
        },
        {
            key: "extractFromKey",
            value: function extractFromKey(key, options) {
                var nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
                if (nsSeparator === void 0) nsSeparator = ":";
                var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                var namespaces = options.ns || this.options.defaultNS || [];
                var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
                var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
                if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
                    var m = key.match(this.interpolator.nestingRegexp);
                    if (m && m.length > 0) {
                        return {
                            key: key,
                            namespaces: namespaces
                        };
                    }
                    var parts = key.split(nsSeparator);
                    if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
                    key = parts.join(keySeparator);
                }
                if (typeof namespaces === "string") namespaces = [
                    namespaces
                ];
                return {
                    key: key,
                    namespaces: namespaces
                };
            }
        },
        {
            key: "translate",
            value: function translate(keys2, options, lastKey) {
                var _this2 = this;
                if (_typeof(options) !== "object" && this.options.overloadTranslationOptionHandler) {
                    options = this.options.overloadTranslationOptionHandler(arguments);
                }
                if (!options) options = {};
                if (keys2 === void 0 || keys2 === null) return "";
                if (!Array.isArray(keys2)) keys2 = [
                    String(keys2)
                ];
                var returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
                var keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
                var _this$extractFromKey = this.extractFromKey(keys2[keys2.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
                var namespace = namespaces[namespaces.length - 1];
                var lng = options.lng || this.language;
                var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                if (lng && lng.toLowerCase() === "cimode") {
                    if (appendNamespaceToCIMode) {
                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                        if (returnDetails) {
                            return {
                                res: "".concat(namespace).concat(nsSeparator).concat(key),
                                usedKey: key,
                                exactUsedKey: key,
                                usedLng: lng,
                                usedNS: namespace
                            };
                        }
                        return "".concat(namespace).concat(nsSeparator).concat(key);
                    }
                    if (returnDetails) {
                        return {
                            res: key,
                            usedKey: key,
                            exactUsedKey: key,
                            usedLng: lng,
                            usedNS: namespace
                        };
                    }
                    return key;
                }
                var resolved = this.resolve(keys2, options);
                var res = resolved && resolved.res;
                var resUsedKey = resolved && resolved.usedKey || key;
                var resExactUsedKey = resolved && resolved.exactUsedKey || key;
                var resType = Object.prototype.toString.apply(res);
                var noObject = [
                    "[object Number]",
                    "[object Function]",
                    "[object RegExp]"
                ];
                var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
                var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
                var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
                if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
                    if (!options.returnObjects && !this.options.returnObjects) {
                        if (!this.options.returnedObjectHandler) {
                            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
                        }
                        var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$4(_objectSpread$4({}, options), {}, {
                            ns: namespaces
                        })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
                        if (returnDetails) {
                            resolved.res = r;
                            return resolved;
                        }
                        return r;
                    }
                    if (keySeparator) {
                        var resTypeIsArray = resType === "[object Array]";
                        var copy2 = resTypeIsArray ? [] : {};
                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                        for(var m in res){
                            if (Object.prototype.hasOwnProperty.call(res, m)) {
                                var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                                copy2[m] = this.translate(deepKey, _objectSpread$4(_objectSpread$4({}, options), {
                                    joinArrays: false,
                                    ns: namespaces
                                }));
                                if (copy2[m] === deepKey) copy2[m] = res[m];
                            }
                        }
                        res = copy2;
                    }
                } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
                    res = res.join(joinArrays);
                    if (res) res = this.extendTranslation(res, keys2, options, lastKey);
                } else {
                    var usedDefault = false;
                    var usedKey = false;
                    var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
                    var hasDefaultValue = Translator2.hasDefaultValue(options);
                    var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
                    var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
                    if (!this.isValidLookup(res) && hasDefaultValue) {
                        usedDefault = true;
                        res = defaultValue;
                    }
                    if (!this.isValidLookup(res)) {
                        usedKey = true;
                        res = key;
                    }
                    var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
                    var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
                    var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
                    if (usedKey || usedDefault || updateMissing) {
                        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
                        if (keySeparator) {
                            var fk = this.resolve(key, _objectSpread$4(_objectSpread$4({}, options), {}, {
                                keySeparator: false
                            }));
                            if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
                        }
                        var lngs = [];
                        var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
                            for(var i = 0; i < fallbackLngs.length; i++){
                                lngs.push(fallbackLngs[i]);
                            }
                        } else if (this.options.saveMissingTo === "all") {
                            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                        } else {
                            lngs.push(options.lng || this.language);
                        }
                        var send = function send2(l13, k, specificDefaultValue) {
                            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
                            if (_this2.options.missingKeyHandler) {
                                _this2.options.missingKeyHandler(l13, namespace, k, defaultForMissing, updateMissing, options);
                            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                                _this2.backendConnector.saveMissing(l13, namespace, k, defaultForMissing, updateMissing, options);
                            }
                            _this2.emit("missingKey", l13, namespace, k, res);
                        };
                        if (this.options.saveMissing) {
                            if (this.options.saveMissingPlurals && needsPluralHandling) {
                                lngs.forEach(function(language) {
                                    _this2.pluralResolver.getSuffixes(language, options).forEach(function(suffix) {
                                        send([
                                            language
                                        ], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                                    });
                                });
                            } else {
                                send(lngs, key, defaultValue);
                            }
                        }
                    }
                    res = this.extendTranslation(res, keys2, options, resolved, lastKey);
                    if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
                    if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
                        if (this.options.compatibilityAPI !== "v1") {
                            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
                        } else {
                            res = this.options.parseMissingKeyHandler(res);
                        }
                    }
                }
                if (returnDetails) {
                    resolved.res = res;
                    return resolved;
                }
                return res;
            }
        },
        {
            key: "extendTranslation",
            value: function extendTranslation(res, key, options, resolved, lastKey) {
                var _this3 = this;
                if (this.i18nFormat && this.i18nFormat.parse) {
                    res = this.i18nFormat.parse(res, _objectSpread$4(_objectSpread$4({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                        resolved: resolved
                    });
                } else if (!options.skipInterpolation) {
                    if (options.interpolation) this.interpolator.init(_objectSpread$4(_objectSpread$4({}, options), {
                        interpolation: _objectSpread$4(_objectSpread$4({}, this.options.interpolation), options.interpolation)
                    }));
                    var skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
                    var nestBef;
                    if (skipOnVariables) {
                        var nb = res.match(this.interpolator.nestingRegexp);
                        nestBef = nb && nb.length;
                    }
                    var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
                    if (this.options.interpolation.defaultVariables) data = _objectSpread$4(_objectSpread$4({}, this.options.interpolation.defaultVariables), data);
                    res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                    if (skipOnVariables) {
                        var na = res.match(this.interpolator.nestingRegexp);
                        var nestAft = na && na.length;
                        if (nestBef < nestAft) options.nest = false;
                    }
                    if (!options.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options.lng = resolved.usedLng;
                    if (options.nest !== false) res = this.interpolator.nest(res, function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        if (lastKey && lastKey[0] === args[0] && !options.context) {
                            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                            return null;
                        }
                        return _this3.translate.apply(_this3, args.concat([
                            key
                        ]));
                    }, options);
                    if (options.interpolation) this.interpolator.reset();
                }
                var postProcess = options.postProcess || this.options.postProcess;
                var postProcessorNames = typeof postProcess === "string" ? [
                    postProcess
                ] : postProcess;
                if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                    res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$4({
                        i18nResolved: resolved
                    }, options) : options, this);
                }
                return res;
            }
        },
        {
            key: "resolve",
            value: function resolve(keys2) {
                var _this4 = this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var found;
                var usedKey;
                var exactUsedKey;
                var usedLng;
                var usedNS;
                if (typeof keys2 === "string") keys2 = [
                    keys2
                ];
                keys2.forEach(function(k) {
                    if (_this4.isValidLookup(found)) return;
                    var extracted = _this4.extractFromKey(k, options);
                    var key = extracted.key;
                    usedKey = key;
                    var namespaces = extracted.namespaces;
                    if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
                    var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
                    var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
                    var needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
                    var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
                    namespaces.forEach(function(ns) {
                        if (_this4.isValidLookup(found)) return;
                        usedNS = ns;
                        if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
                            _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes.join(", "), '" won\'t get resolved as namespace "').concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                        }
                        codes.forEach(function(code) {
                            if (_this4.isValidLookup(found)) return;
                            usedLng = code;
                            var finalKeys = [
                                key
                            ];
                            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                                _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                            } else {
                                var pluralSuffix;
                                if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                                var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
                                if (needsPluralHandling) {
                                    finalKeys.push(key + pluralSuffix);
                                    if (needsZeroSuffixLookup) {
                                        finalKeys.push(key + zeroSuffix);
                                    }
                                }
                                if (needsContextHandling) {
                                    var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                                    finalKeys.push(contextKey);
                                    if (needsPluralHandling) {
                                        finalKeys.push(contextKey + pluralSuffix);
                                        if (needsZeroSuffixLookup) {
                                            finalKeys.push(contextKey + zeroSuffix);
                                        }
                                    }
                                }
                            }
                            var possibleKey;
                            while(possibleKey = finalKeys.pop()){
                                if (!_this4.isValidLookup(found)) {
                                    exactUsedKey = possibleKey;
                                    found = _this4.getResource(code, ns, possibleKey, options);
                                }
                            }
                        });
                    });
                });
                return {
                    res: found,
                    usedKey: usedKey,
                    exactUsedKey: exactUsedKey,
                    usedLng: usedLng,
                    usedNS: usedNS
                };
            }
        },
        {
            key: "isValidLookup",
            value: function isValidLookup(res) {
                return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
            }
        },
        {
            key: "getResource",
            value: function getResource(code, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
                return this.resourceStore.getResource(code, ns, key, options);
            }
        }
    ], [
        {
            key: "hasDefaultValue",
            value: function hasDefaultValue(options) {
                var prefix2 = "defaultValue";
                for(var option in options){
                    if (Object.prototype.hasOwnProperty.call(options, option) && prefix2 === option.substring(0, prefix2.length) && void 0 !== options[option]) {
                        return true;
                    }
                }
                return false;
            }
        }
    ]);
    return Translator2;
}(EventEmitter2);
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
    function LanguageUtil2(options) {
        _classCallCheck(this, LanguageUtil2);
        this.options = options;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create("languageUtils");
    }
    _createClass(LanguageUtil2, [
        {
            key: "getScriptPartFromCode",
            value: function getScriptPartFromCode(code) {
                if (!code || code.indexOf("-") < 0) return null;
                var p = code.split("-");
                if (p.length === 2) return null;
                p.pop();
                if (p[p.length - 1].toLowerCase() === "x") return null;
                return this.formatLanguageCode(p.join("-"));
            }
        },
        {
            key: "getLanguagePartFromCode",
            value: function getLanguagePartFromCode(code) {
                if (!code || code.indexOf("-") < 0) return code;
                var p = code.split("-");
                return this.formatLanguageCode(p[0]);
            }
        },
        {
            key: "formatLanguageCode",
            value: function formatLanguageCode(code) {
                if (typeof code === "string" && code.indexOf("-") > -1) {
                    var specialCases = [
                        "hans",
                        "hant",
                        "latn",
                        "cyrl",
                        "cans",
                        "mong",
                        "arab"
                    ];
                    var p = code.split("-");
                    if (this.options.lowerCaseLng) {
                        p = p.map(function(part) {
                            return part.toLowerCase();
                        });
                    } else if (p.length === 2) {
                        p[0] = p[0].toLowerCase();
                        p[1] = p[1].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                    } else if (p.length === 3) {
                        p[0] = p[0].toLowerCase();
                        if (p[1].length === 2) p[1] = p[1].toUpperCase();
                        if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
                    }
                    return p.join("-");
                }
                return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
            }
        },
        {
            key: "isSupportedCode",
            value: function isSupportedCode(code) {
                if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
                    code = this.getLanguagePartFromCode(code);
                }
                return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
            }
        },
        {
            key: "getBestMatchFromCodes",
            value: function getBestMatchFromCodes(codes) {
                var _this = this;
                if (!codes) return null;
                var found;
                codes.forEach(function(code) {
                    if (found) return;
                    var cleanedLng = _this.formatLanguageCode(code);
                    if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
                });
                if (!found && this.options.supportedLngs) {
                    codes.forEach(function(code) {
                        if (found) return;
                        var lngOnly = _this.getLanguagePartFromCode(code);
                        if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
                        found = _this.options.supportedLngs.find(function(supportedLng) {
                            if (supportedLng === lngOnly) return supportedLng;
                            if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
                            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
                        });
                    });
                }
                if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
                return found;
            }
        },
        {
            key: "getFallbackCodes",
            value: function getFallbackCodes(fallbacks, code) {
                if (!fallbacks) return [];
                if (typeof fallbacks === "function") fallbacks = fallbacks(code);
                if (typeof fallbacks === "string") fallbacks = [
                    fallbacks
                ];
                if (Object.prototype.toString.apply(fallbacks) === "[object Array]") return fallbacks;
                if (!code) return fallbacks["default"] || [];
                var found = fallbacks[code];
                if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
                if (!found) found = fallbacks[this.formatLanguageCode(code)];
                if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
                if (!found) found = fallbacks["default"];
                return found || [];
            }
        },
        {
            key: "toResolveHierarchy",
            value: function toResolveHierarchy(code, fallbackCode) {
                var _this2 = this;
                var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
                var codes = [];
                var addCode = function addCode2(c) {
                    if (!c) return;
                    if (_this2.isSupportedCode(c)) {
                        codes.push(c);
                    } else {
                        _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
                    }
                };
                if (typeof code === "string" && code.indexOf("-") > -1) {
                    if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
                    if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
                    if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
                } else if (typeof code === "string") {
                    addCode(this.formatLanguageCode(code));
                }
                fallbackCodes.forEach(function(fc) {
                    if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
                });
                return codes;
            }
        }
    ]);
    return LanguageUtil2;
}();
var sets = [
    {
        lngs: [
            "ach",
            "ak",
            "am",
            "arn",
            "br",
            "fil",
            "gun",
            "ln",
            "mfe",
            "mg",
            "mi",
            "oc",
            "pt",
            "pt-BR",
            "tg",
            "tl",
            "ti",
            "tr",
            "uz",
            "wa"
        ],
        nr: [
            1,
            2
        ],
        fc: 1
    },
    {
        lngs: [
            "af",
            "an",
            "ast",
            "az",
            "bg",
            "bn",
            "ca",
            "da",
            "de",
            "dev",
            "el",
            "en",
            "eo",
            "es",
            "et",
            "eu",
            "fi",
            "fo",
            "fur",
            "fy",
            "gl",
            "gu",
            "ha",
            "hi",
            "hu",
            "hy",
            "ia",
            "it",
            "kk",
            "kn",
            "ku",
            "lb",
            "mai",
            "ml",
            "mn",
            "mr",
            "nah",
            "nap",
            "nb",
            "ne",
            "nl",
            "nn",
            "no",
            "nso",
            "pa",
            "pap",
            "pms",
            "ps",
            "pt-PT",
            "rm",
            "sco",
            "se",
            "si",
            "so",
            "son",
            "sq",
            "sv",
            "sw",
            "ta",
            "te",
            "tk",
            "ur",
            "yo"
        ],
        nr: [
            1,
            2
        ],
        fc: 2
    },
    {
        lngs: [
            "ay",
            "bo",
            "cgg",
            "fa",
            "ht",
            "id",
            "ja",
            "jbo",
            "ka",
            "km",
            "ko",
            "ky",
            "lo",
            "ms",
            "sah",
            "su",
            "th",
            "tt",
            "ug",
            "vi",
            "wo",
            "zh"
        ],
        nr: [
            1
        ],
        fc: 3
    },
    {
        lngs: [
            "be",
            "bs",
            "cnr",
            "dz",
            "hr",
            "ru",
            "sr",
            "uk"
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 4
    },
    {
        lngs: [
            "ar"
        ],
        nr: [
            0,
            1,
            2,
            3,
            11,
            100
        ],
        fc: 5
    },
    {
        lngs: [
            "cs",
            "sk"
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 6
    },
    {
        lngs: [
            "csb",
            "pl"
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 7
    },
    {
        lngs: [
            "cy"
        ],
        nr: [
            1,
            2,
            3,
            8
        ],
        fc: 8
    },
    {
        lngs: [
            "fr"
        ],
        nr: [
            1,
            2
        ],
        fc: 9
    },
    {
        lngs: [
            "ga"
        ],
        nr: [
            1,
            2,
            3,
            7,
            11
        ],
        fc: 10
    },
    {
        lngs: [
            "gd"
        ],
        nr: [
            1,
            2,
            3,
            20
        ],
        fc: 11
    },
    {
        lngs: [
            "is"
        ],
        nr: [
            1,
            2
        ],
        fc: 12
    },
    {
        lngs: [
            "jv"
        ],
        nr: [
            0,
            1
        ],
        fc: 13
    },
    {
        lngs: [
            "kw"
        ],
        nr: [
            1,
            2,
            3,
            4
        ],
        fc: 14
    },
    {
        lngs: [
            "lt"
        ],
        nr: [
            1,
            2,
            10
        ],
        fc: 15
    },
    {
        lngs: [
            "lv"
        ],
        nr: [
            1,
            2,
            0
        ],
        fc: 16
    },
    {
        lngs: [
            "mk"
        ],
        nr: [
            1,
            2
        ],
        fc: 17
    },
    {
        lngs: [
            "mnk"
        ],
        nr: [
            0,
            1,
            2
        ],
        fc: 18
    },
    {
        lngs: [
            "mt"
        ],
        nr: [
            1,
            2,
            11,
            20
        ],
        fc: 19
    },
    {
        lngs: [
            "or"
        ],
        nr: [
            2,
            1
        ],
        fc: 2
    },
    {
        lngs: [
            "ro"
        ],
        nr: [
            1,
            2,
            20
        ],
        fc: 20
    },
    {
        lngs: [
            "sl"
        ],
        nr: [
            5,
            1,
            2,
            3
        ],
        fc: 21
    },
    {
        lngs: [
            "he",
            "iw"
        ],
        nr: [
            1,
            2,
            20,
            21
        ],
        fc: 22
    }
];
var _rulesPluralsTypes = {
    1: function _(n) {
        return Number(n > 1);
    },
    2: function _2(n) {
        return Number(n != 1);
    },
    3: function _3(n) {
        return 0;
    },
    4: function _4(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    5: function _5(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
    },
    6: function _6(n) {
        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
    },
    7: function _7(n) {
        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    8: function _8(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
    },
    9: function _9(n) {
        return Number(n >= 2);
    },
    10: function _10(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
    },
    11: function _11(n) {
        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
    },
    12: function _12(n) {
        return Number(n % 10 != 1 || n % 100 == 11);
    },
    13: function _13(n) {
        return Number(n !== 0);
    },
    14: function _14(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
    },
    15: function _15(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    16: function _16(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
    },
    17: function _17(n) {
        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
    },
    18: function _18(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
    },
    19: function _19(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
    },
    20: function _20(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
    },
    21: function _21(n) {
        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
    },
    22: function _22(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
    }
};
var deprecatedJsonVersions = [
    "v1",
    "v2",
    "v3"
];
var suffixesOrder = {
    zero: 0,
    one: 1,
    two: 2,
    few: 3,
    many: 4,
    other: 5
};
function createRules() {
    var rules = {};
    sets.forEach(function(set) {
        set.lngs.forEach(function(l13) {
            rules[l13] = {
                numbers: set.nr,
                plurals: _rulesPluralsTypes[set.fc]
            };
        });
    });
    return rules;
}
var PluralResolver = function() {
    function PluralResolver2(languageUtils) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        _classCallCheck(this, PluralResolver2);
        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create("pluralResolver");
        if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
            this.options.compatibilityJSON = "v3";
            this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
        }
        this.rules = createRules();
    }
    _createClass(PluralResolver2, [
        {
            key: "addRule",
            value: function addRule(lng, obj) {
                this.rules[lng] = obj;
            }
        },
        {
            key: "getRule",
            value: function getRule(code) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (this.shouldUseIntlApi()) {
                    try {
                        return new Intl.PluralRules(code, {
                            type: options.ordinal ? "ordinal" : "cardinal"
                        });
                    } catch (_unused) {
                        return;
                    }
                }
                return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
            }
        },
        {
            key: "needsPlural",
            value: function needsPlural(code) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var rule = this.getRule(code, options);
                if (this.shouldUseIntlApi()) {
                    return rule && rule.resolvedOptions().pluralCategories.length > 1;
                }
                return rule && rule.numbers.length > 1;
            }
        },
        {
            key: "getPluralFormsOfKey",
            value: function getPluralFormsOfKey(code, key) {
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                return this.getSuffixes(code, options).map(function(suffix) {
                    return "".concat(key).concat(suffix);
                });
            }
        },
        {
            key: "getSuffixes",
            value: function getSuffixes(code) {
                var _this = this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var rule = this.getRule(code, options);
                if (!rule) {
                    return [];
                }
                if (this.shouldUseIntlApi()) {
                    return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
                        return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
                    }).map(function(pluralCategory) {
                        return "".concat(_this.options.prepend).concat(pluralCategory);
                    });
                }
                return rule.numbers.map(function(number3) {
                    return _this.getSuffix(code, number3, options);
                });
            }
        },
        {
            key: "getSuffix",
            value: function getSuffix(code, count) {
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                var rule = this.getRule(code, options);
                if (rule) {
                    if (this.shouldUseIntlApi()) {
                        return "".concat(this.options.prepend).concat(rule.select(count));
                    }
                    return this.getSuffixRetroCompatible(rule, count);
                }
                this.logger.warn("no plural rule found for: ".concat(code));
                return "";
            }
        },
        {
            key: "getSuffixRetroCompatible",
            value: function getSuffixRetroCompatible(rule, count) {
                var _this2 = this;
                var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                var suffix = rule.numbers[idx];
                if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    if (suffix === 2) {
                        suffix = "plural";
                    } else if (suffix === 1) {
                        suffix = "";
                    }
                }
                var returnSuffix = function returnSuffix2() {
                    return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
                };
                if (this.options.compatibilityJSON === "v1") {
                    if (suffix === 1) return "";
                    if (typeof suffix === "number") return "_plural_".concat(suffix.toString());
                    return returnSuffix();
                } else if (this.options.compatibilityJSON === "v2") {
                    return returnSuffix();
                } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    return returnSuffix();
                }
                return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
            }
        },
        {
            key: "shouldUseIntlApi",
            value: function shouldUseIntlApi() {
                return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
            }
        }
    ]);
    return PluralResolver2;
}();
function ownKeys$3(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$3(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function deepFindWithDefaults(data, defaultData, key) {
    var keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
    var ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
    var path = getPathWithDefaults(data, defaultData, key);
    if (!path && ignoreJSONStructure && typeof key === "string") {
        path = deepFind(data, key, keySeparator);
        if (path === void 0) path = deepFind(defaultData, key, keySeparator);
    }
    return path;
}
var Interpolator = function() {
    function Interpolator2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Interpolator2);
        this.logger = baseLogger.create("interpolator");
        this.options = options;
        this.format = options.interpolation && options.interpolation.format || function(value1) {
            return value1;
        };
        this.init(options);
    }
    _createClass(Interpolator2, [
        {
            key: "init",
            value: function init3() {
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                if (!options.interpolation) options.interpolation = {
                    escapeValue: true
                };
                var iOpts = options.interpolation;
                this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
                this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
                this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
                this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
                this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
                this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
                this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
                this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
                this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
                this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
                this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
                this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
                this.resetRegExp();
            }
        },
        {
            key: "reset",
            value: function reset() {
                if (this.options) this.init(this.options);
            }
        },
        {
            key: "resetRegExp",
            value: function resetRegExp() {
                var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
                this.regexp = new RegExp(regexpStr, "g");
                var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
                this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
                var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
                this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
            }
        },
        {
            key: "interpolate",
            value: function interpolate(str, data, lng, options) {
                var regexSafe = function regexSafe(val) {
                    return val.replace(/\$/g, "$$$$");
                };
                var _this = this;
                var match;
                var value1;
                var replaces;
                var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
                var handleFormat = function handleFormat2(key) {
                    if (key.indexOf(_this.formatSeparator) < 0) {
                        var path = deepFindWithDefaults(data, defaultData, key, _this.options.keySeparator, _this.options.ignoreJSONStructure);
                        return _this.alwaysFormat ? _this.format(path, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                            interpolationkey: key
                        })) : path;
                    }
                    var p = key.split(_this.formatSeparator);
                    var k = p.shift().trim();
                    var f = p.join(_this.formatSeparator).trim();
                    return _this.format(deepFindWithDefaults(data, defaultData, k, _this.options.keySeparator, _this.options.ignoreJSONStructure), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                        interpolationkey: k
                    }));
                };
                this.resetRegExp();
                var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
                var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
                var todos = [
                    {
                        regex: this.regexpUnescape,
                        safeValue: function safeValue(val) {
                            return regexSafe(val);
                        }
                    },
                    {
                        regex: this.regexp,
                        safeValue: function safeValue(val) {
                            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
                        }
                    }
                ];
                todos.forEach(function(todo) {
                    replaces = 0;
                    while(match = todo.regex.exec(str)){
                        var matchedVar = match[1].trim();
                        value1 = handleFormat(matchedVar);
                        if (value1 === void 0) {
                            if (typeof missingInterpolationHandler === "function") {
                                var temp = missingInterpolationHandler(str, match, options);
                                value1 = typeof temp === "string" ? temp : "";
                            } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
                                value1 = "";
                            } else if (skipOnVariables) {
                                value1 = match[0];
                                continue;
                            } else {
                                _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
                                value1 = "";
                            }
                        } else if (typeof value1 !== "string" && !_this.useRawValueToEscape) {
                            value1 = makeString(value1);
                        }
                        var safeValue = todo.safeValue(value1);
                        str = str.replace(match[0], safeValue);
                        if (skipOnVariables) {
                            todo.regex.lastIndex += value1.length;
                            todo.regex.lastIndex -= match[0].length;
                        } else {
                            todo.regex.lastIndex = 0;
                        }
                        replaces++;
                        if (replaces >= _this.maxReplaces) {
                            break;
                        }
                    }
                });
                return str;
            }
        },
        {
            key: "nest",
            value: function nest(str, fc) {
                var handleHasOptions = function handleHasOptions(key, inheritedOptions) {
                    var sep = this.nestingOptionsSeparator;
                    if (key.indexOf(sep) < 0) return key;
                    var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
                    var optionsString = "{".concat(c[1]);
                    key = c[0];
                    optionsString = this.interpolate(optionsString, clonedOptions);
                    var matchedSingleQuotes = optionsString.match(/'/g);
                    var matchedDoubleQuotes = optionsString.match(/"/g);
                    if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
                        optionsString = optionsString.replace(/'/g, '"');
                    }
                    try {
                        clonedOptions = JSON.parse(optionsString);
                        if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
                    } catch (e) {
                        this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
                        return "".concat(key).concat(sep).concat(optionsString);
                    }
                    delete clonedOptions.defaultValue;
                    return key;
                };
                var _this2 = this;
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                var match;
                var value1;
                var clonedOptions;
                while(match = this.nestingRegexp.exec(str)){
                    var formatters = [];
                    clonedOptions = _objectSpread$3({}, options);
                    clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
                    clonedOptions.applyPostProcessor = false;
                    delete clonedOptions.defaultValue;
                    var doReduce = false;
                    if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
                        var r = match[1].split(this.formatSeparator).map(function(elem) {
                            return elem.trim();
                        });
                        match[1] = r.shift();
                        formatters = r;
                        doReduce = true;
                    }
                    value1 = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                    if (value1 && match[0] === str && typeof value1 !== "string") return value1;
                    if (typeof value1 !== "string") value1 = makeString(value1);
                    if (!value1) {
                        this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                        value1 = "";
                    }
                    if (doReduce) {
                        value1 = formatters.reduce(function(v, f) {
                            return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                                interpolationkey: match[1].trim()
                            }));
                        }, value1.trim());
                    }
                    str = str.replace(match[0], value1);
                    this.regexp.lastIndex = 0;
                }
                return str;
            }
        }
    ]);
    return Interpolator2;
}();
function ownKeys$2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function parseFormatStr(formatStr) {
    var formatName = formatStr.toLowerCase().trim();
    var formatOptions = {};
    if (formatStr.indexOf("(") > -1) {
        var p = formatStr.split("(");
        formatName = p[0].toLowerCase().trim();
        var optStr = p[1].substring(0, p[1].length - 1);
        if (formatName === "currency" && optStr.indexOf(":") < 0) {
            if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
            if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
            var opts = optStr.split(";");
            opts.forEach(function(opt) {
                if (!opt) return;
                var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
                var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
                if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
                if (val === "false") formatOptions[key.trim()] = false;
                if (val === "true") formatOptions[key.trim()] = true;
                if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
            });
        }
    }
    return {
        formatName: formatName,
        formatOptions: formatOptions
    };
}
function createCachedFormatter(fn) {
    var cache = {};
    return function invokeFormatter(val, lng, options) {
        var key = lng + JSON.stringify(options);
        var formatter = cache[key];
        if (!formatter) {
            formatter = fn(lng, options);
            cache[key] = formatter;
        }
        return formatter(val);
    };
}
var Formatter = function() {
    function Formatter2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, Formatter2);
        this.logger = baseLogger.create("formatter");
        this.options = options;
        this.formats = {
            number: createCachedFormatter(function(lng, opt) {
                var formatter = new Intl.NumberFormat(lng, _objectSpread$2({}, opt));
                return function(val) {
                    return formatter.format(val);
                };
            }),
            currency: createCachedFormatter(function(lng, opt) {
                var formatter = new Intl.NumberFormat(lng, _objectSpread$2(_objectSpread$2({}, opt), {}, {
                    style: "currency"
                }));
                return function(val) {
                    return formatter.format(val);
                };
            }),
            datetime: createCachedFormatter(function(lng, opt) {
                var formatter = new Intl.DateTimeFormat(lng, _objectSpread$2({}, opt));
                return function(val) {
                    return formatter.format(val);
                };
            }),
            relativetime: createCachedFormatter(function(lng, opt) {
                var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$2({}, opt));
                return function(val) {
                    return formatter.format(val, opt.range || "day");
                };
            }),
            list: createCachedFormatter(function(lng, opt) {
                var formatter = new Intl.ListFormat(lng, _objectSpread$2({}, opt));
                return function(val) {
                    return formatter.format(val);
                };
            })
        };
        this.init(options);
    }
    _createClass(Formatter2, [
        {
            key: "init",
            value: function init3(services) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                    interpolation: {}
                };
                var iOpts = options.interpolation;
                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
            }
        },
        {
            key: "add",
            value: function add3(name, fc) {
                this.formats[name.toLowerCase().trim()] = fc;
            }
        },
        {
            key: "addCached",
            value: function addCached(name, fc) {
                this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
            }
        },
        {
            key: "format",
            value: function format(value1, _format, lng) {
                var _this = this;
                var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                var formats = _format.split(this.formatSeparator);
                var result = formats.reduce(function(mem, f) {
                    var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
                    if (_this.formats[formatName]) {
                        var formatted = mem;
                        try {
                            var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                            var l13 = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                            formatted = _this.formats[formatName](mem, l13, _objectSpread$2(_objectSpread$2(_objectSpread$2({}, formatOptions), options), valOptions));
                        } catch (error2) {
                            _this.logger.warn(error2);
                        }
                        return formatted;
                    } else {
                        _this.logger.warn("there was no format function for ".concat(formatName));
                    }
                    return mem;
                }, value1);
                return result;
            }
        }
    ]);
    return Formatter2;
}();
function ownKeys$1(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread$1(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createSuper$1(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function removePending(q, name) {
    if (q.pending[name] !== void 0) {
        delete q.pending[name];
        q.pendingCount--;
    }
}
var Connector = function(_EventEmitter) {
    _inherits1(Connector2, _EventEmitter);
    var _super = _createSuper$1(Connector2);
    function Connector2(backend, store, services) {
        var _this;
        var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        _classCallCheck(this, Connector2);
        _this = _super.call(this);
        if (isIE10) {
            EventEmitter2.call(_assertThisInitialized(_this));
        }
        _this.backend = backend;
        _this.store = store;
        _this.services = services;
        _this.languageUtils = services.languageUtils;
        _this.options = options;
        _this.logger = baseLogger.create("backendConnector");
        _this.waitingReads = [];
        _this.maxParallelReads = options.maxParallelReads || 10;
        _this.readingCalls = 0;
        _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
        _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
        _this.state = {};
        _this.queue = [];
        if (_this.backend && _this.backend.init) {
            _this.backend.init(services, options.backend, options);
        }
        return _this;
    }
    _createClass(Connector2, [
        {
            key: "queueLoad",
            value: function queueLoad(languages, namespaces, options, callback) {
                var _this2 = this;
                var toLoad = {};
                var pending = {};
                var toLoadLanguages = {};
                var toLoadNamespaces = {};
                languages.forEach(function(lng) {
                    var hasAllNamespaces = true;
                    namespaces.forEach(function(ns) {
                        var name = "".concat(lng, "|").concat(ns);
                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                            _this2.state[name] = 2;
                        } else if (_this2.state[name] < 0) ;
                        else if (_this2.state[name] === 1) {
                            if (pending[name] === void 0) pending[name] = true;
                        } else {
                            _this2.state[name] = 1;
                            hasAllNamespaces = false;
                            if (pending[name] === void 0) pending[name] = true;
                            if (toLoad[name] === void 0) toLoad[name] = true;
                            if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
                        }
                    });
                    if (!hasAllNamespaces) toLoadLanguages[lng] = true;
                });
                if (Object.keys(toLoad).length || Object.keys(pending).length) {
                    this.queue.push({
                        pending: pending,
                        pendingCount: Object.keys(pending).length,
                        loaded: {},
                        errors: [],
                        callback: callback
                    });
                }
                return {
                    toLoad: Object.keys(toLoad),
                    pending: Object.keys(pending),
                    toLoadLanguages: Object.keys(toLoadLanguages),
                    toLoadNamespaces: Object.keys(toLoadNamespaces)
                };
            }
        },
        {
            key: "loaded",
            value: function loaded(name, err, data) {
                var s = name.split("|");
                var lng = s[0];
                var ns = s[1];
                if (err) this.emit("failedLoading", lng, ns, err);
                if (data) {
                    this.store.addResourceBundle(lng, ns, data);
                }
                this.state[name] = err ? -1 : 2;
                var loaded2 = {};
                this.queue.forEach(function(q) {
                    pushPath(q.loaded, [
                        lng
                    ], ns);
                    removePending(q, name);
                    if (err) q.errors.push(err);
                    if (q.pendingCount === 0 && !q.done) {
                        Object.keys(q.loaded).forEach(function(l13) {
                            if (!loaded2[l13]) loaded2[l13] = {};
                            var loadedKeys = q.loaded[l13];
                            if (loadedKeys.length) {
                                loadedKeys.forEach(function(n) {
                                    if (loaded2[l13][n] === void 0) loaded2[l13][n] = true;
                                });
                            }
                        });
                        q.done = true;
                        if (q.errors.length) {
                            q.callback(q.errors);
                        } else {
                            q.callback();
                        }
                    }
                });
                this.emit("loaded", loaded2);
                this.queue = this.queue.filter(function(q) {
                    return !q.done;
                });
            }
        },
        {
            key: "read",
            value: function read(lng, ns, fcName) {
                var _this3 = this;
                var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
                var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
                var callback = arguments.length > 5 ? arguments[5] : void 0;
                if (!lng.length) return callback(null, {});
                if (this.readingCalls >= this.maxParallelReads) {
                    this.waitingReads.push({
                        lng: lng,
                        ns: ns,
                        fcName: fcName,
                        tried: tried,
                        wait: wait,
                        callback: callback
                    });
                    return;
                }
                this.readingCalls++;
                var resolver = function resolver2(err, data) {
                    _this3.readingCalls--;
                    if (_this3.waitingReads.length > 0) {
                        var next = _this3.waitingReads.shift();
                        _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
                    }
                    if (err && data && tried < _this3.maxRetries) {
                        setTimeout(function() {
                            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                        }, wait);
                        return;
                    }
                    callback(err, data);
                };
                var fc = this.backend[fcName].bind(this.backend);
                if (fc.length === 2) {
                    try {
                        var r = fc(lng, ns);
                        if (r && typeof r.then === "function") {
                            r.then(function(data) {
                                return resolver(null, data);
                            })["catch"](resolver);
                        } else {
                            resolver(null, r);
                        }
                    } catch (err) {
                        resolver(err);
                    }
                    return;
                }
                return fc(lng, ns, resolver);
            }
        },
        {
            key: "prepareLoading",
            value: function prepareLoading(languages, namespaces) {
                var _this4 = this;
                var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                var callback = arguments.length > 3 ? arguments[3] : void 0;
                if (!this.backend) {
                    this.logger.warn("No backend was added via i18next.use. Will not load resources.");
                    return callback && callback();
                }
                if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
                if (typeof namespaces === "string") namespaces = [
                    namespaces
                ];
                var toLoad = this.queueLoad(languages, namespaces, options, callback);
                if (!toLoad.toLoad.length) {
                    if (!toLoad.pending.length) callback();
                    return null;
                }
                toLoad.toLoad.forEach(function(name) {
                    _this4.loadOne(name);
                });
            }
        },
        {
            key: "load",
            value: function load(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {}, callback);
            }
        },
        {
            key: "reload",
            value: function reload(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {
                    reload: true
                }, callback);
            }
        },
        {
            key: "loadOne",
            value: function loadOne(name) {
                var _this5 = this;
                var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
                var s = name.split("|");
                var lng = s[0];
                var ns = s[1];
                this.read(lng, ns, "read", void 0, void 0, function(err, data) {
                    if (err) _this5.logger.warn("".concat(prefix2, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
                    if (!err && data) _this5.logger.log("".concat(prefix2, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
                    _this5.loaded(name, err, data);
                });
            }
        },
        {
            key: "saveMissing",
            value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
                var options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
                var clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : function clb() {};
                if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                    this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                    return;
                }
                if (key === void 0 || key === null || key === "") return;
                if (this.backend && this.backend.create) {
                    var opts = _objectSpread$1(_objectSpread$1({}, options), {}, {
                        isUpdate: isUpdate
                    });
                    var fc = this.backend.create.bind(this.backend);
                    if (fc.length < 6) {
                        try {
                            var r;
                            if (fc.length === 5) {
                                r = fc(languages, namespace, key, fallbackValue, opts);
                            } else {
                                r = fc(languages, namespace, key, fallbackValue);
                            }
                            if (r && typeof r.then === "function") {
                                r.then(function(data) {
                                    return clb(null, data);
                                })["catch"](clb);
                            } else {
                                clb(null, r);
                            }
                        } catch (err) {
                            clb(err);
                        }
                    } else {
                        fc(languages, namespace, key, fallbackValue, clb, opts);
                    }
                }
                if (!languages || !languages[0]) return;
                this.store.addResource(languages[0], namespace, key, fallbackValue);
            }
        }
    ]);
    return Connector2;
}(EventEmitter2);
function get2() {
    return {
        debug: false,
        initImmediate: true,
        ns: [
            "translation"
        ],
        defaultNS: [
            "translation"
        ],
        fallbackLng: [
            "dev"
        ],
        fallbackNS: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: "all",
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: ".",
        nsSeparator: ":",
        pluralSeparator: "_",
        contextSeparator: "_",
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: "fallback",
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: true,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle2(args) {
            var ret = {};
            if (_typeof(args[1]) === "object") ret = args[1];
            if (typeof args[1] === "string") ret.defaultValue = args[1];
            if (typeof args[2] === "string") ret.tDescription = args[2];
            if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
                var options = args[3] || args[2];
                Object.keys(options).forEach(function(key) {
                    ret[key] = options[key];
                });
            }
            return ret;
        },
        interpolation: {
            escapeValue: true,
            format: function format(value1, _format, lng, options) {
                return value1;
            },
            prefix: "{{",
            suffix: "}}",
            formatSeparator: ",",
            unescapePrefix: "-",
            nestingPrefix: "$t(",
            nestingSuffix: ")",
            nestingOptionsSeparator: ",",
            maxReplaces: 1e3,
            skipOnVariables: true
        }
    };
}
function transformOptions(options) {
    if (typeof options.ns === "string") options.ns = [
        options.ns
    ];
    if (typeof options.fallbackLng === "string") options.fallbackLng = [
        options.fallbackLng
    ];
    if (typeof options.fallbackNS === "string") options.fallbackNS = [
        options.fallbackNS
    ];
    if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
        options.supportedLngs = options.supportedLngs.concat([
            "cimode"
        ]);
    }
    return options;
}
function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function noop2() {}
function bindMemberFunctions(inst) {
    var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
    mems.forEach(function(mem) {
        if (typeof inst[mem] === "function") {
            inst[mem] = inst[mem].bind(inst);
        }
    });
}
var I18n = function(_EventEmitter) {
    _inherits1(I18n2, _EventEmitter);
    var _super = _createSuper(I18n2);
    function I18n2() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : void 0;
        _classCallCheck(this, I18n2);
        _this = _super.call(this);
        if (isIE10) {
            EventEmitter2.call(_assertThisInitialized(_this));
        }
        _this.options = transformOptions(options);
        _this.services = {};
        _this.logger = baseLogger;
        _this.modules = {
            external: []
        };
        bindMemberFunctions(_assertThisInitialized(_this));
        if (callback && !_this.isInitialized && !options.isClone) {
            if (!_this.options.initImmediate) {
                _this.init(options, callback);
                return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
            }
            setTimeout(function() {
                _this.init(options, callback);
            }, 0);
        }
        return _this;
    }
    _createClass(I18n2, [
        {
            key: "init",
            value: function init3() {
                var createClassOnDemand = function createClassOnDemand(ClassOrObject) {
                    if (!ClassOrObject) return null;
                    if (typeof ClassOrObject === "function") return new ClassOrObject();
                    return ClassOrObject;
                };
                var _this2 = this;
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var callback = arguments.length > 1 ? arguments[1] : void 0;
                if (typeof options === "function") {
                    callback = options;
                    options = {};
                }
                if (!options.defaultNS && options.defaultNS !== false && options.ns) {
                    if (typeof options.ns === "string") {
                        options.defaultNS = options.ns;
                    } else if (options.ns.indexOf("translation") < 0) {
                        options.defaultNS = options.ns[0];
                    }
                }
                var defOpts = get2();
                this.options = _objectSpread(_objectSpread(_objectSpread({}, defOpts), this.options), transformOptions(options));
                if (this.options.compatibilityAPI !== "v1") {
                    this.options.interpolation = _objectSpread(_objectSpread({}, defOpts.interpolation), this.options.interpolation);
                }
                if (options.keySeparator !== void 0) {
                    this.options.userDefinedKeySeparator = options.keySeparator;
                }
                if (options.nsSeparator !== void 0) {
                    this.options.userDefinedNsSeparator = options.nsSeparator;
                }
                if (!this.options.isClone) {
                    if (this.modules.logger) {
                        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                    } else {
                        baseLogger.init(null, this.options);
                    }
                    var formatter;
                    if (this.modules.formatter) {
                        formatter = this.modules.formatter;
                    } else if (typeof Intl !== "undefined") {
                        formatter = Formatter;
                    }
                    var lu = new LanguageUtil(this.options);
                    this.store = new ResourceStore(this.options.resources, this.options);
                    var s = this.services;
                    s.logger = baseLogger;
                    s.resourceStore = this.store;
                    s.languageUtils = lu;
                    s.pluralResolver = new PluralResolver(lu, {
                        prepend: this.options.pluralSeparator,
                        compatibilityJSON: this.options.compatibilityJSON,
                        simplifyPluralSuffix: this.options.simplifyPluralSuffix
                    });
                    if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
                        s.formatter = createClassOnDemand(formatter);
                        s.formatter.init(s, this.options);
                        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
                    }
                    s.interpolator = new Interpolator(this.options);
                    s.utils = {
                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                    };
                    s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                    s.backendConnector.on("*", function(event) {
                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            args[_key - 1] = arguments[_key];
                        }
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    if (this.modules.languageDetector) {
                        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
                    }
                    if (this.modules.i18nFormat) {
                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                        if (s.i18nFormat.init) s.i18nFormat.init(this);
                    }
                    this.translator = new Translator(this.services, this.options);
                    this.translator.on("*", function(event) {
                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                            args[_key2 - 1] = arguments[_key2];
                        }
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    this.modules.external.forEach(function(m) {
                        if (m.init) m.init(_this2);
                    });
                }
                this.format = this.options.interpolation.format;
                if (!callback) callback = noop2;
                if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
                    var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                    if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
                }
                if (!this.services.languageDetector && !this.options.lng) {
                    this.logger.warn("init: no languageDetector is used and no lng is defined");
                }
                var storeApi = [
                    "getResource",
                    "hasResourceBundle",
                    "getResourceBundle",
                    "getDataByLanguage"
                ];
                storeApi.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store;
                        return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
                    };
                });
                var storeApiChained = [
                    "addResource",
                    "addResources",
                    "addResourceBundle",
                    "removeResourceBundle"
                ];
                storeApiChained.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store2;
                        (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
                        return _this2;
                    };
                });
                var deferred = defer();
                var load = function load2() {
                    var finish = function finish2(err, t2) {
                        if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
                        _this2.isInitialized = true;
                        if (!_this2.options.isClone) _this2.logger.log("initialized", _this2.options);
                        _this2.emit("initialized", _this2.options);
                        deferred.resolve(t2);
                        callback(err, t2);
                    };
                    if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
                    _this2.changeLanguage(_this2.options.lng, finish);
                };
                if (this.options.resources || !this.options.initImmediate) {
                    load();
                } else {
                    setTimeout(load, 0);
                }
                return deferred;
            }
        },
        {
            key: "loadResources",
            value: function loadResources2(language) {
                var _this3 = this;
                var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop2;
                var usedCallback = callback;
                var usedLng = typeof language === "string" ? language : this.language;
                if (typeof language === "function") usedCallback = language;
                if (!this.options.resources || this.options.partialBundledLanguages) {
                    if (usedLng && usedLng.toLowerCase() === "cimode") return usedCallback();
                    var toLoad = [];
                    var append = function append2(lng) {
                        if (!lng) return;
                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                        lngs.forEach(function(l13) {
                            if (toLoad.indexOf(l13) < 0) toLoad.push(l13);
                        });
                    };
                    if (!usedLng) {
                        var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                        fallbacks.forEach(function(l13) {
                            return append(l13);
                        });
                    } else {
                        append(usedLng);
                    }
                    if (this.options.preload) {
                        this.options.preload.forEach(function(l13) {
                            return append(l13);
                        });
                    }
                    this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
                        if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
                        usedCallback(e);
                    });
                } else {
                    usedCallback(null);
                }
            }
        },
        {
            key: "reloadResources",
            value: function reloadResources2(lngs, ns, callback) {
                var deferred = defer();
                if (!lngs) lngs = this.languages;
                if (!ns) ns = this.options.ns;
                if (!callback) callback = noop2;
                this.services.backendConnector.reload(lngs, ns, function(err) {
                    deferred.resolve();
                    callback(err);
                });
                return deferred;
            }
        },
        {
            key: "use",
            value: function use2(module2) {
                if (!module2) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
                if (!module2.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
                if (module2.type === "backend") {
                    this.modules.backend = module2;
                }
                if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
                    this.modules.logger = module2;
                }
                if (module2.type === "languageDetector") {
                    this.modules.languageDetector = module2;
                }
                if (module2.type === "i18nFormat") {
                    this.modules.i18nFormat = module2;
                }
                if (module2.type === "postProcessor") {
                    postProcessor.addPostProcessor(module2);
                }
                if (module2.type === "formatter") {
                    this.modules.formatter = module2;
                }
                if (module2.type === "3rdParty") {
                    this.modules.external.push(module2);
                }
                return this;
            }
        },
        {
            key: "setResolvedLanguage",
            value: function setResolvedLanguage(l13) {
                if (!l13 || !this.languages) return;
                if ([
                    "cimode",
                    "dev"
                ].indexOf(l13) > -1) return;
                for(var li = 0; li < this.languages.length; li++){
                    var lngInLngs = this.languages[li];
                    if ([
                        "cimode",
                        "dev"
                    ].indexOf(lngInLngs) > -1) continue;
                    if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
                        this.resolvedLanguage = lngInLngs;
                        break;
                    }
                }
            }
        },
        {
            key: "changeLanguage",
            value: function changeLanguage2(lng, callback) {
                var _this4 = this;
                this.isLanguageChangingTo = lng;
                var deferred = defer();
                this.emit("languageChanging", lng);
                var setLngProps = function setLngProps2(l13) {
                    _this4.language = l13;
                    _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l13);
                    _this4.resolvedLanguage = void 0;
                    _this4.setResolvedLanguage(l13);
                };
                var done = function done2(err, l13) {
                    if (l13) {
                        setLngProps(l13);
                        _this4.translator.changeLanguage(l13);
                        _this4.isLanguageChangingTo = void 0;
                        _this4.emit("languageChanged", l13);
                        _this4.logger.log("languageChanged", l13);
                    } else {
                        _this4.isLanguageChangingTo = void 0;
                    }
                    deferred.resolve(function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                    if (callback) callback(err, function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                };
                var setLng = function setLng2(lngs) {
                    if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
                    var l13 = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
                    if (l13) {
                        if (!_this4.language) {
                            setLngProps(l13);
                        }
                        if (!_this4.translator.language) _this4.translator.changeLanguage(l13);
                        if (_this4.services.languageDetector && _this4.services.languageDetector.cacheUserLanguage) _this4.services.languageDetector.cacheUserLanguage(l13);
                    }
                    _this4.loadResources(l13, function(err) {
                        done(err, l13);
                    });
                };
                if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                    setLng(this.services.languageDetector.detect());
                } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                    if (this.services.languageDetector.detect.length === 0) {
                        this.services.languageDetector.detect().then(setLng);
                    } else {
                        this.services.languageDetector.detect(setLng);
                    }
                } else {
                    setLng(lng);
                }
                return deferred;
            }
        },
        {
            key: "getFixedT",
            value: function getFixedT2(lng, ns, keyPrefix) {
                var _this5 = this;
                var fixedT = function fixedT2(key, opts) {
                    var options;
                    if (_typeof(opts) !== "object") {
                        for(var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){
                            rest[_key3 - 2] = arguments[_key3];
                        }
                        options = _this5.options.overloadTranslationOptionHandler([
                            key,
                            opts
                        ].concat(rest));
                    } else {
                        options = _objectSpread({}, opts);
                    }
                    options.lng = options.lng || fixedT2.lng;
                    options.lngs = options.lngs || fixedT2.lngs;
                    options.ns = options.ns || fixedT2.ns;
                    options.keyPrefix = options.keyPrefix || keyPrefix || fixedT2.keyPrefix;
                    var keySeparator = _this5.options.keySeparator || ".";
                    var resultKey;
                    if (options.keyPrefix && Array.isArray(key)) {
                        resultKey = key.map(function(k) {
                            return "".concat(options.keyPrefix).concat(keySeparator).concat(k);
                        });
                    } else {
                        resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
                    }
                    return _this5.t(resultKey, options);
                };
                if (typeof lng === "string") {
                    fixedT.lng = lng;
                } else {
                    fixedT.lngs = lng;
                }
                fixedT.ns = ns;
                fixedT.keyPrefix = keyPrefix;
                return fixedT;
            }
        },
        {
            key: "t",
            value: function t2() {
                var _this$translator;
                return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
            }
        },
        {
            key: "exists",
            value: function exists4() {
                var _this$translator2;
                return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
            }
        },
        {
            key: "setDefaultNamespace",
            value: function setDefaultNamespace2(ns) {
                this.options.defaultNS = ns;
            }
        },
        {
            key: "hasLoadedNamespace",
            value: function hasLoadedNamespace2(ns) {
                var _this6 = this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (!this.isInitialized) {
                    this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
                    return false;
                }
                if (!this.languages || !this.languages.length) {
                    this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
                    return false;
                }
                var lng = this.resolvedLanguage || this.languages[0];
                var fallbackLng = this.options ? this.options.fallbackLng : false;
                var lastLng = this.languages[this.languages.length - 1];
                if (lng.toLowerCase() === "cimode") return true;
                var loadNotPending = function loadNotPending2(l13, n) {
                    var loadState = _this6.services.backendConnector.state["".concat(l13, "|").concat(n)];
                    return loadState === -1 || loadState === 2;
                };
                if (options.precheck) {
                    var preResult = options.precheck(this, loadNotPending);
                    if (preResult !== void 0) return preResult;
                }
                if (this.hasResourceBundle(lng, ns)) return true;
                if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
                if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
                return false;
            }
        },
        {
            key: "loadNamespaces",
            value: function loadNamespaces2(ns, callback) {
                var _this7 = this;
                var deferred = defer();
                if (!this.options.ns) {
                    if (callback) callback();
                    return Promise.resolve();
                }
                if (typeof ns === "string") ns = [
                    ns
                ];
                ns.forEach(function(n) {
                    if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
                });
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "loadLanguages",
            value: function loadLanguages2(lngs, callback) {
                var deferred = defer();
                if (typeof lngs === "string") lngs = [
                    lngs
                ];
                var preloaded = this.options.preload || [];
                var newLngs = lngs.filter(function(lng) {
                    return preloaded.indexOf(lng) < 0;
                });
                if (!newLngs.length) {
                    if (callback) callback();
                    return Promise.resolve();
                }
                this.options.preload = preloaded.concat(newLngs);
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "dir",
            value: function dir2(lng) {
                if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
                if (!lng) return "rtl";
                var rtlLngs = [
                    "ar",
                    "shu",
                    "sqr",
                    "ssh",
                    "xaa",
                    "yhd",
                    "yud",
                    "aao",
                    "abh",
                    "abv",
                    "acm",
                    "acq",
                    "acw",
                    "acx",
                    "acy",
                    "adf",
                    "ads",
                    "aeb",
                    "aec",
                    "afb",
                    "ajp",
                    "apc",
                    "apd",
                    "arb",
                    "arq",
                    "ars",
                    "ary",
                    "arz",
                    "auz",
                    "avl",
                    "ayh",
                    "ayl",
                    "ayn",
                    "ayp",
                    "bbz",
                    "pga",
                    "he",
                    "iw",
                    "ps",
                    "pbt",
                    "pbu",
                    "pst",
                    "prp",
                    "prd",
                    "ug",
                    "ur",
                    "ydd",
                    "yds",
                    "yih",
                    "ji",
                    "yi",
                    "hbo",
                    "men",
                    "xmn",
                    "fa",
                    "jpr",
                    "peo",
                    "pes",
                    "prs",
                    "dv",
                    "sam",
                    "ckb"
                ];
                var languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get2());
                return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
            }
        },
        {
            key: "cloneInstance",
            value: function cloneInstance() {
                var _this8 = this;
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop2;
                var mergedOptions = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {
                    isClone: true
                });
                var clone = new I18n2(mergedOptions);
                if (options.debug !== void 0 || options.prefix !== void 0) {
                    clone.logger = clone.logger.clone(options);
                }
                var membersToCopy = [
                    "store",
                    "services",
                    "language"
                ];
                membersToCopy.forEach(function(m) {
                    clone[m] = _this8[m];
                });
                clone.services = _objectSpread({}, this.services);
                clone.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                clone.translator = new Translator(clone.services, clone.options);
                clone.translator.on("*", function(event) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
                        args[_key4 - 1] = arguments[_key4];
                    }
                    clone.emit.apply(clone, [
                        event
                    ].concat(args));
                });
                clone.init(mergedOptions, callback);
                clone.translator.options = clone.options;
                clone.translator.backendConnector.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                return clone;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    options: this.options,
                    store: this.store,
                    language: this.language,
                    languages: this.languages,
                    resolvedLanguage: this.resolvedLanguage
                };
            }
        }
    ]);
    return I18n2;
}(EventEmitter2);
_defineProperty(I18n, "createInstance", function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    return new I18n(options, callback);
});
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init2 = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists3 = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;
// src/app/i18n.ts
var import_react_i18next4 = require("react-i18next");
var import_i18next_browser_languagedetector = __toESM(require("i18next-browser-languagedetector"));
instance.use(import_i18next_browser_languagedetector.default).use(import_react_i18next4.initReactI18next).init({
    debug: true,
    fallbackLng: "en",
    interpolation: {
        escapeValue: false
    },
    resources: {
        en: {
            translation: {
                create: "Create",
                dashboard: "Dashboard",
                back: "Back",
                next: "Next",
                save: "Save",
                logo: "Logo",
                defaultErrorMessage: "Whoopsie! Looks like our dApp had one too many cups of coffee this morning. We're working on calming it down. Please try again later.",
                getExtensionsFailed: "Get Extensions Failed",
                payments: "Payments",
                checkoutLabel: "Checkout",
                copied: "Copied",
                copy: "Copy",
                orShareItOn: "or share it on",
                loading: "Loading...",
                sessionExpired: "Session is expired. Please login again!",
                checkouts: "Checkouts",
                developers: "Developers",
                webhooks: "Webhooks",
                apiKeys: "API Keys",
                cancel: "Cancel",
                description: "Description",
                helpCenter: "Help Center",
                whatNew: "What’s New",
                disable: "Disable",
                enable: "Enable",
                edit: "Edit",
                delete: "Delete",
                update: "Update",
                reveal: "Reveal",
                hide: "Hide",
                close: "Close",
                auth: {
                    needCreatePolkadotAccount: "You need a Polkadot account to sign up and start using Libra. Please open the extension and create one."
                },
                message: {
                    leavingPageWarningTitle: "Leave page with unsaved changes?",
                    leavingPageWarningContent: "Leaving this page will delete all unsaved changes.",
                    confirmLeavingPage: "Leave Page",
                    stay: "Stay"
                },
                paging: {
                    previous: "Previous",
                    next: "Next"
                },
                webhook: {
                    create: "Create Webhook",
                    update: "Update Webhook",
                    listen: "Listen to Libra events",
                    endpointUrl: "Endpoint URL",
                    selectEventsTitle: "Select Events to listen to",
                    selectEvents: "Select events",
                    selectEventToSend: "Select events to send",
                    selectAllEvents: "Select all events",
                    chargeCreated: "Charge created",
                    chargeSucceeded: "Charge succeeded",
                    chargeFailed: "Charge failed",
                    form: {
                        descriptionPlaceholder: "An optional description of what this webhook is used for",
                        eventsAreRequired: "Please select events to listen to",
                        invalidUrl: "Invalid URL: An explicit scheme (such as https) must be provided"
                    },
                    webhookCreatedSuccessfully: "Webhook Created Successfully",
                    webhookUpdatedSuccessfully: "Webhook Updated Successfully",
                    webhookDeletedSuccessfully: "Webhook Deleted Successfully",
                    webhookDisabledSuccessfully: "Webhook Disabled Successfully",
                    webhookEnabledSuccessfully: "Webhook Enabled Successfully",
                    deleteWebhookWarning: "Are you sure to delete this webhook?",
                    disableWebhookWarning: "Are you sure to disable this webhook?",
                    enableWebhookWarning: "Are you sure to enable this webhook?"
                },
                asset: {
                    wnd: "WND",
                    dot: "DOT"
                },
                signIn: {
                    continueToLibra: "Continue to Libra",
                    continueWithWallet: " Continue with wallet",
                    newToLibra: "New to Libra?",
                    tryNow: "Try now",
                    login: "Login",
                    logout: "Log Out",
                    selectAnAccount: "Select an account"
                },
                onboarding: {
                    connectWallet: "Connect wallet",
                    creatingCheckoutPage: "Creating your checkout page...",
                    congratulation: "Congratulation! Your checkout page is ready now!",
                    useUrl: "Please use the url bellow to start selling your product."
                },
                payment: {
                    hasCheckoutSubtitle: "To accept payments from your customers, you need to share your checkout link with your customers first.",
                    hasNoCheckoutSubtitle: "To accept payments from your customers, you need to create a checkout first.",
                    getCheckoutLinks: "Get checkout links",
                    paymentWillShowHere: "Your received payments will show here",
                    succeeded: "Succeeded",
                    pending: "Pending",
                    failed: "Failed",
                    allStatus: "All",
                    noPaymentHasCheckoutTitle: "It's happening…",
                    noPaymentHasCheckoutSubTitle1: "Promote your checkout and start earning your first [Dot].",
                    noPaymentHasCheckoutSubTitle2: "Please make sure to replace [Dot] with checkout's asset."
                },
                checkout: {
                    createCheckout: "Create checkout",
                    updateCheckout: "Update Checkout",
                    newCheckout: "Create a new checkout",
                    product: "Product",
                    branding: "Branding",
                    afterPayment: "After Payment",
                    preview: "Preview",
                    redirectUrlLabel: "Redirect customers to your website.",
                    redirectUrlPlaceholder: "Your website URL",
                    invalidUrl: "Invalid URL",
                    brandNameIsRequired: "Brand name is required!",
                    brandNamePlaceholderOnboarding: "Eg. John Brand, Libra, ...",
                    brandNamePlaceholder: "Name of your brand",
                    brandNameLabelOnboarding: "What is your brand name",
                    brandNameLabel: "Name",
                    pricePlaceholderOnboarding: "Eg. 1 DOT, 10 USDT, ...",
                    pricePlaceholder: "Price of your product or service",
                    brandLogo: "Brand logo",
                    productPriceIsRequired: "Product price is required!",
                    productPriceMustBeNumber: "Product price must be a number!",
                    productNameLabelOnboarding: "What product do you want to sell?",
                    productNameLabel: "Name",
                    productNamePlaceholderOnboarding: "Eg. Meditation course, a book, ...",
                    productNamePlaceholder: "Name of your product or service",
                    productNameIsRequired: "Product name is required!",
                    whatIsPrice: "What is price of your product?",
                    productImage: "Product image",
                    description: "Description",
                    descriptionPlaceholder: "Description about your product or service",
                    asset: "Asset",
                    greatJob: "Great job! You're almost done.",
                    toCreateCheckoutLink: "To create your checkout link, please connect your wallet as sign up your Libra account. This will allow you to\n            access all the features and benefits of our platform.",
                    contactInformation: "Contact information",
                    paymentMethod: "Payment method",
                    pay: "Pay",
                    checkoutCreatedSuccessfully: "Checkout Created Successfully",
                    checkoutUpdatedSuccessfully: "Checkout Updated Successfully",
                    checkoutDeletedSuccessfully: "Checkout Deleted Successfully",
                    deleteCheckoutWarning: "Are you sure to delete this checkout?",
                    emptyTitle: "Launching your crypto business has never been simpler",
                    emptyText: "Checkout allows you to sell your digital products within minutes and receive payments directly to your wallet.",
                    createCheckoutNow: "Create checkout now",
                    showConfirmationPage: "Show confirmation page",
                    notShowConfirmationPage: "Don't Show confirmation page",
                    replaceDefaultMess: "Replace default with custom message",
                    thankForYourPayment: "Thanks for your payment",
                    orderWillBeSent: "An order summary will be sent to your email within minutes",
                    websiteWillBeShow: "Your website will be shown after payment"
                },
                footer: {
                    poweredBy: "Powered by",
                    libraLogo: "Libra Logo",
                    privacy: "Privacy",
                    terms: "Terms"
                },
                imageUploader: {
                    fileTypeWarning: "You can only upload SVG/PNG/JPG file!",
                    fileSizeWarning: "Image must smaller than 2MB!"
                },
                funnyQuotes: {
                    0: "We’re busy finding Satoshi, back in a flash",
                    1: "Mining your patience, rewards coming soon",
                    2: "Decentralizing your wait time, one block at a time",
                    3: "Hold on tight, we’re mining some more data",
                    4: "The network is slow, but our memes are fast",
                    5: "Calm your gas fees, we’re revving up the blockchain",
                    6: "Sit tight, our nodes are synchronizing the fun!",
                    7: "Assembling your crypto crew, just a moment",
                    8: "Hashing out the details, please stand by",
                    9: "Buffering blockchain magic, almost there",
                    10: "Smart contracts in progress, stay tuned",
                    11: "Patience pays, loading your crypto experience",
                    12: "Riding the blockchain wave, be right back",
                    13: "Staking your claim, just a few more moments",
                    14: "Tokenizing your patience, web3 magic in progress",
                    15: "Just a sec, we’re optimizing your crypto journey",
                    16: "Unlocking the secrets of web3, standby",
                    17: "Fasten your seatbelts, we’re diving into the metaverse"
                }
            }
        }
    }
});
// src/components/Checkout/index.tsx
var import_react9 = require("react");
var import_jsx_runtime10 = require("react/jsx-runtime");
var Content = import_antd8.Layout.Content;
var Wrapper2 = (0, import_styled_components4.default)(import_antd8.Layout)(_templateObject7());
var ContentWrapper = (0, import_styled_components4.default)(Content)(_templateObject8());
var MainContent = (0, import_styled_components4.default)(import_antd8.Row)(_templateObject9());
var CheckoutPreview = function(param) {
    var checkoutData = param.checkoutData, _param_previewMode = param.previewMode, previewMode = _param_previewMode === void 0 ? true : _param_previewMode, _param_isShowAfterPayment = param.isShowAfterPayment, isShowAfterPayment = _param_isShowAfterPayment === void 0 ? false : _param_isShowAfterPayment, _param_loading = param.loading, loading = _param_loading === void 0 ? false : _param_loading;
    var _ref = (0, import_react_i18next5.useTranslation)(), t2 = _ref.t;
    var branding = checkoutData.branding, item = checkoutData.item, asset = checkoutData.asset, afterPayment = checkoutData.afterPayment;
    var _ref1 = _sliced_to_array((0, import_react9.useState)(false), 2), completed = _ref1[0], setCompleted = _ref1[1];
    var _import_antd8_message_useMessage = _sliced_to_array(import_antd8.message.useMessage(), 2), messageApi = _import_antd8_message_useMessage[0], contextHolder = _import_antd8_message_useMessage[1];
    var handlePaymentSuccess = function() {
        if (afterPayment && afterPayment.type === "redirect" && afterPayment.config.url) {
            window.location.href = afterPayment.config.url;
            return;
        }
        setCompleted(true);
    };
    var handlePaymentFailed = function() {
        messageApi.error(t2("defaultErrorMessage"));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(Wrapper2, {
        children: [
            contextHolder,
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Brand_default, {
                branding: branding,
                loading: loading
            }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ContentWrapper, {
                children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(MainContent, {
                    justify: "space-between",
                    children: [
                        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_antd8.Col, {
                            span: 12,
                            children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(CheckoutSummary_default, {
                                loading: loading,
                                product: item,
                                asset: asset,
                                previewMode: previewMode
                            })
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_antd8.Col, {
                            span: 12,
                            children: (completed || isShowAfterPayment) && afterPayment ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(AfterPaymentPreviewer_default, {
                                afterPayment: afterPayment
                            }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(PaymentSummary, {
                                previewMode: previewMode,
                                payment: {
                                    payee: checkoutData.payee || "",
                                    amount: checkoutData.item.price || 0,
                                    asset: checkoutData.asset,
                                    productName: checkoutData.item.name
                                },
                                onPaymentSuccess: handlePaymentSuccess,
                                onPaymentFailed: handlePaymentFailed
                            })
                        })
                    ]
                })
            })
        ]
    });
};
var Checkout_default = CheckoutPreview;
// src/contexts/index.tsx
var import_jsx_runtime11 = require("react/jsx-runtime");
var LibraProviders = function(param) {
    var children = param.children;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ExtensionsProvider, {
        children: children
    });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    Checkout: Checkout,
    LibraProviders: LibraProviders
}); /*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

@noble/secp256k1/lib/esm/index.js:
  (*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/ 
